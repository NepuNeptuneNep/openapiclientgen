//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessTokenCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grant_type")]
		public System.Nullable<AccessTokenCredentialsGrant_type> Grant_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirect_uri")]
		public string Redirect_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessTokenCredentialsGrant_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client_credentials")]
		client_credentials = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorization_code")]
		authorization_code = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refresh_token")]
		refresh_token = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityActivityType
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ActivityActivityTypeCategory> Category { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityActivityTypeCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Personal")]
		Personal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Absences")]
		Absences = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CalendarEntry")]
		CalendarEntry = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SalesEvent")]
		SalesEvent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Personal")]
		Personal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Absences")]
		Absences = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CalendarEntry")]
		CalendarEntry = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SalesEvent")]
		SalesEvent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityCustomer
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityActivityType ActivityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ActivityCustomer Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasDuration")]
		public System.Nullable<System.Boolean> HasDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasHours")]
		public System.Nullable<System.Boolean> HasHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAllDay")]
		public System.Nullable<System.Boolean> IsAllDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUnassigned")]
		public System.Nullable<System.Boolean> IsUnassigned { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Location { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownerUser")]
		public ActivityOwnerModel OwnerUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ActivityPhase Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTaskStatus")]
		public ModelWithName ProjectTaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public ActivityRecurrenceModel Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceParentActivityGuid")]
		public string RecurrenceParentActivityGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceRule")]
		public string RecurrenceRule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceType")]
		public System.Nullable<ActivityModelRecurrenceType> RecurrenceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWithFirstNameLastNameAndPhotoFileModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityOwnerModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public ActivityOwnerKeyword[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityOwnerKeyword
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityPhase
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		public string ProjectGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectNumber")]
		public System.Nullable<System.Int64> ProjectNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectOwnerGuid")]
		public string ProjectOwnerGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelWithName
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityRecurrenceModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="exceptions")]
		public string[] Exceptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public ActivityRecurrenceModelFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastOccurrenceDateTime")]
		public System.Nullable<System.DateTimeOffset> LastOccurrenceDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public RecurrencePattern Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="range")]
		public RecurrenceRange Range { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityRecurrenceModelFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Daily")]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Weekly")]
		Weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monthly")]
		Monthly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yearly")]
		Yearly = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurrencePattern
	{
		
		[System.Runtime.Serialization.DataMember(Name="daily")]
		public DailyModel Daily { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public MonthlyModel Monthly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekly")]
		public WeeklyModel Weekly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yearly")]
		public YearlyModel Yearly { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DailyModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="everyWeekday")]
		public System.Nullable<System.Boolean> EveryWeekday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonthlyModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public System.Nullable<System.Int32> DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOrdinal")]
		public System.Nullable<MonthlyModelDayOrdinal> DayOrdinal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOrdinalOption")]
		public System.Nullable<MonthlyModelDayOrdinalOption> DayOrdinalOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MonthlyModelDayOrdinal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="First")]
		First = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Second")]
		Second = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Third")]
		Third = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fourth")]
		Fourth = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Last")]
		Last = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MonthlyModelDayOrdinalOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sunday")]
		Sunday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monday")]
		Monday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tuesday")]
		Tuesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wednesday")]
		Wednesday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Thursday")]
		Thursday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Friday")]
		Friday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WeekDay")]
		WeekDay = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Saturday")]
		Saturday = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WeekendDay")]
		WeekendDay = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Day")]
		Day = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WeeklyModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="friday")]
		public System.Nullable<System.Boolean> Friday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monday")]
		public System.Nullable<System.Boolean> Monday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saturday")]
		public System.Nullable<System.Boolean> Saturday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sunday")]
		public System.Nullable<System.Boolean> Sunday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thursday")]
		public System.Nullable<System.Boolean> Thursday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tuesday")]
		public System.Nullable<System.Boolean> Tuesday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wednesday")]
		public System.Nullable<System.Boolean> Wednesday { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class YearlyModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="dayOfMonth")]
		public System.Nullable<System.Int32> DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOrdinal")]
		public MonthlyModelDayOrdinal DayOrdinal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOrdinalOption")]
		public MonthlyModelDayOrdinalOption DayOrdinalOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<YearlyModelMonth> Month { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum YearlyModelMonth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="January")]
		January = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="February")]
		February = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="March")]
		March = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="April")]
		April = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="May")]
		May = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="June")]
		June = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="July")]
		July = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="August")]
		August = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="September")]
		September = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="October")]
		October = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="November")]
		November = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="December")]
		December = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurrenceRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxOccurrences")]
		public System.Nullable<System.Int32> MaxOccurrences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recursUntilDate")]
		public System.Nullable<System.DateOnly> RecursUntilDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityModelRecurrenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Occurrence")]
		Occurrence = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Exception")]
		Exception = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Series")]
		Series = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityParticipantModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ActivityGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="participantGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ParticipantGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ActivityParticipantModelStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ActivityParticipantModelType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityParticipantModelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invited")]
		Invited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accepted")]
		Accepted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tentative")]
		Tentative = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Declined")]
		Declined = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityParticipantModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resource")]
		Resource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivityTypeModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActivityTypeModelCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPaidLeave")]
		public System.Nullable<System.Boolean> IsPaidLeave { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActivityTypeModelCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Personal")]
		Personal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Absences")]
		Absences = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CalendarEntry")]
		CalendarEntry = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SalesEvent")]
		SalesEvent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressCountry
	{
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasRegions")]
		public System.Nullable<AddressCountryHasRegions> HasRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AddressCountryHasRegions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoRegion")]
		NoRegion = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasRegions")]
		HasRegions = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressCustomer
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressline")]
		public string Addressline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public ModelWithName[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public AddressCountry Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryRegion")]
		public ModelWithName CountryRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public AddressCustomer Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillingAddress")]
		public System.Nullable<System.Boolean> IsBillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPostalAddress")]
		public System.Nullable<System.Boolean> IsPostalAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVisitAddress")]
		public System.Nullable<System.Boolean> IsVisitAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BankAccountFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Iban")]
		Iban = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bankgiro")]
		Bankgiro = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BankAccountOutputModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumberFormat")]
		public BankAccountFormat AccountNumberFormat { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bankName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string BankName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessUnit")]
		public ModelWithName BusinessUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public ModelWithName Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BillablePeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Any")]
		Any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Past")]
		Past = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Future")]
		Future = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NowAndPast")]
		NowAndPast = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NowAndFuture")]
		NowAndFuture = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BillableStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Billable")]
		Billable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotBillable")]
		NotBillable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RemovedFromInvoice")]
		RemovedFromInvoice = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingAddressModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressline")]
		public string Addressline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingCustomerModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="eInvoiceAddress")]
		public string EInvoiceAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eInvoiceOperator")]
		public string EInvoiceOperator { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BillingScheduleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Immediately")]
		Immediately = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WhenPhaseCompleted")]
		WhenPhaseCompleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnDate")]
		OnDate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUnitCostCenterModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUnitModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyBusinessUnitGuid")]
		public string CompanyBusinessUnitGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyCountryGuid")]
		public string CompanyCountryGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyCurrencyGuid")]
		public string CompanyCurrencyGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyGuid")]
		public string CompanyGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public BusinessUnitCostCenterModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Max length: 25
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvkNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string KvkNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGuid")]
		public string ParentGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatNumber")]
		public string VatNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessUnitSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyBusinessUnitGuid")]
		public string CompanyBusinessUnitGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyCountryGuid")]
		public string CompanyCountryGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyCurrencyGuid")]
		public string CompanyCurrencyGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyGuid")]
		public string CompanyGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientCredentials
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Client_secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommunicationMethodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Phone")]
		Phone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fax")]
		Fax = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MobilePhone")]
		MobilePhone = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IPPhone")]
		IPPhone = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InstantMessenger")]
		InstantMessenger = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EmailAddress")]
		EmailAddress = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommunicationTypeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CommunicationMethodType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommunicationTypeSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CommunicationMethodType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyCountry
	{
		
		[System.Runtime.Serialization.DataMember(Name="code3")]
		public string Code3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public CompanyCountry Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyGuid")]
		public string CurrencyGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyRate")]
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencySymbol")]
		public string CurrencySymbol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootBusinessUnitGuid")]
		public string RootBusinessUnitGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactCommunicationModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="communicationType")]
		public CommunicationTypeSubModel CommunicationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ModelBaseWithRequiredGuid Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isForbiddenToUse")]
		public System.Nullable<System.Boolean> IsForbiddenToUse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelBaseWithRequiredGuid
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactCustomer
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactKeywordModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ContactKeywordModelCategory> Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactKeywordModelCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Project")]
		Project = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="File")]
		File = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressGuid")]
		public string AddressGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ContactCustomer Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public System.Nullable<System.DateOnly> DateOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEmailAllowed")]
		public System.Nullable<System.Boolean> IsEmailAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTitle")]
		public string JobTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public ModelWithName Language { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumbers")]
		public string[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public ModelWithName Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salutation")]
		public System.Nullable<ContactModelSalutation> Salutation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satisfactionLevel")]
		public System.Nullable<ContactModelSatisfactionLevel> SatisfactionLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public ModelWithName TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactModelSalutation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mr.")]
		Mr_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mrs.")]
		Mrs_ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ms.")]
		Ms_ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactModelSatisfactionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unsatisfied")]
		Unsatisfied = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Neutral")]
		Neutral = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Satisfied")]
		Satisfied = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactRoleModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CostAccountModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTravelTypeDefault")]
		public System.Nullable<System.Boolean> IsTravelTypeDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CostCenterModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountryLanguage
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountryModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code2")]
		public string Code2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code3")]
		public string Code3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyRegisterUrl")]
		public string CompanyRegisterUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public CurrencyBaseModel Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultCulture")]
		public string DefaultCulture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public CountryLanguage DefaultLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasRegions")]
		public AddressCountryHasRegions HasRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInEU")]
		public System.Nullable<System.Boolean> IsInEU { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRegistrationCountry")]
		public System.Nullable<System.Boolean> IsRegistrationCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public CountryTimezone Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrencyBaseModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountryTimezone
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountryRegionModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public CountryRegionTimezoneModel Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountryRegionTimezoneModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CountryRegionsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoRegion")]
		NoRegion = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HasRegions")]
		HasRegions = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInvoiceModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingCustomerGuid")]
		public string BillingCustomerGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupProjects")]
		public System.Nullable<System.Boolean> GroupProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceStatusGuid")]
		public string InvoiceStatusGuid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public CreateInvoiceProjectModel[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInvoiceProjectModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrencyOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOrganizationCurrency")]
		public System.Nullable<System.Boolean> IsOrganizationCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CurrencyPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectPrice")]
		ProjectPrice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectCost")]
		ProjectCost = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UserCost")]
		UserCost = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExpenseCost")]
		ExpenseCost = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrencySubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrencySubModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomPriceListOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public PriceListCurrency3 Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustom")]
		public System.Nullable<System.Boolean> IsCustom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVolumePricing")]
		public System.Nullable<System.Boolean> IsVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceListCurrency3
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomPropertyModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CustomPropertyModelType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageCount")]
		public System.Nullable<System.Int32> UsageCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomPropertyModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Numeric")]
		Numeric = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Money")]
		Money = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="String")]
		String = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Date")]
		Date = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Selection")]
		Selection = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomPropertyShortModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CustomPropertyModelType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomPropertyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Numeric")]
		Numeric = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Money")]
		Money = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="String")]
		String = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Date")]
		Date = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Selection")]
		Selection = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerContactPersonSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerContactSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCountry
	{
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCountrySettingsInputModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public SimpleInputRequiredModel Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public SimpleInputRequiredModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTaxFree")]
		public System.Nullable<System.Boolean> IsTaxFree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxFreeDescription")]
		public string TaxFreeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueAddedTax")]
		public SimpleInputModel ValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zeroVatCategoryCodeEn16931")]
		public string ZeroVatCategoryCodeEn16931 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimpleInputRequiredModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimpleInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCountrySettingsOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public CustomerCountry Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelBase Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTaxFree")]
		public System.Nullable<System.Boolean> IsTaxFree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxFreeDescription")]
		public string TaxFreeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueAddedTax")]
		public ValueAddedTaxSubModel ValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zeroVatCategoryCodeEn16931")]
		public string ZeroVatCategoryCodeEn16931 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValueAddedTaxSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCurrency
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCustomPropertySelectionItemInputModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerCustomProperty")]
		public SimpleInputModel CustomerCustomProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCustomPropertySelectionItemOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerCustomProperty")]
		public CustomPropertyShortModel CustomerCustomProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCustomValueModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customProperty")]
		public CustomPropertyShortModel CustomProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerGuid")]
		public string CustomerGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerHeadquarterAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressline")]
		public string Addressline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerInvoicingVat
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerLanguage
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerMarketSegmentModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelWithName Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketSegment")]
		public MarketSegmentSubModel MarketSegment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentMarketSegment")]
		public MarketSegmentSubModel ParentMarketSegment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketSegmentSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="annualRevenue")]
		public System.Nullable<System.Int64> AnnualRevenue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public CustomerCurrency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eInvoiceAddress")]
		public string EInvoiceAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eInvoiceOperator")]
		public string EInvoiceOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headquarterAddress")]
		public CustomerHeadquarterAddress HeadquarterAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="industry")]
		public ModelWithName Industry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceTemplate")]
		public ModelWithName InvoiceTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoicingVat")]
		public CustomerInvoicingVat InvoicingVat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		/// <summary>
		/// Max length: 25
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvkNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string KvkNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public CustomerLanguage Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfEmployees")]
		public System.Nullable<System.Int32> NumberOfEmployees { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overdueInterest")]
		public System.Nullable<System.Double> OverdueInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public UserWithFirstNameLastNameAndPhotoFileModel Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentTerm")]
		public System.Nullable<System.Int32> PaymentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelist")]
		public ModelWithName Pricelist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public ModelWithName Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatNumber")]
		public string VatNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerSalesNoteInputModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public SimpleInputRequiredModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerSalesNoteOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ModelBase CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelBase Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public ModelBase LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBase User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DayOrdinal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="First")]
		First = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Second")]
		Second = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Third")]
		Third = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fourth")]
		Fourth = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Last")]
		Last = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DayOrdinalOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sunday")]
		Sunday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monday")]
		Monday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tuesday")]
		Tuesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wednesday")]
		Wednesday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Thursday")]
		Thursday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Friday")]
		Friday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WeekDay")]
		WeekDay = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Saturday")]
		Saturday = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WeekendDay")]
		WeekendDay = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Day")]
		Day = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletedPhaseMemberOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentWorkContractTitle")]
		public string CurrentWorkContractTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedDateTime")]
		public System.Nullable<System.DateTimeOffset> DeletedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBase Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithFirstNameLastNameAndPhotoFileModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletedProjectFeeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ModelBaseReadOnly CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelBaseReadOnly Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedDateTime")]
		public System.Nullable<System.DateTimeOffset> DeletedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public ModelBaseReadOnly LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBaseReadOnly Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ModelBaseReadOnly Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBaseReadOnly Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBaseReadOnly User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModelBaseReadOnly
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletedProjectTravelExpenseModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ModelBaseReadOnly CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelBaseReadOnly Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedDateTime")]
		public System.Nullable<System.DateTimeOffset> DeletedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public ModelBaseReadOnly LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBaseReadOnly Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBaseReadOnly Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelEndTime")]
		public System.Nullable<System.DateTimeOffset> TravelEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelExpense")]
		public ModelBaseReadOnly TravelExpense { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelStartTime")]
		public System.Nullable<System.DateTimeOffset> TravelStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBaseReadOnly User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletedWorkHourModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ModelBaseReadOnly CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelBaseReadOnly Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedDateTime")]
		public System.Nullable<System.DateTimeOffset> DeletedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public ModelBaseReadOnly LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBaseReadOnly Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedInvoiceQuantity")]
		public System.Nullable<System.Double> PlannedInvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBaseReadOnly Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBaseReadOnly User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public ModelBaseReadOnly WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StartTimeEndTime")]
		StartTimeEndTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Quantity")]
		Quantity = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ExceptionDetailModel[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string Stack { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ErrorModelType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExceptionDetailModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ExceptionLocationModel Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExceptionLocationModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ExceptionLocationModelType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExceptionLocationModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PathParameter")]
		PathParameter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestBody")]
		RequestBody = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestHeader")]
		RequestHeader = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UriParameter")]
		UriParameter = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ErrorModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InternalSystemError")]
		InternalSystemError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthenticationRequired")]
		AuthenticationRequired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddonMissing")]
		AddonMissing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FeatureIsNotEnabled")]
		FeatureIsNotEnabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidParameter")]
		InvalidParameter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidOperation")]
		InvalidOperation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidRequest")]
		InvalidRequest = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InsufficientApiScope")]
		InsufficientApiScope = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidApiVersion")]
		InvalidApiVersion = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConfigurationError")]
		ConfigurationError = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UserLicenseType")]
		UserLicenseType = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TermsOfServiceNotApproved")]
		TermsOfServiceNotApproved = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HttpsRequired")]
		HttpsRequired = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OrganizationNotActive")]
		OrganizationNotActive = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PermissionDenied")]
		PermissionDenied = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TrialExpired")]
		TrialExpired = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotAvailableInTrial")]
		NotAvailableInTrial = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidRecaptcha")]
		InvalidRecaptcha = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddonMissingTermsOfServiceApproval")]
		AddonMissingTermsOfServiceApproval = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExceptionLocationTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PathParameter")]
		PathParameter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestBody")]
		RequestBody = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestHeader")]
		RequestHeader = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UriParameter")]
		UriParameter = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExceptionModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public ErrorModel Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExceptionTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InternalSystemError")]
		InternalSystemError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AuthenticationRequired")]
		AuthenticationRequired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddonMissing")]
		AddonMissing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FeatureIsNotEnabled")]
		FeatureIsNotEnabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidParameter")]
		InvalidParameter = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidOperation")]
		InvalidOperation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidRequest")]
		InvalidRequest = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InsufficientApiScope")]
		InsufficientApiScope = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidApiVersion")]
		InvalidApiVersion = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConfigurationError")]
		ConfigurationError = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UserLicenseType")]
		UserLicenseType = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TermsOfServiceNotApproved")]
		TermsOfServiceNotApproved = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HttpsRequired")]
		HttpsRequired = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OrganizationNotActive")]
		OrganizationNotActive = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PermissionDenied")]
		PermissionDenied = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TrialExpired")]
		TrialExpired = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotAvailableInTrial")]
		NotAvailableInTrial = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidRecaptcha")]
		InvalidRecaptcha = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddonMissingTermsOfServiceApproval")]
		AddonMissingTermsOfServiceApproval = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExpensesClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mileage")]
		Mileage = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DailyAllowance")]
		DailyAllowance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherTravelExpense")]
		OtherTravelExpense = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FileCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Misc")]
		Misc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Application")]
		Application = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Projects")]
		Projects = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Proposal")]
		Proposal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectFees")]
		ProjectFees = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoice")]
		Invoice = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Users")]
		Users = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectTravelExpense")]
		ProjectTravelExpense = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Customer")]
		Customer = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileKeywordModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ContactKeywordModelCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public FileCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlatRateInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billAdditionalHours")]
		public System.Nullable<System.Boolean> BillAdditionalHours { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingSchedule")]
		public BillingScheduleType BillingSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includesHours")]
		public System.Nullable<System.Double> IncludesHours { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputRequiredModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedBillingDate")]
		public System.Nullable<System.DateOnly> PlannedBillingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public MoneyInputModelWithNullableAmount Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricePerAdditionalHour")]
		public MoneyInputModelWithNullableAmount PricePerAdditionalHour { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoneyInputModelWithNullableAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CurrencyCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlatRateOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billAdditionalHours")]
		public System.Nullable<System.Boolean> BillAdditionalHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingSchedule")]
		public BillingScheduleType BillingSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includesHours")]
		public System.Nullable<System.Double> IncludesHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceGuid")]
		public string InvoiceGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBaseWithRequiredGuid Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedBillingDate")]
		public System.Nullable<System.DateOnly> PlannedBillingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public MoneyOutputModel Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricePerAdditionalHour")]
		public MoneyOutputModel PricePerAdditionalHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public FlatrateProjectSubModel Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoneyOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multiCurrencyInfo")]
		public MultiCurrencyInfoModel[] MultiCurrencyInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiCurrencyInfoModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public CurrencyPurpose[] Purpose { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlatrateProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlextimeAdjustmentInputModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adjustmentDate")]
		public System.DateOnly AdjustmentDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlextimeAdjustmentOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustmentDate")]
		public System.Nullable<System.DateOnly> AdjustmentDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlextimeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="monthFlextimeBalance")]
		public System.Nullable<System.Double> MonthFlextimeBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalFlextimeBalance")]
		public System.Nullable<System.Double> TotalFlextimeBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormattingCultureModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormattingCultureSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormattingCultureSubModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeTextInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeTextModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowTags")]
		public System.Nullable<System.Boolean> AllowTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagContext")]
		public string TagContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeTextModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowTags")]
		public System.Nullable<System.Boolean> AllowTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plainText")]
		public string PlainText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagContext")]
		public string TagContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Purpose used for getting the users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GetUsersPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AbsenceOwner")]
		AbsenceOwner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccountOwner")]
		AccountOwner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityOwner")]
		ActivityOwner = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ActivityParticipant")]
		ActivityParticipant = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BillingContact")]
		BillingContact = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectManager")]
		ProjectManager = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SalesPerson")]
		SalesPerson = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SuperiorUser")]
		SuperiorUser = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TermsOfServiceApprover")]
		TermsOfServiceApprover = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GrantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client_credentials")]
		client_credentials = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authorization_code")]
		authorization_code = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="refresh_token")]
		refresh_token = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Date")]
		Date = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Category")]
		Category = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Project")]
		Project = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HolidayModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CountryGuid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateOnly Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublicHoliday")]
		public System.Nullable<System.Boolean> IsPublicHoliday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRecurringYearly")]
		public System.Nullable<System.Boolean> IsRecurringYearly { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 1900
		/// Maximum: 2075
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurringEndYear")]
		[System.ComponentModel.DataAnnotations.Range(1900, 2075)]
		public System.Nullable<System.Int32> RecurringEndYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndustryModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceCustomerSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceFileModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public FileCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileGuid")]
		public string FileGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceGuid")]
		public string InvoiceGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceLanguageSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingCustomer")]
		public InvoiceCustomerSubModel BillingCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canBeDeleted")]
		public System.Nullable<System.Boolean> CanBeDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditNoteInvoice")]
		public RelatedInvoiceSubModel CreditNoteInvoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public FormattingCultureSubModel2 Culture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public CurrencySubModel Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyRate")]
		public System.Nullable<System.Double> CurrencyRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public InvoiceCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public System.Nullable<System.DateOnly> DueDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateOnly> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flatRatesTotalExcludingTax")]
		public MoneyOutputModel FlatRatesTotalExcludingTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText1")]
		public FreeTextModel2 FreeText1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText2")]
		public FreeTextModel2 FreeText2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceNumberBusinessUnitGuid")]
		public string InvoiceNumberBusinessUnitGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceTemplate")]
		public ModelWithName InvoiceTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCreditNote")]
		public System.Nullable<System.Boolean> IsCreditNote { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public InvoiceLanguageSubModel Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderNumber")]
		public string OrderNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourReference")]
		public string OurReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overdueInterest")]
		public System.Nullable<System.Double> OverdueInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentDate")]
		public System.Nullable<System.DateOnly> PaymentDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentTerm")]
		public System.Nullable<System.Int32> PaymentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeesTotalExcludingTax")]
		public MoneyOutputModel ProjectFeesTotalExcludingTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpensesTotalExcludingTax")]
		public MoneyOutputModel ProjectTravelExpensesTotalExcludingTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public InvoiceProjectSubModel[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiverAddress")]
		public InvoiceReceiverAddressSubModel ReceiverAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiverContactEmail")]
		public string ReceiverContactEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiverContactGuid")]
		public string ReceiverContactGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiverContactName")]
		public string ReceiverContactName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiverCustomerName")]
		public string ReceiverCustomerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiverKvkNumber")]
		public string ReceiverKvkNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receiverVatNumber")]
		public string ReceiverVatNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reimburseInvoice")]
		public RelatedInvoiceSubModel ReimburseInvoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="senderAddress")]
		public InvoiceSenderAddressSubModel SenderAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="senderContactGuid")]
		public string SenderContactGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="senderContactName")]
		public string SenderContactName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="senderKvkNumber")]
		public string SenderKvkNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="senderName")]
		public string SenderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="senderVatNumber")]
		public string SenderVatNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InvoiceStatusSubModel Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalExcludingTax")]
		public MoneyOutputModel TotalExcludingTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalIncludingTax")]
		public MoneyOutputModel TotalIncludingTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalTax")]
		public MoneyOutputModel TotalTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourValueAddedTax")]
		public System.Nullable<System.Double> WorkHourValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursQuantity")]
		public System.Nullable<System.Double> WorkHoursQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursTotalExcludingTax")]
		public MoneyOutputModel WorkHoursTotalExcludingTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yourReference")]
		public string YourReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelatedInvoiceSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceReceiverAddressSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressline")]
		public string Addressline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceSenderAddressSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressline")]
		public string Addressline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceStatusSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPaid")]
		public System.Nullable<System.Boolean> IsPaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSent")]
		public System.Nullable<System.Boolean> IsSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWaitingPayment")]
		public System.Nullable<System.Boolean> IsWaitingPayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoicePdfGetOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvoiceOnly")]
		InvoiceOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AttachmentAndBreakdown")]
		AttachmentAndBreakdown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceRowAccountingSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceRowCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hours")]
		Hours = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectFees")]
		ProjectFees = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Travels")]
		Travels = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceRowOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public InvoiceRowCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string[] Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public InvoiceRowAccountingSubModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flatRateGuid")]
		public string FlatRateGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasInvoiceComment")]
		public System.Nullable<System.Boolean> HasInvoiceComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceGuid")]
		public string InvoiceGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringSalesAccount")]
		public InvoiceRowAccountingSubModel RecurringSalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowType")]
		public System.Nullable<InvoiceRowOutputModelRowType> RowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public InvoiceRowAccountingSubModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesReceivableAccount")]
		public InvoiceRowAccountingSubModel SalesReceivableAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatAccount")]
		public InvoiceRowAccountingSubModel VatAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceRowOutputModelRowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FlatRate")]
		FlatRate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hours")]
		Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectFees")]
		ProjectFees = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TravelExpenses")]
		TravelExpenses = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceRowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FlatRate")]
		FlatRate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hours")]
		Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectFees")]
		ProjectFees = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TravelExpenses")]
		TravelExpenses = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceSettingsOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="categorySortOrder")]
		public string CategorySortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		public System.Nullable<System.DateOnly> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReverseCharged")]
		public System.Nullable<System.Boolean> IsReverseCharged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentDate")]
		public System.Nullable<System.DateOnly> PaymentDate { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="projectFeeDescriptionFormat")]
		public string ProjectFeeDescriptionFormat { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeGrouping")]
		public System.Nullable<InvoiceSettingsOutputModelProjectFeeGrouping> ProjectFeeGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeePrimaryGroupBy")]
		public string ProjectFeePrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeSecondaryGroupBy")]
		public string ProjectFeeSecondaryGroupBy { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseDescriptionFormat")]
		public string ProjectTravelExpenseDescriptionFormat { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseGrouping")]
		public System.Nullable<InvoiceSettingsOutputModelProjectTravelExpenseGrouping> ProjectTravelExpenseGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpensePrimaryGroupBy")]
		public string ProjectTravelExpensePrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseSecondaryGroupBy")]
		public string ProjectTravelExpenseSecondaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseChargeDescription")]
		public string ReverseChargeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentPriceExcludingValueAddedTax")]
		public System.Nullable<System.Boolean> ShowAttachmentPriceExcludingValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentQuantity")]
		public System.Nullable<System.Boolean> ShowAttachmentQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentUnit")]
		public System.Nullable<System.Boolean> ShowAttachmentUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentUnitPrice")]
		public System.Nullable<System.Boolean> ShowAttachmentUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentValueAddedTax")]
		public System.Nullable<System.Boolean> ShowAttachmentValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showCategories")]
		public System.Nullable<System.Boolean> ShowCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showFooter")]
		public System.Nullable<System.Boolean> ShowFooter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showLogoAndTitle")]
		public System.Nullable<System.Boolean> ShowLogoAndTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showPriceExcludingValueAddedTax")]
		public System.Nullable<System.Boolean> ShowPriceExcludingValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showQuantity")]
		public System.Nullable<System.Boolean> ShowQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showReferenceNumber")]
		public System.Nullable<System.Boolean> ShowReferenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnit")]
		public System.Nullable<System.Boolean> ShowUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnitPrice")]
		public System.Nullable<System.Boolean> ShowUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showValueAddedTax")]
		public System.Nullable<System.Boolean> ShowValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public System.Nullable<InvoiceSettingsOutputModelStyle> Style { get; set; }
		
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember(Name="workHourDescriptionFormat")]
		public string WorkHourDescriptionFormat { get; set; } = "";
		
		[System.Runtime.Serialization.DataMember(Name="workHourGrouping")]
		public System.Nullable<InvoiceSettingsOutputModelWorkHourGrouping> WorkHourGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourPrimaryGroupBy")]
		public string WorkHourPrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourSecondaryGroupBy")]
		public string WorkHourSecondaryGroupBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceSettingsOutputModelProjectFeeGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceSettingsOutputModelProjectTravelExpenseGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceSettingsOutputModelStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BlackAndWhite")]
		BlackAndWhite = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Blue")]
		Blue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cyan")]
		Cyan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Green")]
		Green = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lilac")]
		Lilac = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Orange")]
		Orange = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Plain")]
		Plain = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Red")]
		Red = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yellow")]
		Yellow = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceSettingsOutputModelWorkHourGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceSkin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BlackAndWhite")]
		BlackAndWhite = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Blue")]
		Blue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cyan")]
		Cyan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Green")]
		Green = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lilac")]
		Lilac = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Orange")]
		Orange = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Plain")]
		Plain = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Red")]
		Red = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yellow")]
		Yellow = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceStatusModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasInvoiceNumber")]
		public System.Nullable<System.Boolean> HasInvoiceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultForCreditNote")]
		public System.Nullable<System.Boolean> IsDefaultForCreditNote { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPaid")]
		public System.Nullable<System.Boolean> IsPaid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadOnly")]
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSent")]
		public System.Nullable<System.Boolean> IsSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWaitingPayment")]
		public System.Nullable<System.Boolean> IsWaitingPayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceTemplateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="canDelete")]
		public System.Nullable<System.Boolean> CanDelete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvoiceTemplateSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateInvoiceGuid")]
		public string TemplateInvoiceGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InvoiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoice")]
		Invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Reminder")]
		Reminder = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyValuePairOfStringAndObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyValuePairOfStringAndSortDirection
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<KeyValuePairOfStringAndSortDirectionValue> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeyValuePairOfStringAndSortDirectionValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asc")]
		Asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Desc")]
		Desc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AscNullsFirst")]
		AscNullsFirst = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AscNullsLast")]
		AscNullsLast = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescNullsFirst")]
		DescNullsFirst = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescNullsLast")]
		DescNullsLast = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeywordCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Project")]
		Project = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="File")]
		File = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ContactKeywordModelCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KpiFormulaCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Functions")]
		Functions = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Project")]
		Project = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoice")]
		Invoice = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KpiFormulaModelBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public KpiFormulaCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public System.Nullable<KpiFormulaModelBaseDataType> DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KpiFormulaModelBaseDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="String")]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Boolean")]
		Boolean = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Integer")]
		Integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percentage")]
		Percentage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Numeric")]
		Numeric = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Money")]
		Money = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Date")]
		Date = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DateTime")]
		DateTime = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Time")]
		Time = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Object")]
		Object = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ObjectCollection")]
		ObjectCollection = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IpAddress")]
		IpAddress = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguageModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInvoiceLanguage")]
		public System.Nullable<System.Boolean> IsInvoiceLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LeadSourceModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LicenseUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FullUser")]
		FullUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Employee")]
		Employee = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RestrictedEmployee")]
		RestrictedEmployee = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subcontractor")]
		Subcontractor = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketSegmentModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentMarketSegment")]
		public ModelWithName ParentMarketSegment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MemberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invited")]
		Invited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accepted")]
		Accepted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tentative")]
		Tentative = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Declined")]
		Declined = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoneyInputModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CurrencyCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoneyInputModelWithNotNegativeAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string CurrencyCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Months
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="January")]
		January = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="February")]
		February = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="March")]
		March = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="April")]
		April = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="May")]
		May = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="June")]
		June = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="July")]
		July = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="August")]
		August = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="September")]
		September = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="October")]
		October = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="November")]
		November = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="December")]
		December = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationDetailsCountrySubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationDetailsFormattingSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationDetailsLanguageSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationDetailsOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeAddons")]
		public string[] ActiveAddons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeCompanies")]
		public CompanyModel[] ActiveCompanies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public OrganizationDetailsCountrySubModel Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public CurrencyBaseModel Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eInvoiceAddress")]
		public string EInvoiceAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eInvoiceOperatorCode")]
		public string EInvoiceOperatorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatting")]
		public OrganizationDetailsFormattingSubModel Formatting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVatRegistered")]
		public System.Nullable<System.Boolean> IsVatRegistered { get; set; }
		
		/// <summary>
		/// Max length: 25
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kvkNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string KvkNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public OrganizationDetailsLanguageSubModel Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="odpCompany")]
		public string OdpCompany { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredOffice")]
		public string RegisteredOffice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="termsOfServiceApprover")]
		public UserWithNameAndPhotoFileModel TermsOfServiceApprover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public ModelWithName Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatNumber")]
		public string VatNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWithNameAndPhotoFileModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationSettingsModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="currencyRoundingType")]
		public System.Nullable<OrganizationSettingsModelCurrencyRoundingType> CurrencyRoundingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultFooterColumn1")]
		public FreeTextModel DefaultFooterColumn1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultFooterColumn2")]
		public FreeTextModel DefaultFooterColumn2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultFooterColumn3")]
		public FreeTextModel DefaultFooterColumn3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayProjectNumber")]
		public System.Nullable<System.Boolean> DisplayProjectNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flextimeCalculationStartDate")]
		public System.Nullable<System.DateOnly> FlextimeCalculationStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAddingNewKeywordsFromProjectAllowed")]
		public System.Nullable<System.Boolean> IsAddingNewKeywordsFromProjectAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustomerSearchAllowed")]
		public System.Nullable<System.Boolean> IsCustomerSearchAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEnteringHourPlannedInvoiceQuantityAllowed")]
		public System.Nullable<System.Boolean> IsEnteringHourPlannedInvoiceQuantityAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isIdenticalPhaseCodesAllowed")]
		public System.Nullable<System.Boolean> IsIdenticalPhaseCodesAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTravelExpenseImmediatelyInvoiceable")]
		public System.Nullable<System.Boolean> IsTravelExpenseImmediatelyInvoiceable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWorkHourDescriptionMandatory")]
		public System.Nullable<System.Boolean> IsWorkHourDescriptionMandatory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastCustomerNumber")]
		public System.Nullable<System.Int64> LastCustomerNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastFlextimeCalculationEndTime")]
		public System.Nullable<System.DateTimeOffset> LastFlextimeCalculationEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastFlextimeCalculationUser")]
		public UserWithFirstNameLastNameModel LastFlextimeCalculationUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastInvoiceNumber")]
		public System.Nullable<System.Int64> LastInvoiceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastProjectNumber")]
		public System.Nullable<System.Int64> LastProjectNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPurchaseOrderNumber")]
		public System.Nullable<System.Int64> LastPurchaseOrderNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTravelReimbursementNumber")]
		public System.Nullable<System.Int64> LastTravelReimbursementNumber { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFlextimeBalanceLimit")]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Double> MaxFlextimeBalanceLimit { get; set; }
		
		/// <summary>
		/// Minimum: -1000
		/// Maximum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minFlextimeBalanceLimit")]
		[System.ComponentModel.DataAnnotations.Range(-1000, 0)]
		public System.Nullable<System.Double> MinFlextimeBalanceLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextCustomerNumber")]
		public System.Nullable<System.Int64> NextCustomerNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextInvoiceNumber")]
		public System.Nullable<System.Int32> NextInvoiceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextProjectNumber")]
		public System.Nullable<System.Int64> NextProjectNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPurchaseOrderNumber")]
		public System.Nullable<System.Int32> NextPurchaseOrderNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextTravelReimbursementNumber")]
		public System.Nullable<System.Int32> NextTravelReimbursementNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overdueInterest")]
		public System.Nullable<System.Double> OverdueInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentReferenceNumberDisplaySetting")]
		public System.Nullable<OrganizationSettingsModelPaymentReferenceNumberDisplaySetting> PaymentReferenceNumberDisplaySetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentTerm")]
		public System.Nullable<System.Int32> PaymentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectNameDisplayFormatSetting")]
		public System.Nullable<OrganizationSettingsModelProjectNameDisplayFormatSetting> ProjectNameDisplayFormatSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectNameDisplaySetting")]
		public System.Nullable<OrganizationSettingsModelProjectNameDisplaySetting> ProjectNameDisplaySetting { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseOrderNumberPrefix")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string PurchaseOrderNumberPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quickSearchSetting")]
		public System.Nullable<OrganizationSettingsModelQuickSearchSetting> QuickSearchSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setCreditNoteInvoiceNumber")]
		public System.Nullable<System.Boolean> SetCreditNoteInvoiceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelEntryClosingDate")]
		public System.Nullable<System.DateOnly> TravelEntryClosingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelExpenseReimbursementStartDate")]
		public System.Nullable<System.DateOnly> TravelExpenseReimbursementStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelReimbursementInstructions")]
		public string TravelReimbursementInstructions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueIdentifierForProductsAndWorktypes")]
		public System.Nullable<System.Boolean> UniqueIdentifierForProductsAndWorktypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourApprovalMode")]
		public System.Nullable<OrganizationSettingsModelWorkHourApprovalMode> WorkHourApprovalMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourEntryFormat")]
		public EntryFormat WorkHourEntryFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workWeek")]
		public Workweek[] WorkWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="worktimeEntryClosingDate")]
		public System.Nullable<System.DateOnly> WorktimeEntryClosingDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationSettingsModelCurrencyRoundingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwayFromZero")]
		AwayFromZero = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NearestInteger")]
		NearestInteger = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWithFirstNameLastNameModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationSettingsModelPaymentReferenceNumberDisplaySetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReferenceNumber")]
		ReferenceNumber = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kid")]
		Kid = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationSettingsModelProjectNameDisplayFormatSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectNamePhaseName")]
		ProjectNamePhaseName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CustomerNameProjectNamePhaseName")]
		CustomerNameProjectNamePhaseName = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationSettingsModelProjectNameDisplaySetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowProjectLongName")]
		ShowProjectLongName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowProjectShortName")]
		ShowProjectShortName = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationSettingsModelQuickSearchSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowOpenProjectsSalesCasesAndCustomers")]
		ShowOpenProjectsSalesCasesAndCustomers = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowOpenAndClosedProjectsSalesCasesAndCustomers")]
		ShowOpenAndClosedProjectsSalesCasesAndCustomers = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationSettingsModelWorkHourApprovalMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequiredForInvoicing")]
		RequiredForInvoicing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvoicableAlways")]
		InvoicableAlways = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Workweek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monday")]
		Monday = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tuesday")]
		Tuesday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wednesday")]
		Wednesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Thursday")]
		Thursday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Friday")]
		Friday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Saturday")]
		Saturday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sunday")]
		Sunday = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OvertimeModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeInFlextime")]
		public System.Nullable<System.Boolean> IncludeInFlextime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multipliesUnitCost")]
		public System.Nullable<System.Boolean> MultipliesUnitCost { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OvertimePriceModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overtime")]
		public ModelBaseWithRequiredGuid Overtime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceSource")]
		public System.Nullable<OvertimePriceModelPriceSource> PriceSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelistVersionGuid")]
		public string PricelistVersionGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricingMultiplier")]
		public System.Nullable<System.Double> PricingMultiplier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		public string ProjectGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OvertimePriceModelPriceSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProductRegistry")]
		ProductRegistry = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pricelist")]
		Pricelist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Project")]
		Project = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ParticipantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Resource")]
		Resource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatchOperation
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="op")]
		public PatchOperationOp Op { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatchOperationOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Add")]
		Add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Copy")]
		Copy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Move")]
		Move = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Remove")]
		Remove = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Replace")]
		Replace = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatchOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Add")]
		Add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Copy")]
		Copy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Move")]
		Move = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Remove")]
		Remove = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Replace")]
		Replace = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PermissionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="View")]
		View = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Edit")]
		Edit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionProfileModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAccessible")]
		public System.Nullable<System.Boolean> IsAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseCustomerSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deadline")]
		public System.Nullable<System.DateOnly> Deadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultWorkType")]
		public ModelWithName DefaultWorkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalDeadline")]
		public System.Nullable<System.DateOnly> OriginalDeadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalStartDate")]
		public System.Nullable<System.DateOnly> OriginalStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalWorkHoursEstimate")]
		public System.Nullable<System.Double> OriginalWorkHoursEstimate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentPhase")]
		public ModelBaseWithRequiredGuid ParentPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseStatus")]
		public PhaseStatusInputModel PhaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBaseWithRequiredGuid Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursEstimate")]
		public System.Nullable<System.Double> WorkHoursEstimate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseStatusInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseStatusTypeGuid")]
		public string PhaseStatusTypeGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseMemberModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentWorkcontractTitle")]
		public string CurrentWorkcontractTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phaseGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string PhaseGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithFirstNameLastNameAndPhotoFileModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHours")]
		public System.Nullable<System.Double> WorkHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursIncludingChildPhases")]
		public System.Nullable<System.Double> WorkHoursIncludingChildPhases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseMemberOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentWorkContractTitle")]
		public string CurrentWorkContractTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelWithName Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithFirstNameLastNameAndPhotoFileModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseMembersFromBusinessUnitUsersModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="businessUnitGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string BusinessUnitGuid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phaseGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string PhaseGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseModelWithHierarchyInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public CurrencyBaseModel CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public PhaseCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deadline")]
		public System.Nullable<System.DateOnly> Deadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultWorkType")]
		public ModelWithName DefaultWorkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasChildren")]
		public System.Nullable<System.Boolean> HasChildren { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalDeadline")]
		public System.Nullable<System.DateOnly> OriginalDeadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalStartDate")]
		public System.Nullable<System.DateOnly> OriginalStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalWorkHoursEstimate")]
		public System.Nullable<System.Double> OriginalWorkHoursEstimate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentPhase")]
		public ModelBaseWithRequiredGuid ParentPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseStatus")]
		public PhaseStatusOutputModel PhaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public PhaseProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursEstimate")]
		public System.Nullable<System.Double> WorkHoursEstimate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseStatusOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseStatusTypeGuid")]
		public string PhaseStatusTypeGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseProjectSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public CurrencyBaseModel CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deadline")]
		public System.Nullable<System.DateOnly> Deadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultWorkType")]
		public ModelWithName DefaultWorkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalDeadline")]
		public System.Nullable<System.DateOnly> OriginalDeadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalStartDate")]
		public System.Nullable<System.DateOnly> OriginalStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalWorkHoursEstimate")]
		public System.Nullable<System.Double> OriginalWorkHoursEstimate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentPhase")]
		public ModelBaseWithRequiredGuid ParentPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseStatus")]
		public PhaseStatusOutputModel PhaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public PhaseProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursEstimate")]
		public System.Nullable<System.Double> WorkHoursEstimate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseStatusTypeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhaseSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceListCurrency
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceListCurrency2
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceListModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public PriceListCurrency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustom")]
		public System.Nullable<System.Boolean> IsCustom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVolumePricing")]
		public System.Nullable<System.Boolean> IsVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceListOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public PriceListCurrency2 Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustom")]
		public System.Nullable<System.Boolean> IsCustom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVolumePricing")]
		public System.Nullable<System.Boolean> IsVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceModelBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public MoneyOutputModel Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceSource")]
		public OvertimePriceModelPriceSource PriceSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelistVersionGuid")]
		public string PricelistVersionGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		public string ProjectGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PriceSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProductRegistry")]
		ProductRegistry = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pricelist")]
		Pricelist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Project")]
		Project = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PricelistVersionOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelistGuid")]
		public string PricelistGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrintToPdf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DoNotPrintToProposal")]
		DoNotPrintToProposal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PrintToProposalBottom")]
		PrintToProposalBottom = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PrintToProposalBoth")]
		PrintToProposalBoth = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductCategoryModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductCountrySettingsModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public ModelBaseWithRequiredGuid Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ModelBaseWithRequiredGuid Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductForProjectOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="isVolumePriced")]
		public System.Nullable<System.Boolean> IsVolumePriced { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductOutputModel Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCategory")]
		public ModelWithName ProductCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposalDescription")]
		public string ProposalDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public ProductSalesAccountSubModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ProductOutputModelType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductSalesAccountSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductOutputModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FixedFees")]
		FixedFees = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Materials")]
		Materials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subcontracting")]
		Subcontracting = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCategory")]
		public SimpleInputModel ProductCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposalDescription")]
		public string ProposalDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public SimpleInputModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ProductOutputModelType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyInputModelWithNullableAmount UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyInputModelWithNullableAmount UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductPriceModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public MoneyOutputModel Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceSource")]
		public OvertimePriceModelPriceSource PriceSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelistVersionGuid")]
		public string PricelistVersionGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		public string ProjectGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductPriceOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="isAvailable")]
		public System.Nullable<System.Boolean> IsAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVolumePriced")]
		public System.Nullable<System.Boolean> IsVolumePriced { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prices")]
		public ProductPriceModel[] Prices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductPriceProductOutputSubModel Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductPriceProductOutputSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCategory")]
		public ModelWithName ProductCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public ProductOutputModelType ProductType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductSalesAccountSubModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FixedFees")]
		FixedFees = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Materials")]
		Materials = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subcontracting")]
		Subcontracting = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBillingCustomerModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingCustomer")]
		public BillingCustomerModel BillingCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canBeDeleted")]
		public System.Nullable<System.Boolean> CanBeDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBaseWithRequiredGuid Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectBillingCustomerModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingAddress")]
		public BillingAddressModel BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingContact")]
		public ModelWithName BillingContact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingCustomer")]
		public BillingCustomerModel BillingCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canBeDeleted")]
		public System.Nullable<System.Boolean> CanBeDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBaseWithRequiredGuid Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCostCenterSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCustomPropertySelectionItemInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectCustomProperty")]
		public SimpleInputModel ProjectCustomProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCustomPropertySelectionItemOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectCustomProperty")]
		public CustomPropertyShortModel ProjectCustomProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCustomValueModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customProperty")]
		public CustomPropertyShortModel CustomProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		public string ProjectGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectCustomerSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectFeeBillingScheduleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Immediately")]
		Immediately = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnDate")]
		OnDate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WhenPhaseCompleted")]
		WhenPhaseCompleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Recurring")]
		Recurring = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFeeCustomerSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFeeInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingDependencyPhase")]
		public SimpleInputModel BillingDependencyPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingSchedule")]
		public ProjectFeeBillingScheduleType BillingSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public SimpleInputModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayPeriodStartDate")]
		public System.Nullable<System.DateOnly> DisplayPeriodStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasVolumePricing")]
		public System.Nullable<System.Boolean> HasVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public SimpleInputModel Invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowComment")]
		public string InvoiceRowComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedBillingDate")]
		public System.Nullable<System.DateOnly> PlannedBillingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SimpleInputModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public ProductOutputModelType ProductType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public SimpleInputModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyInputModelWithNullableAmount UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyInputModelWithNullableAmount UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFeeInvoiceSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFeeOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingDependencyPhase")]
		public ProjectFeePhaseSubModel BillingDependencyPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingSchedule")]
		public ProjectFeeBillingScheduleType BillingSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public ProjectCostCenterSubModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ProjectFeeCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayPeriodStartDate")]
		public System.Nullable<System.DateOnly> DisplayPeriodStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasVolumePricing")]
		public System.Nullable<System.Boolean> HasVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public ProjectFeeInvoiceSubModel Invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowComment")]
		public string InvoiceRowComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowGuid")]
		public string InvoiceRowGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRecurrenceRule")]
		public System.Nullable<System.Boolean> IsRecurrenceRule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelWithName Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedBillingDate")]
		public System.Nullable<System.DateOnly> PlannedBillingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProjectFeeProductSubModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public ProductOutputModelType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectFeeProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceRuleGuid")]
		public string RecurrenceRuleGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public ProjectSalesAccountSubModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserSubModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFeePhaseSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFeeProductSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFeeProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="companyGuid")]
		public string CompanyGuid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSalesAccountSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyGuid")]
		public string CompanyGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectFileModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public FileCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileGuid")]
		public string FileGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadOnly")]
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ProjectGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usages")]
		public UsageModel[] Usages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadOnly")]
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<UsageModelType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoice")]
		Invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Proposal")]
		Proposal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvoiceTemplate")]
		InvoiceTemplate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectForecastInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingForecast")]
		public MoneyInputModelWithNullableAmount BillingForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingForecastNotes")]
		public string BillingForecastNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenseForecast")]
		public MoneyInputModelWithNullableAmount ExpenseForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenseForecastNotes")]
		public string ExpenseForecastNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="laborExpenseForecast")]
		public MoneyInputModelWithNullableAmount LaborExpenseForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="laborExpenseForecastNotes")]
		public string LaborExpenseForecastNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 1
		/// Maximum: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="month")]
		[System.ComponentModel.DataAnnotations.Range(1, 12)]
		public int Month { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revenueForecast")]
		public MoneyInputModelWithNullableAmount RevenueForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revenueForecastNotes")]
		public string RevenueForecastNotes { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 1900
		/// Maximum: 2075
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		[System.ComponentModel.DataAnnotations.Range(1900, 2075)]
		public int Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectForecastOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingForecast")]
		public MoneyOutputModel BillingForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingForecastNotes")]
		public string BillingForecastNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenseForecast")]
		public MoneyOutputModel ExpenseForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenseForecastNotes")]
		public string ExpenseForecastNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="laborExpenseForecast")]
		public MoneyOutputModel LaborExpenseForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="laborExpenseForecastNotes")]
		public string LaborExpenseForecastNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBaseWithRequiredGuid Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revenueForecast")]
		public MoneyOutputModel RevenueForecast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revenueForecastNotes")]
		public string RevenueForecastNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectInputModelBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingContact")]
		public SimpleInputModel BillingContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessUnit")]
		public SimpleInputRequiredModel BusinessUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionEstimatePercentage")]
		public System.Nullable<System.Int32> CompletionEstimatePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public SimpleInputModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public SimpleInputRequiredModel Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public SimpleInputRequiredModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerContact")]
		public SimpleInputModel CustomerContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deadline")]
		public System.Nullable<System.DateOnly> Deadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedOrderDate")]
		public System.Nullable<System.DateOnly> ExpectedOrderDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedValue")]
		public MoneyInputModelWithNullableAmount ExpectedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internalName")]
		public string InternalName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceNotes")]
		public string InvoiceNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceTemplate")]
		public InvoiceTemplateSubModel InvoiceTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isJoiningAllowed")]
		public System.Nullable<System.Boolean> IsJoiningAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadSource")]
		public SimpleInputModel LeadSource { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderNumber")]
		public string OrderNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourReference")]
		public string OurReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentTerm")]
		public System.Nullable<System.Int32> PaymentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Int32> Probability { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectOwner")]
		public SimpleInputModel ProjectOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectStatus")]
		public SimpleProjectStatusInputModel ProjectStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesPerson")]
		public SimpleInputModel SalesPerson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesStatus")]
		public SimpleSalesStatusInputModel SalesStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useOvertimeMultipliers")]
		public System.Nullable<System.Boolean> UseOvertimeMultipliers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useProductsFromSetting")]
		public System.Nullable<System.Boolean> UseProductsFromSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useWorktypesFromSetting")]
		public System.Nullable<System.Boolean> UseWorktypesFromSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yourReference")]
		public string YourReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimpleProjectStatusInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectStatusTypeGuid")]
		public string ProjectStatusTypeGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimpleSalesStatusInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="salesStatusTypeGuid")]
		public string SalesStatusTypeGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectInvoiceSettingsInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="freeText1")]
		public TemplateFreeTextModel FreeText1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText2")]
		public TemplateFreeTextModel FreeText2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="htmlText1")]
		public TemplateFreeTextModel HtmlText1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="htmlText2")]
		public TemplateFreeTextModel HtmlText2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeDescriptionFormat")]
		public string ProjectFeeDescriptionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeGrouping")]
		public System.Nullable<ProjectInvoiceSettingsInputModelProjectFeeGrouping> ProjectFeeGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeePrimaryGroupBy")]
		public string ProjectFeePrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeSecondaryGroupBy")]
		public string ProjectFeeSecondaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseDescriptionFormat")]
		public string ProjectTravelExpenseDescriptionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseGrouping")]
		public System.Nullable<ProjectInvoiceSettingsInputModelProjectTravelExpenseGrouping> ProjectTravelExpenseGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpensePrimaryGroupBy")]
		public string ProjectTravelExpensePrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseSecondaryGroupBy")]
		public string ProjectTravelExpenseSecondaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentPriceExcludingValueAddedTax")]
		public System.Nullable<System.Boolean> ShowAttachmentPriceExcludingValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentUnit")]
		public System.Nullable<System.Boolean> ShowAttachmentUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentUnitPrice")]
		public System.Nullable<System.Boolean> ShowAttachmentUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentValueAddedTax")]
		public System.Nullable<System.Boolean> ShowAttachmentValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showCategories")]
		public System.Nullable<System.Boolean> ShowCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showFooter")]
		public System.Nullable<System.Boolean> ShowFooter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showLogoAndTitle")]
		public System.Nullable<System.Boolean> ShowLogoAndTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showPriceExcludingValueAddedTax")]
		public System.Nullable<System.Boolean> ShowPriceExcludingValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showQuantity")]
		public System.Nullable<System.Boolean> ShowQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showReferenceNumber")]
		public System.Nullable<System.Boolean> ShowReferenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnit")]
		public System.Nullable<System.Boolean> ShowUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnitPrice")]
		public System.Nullable<System.Boolean> ShowUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showValueAddedTax")]
		public System.Nullable<System.Boolean> ShowValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public InvoiceSettingsOutputModelStyle Style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourDescriptionFormat")]
		public string WorkHourDescriptionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourGrouping")]
		public System.Nullable<ProjectInvoiceSettingsInputModelWorkHourGrouping> WorkHourGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourPrimaryGroupBy")]
		public string WorkHourPrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourSecondaryGroupBy")]
		public string WorkHourSecondaryGroupBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateFreeTextModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowTags")]
		public System.Nullable<System.Boolean> AllowTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagContext")]
		public string TagContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectInvoiceSettingsInputModelProjectFeeGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectInvoiceSettingsInputModelProjectTravelExpenseGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectInvoiceSettingsInputModelWorkHourGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectInvoiceSettingsOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText1")]
		public TemplateFreeTextModel FreeText1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText2")]
		public TemplateFreeTextModel FreeText2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="htmlText1")]
		public TemplateFreeTextModel HtmlText1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="htmlText2")]
		public TemplateFreeTextModel HtmlText2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBase Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeDescriptionFormat")]
		public string ProjectFeeDescriptionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeGrouping")]
		public System.Nullable<ProjectInvoiceSettingsOutputModelProjectFeeGrouping> ProjectFeeGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeePrimaryGroupBy")]
		public string ProjectFeePrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFeeSecondaryGroupBy")]
		public string ProjectFeeSecondaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseDescriptionFormat")]
		public string ProjectTravelExpenseDescriptionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseGrouping")]
		public System.Nullable<ProjectInvoiceSettingsOutputModelProjectTravelExpenseGrouping> ProjectTravelExpenseGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpensePrimaryGroupBy")]
		public string ProjectTravelExpensePrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTravelExpenseSecondaryGroupBy")]
		public string ProjectTravelExpenseSecondaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentPriceExcludingValueAddedTax")]
		public System.Nullable<System.Boolean> ShowAttachmentPriceExcludingValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentUnit")]
		public System.Nullable<System.Boolean> ShowAttachmentUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentUnitPrice")]
		public System.Nullable<System.Boolean> ShowAttachmentUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showAttachmentValueAddedTax")]
		public System.Nullable<System.Boolean> ShowAttachmentValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showCategories")]
		public System.Nullable<System.Boolean> ShowCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showFooter")]
		public System.Nullable<System.Boolean> ShowFooter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showLogoAndTitle")]
		public System.Nullable<System.Boolean> ShowLogoAndTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showPriceExcludingValueAddedTax")]
		public System.Nullable<System.Boolean> ShowPriceExcludingValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showQuantity")]
		public System.Nullable<System.Boolean> ShowQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showReferenceNumber")]
		public System.Nullable<System.Boolean> ShowReferenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnit")]
		public System.Nullable<System.Boolean> ShowUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnitPrice")]
		public System.Nullable<System.Boolean> ShowUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showValueAddedTax")]
		public System.Nullable<System.Boolean> ShowValueAddedTax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public InvoiceSettingsOutputModelStyle Style { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourDescriptionFormat")]
		public string WorkHourDescriptionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourGrouping")]
		public System.Nullable<ProjectInvoiceSettingsOutputModelWorkHourGrouping> WorkHourGrouping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourPrimaryGroupBy")]
		public string WorkHourPrimaryGroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHourSecondaryGroupBy")]
		public string WorkHourSecondaryGroupBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectInvoiceSettingsOutputModelProjectFeeGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectInvoiceSettingsOutputModelProjectTravelExpenseGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectInvoiceSettingsOutputModelWorkHourGrouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneByOne")]
		OneByOne = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group+Attachment")]
		GroupPlusAttachment = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectInvoiceTemplateSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateInvoiceGuid")]
		public string TemplateInvoiceGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectKeywordModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ContactKeywordModelCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectMemberCostExceptionInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public MoneyInputModelWithNullableAmount Cost { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectMemberCostExceptionOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public MoneyOutputModel Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ProjectMemberCostExceptionProjectCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectMemberCostExceptionProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectMemberCostExceptionProjectCustomerSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectMemberCostExceptionProjectSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectNameDisplayFormatOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProjectNamePhaseName")]
		ProjectNamePhaseName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CustomerNameProjectNamePhaseName")]
		CustomerNameProjectNamePhaseName = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectNameDisplayOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowProjectLongName")]
		ShowProjectLongName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowProjectShortName")]
		ShowProjectShortName = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingContact")]
		public UserWithFirstNameLastNameAndPhotoFileModel BillingContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessUnit")]
		public BusinessUnitSubModel BusinessUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calculatedCompletionPercentage")]
		public System.Nullable<System.Int32> CalculatedCompletionPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closedDate")]
		public System.Nullable<System.DateOnly> ClosedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionEstimatePercentage")]
		public System.Nullable<System.Int32> CompletionEstimatePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public ProjectCostCenterSubModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public CurrencySubModel2 Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ProjectCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerContact")]
		public CustomerContactSubModel CustomerContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deadline")]
		public System.Nullable<System.DateOnly> Deadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultWorkType")]
		public ModelWithName DefaultWorkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedOrderDate")]
		public System.Nullable<System.DateOnly> ExpectedOrderDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedValue")]
		public MoneyOutputModel ExpectedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internalName")]
		public string InternalName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceNotes")]
		public string InvoiceNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceTemplate")]
		public ProjectInvoiceTemplateSubModel InvoiceTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDailyAllowanceBillable")]
		public System.Nullable<System.Boolean> IsDailyAllowanceBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isJoiningAllowed")]
		public System.Nullable<System.Boolean> IsJoiningAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMileageBillable")]
		public System.Nullable<System.Boolean> IsMileageBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOtherTravelExpensesBillable")]
		public System.Nullable<System.Boolean> IsOtherTravelExpensesBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public ModelWithName[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadSource")]
		public ModelWithName LeadSource { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orderNumber")]
		public string OrderNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ourReference")]
		public string OurReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentTerm")]
		public System.Nullable<System.Int32> PaymentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelist")]
		public ProjectPricelistSubModel Pricelist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="probability")]
		public System.Nullable<System.Int32> Probability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectOwner")]
		public UserWithFirstNameLastNameAndPhotoFileModel ProjectOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectStatus")]
		public ProjectStatusSubModel ProjectStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootPhase")]
		public ModelWithName RootPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesPerson")]
		public UserWithFirstNameLastNameAndPhotoFileModel SalesPerson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesStatus")]
		public SalesStatusSubModel SalesStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useOvertimeMultipliers")]
		public System.Nullable<System.Boolean> UseOvertimeMultipliers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useProductsFromSetting")]
		public System.Nullable<System.Boolean> UseProductsFromSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useWorkTypesFromSetting")]
		public System.Nullable<System.Boolean> UseWorkTypesFromSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yourReference")]
		public string YourReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectPricelistSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustom")]
		public System.Nullable<System.Boolean> IsCustom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVolumePricing")]
		public System.Nullable<System.Boolean> IsVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectStatusSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectStatusTypeGuid")]
		public string ProjectStatusTypeGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesStatusSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesStatusTypeGuid")]
		public string SalesStatusTypeGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectProductInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SimpleInputRequiredModel Product { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectProductOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProjectProductSubModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectSubModel Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectProductSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCategory")]
		public string ProductCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public System.Nullable<ProjectProductSubModelProductType> ProductType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectProductSubModelProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OwnWork")]
		OwnWork = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Products")]
		Products = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subcontracting")]
		Subcontracting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Travels")]
		Travels = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectRecurringFeeRuleInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public SimpleInputModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayPeriodStartDate")]
		public System.Nullable<System.DateOnly> DisplayPeriodStartDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public int Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasVolumePricing")]
		public System.Nullable<System.Boolean> HasVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SimpleInputModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public ProductOutputModelType ProductType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceEndDate")]
		public System.Nullable<System.DateOnly> RecurrenceEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceEndType")]
		public System.Nullable<ProjectRecurringFeeRuleInputModelRecurrenceEndType> RecurrenceEndType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceStartDate")]
		public System.Nullable<System.DateOnly> RecurrenceStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceTimes")]
		public System.Nullable<System.Int32> RecurrenceTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringSalesAccount")]
		public SimpleInputModel RecurringSalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public SimpleInputModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyInputModelWithNullableAmount UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyInputModelWithNullableAmount UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectRecurringFeeRuleInputModelRecurrenceEndType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Never")]
		Never = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AfterNumberOfTimes")]
		AfterNumberOfTimes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnDate")]
		OnDate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectRecurringFeeRuleOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public ProjectCostCenterSubModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ProjectFeeCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayPeriodStartDate")]
		public System.Nullable<System.DateOnly> DisplayPeriodStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedTimes")]
		public System.Nullable<System.Int32> GeneratedTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasVolumePricing")]
		public System.Nullable<System.Boolean> HasVolumePricing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelWithName Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProjectFeeProductSubModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public ProductOutputModelType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectFeeProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceEndDate")]
		public System.Nullable<System.DateOnly> RecurrenceEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceEndType")]
		public ProjectRecurringFeeRuleInputModelRecurrenceEndType RecurrenceEndType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceStartDate")]
		public System.Nullable<System.DateOnly> RecurrenceStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurrenceTimes")]
		public System.Nullable<System.Int32> RecurrenceTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringSalesAccount")]
		public ProjectSalesAccountSubModel RecurringSalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public ProjectSalesAccountSubModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserSubModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSalesNoteInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSalesNoteOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ModelBase CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public ModelBase LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBase Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBase User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectStatusTypeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTaskStatusModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDone")]
		public System.Nullable<System.Boolean> IsDone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectTravelExpenseBillingScheduleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Immediately")]
		Immediately = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WhenPhaseCompleted")]
		WhenPhaseCompleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnDate")]
		OnDate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTravelExpenseFileModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public FileCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileGuid")]
		public string FileGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<ProjectTravelExpenseFileModelSource> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelExpenseGuid")]
		public string TravelExpenseGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectTravelExpenseFileModelSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Severa")]
		Severa = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VismaScanner")]
		VismaScanner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Google")]
		Google = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTravelExpenseInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingDependencyPhase")]
		public SimpleInputModel BillingDependencyPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingSchedule")]
		public BillingScheduleType BillingSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costAccount")]
		public SimpleInputModel CostAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public SimpleInputModel CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public SimpleInputModel Invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowComment")]
		public string InvoiceRowComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputRequiredModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedBillingDate")]
		public System.Nullable<System.DateOnly> PlannedBillingDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseVatRate")]
		public System.Nullable<System.Double> PurchaseVatRate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public double Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public SimpleInputModel SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelEndTime")]
		public System.Nullable<System.DateTimeOffset> TravelEndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="travelExpense")]
		public SimpleInputRequiredModel TravelExpense { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelReimbursement")]
		public SimpleInputModel TravelReimbursement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelReimbursementRequired")]
		public System.Nullable<System.Boolean> TravelReimbursementRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelStartTime")]
		public System.Nullable<System.DateTimeOffset> TravelStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyInputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyInputModel UnitPrice { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTravelExpenseOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachmentCount")]
		public System.Nullable<System.Int32> AttachmentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingDependencyPhase")]
		public ModelWithName BillingDependencyPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingSchedule")]
		public BillingScheduleType BillingSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costAccount")]
		public ModelWithName CostAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public ModelWithName CostCenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelWithName Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public InvoiceSubModel Invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowComment")]
		public string InvoiceRowComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowGuid")]
		public string InvoiceRowGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBaseWithRequiredGuid Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedBillingDate")]
		public System.Nullable<System.DateOnly> PlannedBillingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectTravelExpenseProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseVatRate")]
		public System.Nullable<System.Double> PurchaseVatRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public ModelWithName SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelEndTime")]
		public System.Nullable<System.DateTimeOffset> TravelEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelExpense")]
		public TravelExpenseSubModel TravelExpense { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelReimbursement")]
		public TravelReimbursementSubModel TravelReimbursement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelReimbursementRequired")]
		public System.Nullable<System.Boolean> TravelReimbursementRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelStartTime")]
		public System.Nullable<System.DateTimeOffset> TravelStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCostExcludingPurchaseVat")]
		public MoneyOutputModel UnitCostExcludingPurchaseVat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserRequiredSubModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectTravelExpenseProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="companyGuid")]
		public string CompanyGuid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelExpenseSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenseClass")]
		public ExpensesClass ExpenseClass { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeTime")]
		public System.Nullable<System.Boolean> IncludeTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelReimbursementSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isApproved")]
		public System.Nullable<System.Boolean> IsApproved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserRequiredSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyGuid")]
		public string CompanyGuid { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectWorkHourPriceInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputRequiredModel Phase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputModel Project { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyInputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public SimpleInputModel WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectWorkHourPriceOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAvailable")]
		public System.Nullable<System.Boolean> IsAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBaseWithRequiredGuid Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelWithName User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public ModelWithName WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectWorkTypeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ProjectGuid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="worktype")]
		public WorkTypeSubModel Worktype { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkTypeSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProductive")]
		public System.Nullable<System.Boolean> IsProductive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalBillingAddressSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressline")]
		public string Addressline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalCustomerSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalFeeRowInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isShownOnProposal")]
		public System.Nullable<System.Boolean> IsShownOnProposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 200
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SimpleInputModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFee")]
		public SimpleInputModel ProjectFee { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="proposal")]
		public SimpleInputRequiredModel Proposal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public double Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public SimpleInputModel Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyInputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyInputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalFeeRowOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isShownOnProposal")]
		public System.Nullable<System.Boolean> IsShownOnProposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ModelBase Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFee")]
		public ModelBase ProjectFee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposal")]
		public ModelBase Proposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public ModelBase Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingAddress")]
		public SimpleInputModel BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public SimpleInputModel Culture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerContactPerson")]
		public SimpleInputModel CustomerContactPerson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText1")]
		public FreeTextInputModel FreeText1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText2")]
		public FreeTextInputModel FreeText2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public SimpleInputModel Language { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposalDate")]
		public System.Nullable<System.DateOnly> ProposalDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposalStatus")]
		public SimpleInputModel ProposalStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalLanguageSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingAddress")]
		public ProposalBillingAddressSubModel BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public FormattingCultureSubModel Culture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ProposalCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerContactPerson")]
		public CustomerContactPersonSubModel CustomerContactPerson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText1")]
		public FreeTextModel2 FreeText1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeText2")]
		public FreeTextModel2 FreeText2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public ProposalLanguageSubModel Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelist")]
		public ModelWithName Pricelist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ProposalProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposalDate")]
		public System.Nullable<System.DateOnly> ProposalDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposalStatus")]
		public ModelWithName ProposalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalExcludingVat")]
		public MoneyOutputModel TotalExcludingVat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalIncludingVat")]
		public MoneyOutputModel TotalIncludingVat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalSettingsOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTaxFree")]
		public System.Nullable<System.Boolean> IsTaxFree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="printTotalInPdf")]
		public PrintToPdf PrintTotalInPdf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showBillingContact")]
		public System.Nullable<System.Boolean> ShowBillingContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showBillingDetails")]
		public System.Nullable<System.Boolean> ShowBillingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showGanttChart")]
		public System.Nullable<System.Boolean> ShowGanttChart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showOrderNumber")]
		public System.Nullable<System.Boolean> ShowOrderNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showOurReference")]
		public System.Nullable<System.Boolean> ShowOurReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showPaymentTerms")]
		public System.Nullable<System.Boolean> ShowPaymentTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showProjectMembers")]
		public System.Nullable<System.Boolean> ShowProjectMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showProjectPlan")]
		public System.Nullable<System.Boolean> ShowProjectPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showQuantity")]
		public System.Nullable<System.Boolean> ShowQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showTotalPrice")]
		public System.Nullable<System.Boolean> ShowTotalPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showTreeview")]
		public System.Nullable<System.Boolean> ShowTreeview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnit")]
		public System.Nullable<System.Boolean> ShowUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showUnitPrice")]
		public System.Nullable<System.Boolean> ShowUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showYourReference")]
		public System.Nullable<System.Boolean> ShowYourReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public InvoiceSettingsOutputModelStyle Style { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalStatusInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLost")]
		public System.Nullable<System.Boolean> IsLost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWon")]
		public System.Nullable<System.Boolean> IsWon { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 200
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalStatusOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLost")]
		public System.Nullable<System.Boolean> IsLost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWon")]
		public System.Nullable<System.Boolean> IsWon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalSubtotalInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isShownOnProposal")]
		public System.Nullable<System.Boolean> IsShownOnProposal { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 200
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBase Phase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="proposal")]
		public SimpleInputRequiredModel Proposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalSubtotalOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isShownOnProposal")]
		public System.Nullable<System.Boolean> IsShownOnProposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBase Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFee")]
		public ModelBase ProjectFee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposal")]
		public ModelBase Proposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalWorkhourRowInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isShownOnProposal")]
		public System.Nullable<System.Boolean> IsShownOnProposal { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 200
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputModel Phase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="proposal")]
		public SimpleInputRequiredModel Proposal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public double Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public SimpleInputModel Subtotal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public SimpleInputRequiredModel WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposalWorkhourRowOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isShownOnProposal")]
		public System.Nullable<System.Boolean> IsShownOnProposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBase Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectFee")]
		public ModelBase ProjectFee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposal")]
		public ModelBase Proposal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public ModelBase Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public ModelBase WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicAuthenticationOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="access_token_expires_in")]
		public System.Nullable<System.Int64> Access_token_expires_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="access_token_expires_utc")]
		public System.Nullable<System.DateTimeOffset> Access_token_expires_utc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="access_token_type")]
		public string Access_token_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token_expires_in")]
		public System.Nullable<System.Int64> Refresh_token_expires_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token_expires_utc")]
		public System.Nullable<System.DateTimeOffset> Refresh_token_expires_utc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum QuickSearchOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowOpenProjectsSalesCasesAndCustomers")]
		ShowOpenProjectsSalesCasesAndCustomers = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ShowOpenAndClosedProjectsSalesCasesAndCustomers")]
		ShowOpenAndClosedProjectsSalesCasesAndCustomers = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecurrenceEndTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Never")]
		Never = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AfterNumberOfTimes")]
		AfterNumberOfTimes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnDate")]
		OnDate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecurrenceFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Daily")]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Weekly")]
		Weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monthly")]
		Monthly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yearly")]
		Yearly = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecurrenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Occurrence")]
		Occurrence = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Exception")]
		Exception = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Series")]
		Series = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReferenceNumberDisplay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReferenceNumber")]
		ReferenceNumber = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kid")]
		Kid = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoice")]
		Invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Proposal")]
		Proposal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvoiceTemplate")]
		InvoiceTemplate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReimbursedProjectFeeOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceGuid")]
		public string InvoiceGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowGuid")]
		public string InvoiceRowGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelWithName Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ModelWithName Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productType")]
		public ProductOutputModelType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ReimbursedProjectFeeProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelWithName User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReimbursedProjectFeeProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReimbursedProjectTravelExpenseOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceGuid")]
		public string InvoiceGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowGuid")]
		public string InvoiceRowGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelWithName Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ModelWithName Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ReimbursedProjectFeeProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelEndTime")]
		public System.Nullable<System.DateTimeOffset> TravelEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelStartTime")]
		public System.Nullable<System.DateTimeOffset> TravelStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelWithName User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReimbursedWorkHourOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelWithName Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.Nullable<System.DateOnly> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceGuid")]
		public string InvoiceGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowComment")]
		public string InvoiceRowComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowGuid")]
		public string InvoiceRowGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overtime")]
		public ModelWithName Overtime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelWithName Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedInvoiceQuantity")]
		public System.Nullable<System.Double> PlannedInvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ReimbursedWorkHourProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelWithName User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public ModelWithName WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReimbursedWorkHourProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceAllocationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Delete")]
		Delete = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transfer")]
		Transfer = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationCriteriaModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeAbsences")]
		public System.Nullable<System.Boolean> IncludeAbsences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phaseGuids")]
		public string[] PhaseGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectBusinessUnitGuids")]
		public string[] ProjectBusinessUnitGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectGuids")]
		public string[] ProjectGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectManagerUserGuids")]
		public string[] ProjectManagerUserGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectStatusTypeGuids")]
		public string[] ProjectStatusTypeGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectTagGuids")]
		public string[] ProjectTagGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceAllocationGuids")]
		public string[] ResourceAllocationGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesProgresses")]
		public SalesProgress[] SalesProgresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesStatusTypeGuids")]
		public string[] SalesStatusTypeGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superiorUserGuids")]
		public string[] SuperiorUserGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useSalesProbability")]
		public System.Nullable<System.Boolean> UseSalesProbability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userBusinessUnitGuids")]
		public string[] UserBusinessUnitGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userGuids")]
		public string[] UserGuids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userLicenseTypes")]
		public LicenseUserType[] UserLicenseTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userTagGuids")]
		public string[] UserTagGuids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SalesProgress
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Won")]
		Won = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lost")]
		Lost = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allocationHours")]
		public System.Nullable<System.Double> AllocationHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocationPercentage")]
		public System.Nullable<System.Int32> AllocationPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputModel Phase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allocationHours")]
		public System.Nullable<System.Double> AllocationHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocationPercentage")]
		public System.Nullable<System.Int32> AllocationPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calculatedAllocationHours")]
		public System.Nullable<System.Double> CalculatedAllocationHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelWithName Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="derivedEndDate")]
		public System.Nullable<System.DateOnly> DerivedEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="derivedStartDate")]
		public System.Nullable<System.DateOnly> DerivedStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ResourceAllocationPhaseSubModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ResourceAllocationProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectMemberGuid")]
		public string ProjectMemberGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithFirstNameLastNameAndPhotoFileModel User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationPhaseSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAllocationProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleAllocationInputModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allocationHours")]
		public double AllocationHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputModel Phase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="project")]
		public SimpleInputRequiredModel Project { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="role")]
		public SimpleInputRequiredModel Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleAllocationOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allocationHours")]
		public System.Nullable<System.Double> AllocationHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelWithName Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public PhaseSubModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelWithName Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public ModelWithName Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesAccountModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProductDefault")]
		public System.Nullable<System.Boolean> IsProductDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTravelTypeDefault")]
		public System.Nullable<System.Boolean> IsTravelTypeDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWorkTypeDefault")]
		public System.Nullable<System.Boolean> IsWorkTypeDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesNoteOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public ModelBase CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelBase Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public ModelBase LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelBase Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBase User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesStatusHistoryOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public ModelWithName Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesStatusType")]
		public ModelWithName SalesStatusType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeStamp")]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SalesStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Won")]
		Won = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lost")]
		Lost = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesStatusTypeInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultProbability")]
		public System.Nullable<System.Int32> DefaultProbability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProposalDefault")]
		public System.Nullable<System.Boolean> IsProposalDefault { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesState")]
		public SalesStatusType SalesState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesStatusTypeOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultProbability")]
		public System.Nullable<System.Int32> DefaultProbability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProposalDefault")]
		public System.Nullable<System.Boolean> IsProposalDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesState")]
		public SalesStatusType SalesState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SalutationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mr.")]
		Mr_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mrs.")]
		Mrs_ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ms.")]
		Ms_ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SatisfactionLevelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unsatisfied")]
		Unsatisfied = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Neutral")]
		Neutral = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Satisfied")]
		Satisfied = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchFieldDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="String")]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Boolean")]
		Boolean = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Integer")]
		Integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percentage")]
		Percentage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Numeric")]
		Numeric = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Money")]
		Money = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Date")]
		Date = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DateTime")]
		DateTime = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Time")]
		Time = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Object")]
		Object = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ObjectCollection")]
		ObjectCollection = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IpAddress")]
		IpAddress = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Asc")]
		Asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Desc")]
		Desc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AscNullsFirst")]
		AscNullsFirst = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AscNullsLast")]
		AscNullsLast = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescNullsFirst")]
		DescNullsFirst = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescNullsLast")]
		DescNullsLast = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamProductivityOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustedShareOfBilling")]
		public MoneyOutputModel AdjustedShareOfBilling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adjustedShareOfBillingPercentage")]
		public System.Nullable<System.Double> AdjustedShareOfBillingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billableHoursPercentage")]
		public System.Nullable<System.Double> BillableHoursPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calculatedShareOfBilling")]
		public MoneyOutputModel CalculatedShareOfBilling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calculatedShareOfBillingPercentage")]
		public System.Nullable<System.Double> CalculatedShareOfBillingPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectGuid")]
		public string ProjectGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithNameAndPhotoFileModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHours")]
		public System.Nullable<System.Double> WorkHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursBillable")]
		public System.Nullable<System.Double> WorkHoursBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursCost")]
		public MoneyOutputModel WorkHoursCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workHoursValue")]
		public MoneyOutputModel WorkHoursValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeEntryModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ModelWithName Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateOnly EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public ModelBaseWithRequiredGuid Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public TimeEntryProject Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeEntryType")]
		public ModelBaseWithRequiredGuid TimeEntryType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBaseWithRequiredGuid User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeEntryProject
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeEntryTypeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimezoneModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ianaName")]
		public string IanaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemName")]
		public string SystemName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TotalRoundingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwayFromZero")]
		AwayFromZero = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NearestInteger")]
		NearestInteger = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelExpenseCostAccountSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelExpenseTypeCountrySettingsModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public ModelBaseWithRequiredGuid Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ModelBaseWithRequiredGuid Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseVatRate")]
		public System.Nullable<System.Double> PurchaseVatRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelExpenseTypeInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costAccount")]
		public SimpleInputModel CostAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expenseClass")]
		public ExpensesClass ExpenseClass { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeTime")]
		public System.Nullable<System.Boolean> IncludeTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCategory")]
		public SimpleInputModel ProductCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseVatRate")]
		public System.Nullable<System.Double> PurchaseVatRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public SimpleInputModel SalesAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyInputModelWithNullableAmount UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelExpenseTypeOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costAccount")]
		public TravelExpenseCostAccountSubModel CostAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenseClass")]
		public ExpensesClass ExpenseClass { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeTime")]
		public System.Nullable<System.Boolean> IncludeTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDailyAllowance")]
		public System.Nullable<System.Boolean> IsDailyAllowance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMileage")]
		public System.Nullable<System.Boolean> IsMileage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="measurementUnit")]
		public string MeasurementUnit { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCategory")]
		public ModelWithName ProductCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchaseVatRate")]
		public System.Nullable<System.Double> PurchaseVatRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public ProductSalesAccountSubModel2 SalesAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vatRate")]
		public System.Nullable<System.Double> VatRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelPriceOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="prices")]
		public PriceModelBase[] Prices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public TravelPriceProductSubModel Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelPriceProductSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="expenseClass")]
		public ExpensesClass ExpenseClass { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TravelReimbursementAttachmentSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Severa")]
		Severa = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VismaScanner")]
		VismaScanner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Google")]
		Google = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelReimbursementInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="advancePayment")]
		public MoneyInputModelWithNullableAmount AdvancePayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		public GroupByType GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelReimbursementStatus")]
		public SimpleInputModel TravelReimbursementStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBaseWithRequiredGuid User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelReimbursementOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="advancePayment")]
		public MoneyOutputModel AdvancePayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalDate")]
		public System.Nullable<System.DateTimeOffset> ApprovalDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvedByUser")]
		public ModelWithName ApprovedByUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canChangeApproval")]
		public System.Nullable<System.Boolean> CanChangeApproval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupBy")]
		public GroupByType GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public MoneyOutputModel Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalExpenses")]
		public MoneyOutputModel TotalExpenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelReimbursementStatus")]
		public ModelWithName TravelReimbursementStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelWithName User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelReimbursementStatusModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isApproved")]
		public System.Nullable<System.Boolean> IsApproved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TypeOfProduct
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OwnWork")]
		OwnWork = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Products")]
		Products = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Subcontracting")]
		Subcontracting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Travels")]
		Travels = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageModel2
	{
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCountrySubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code3")]
		public string Code3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasRegions")]
		public AddressCountryHasRegions HasRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCultureSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCustomPropertyInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public PermissionLevel Permission { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CustomPropertyModelType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCustomPropertyOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public PermissionLevel Permission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CustomPropertyModelType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageCount")]
		public System.Nullable<System.Int32> UsageCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCustomPropertySelectionItemInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userCustomProperty")]
		public SimpleInputModel UserCustomProperty { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCustomPropertySelectionItemOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCustomProperty")]
		public CustomPropertyShortModel UserCustomProperty { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCustomValueInputModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customProperty")]
		public SimpleInputRequiredModel CustomProperty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCustomValueOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customProperty")]
		public CustomPropertyShortModel CustomProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelBase User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountNumber")]
		public string BankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="birthDate")]
		public System.Nullable<System.DateTimeOffset> BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessUnit")]
		public SimpleInputRequiredModel BusinessUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public SimpleInputModel Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryRegion")]
		public SimpleInputModel CountryRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDefaultWorkContract")]
		public System.Nullable<System.Boolean> CreateDefaultWorkContract { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public SimpleInputModel Culture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultActivityType")]
		public SimpleInputModel DefaultActivityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public SimpleInputModel Language { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissionProfile")]
		public SimpleInputModel PermissionProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salutation")]
		public System.Nullable<UserInputModelSalutation> Salutation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satisfaction")]
		public ContactModelSatisfactionLevel Satisfaction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socialSecurityNumber")]
		public string SocialSecurityNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superiorUser")]
		public SimpleInputRequiredModel SuperiorUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public TimezoneModel Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public LicenseUserType UserType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public SimpleInputRequiredModel WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserInputModelSalutation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mr.")]
		Mr_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mrs.")]
		Mrs_ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ms.")]
		Ms_ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserKeywordModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ContactKeywordModelCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userGuid")]
		public string UserGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserKeywordSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLanguageSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="englishName")]
		public string EnglishName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bankAccountNumber")]
		public string BankAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="birthDate")]
		public System.Nullable<System.DateTimeOffset> BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessUnit")]
		public BusinessUnitSubModel BusinessUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public UserCountrySubModel Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryRegion")]
		public ModelWithName CountryRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="culture")]
		public UserCultureSubModel Culture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultActivityType")]
		public ModelWithName DefaultActivityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public UserKeywordSubModel[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public UserLanguageSubModel Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastLogin")]
		public System.Nullable<System.DateTimeOffset> LastLogin { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissionProfile")]
		public ModelWithName PermissionProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salutation")]
		public System.Nullable<UserOutputModelSalutation> Salutation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="satisfaction")]
		public ContactModelSatisfactionLevel Satisfaction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socialSecurityNumber")]
		public string SocialSecurityNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superiorUser")]
		public ModelBaseWithRequiredGuid SuperiorUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public TimezoneModel Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public LicenseUserType UserType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workContract")]
		public UserWorkContractSubModel WorkContract { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public ModelBaseWithRequiredGuid WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserOutputModelSalutation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mr.")]
		Mr_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mrs.")]
		Mrs_ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ms.")]
		Ms_ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWorkContractSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="dailyHours")]
		public System.Nullable<System.Double> DailyHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flextimeLimitPerDay")]
		public System.Nullable<System.Double> FlextimeLimitPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourCost")]
		public MoneyOutputModel HourCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFlextimeActive")]
		public System.Nullable<System.Boolean> IsFlextimeActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOvertimeAllowed")]
		public System.Nullable<System.Boolean> IsOvertimeAllowed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.DateOnly StartDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workWeek")]
		public Workweek[] WorkWeek { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWithPhotoFileModelAndRequiredGuid
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatRateInputModel
	{
		
		/// <summary>
		/// Max length: 10
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryGuid")]
		public string CountryGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public double Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VatRateOutputModel
	{
		
		/// <summary>
		/// Max length: 10
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryGuid")]
		public string CountryGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Double> Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VismaFinancialsCompanyModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkContractInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="dailyHours")]
		public System.Nullable<System.Double> DailyHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flextimeLimitPerDay")]
		public System.Nullable<System.Double> FlextimeLimitPerDay { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hourCost")]
		public MoneyInputModelWithNotNegativeAmount HourCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFlextimeActive")]
		public System.Nullable<System.Boolean> IsFlextimeActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOvertimeAllowed")]
		public System.Nullable<System.Boolean> IsOvertimeAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public SimpleInputModel Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.DateOnly StartDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workWeek")]
		public Workweek[] WorkWeek { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkContractOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dailyHours")]
		public System.Nullable<System.Double> DailyHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flextimeLimitPerDay")]
		public System.Nullable<System.Double> FlextimeLimitPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourCost")]
		public MoneyOutputModel HourCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFlextimeActive")]
		public System.Nullable<System.Boolean> IsFlextimeActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOvertimeAllowed")]
		public System.Nullable<System.Boolean> IsOvertimeAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public ModelWithName Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.DateOnly StartDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithPhotoFileModelAndRequiredGuid User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workWeek")]
		public Workweek[] WorkWeek { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkHourApprovalMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequiredForInvoicing")]
		RequiredForInvoicing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvoicableAlways")]
		InvoicableAlways = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourCustomerSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateOnly EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public SimpleInputModel Invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowComment")]
		public string InvoiceRowComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isApproved")]
		public System.Nullable<System.Boolean> IsApproved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overtime")]
		public SimpleInputModel Overtime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public SimpleInputRequiredModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedInvoiceQuantity")]
		public System.Nullable<System.Double> PlannedInvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyInputModel UnitPrice { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public SimpleInputRequiredModel User { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public SimpleInputRequiredModel WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourInvoiceSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="billableStatus")]
		public BillableStatusType BillableStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public WorkHourCustomerSubModel Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateOnly EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public WorkHourInvoiceSubModel Invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceQuantity")]
		public System.Nullable<System.Double> InvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowComment")]
		public string InvoiceRowComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowDescription")]
		public string InvoiceRowDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoiceRowGuid")]
		public string InvoiceRowGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isApproved")]
		public System.Nullable<System.Boolean> IsApproved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isModifiable")]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProductive")]
		public System.Nullable<System.Boolean> IsProductive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overtime")]
		public ModelWithName Overtime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public WorkHourPhaseSubModel Phase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plannedInvoiceQuantity")]
		public System.Nullable<System.Double> PlannedInvoiceQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public WorkHourProjectSubModel Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public MoneyOutputModel UnitCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserWithFirstNameLastNamePhotoFileModelAndRequiredGuid User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public WorkHourWorkTypeSubModel WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourPhaseSubModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourProjectSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="companyGuid")]
		public string CompanyGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int64> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourWorkTypeSubModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkHourPriceOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBillable")]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricelistVersion")]
		public ModelBase PricelistVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitPrice")]
		public MoneyOutputModel UnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ModelWithName User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workType")]
		public ModelWithName WorkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkTypeInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourCost")]
		public MoneyInputModelWithNullableAmount HourCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProductive")]
		public System.Nullable<System.Boolean> IsProductive { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public SimpleInputModel SalesAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkTypeOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDateTime")]
		public System.Nullable<System.DateTimeOffset> CreatedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourCost")]
		public MoneyOutputModel HourCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isProductive")]
		public System.Nullable<System.Boolean> IsProductive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public UserWithFirstNameLastNameAndPhotoFileModel LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDateTime")]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="salesAccount")]
		public ModelWithName SalesAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkdayModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="absenceHours")]
		public System.Nullable<System.Double> AbsenceHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enteredHours")]
		public System.Nullable<System.Double> EnteredHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enteredTimeEntries")]
		public System.Nullable<System.Double> EnteredTimeEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedHours")]
		public System.Nullable<System.Double> ExpectedHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flextimeLimitPerDay")]
		public System.Nullable<System.Double> FlextimeLimitPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holidayName")]
		public string HolidayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incompleteTimingMinutes")]
		public System.Nullable<System.Int32> IncompleteTimingMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isHoliday")]
		public System.Nullable<System.Boolean> IsHoliday { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOvertimeAllowed")]
		public System.Nullable<System.Boolean> IsOvertimeAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isReadOnly")]
		public System.Nullable<System.Boolean> IsReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userGuid")]
		public string UserGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorktypeForProjectOutputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="hourPrice")]
		public MoneyOutputModel HourPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="worktype")]
		public WorkTypeOutputModel Worktype { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns http status code 204 for successful authentication.
		/// This route requires authentication, returns 204 http status when successful.
		/// HeartBeat_GetAuthorization heartbeat/authorized
		/// </summary>
		public async Task HeartBeat_GetAuthorizationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "heartbeat/authorized";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Can be used to check the status of the database.
		/// This does not require authentication.
		/// HeartBeat_GetDatabaseStatus heartbeat/database
		/// </summary>
		/// <returns>Returns message "Database is alive."</returns>
		public async Task<string> HeartBeat_GetDatabaseStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "heartbeat/database";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(responseMessageStream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Can be used to check the status of the REST Api.
		/// This does not require authentication.
		/// HeartBeat_GetServerStatus heartbeat/server
		/// </summary>
		/// <returns>Returns message "Server is alive."</returns>
		public async Task<string> HeartBeat_GetServerStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "heartbeat/server";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(responseMessageStream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all activities of an organization
		/// Start and end date times accept values of DateTimeOffset type, based on UTF-8 encoding.
		/// Activities_GetActivities v1/activities
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="closed">Optional: Which activities to fetch - open/closed, Default all.</param>
		/// <param name="activityCategories">Optional: activity category for the activities to be fetched. Should be one of Personal/Absences/CalendarEntry/SalesEvent/Task. Default all.</param>
		/// <param name="customerGuids">Optional: ID of customer. Default all.</param>
		/// <param name="includeTasksWithNoCustomer">Optional: Include the activities that don't have customer. Default is true.</param>
		/// <param name="projectGuids">Optional: ID of the project for the activities to be fetched. If not provided, returns for all projects. Default all.</param>
		/// <param name="includeTasksWithNoProject">Optional: Include the activities that don't have project. Default is true.</param>
		/// <param name="projectBusinessUnitGuids">Optional: ID of the business unit of the project based on which activities should be filtered. If not provided, returns for all business units. Default all.</param>
		/// <param name="projectOwnerGuids">Optional: ID of the project manager. If not provided, returns for all project managers. Default all.</param>
		/// <param name="userGuids">Optional: ID of the user for the activities to be fetched. If not provided, returns for all users. Default all.</param>
		/// <param name="includeAsMember">Optional: Include the activities that the user is a member. Effective if userGuid is provided. Default is to not include.</param>
		/// <param name="userKeywordGuids">Optional: User keyword Ids of activity owner to search for.</param>
		/// <param name="startDateTime">Optional: starting date and time from which to get the activities in user's timezone. Finds all activities that end after the date time. Format "2017-04-12T13%3A20%3A00%2b02%3A00". Default all.</param>
		/// <param name="endDateTime">Optional: ending date and time to which to get the activities in user's timezone. Finds all activities that start before or on the date time. Format "2017-04-12T13%3A20%3A00%2b02%3A00". Default all. If activities for one day are fetched, give start date time with time as 00:00 with the offset of the timezone and end time as 23:59:59 with the offset.</param>
		/// <param name="projectTaskStatusGuids">Optional: ID of the project task status. Default all.</param>
		/// <param name="phaseGuids">Optional: ID of the phase for the activities to be fetched. If not provided, returns for all phases. Default all.</param>
		/// <param name="includeSubPhases">Optional: If one phase guid is given include activities also from sub phases. If multiple phase guids are given, returns activities only for those regardless of this parameter. Default false.</param>
		/// <param name="contactGuids">Optional: ID of the contact for the activities to be fetched. If not provided, returns for all users. Default all.</param>
		/// <param name="hasDuration">Optional: has duration flag for the activity. Default all.</param>
		/// <param name="hasHours">Optional: has any work hour entries associated with the activity. Default all.</param>
		/// <param name="isUnassigned">Optional: is the activity unassigned. Default all.</param>
		/// <param name="changedSince">Optional: Get activities that have been added or changed after this date time (greater or equal).</param>
		/// <param name="useStrictStartAndEndDateTime">Optional: If given as true returns activities that start after start time and end before end time. If given as false returns activities that start before end time and end after start time. Limit are included in both cases. Default false.</param>
		/// <param name="activityTypeGuids">Optional: ID of the project activity type. Default all.</param>
		/// <param name="recurrenceType">Optional: Type of the recurrence. Default returns all not recurring activities, instances and exceptions. (None = not recurring activity)</param>
		/// <returns>Activities for a project</returns>
		public async Task<ActivityModel[]> Activities_GetActivitiesAsync(
					string pageToken, 
					int rowCount, 
					bool closed, 
					ActivityCategory[] activityCategories, 
					string[] customerGuids, 
					bool includeTasksWithNoCustomer, 
					string[] projectGuids, 
					bool includeTasksWithNoProject, 
					string[] projectBusinessUnitGuids, 
					string[] projectOwnerGuids, 
					string[] userGuids, 
					bool includeAsMember, 
					string[] userKeywordGuids, 
					System.DateTimeOffset startDateTime, 
					System.DateTimeOffset endDateTime, 
					string[] projectTaskStatusGuids, 
					string[] phaseGuids, 
					bool includeSubPhases, 
					string[] contactGuids, 
					bool hasDuration, 
					bool hasHours, 
					bool isUnassigned, 
					System.DateTimeOffset changedSince, 
					bool useStrictStartAndEndDateTime, 
					string[] activityTypeGuids, 
					ActivityModelRecurrenceType recurrenceType, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&closed="+closed+"&"+string.Join("&", activityCategories.Select(z => $"activityCategories={z}"))+"&"+string.Join("&", customerGuids.Select(z => $"customerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&includeTasksWithNoCustomer="+includeTasksWithNoCustomer+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&includeTasksWithNoProject="+includeTasksWithNoProject+"&"+string.Join("&", projectBusinessUnitGuids.Select(z => $"projectBusinessUnitGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectOwnerGuids.Select(z => $"projectOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", userGuids.Select(z => $"userGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&includeAsMember="+includeAsMember+"&"+string.Join("&", userKeywordGuids.Select(z => $"userKeywordGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&startDateTime=" + startDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDateTime=" + endDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", projectTaskStatusGuids.Select(z => $"projectTaskStatusGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", phaseGuids.Select(z => $"phaseGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&includeSubPhases="+includeSubPhases+"&"+string.Join("&", contactGuids.Select(z => $"contactGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&hasDuration="+hasDuration+"&hasHours="+hasHours+"&isUnassigned="+isUnassigned+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&useStrictStartAndEndDateTime="+useStrictStartAndEndDateTime+"&"+string.Join("&", activityTypeGuids.Select(z => $"activityTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&recurrenceType=" + recurrenceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a activity
		/// Activities_PostActivity v1/activities
		/// </summary>
		/// <param name="requestBody">ActivityModel</param>
		public async Task Activities_PostActivityAsync(ActivityModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get participants for an activity
		/// ActivityParticipants_GetActivityParticipants v1/activities/{activityGuid}/activityparticipants
		/// </summary>
		/// <param name="activityGuid">ID of the activity</param>
		/// <returns>ActivityParticipants for an activity</returns>
		public async Task<ActivityParticipantModel[]> ActivityParticipants_GetActivityParticipantsAsync(string activityGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities/"+ (activityGuid==null? "" : System.Uri.EscapeDataString(activityGuid))+"/activityparticipants";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityParticipantModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete activity participant.
		/// Returns: No Content (204) if succeeded. Not found (404) if participant can't be found.
		/// ActivityParticipants_DeleteActivityParticipant v1/activities/{activityGuid}/activityparticipants/{activityParticipantGuid}
		/// </summary>
		/// <param name="activityGuid">ID of the activity from which to delete the participant. If an activity occurrence guid is given, this will create an exception to the recurring activity and delete the participant from that.</param>
		/// <param name="activityParticipantGuid">ID of the participant</param>
		public async Task ActivityParticipants_DeleteActivityParticipantAsync(string activityGuid, string activityParticipantGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities/"+ (activityGuid==null? "" : System.Uri.EscapeDataString(activityGuid))+"/activityparticipants/"+ (activityParticipantGuid==null? "" : System.Uri.EscapeDataString(activityParticipantGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an activity
		/// Returns: No Content (204) if succeeded. Not found (404) if activity can't be found.
		/// Activities_DeleteActivity v1/activities/{guid}
		/// </summary>
		/// <param name="guid">ID for the activity to delete</param>
		public async Task Activities_DeleteActivityAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get activity by ID
		/// Activities_GetActivity v1/activities/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the activity.</param>
		public async Task<ActivityModel> Activities_GetActivityAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a activity or a part of it
		/// Activities_PatchActivity v1/activities/{guid}
		/// </summary>
		/// <param name="guid">ID of the activity. Can also be comma separate list of IDs to patch multiple activities with one call. When multiple IDs are given, returns model which has list of succeeded activities and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of ActivityModel</param>
		/// <returns>List of updated activities</returns>
		public async Task<ActivityModel[]> Activities_PatchActivityAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resets exceptions from a recurring activity.
		/// Returns: No Content (204) if succeeded. Not found (404) if activity can't be found or is not recurring.
		/// Activities_DeleteExceptions v1/activities/{guid}/exceptions
		/// </summary>
		/// <param name="guid">ID of the recurring activity</param>
		public async Task Activities_DeleteExceptionsAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activities/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/exceptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an activity participant
		/// ActivityParticipants_PostActivityParticipant v1/activityparticipants
		/// </summary>
		/// <param name="requestBody">ActivityParticipantModel</param>
		public async Task ActivityParticipants_PostActivityParticipantAsync(ActivityParticipantModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activityparticipants";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get activity participant
		/// ActivityParticipants_GetActivityParticipant v1/activityparticipants/{guid}
		/// </summary>
		/// <param name="guid">ID of the participant</param>
		/// <returns>ActivityParticipant</returns>
		public async Task<ActivityParticipantModel> ActivityParticipants_GetActivityParticipantAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activityparticipants/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityParticipantModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a activity participant or a part of it
		/// Only IsConfirmed property can be updated.
		/// ActivityParticipants_PatchActivityParticipants v1/activityparticipants/{guid}
		/// </summary>
		/// <param name="guid">ID of the activity participant</param>
		/// <param name="requestBody">JSON patch document of ActivityParticipantModel</param>
		/// <returns>list of updated activity participants</returns>
		public async Task<ActivityParticipantModel[]> ActivityParticipants_PatchActivityParticipantsAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activityparticipants/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityParticipantModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the Activity Types
		/// ActivityTypes_GetActivityTypes v1/activitytypes
		/// </summary>
		/// <param name="active">If not given, return all Activity Types, if given as true return only active Activity Types, if given as false returns only inactive Activity Types</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get activity types that have been added or changed after this date time (greater or equal).</param>
		/// <param name="category">Optional: Category or multiple categories of activity types to search for. Default all.</param>
		public async Task<ActivityTypeModel[]> ActivityTypes_GetActivityTypesAsync(bool active, string pageToken, int rowCount, System.DateTimeOffset changedSince, ActivityCategory[] category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activitytypes?active="+active+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", category.Select(z => $"category={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert an Activity type.
		/// ActivityTypes_PostActivityType v1/activitytypes
		/// </summary>
		/// <param name="requestBody">Activity type</param>
		public async Task ActivityTypes_PostActivityTypeAsync(ActivityTypeModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activitytypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an activity type.
		/// Returns: No Content (204) if succeeded. Not found (404) if activity type can't be found.
		/// ActivityTypes_DeleteActivityType v1/activitytypes/{guid}
		/// </summary>
		/// <param name="guid">ID for the activity type to delete</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the activity type to which to move usages of this activity type. Default null. If activity type is in use and usages aren't moved the deletion might fail.</param>
		public async Task ActivityTypes_DeleteActivityTypeAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activitytypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Activity Type by ID
		/// ActivityTypes_GetActivityType v1/activitytypes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Activity Type.</param>
		/// <returns>Activity Type</returns>
		public async Task<ActivityTypeModel> ActivityTypes_GetActivityTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activitytypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityTypeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an Activity Type or a part of it
		/// ActivityTypes_PatchActivityType v1/activitytypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the Activity Type</param>
		/// <param name="requestBody">JSON patch document of ActivityTypeModel</param>
		/// <returns>List of updated Activity Types</returns>
		public async Task<ActivityTypeModel[]> ActivityTypes_PatchActivityTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/activitytypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ActivityTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the addresses.
		/// Addresses_GetAddresses v1/addresses
		/// </summary>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="changedSince">Optional: Get addresses that have been added or changed after this date time (greater or equal).</param>
		public async Task<AddressModel[]> Addresses_GetAddressesAsync(int firstRow, int rowCount, bool calculateRowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/addresses?firstRow="+firstRow+"&rowCount="+rowCount+"&calculateRowCount="+calculateRowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddressModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an address.
		/// Returns: No Content (204) if succeeded. Not found (404) if address can't be found.
		/// Addresses_DeleteAddress v1/addresses/{guid}
		/// </summary>
		/// <param name="guid">ID for the address to delete.</param>
		public async Task Addresses_DeleteAddressAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/addresses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get address by ID.
		/// Addresses_GetAddress v1/addresses/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the address.</param>
		/// <returns>Address.</returns>
		public async Task<AddressModel> Addresses_GetAddressAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/addresses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddressModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an address or a part of it.
		/// Addresses_PatchAddress v1/addresses/{guid}
		/// </summary>
		/// <param name="guid">ID of the address.</param>
		/// <param name="requestBody">JSON patch document of AddressModel.</param>
		/// <returns>List of updated addresses.</returns>
		public async Task<AddressModel[]> Addresses_PatchAddressAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/addresses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddressModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all bank accounts for current organization.
		/// BankAccounts_GetBankAccounts v1/bankaccounts
		/// </summary>
		/// <param name="companyGuid">Optional: ID of the company.</param>
		/// <param name="businessUnitGuid">Optional: ID of the business unit.</param>
		/// <param name="active">If not given, returns all bank accounts, if given as true returns only active bank accounts, if given as false returns only inactive bank accounts.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from bank account name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=BankName&sortings[0].value=Desc &sortings[1].key=BusinessUnitName&sortings[1].value=Asc".</param>
		/// <returns>Bank accounts.</returns>
		public async Task<BankAccountOutputModel[]> BankAccounts_GetBankAccountsAsync(string companyGuid, string businessUnitGuid, bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankaccounts?companyGuid=" + (companyGuid==null? "" : System.Uri.EscapeDataString(companyGuid))+"&businessUnitGuid=" + (businessUnitGuid==null? "" : System.Uri.EscapeDataString(businessUnitGuid))+"&active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankAccountOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get bank account by ID.
		/// BankAccounts_GetBankAccount v1/bankaccounts/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the bank account.</param>
		/// <returns>Bank account.</returns>
		public async Task<BankAccountOutputModel> BankAccounts_GetBankAccountAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/bankaccounts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankAccountOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the BusinessUnits
		/// BusinessUnits_GetBusinessUnits v1/businessunits
		/// </summary>
		/// <param name="active">If not given, return all BusinessUnits, if given as true return only active BusinessUnits, if given as false returns only inactive BusinessUnits</param>
		/// <param name="companyGuid">Optional: ID of the company to which the business units belong.</param>
		/// <param name="companyCountryGuid">Optional: ID of the country in which the company of business units is located.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from business unit name.</param>
		/// <param name="changedSince">Optional: Get business units that have been added or changed after this date time (greater or equal).</param>
		/// <param name="code">Optional: Code of the business unit.</param>
		/// <param name="name">Optional: Name of the business unit.</param>
		/// <returns>All the BusinessUnits</returns>
		public async Task<BusinessUnitModel[]> BusinessUnits_GetBusinessUnitsAsync(bool active, string companyGuid, string companyCountryGuid, int firstRow, int rowCount, string textToSearch, System.DateTimeOffset changedSince, string code, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/businessunits?active="+active+"&companyGuid=" + (companyGuid==null? "" : System.Uri.EscapeDataString(companyGuid))+"&companyCountryGuid=" + (companyCountryGuid==null? "" : System.Uri.EscapeDataString(companyCountryGuid))+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessUnitModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get businessUnit by ID.
		/// BusinessUnits_GetBusinessUnit v1/businessunits/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the businessUnit.</param>
		/// <returns>BusinessUnit.</returns>
		public async Task<BusinessUnitModel> BusinessUnits_GetBusinessUnitAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/businessunits/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessUnitModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an businessUnit or a part of it.
		/// BusinessUnits_PatchBusinessUnit v1/businessunits/{guid}
		/// </summary>
		/// <param name="guid">ID of the businessUnit.</param>
		/// <param name="requestBody">JSON patch document of BusinessUnitModel.</param>
		/// <returns>List of updated business units.</returns>
		public async Task<BusinessUnitModel[]> BusinessUnits_PatchBusinessUnitAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/businessunits/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BusinessUnitModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all communication types.
		/// CommunicationTypes_GetCommunicationTypes v1/communicationtypes
		/// </summary>
		/// <param name="active">Filter the communication types. If true/false, only the active/inactive ones are returned. If null, all the communication types are returned.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from communication type name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".</param>
		/// <returns>Projects.</returns>
		public async Task<CommunicationTypeModel[]> CommunicationTypes_GetCommunicationTypesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/communicationtypes?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommunicationTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a communication type.
		/// CommunicationTypes_PostCommunicationType v1/communicationtypes
		/// </summary>
		/// <param name="requestBody">CommunicationTypeModel.</param>
		public async Task CommunicationTypes_PostCommunicationTypeAsync(CommunicationTypeModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/communicationtypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a communication type.
		/// Returns: No Content (204) if succeeded.
		/// CommunicationTypes_DeleteCommunicationType v1/communicationtypes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the communication type.</param>
		public async Task CommunicationTypes_DeleteCommunicationTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/communicationtypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get communication type by ID.
		/// CommunicationTypes_GetCommunicationType v1/communicationtypes/{guid}
		/// </summary>
		/// <param name="guid">ID used to get the communication type.</param>
		public async Task<CommunicationTypeModel> CommunicationTypes_GetCommunicationTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/communicationtypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommunicationTypeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a communication type or a part of it.
		/// CommunicationTypes_PatchCommunicationType v1/communicationtypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the communication type.</param>
		/// <param name="requestBody">JSON Patch document of CommunicationTypeModel.</param>
		/// <returns>Updated communication model.</returns>
		public async Task<CommunicationTypeModel[]> CommunicationTypes_PatchCommunicationTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/communicationtypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommunicationTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all contact communications.
		/// ContactCommunications_GetCommunications v1/contactcommunications
		/// </summary>
		/// <param name="active">If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from contact communication value.</param>
		/// <param name="changedSince">Optional: Get contact communications that have been added or changed after this date time (greater or equal).</param>
		/// <returns>All the contact communications.</returns>
		public async Task<ContactCommunicationModel[]> ContactCommunications_GetCommunicationsAsync(bool active, int firstRow, int rowCount, string textToSearch, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactcommunications?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactCommunicationModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a communication for a contact.
		/// ContactCommunications_PostContactCommunication v1/contactcommunications
		/// </summary>
		/// <param name="requestBody">ContactCommunicationModel.</param>
		public async Task ContactCommunications_PostContactCommunicationAsync(ContactCommunicationModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactcommunications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes contact's communication.
		/// Returns: No Content (204) if succeeded.
		/// ContactCommunications_DeleteContactCommunication v1/contactcommunications/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the contact's communication.</param>
		public async Task ContactCommunications_DeleteContactCommunicationAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactcommunications/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get contact communication by ID.
		/// ContactCommunications_GetCommunication v1/contactcommunications/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the contact communication.</param>
		/// <returns>Contact communication.</returns>
		public async Task<ContactCommunicationModel> ContactCommunications_GetCommunicationAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactcommunications/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactCommunicationModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a contact's communication or a part of it.
		/// ContactCommunications_PatchContactCommunication v1/contactcommunications/{guid}
		/// </summary>
		/// <param name="guid">ID of the contact's communication.</param>
		/// <param name="requestBody">JSON Patch document of ContactCommunicationModel.</param>
		/// <returns>Updated contact communication model.</returns>
		public async Task<ContactCommunicationModel> ContactCommunications_PatchContactCommunicationAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactcommunications/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactCommunicationModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the contact persons.
		/// Contacts_GetContacts v1/contactpersons
		/// </summary>
		/// <param name="active">If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from contact person's name or communication method (i.e. phone number or email address).</param>
		/// <param name="searchCriterias">Optional: Search criterias.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=FirstName&sortings[0].value=Desc &sortings[1].key=LastName&sortings[1].value=Asc".</param>
		/// <param name="changedSince">Optional: Get contact persons that have been added or changed after this date time (greater or equal).</param>
		/// <returns>List of contacts for a customer.</returns>
		public async Task<ContactModel[]> Contacts_GetContactsAsync(bool active, int firstRow, int rowCount, string textToSearch, KeyValuePairOfStringAndObject[] searchCriterias, KeyValuePairOfStringAndSortDirection[] sortings, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactpersons?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&"+string.Join("&", searchCriterias.Select(z => $"searchCriterias={z}"))+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a contact.
		/// Contacts_PostContact v1/contactpersons
		/// </summary>
		/// <param name="requestBody">ContactModel.</param>
		public async Task Contacts_PostContactAsync(ContactModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactpersons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get contact person's address
		/// Addresses_GetContactAddress v1/contactpersons/{contactGuid}/addresses
		/// </summary>
		/// <param name="contactGuid">ID for the contact person</param>
		public async Task<AddressModel[]> Addresses_GetContactAddressAsync(string contactGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactpersons/"+ (contactGuid==null? "" : System.Uri.EscapeDataString(contactGuid))+"/addresses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddressModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a contact.
		/// Returns: No Content (204) if succeeded.
		/// Contacts_DeleteContact v1/contactpersons/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the contact.</param>
		public async Task Contacts_DeleteContactAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactpersons/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get contact by ID.
		/// Contacts_GetContact v1/contactpersons/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the contact.</param>
		/// <returns>Contact.</returns>
		public async Task<ContactModel> Contacts_GetContactAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactpersons/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an contact or a part of it.
		/// Contacts_PatchContact v1/contactpersons/{guid}
		/// </summary>
		/// <param name="guid">ID of the contact.</param>
		/// <param name="requestBody">JSON patch document of ContactModel.</param>
		/// <returns>List of updated contact persons.</returns>
		public async Task<ContactModel[]> Contacts_PatchContactAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactpersons/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get contact roles.
		/// ContactRoles_GetContactRoles v1/contactroles
		/// </summary>
		/// <param name="active">If not given, return all contact roles, if given as true return only active contact roles, if given as false returns only inactive contact roles.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from contact role name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <returns>All the contact roles.</returns>
		public async Task<ContactRoleModel[]> ContactRoles_GetContactRolesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactroles?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactRoleModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a contact role.
		/// ContactRoles_PostContactRole v1/contactroles
		/// </summary>
		/// <param name="requestBody">ContactRoleModel.</param>
		public async Task ContactRoles_PostContactRoleAsync(ContactRoleModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactroles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a contact role.
		/// Returns: No Content (204) if succeeded. Not found (404) if contact role can't be found.
		/// ContactRoles_DeleteContactRole v1/contactroles/{guid}
		/// </summary>
		/// <param name="guid">ID for the contact role to delete.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the contact role to which to move usages of this contact role. Default null. If contact role is in use and usages aren't moved the deletion might fail.</param>
		public async Task ContactRoles_DeleteContactRoleAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactroles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get contact role by ID.
		/// ContactRoles_GetContactRole v1/contactroles/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the contact role.</param>
		/// <returns>ContactRoleModel.</returns>
		public async Task<ContactRoleModel> ContactRoles_GetContactRoleAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactroles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactRoleModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a contact role or a part of it.
		/// ContactRoles_PatchContactRole v1/contactroles/{guid}
		/// </summary>
		/// <param name="guid">ID of the contact role.</param>
		/// <param name="requestBody">JSON patch document of ContactRoleModel.</param>
		/// <returns>list of updated contact role.</returns>
		public async Task<ContactRoleModel[]> ContactRoles_PatchContactRoleAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactroles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactRoleModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all communications for a contact.
		/// ContactCommunications_GetCommunications2 v1/contacts/{contactGuid}/contactcommunications
		/// </summary>
		/// <param name="contactGuid">Whose communications are requested.</param>
		/// <param name="active">If not given, return all contact communications, if given as true return only active contact communications, if given as false returns only inactive contact communications.</param>
		/// <returns>All the contact communications.</returns>
		public async Task<ContactCommunicationModel[]> ContactCommunications_GetCommunications2Async(string contactGuid, bool active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contacts/"+ (contactGuid==null? "" : System.Uri.EscapeDataString(contactGuid))+"/contactcommunications&active="+active;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactCommunicationModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the keywords for contact.
		/// Keywords_GetContactKeywords v1/contacts/{contactGuid}/keywords
		/// </summary>
		/// <param name="contactGuid">ID of the user whose keywords are requested.</param>
		/// <param name="active">If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".</param>
		/// <returns>Keywords.</returns>
		public async Task<KeywordModel[]> Keywords_GetContactKeywordsAsync(string contactGuid, bool active, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contacts/"+ (contactGuid==null? "" : System.Uri.EscapeDataString(contactGuid))+"/keywords&active="+active+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a keyword from the contact
		/// Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found.
		/// Keywords_DeleteContactKeyword v1/contacts/{contactGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_DeleteContactKeywordAsync(string contactGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contacts/"+ (contactGuid==null? "" : System.Uri.EscapeDataString(contactGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Link existing keyword to contact
		/// Keywords_LinkKeywordToContact v1/contacts/{contactGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_LinkKeywordToContactAsync(string contactGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contacts/"+ (contactGuid==null? "" : System.Uri.EscapeDataString(contactGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cost accounts.
		/// CostAccounts_GetCostAccounts v1/costaccounts
		/// </summary>
		/// <param name="active">If not given, return all cost accounts, if given as true return only active cost accounts, if given as false returns only inactive cost accounts.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from cost account name or identifier.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc".</param>
		/// <returns>All the cost accounts.</returns>
		public async Task<CostAccountModel[]> CostAccounts_GetCostAccountsAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costaccounts?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CostAccountModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a cost account.
		/// CostAccounts_PostCostAccount v1/costaccounts
		/// </summary>
		/// <param name="requestBody">CostAccountModel.</param>
		public async Task CostAccounts_PostCostAccountAsync(CostAccountModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costaccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a cost account.
		/// Returns: No Content (204) if succeeded. Not found (404) if cost account can't be found.
		/// CostAccounts_DeleteCostAccount v1/costaccounts/{guid}
		/// </summary>
		/// <param name="guid">ID for the cost account to delete.</param>
		public async Task CostAccounts_DeleteCostAccountAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costaccounts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cost account by Guid.
		/// CostAccounts_GetCostAccount v1/costaccounts/{guid}
		/// </summary>
		/// <param name="guid">Cost account's guid.</param>
		/// <returns>CostAccountModel.</returns>
		public async Task<CostAccountModel> CostAccounts_GetCostAccountAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costaccounts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CostAccountModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a cost account or a part of it.
		/// CostAccounts_PatchCostAccount v1/costaccounts/{guid}
		/// </summary>
		/// <param name="guid">ID of the cost account.</param>
		/// <param name="requestBody">JSON patch document of CostAccountModel.</param>
		/// <returns>list of updated cost account.</returns>
		public async Task<CostAccountModel[]> CostAccounts_PatchCostAccountAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costaccounts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CostAccountModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get cost centers.
		/// CostCenters_GetCostCenters v1/costcenters
		/// </summary>
		/// <param name="active">If not given, return all cost centers, if given as true return only active cost centers, if given as false returns only inactive cost centers.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from cost center name or identifier.</param>
		/// <param name="changedSince">Optional: Get cost centers that have been added or changed after this date time (greater or equal).</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc".</param>
		/// <param name="identifier">Optional: Identifier of the cost center.</param>
		/// <param name="name">Optional: Name of the cost center.</param>
		/// <returns>All the cost centers.</returns>
		public async Task<CostCenterModel[]> CostCenters_GetCostCentersAsync(bool active, int firstRow, int rowCount, string textToSearch, System.DateTimeOffset changedSince, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, string identifier, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costcenters?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"))+"&identifier=" + (identifier==null? "" : System.Uri.EscapeDataString(identifier))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CostCenterModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a cost center.
		/// CostCenters_PostCostCenter v1/costcenters
		/// </summary>
		/// <param name="requestBody">CostCenterModel.</param>
		public async Task CostCenters_PostCostCenterAsync(CostCenterModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costcenters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a cost center.
		/// Returns: No Content (204) if succeeded. Not found (404) if cost center can't be found.
		/// CostCenters_DeleteCostCenter v1/costcenters/{guid}
		/// </summary>
		/// <param name="guid">ID for the cost center to delete.</param>
		public async Task CostCenters_DeleteCostCenterAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costcenters/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cost center by ID.
		/// CostCenters_GetCostCenter v1/costcenters/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the cost center.</param>
		/// <returns>CostCenterModel.</returns>
		public async Task<CostCenterModel> CostCenters_GetCostCenterAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costcenters/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CostCenterModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a cost center or a part of it.
		/// CostCenters_PatchCostCenter v1/costcenters/{guid}
		/// </summary>
		/// <param name="guid">ID of the cost center.</param>
		/// <param name="requestBody">JSON patch document of CostCenterModel.</param>
		/// <returns>list of updated cost center.</returns>
		public async Task<CostCenterModel[]> CostCenters_PatchCostCenterAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/costcenters/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CostCenterModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the Currencies
		/// Currencies_GetCurrencies v1/currencies
		/// </summary>
		/// <param name="active">If not given, return all Currencies, if given as true return only active Currencies, if given as false returns only inactive Currencies.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text based search applied to the result. Matches currency name and code.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc". Using additional sorting fields "CreatedDate" and / or "LastUpdatedDate" as keys sort currencies without a timestamp provided when sorting with other date fields.</param>
		/// <returns>All the Currencies</returns>
		public async Task<CurrencyOutputModel[]> Currencies_GetCurrenciesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/currencies?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CurrencyOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get currency by ID.
		/// Currencies_GetCurrency v1/currencies/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the currency.</param>
		/// <returns>CurrencyModel.</returns>
		public async Task<CurrencyOutputModel> Currencies_GetCurrencyAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/currencies/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CurrencyOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an currency or a part of it.
		/// Currencies_PatchCurrency v1/currencies/{guid}
		/// </summary>
		/// <param name="guid">ID of the currency.</param>
		/// <param name="requestBody">JSON patch document of CurrencyModel.</param>
		/// <returns>List of updated currencies.</returns>
		public async Task<CurrencyOutputModel[]> Currencies_PatchCurrencyAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/currencies/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CurrencyOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a customer country setting.
		/// CustomerCountrySettings_PostCustomerCountrySettings v1/customercountrysettings
		/// </summary>
		/// <param name="requestBody">CustomerCountrySettingsModel.</param>
		public async Task CustomerCountrySettings_PostCustomerCountrySettingsAsync(CustomerCountrySettingsInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customercountrysettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a customer country setting.
		/// Returns: No Content (204) if succeeded. Not found (404) if customer country setting can't be found.
		/// CustomerCountrySettings_DeleteCustomerCountrySetting v1/customercountrysettings/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the customer country setting.</param>
		public async Task CustomerCountrySettings_DeleteCustomerCountrySettingAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customercountrysettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a customer country setting.
		/// CustomerCountrySettings_PatchCustomerCountrySettings v1/customercountrysettings/{guid}
		/// </summary>
		/// <param name="guid">ID of the customer country setting.</param>
		/// <param name="requestBody">JSON patch document of CustomerCountrySettingsModel.</param>
		/// <returns>List of updated customer country settings.</returns>
		public async Task<CustomerCountrySettingsOutputModel[]> CustomerCountrySettings_PatchCustomerCountrySettingsAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customercountrysettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCountrySettingsOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all Customer Market Segments.
		/// CustomerMarketSegments_GetAllCustomerMarketSegments v1/customermarketsegments
		/// </summary>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from customer market segment name.</param>
		/// <param name="parentMarketSegmentGuid">Optional: Fetches all children of a parent based on parent market segment guid.</param>
		/// <param name="includeParentLevel">Optional: Returns only child segments when false. Has no effect if parentMarketSegmentGuid parameter is defined. Default = true.</param>
		/// <returns>List of Customer Market Segments.</returns>
		public async Task<CustomerMarketSegmentModel[]> CustomerMarketSegments_GetAllCustomerMarketSegmentsAsync(int firstRow, int rowCount, string textToSearch, string parentMarketSegmentGuid, bool includeParentLevel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customermarketsegments?firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&parentMarketSegmentGuid=" + (parentMarketSegmentGuid==null? "" : System.Uri.EscapeDataString(parentMarketSegmentGuid))+"&includeParentLevel="+includeParentLevel;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerMarketSegmentModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a market segment for customer.
		/// CustomerMarketSegments_PostCustomerMarketSegment v1/customermarketsegments
		/// </summary>
		/// <param name="requestBody">CustomerMarketSegmentModel.</param>
		public async Task CustomerMarketSegments_PostCustomerMarketSegmentAsync(CustomerMarketSegmentModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customermarketsegments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a customer market segment.
		/// Returns: No Content (204) if succeeded. Not found (404) if customer market segment can't be found.
		/// CustomerMarketSegments_DeleteCustomerMarketSegment v1/customermarketsegments/{guid}
		/// </summary>
		/// <param name="guid">ID for the customer market segment to delete.</param>
		public async Task CustomerMarketSegments_DeleteCustomerMarketSegmentAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customermarketsegments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the customer market segment.
		/// CustomerMarketSegments_GetCustomerMarketSegment v1/customermarketsegments/{guid}
		/// </summary>
		/// <param name="guid">Customer market segment guid.</param>
		/// <returns>List of Customer Market Segments.</returns>
		public async Task<CustomerMarketSegmentModel> CustomerMarketSegments_GetCustomerMarketSegmentAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customermarketsegments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerMarketSegmentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the customers
		/// Customers_GetCustomers v1/customers
		/// </summary>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="isActive">If not given, return all Customers, if given as true return only active Customers, if given as false returns only inactive Customers.</param>
		/// <param name="customerOwnerGuids">Optional: List of customer owner ids to search for. Default all.</param>
		/// <param name="isInternal">Optional: When true returns only internal customer</param>
		/// <param name="numbers">Optional: List of customer numbers.</param>
		/// <param name="changedSince">Optional: Get customers that have been added or changed after this date time (greater or equal).</param>
		/// <param name="emailAddresses">Optional: Get customers where email address matches to any provided email address</param>
		/// <param name="customerNames">Optional: Get customers where customer name matches to any provided customer name</param>
		/// <returns>All the customers</returns>
		public async Task<CustomerModel[]> Customers_GetCustomersAsync(string pageToken, int rowCount, bool isActive, string[] customerOwnerGuids, bool isInternal, int[] numbers, System.DateTimeOffset changedSince, string[] emailAddresses, string[] customerNames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isActive="+isActive+"&"+string.Join("&", customerOwnerGuids.Select(z => $"customerOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&isInternal="+isInternal+"&"+string.Join("&", numbers.Select(z => $"numbers={z}"))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", emailAddresses.Select(z => $"emailAddresses={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", customerNames.Select(z => $"customerNames={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a customer.
		/// Customers_PostCustomer v1/customers
		/// </summary>
		/// <param name="requestBody">CustomerModel.</param>
		public async Task Customers_PostCustomerAsync(CustomerModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the customer custom properties.
		/// CustomerCustomProperties_GetCustomerCustomProperties v1/customers/customproperties
		/// </summary>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="active">Optional: Get only active or inactive customer properties.</param>
		/// <param name="textToSearch">Optional: Text to search from custom property name.</param>
		/// <param name="isInUse">Optional: Is the customer property used in any custom property usage.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".</param>
		public async Task<CustomPropertyModel[]> CustomerCustomProperties_GetCustomerCustomPropertiesAsync(int firstRow, int rowCount, bool active, string textToSearch, bool isInUse, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties?firstRow="+firstRow+"&rowCount="+rowCount+"&active="+active+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&isInUse="+isInUse+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomPropertyModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a customer custom property.
		/// CustomerCustomProperties_PostCustomerCustomProperty v1/customers/customproperties
		/// </summary>
		/// <param name="requestBody">CustomerCustomPropertyModel.</param>
		public async Task CustomerCustomProperties_PostCustomerCustomPropertyAsync(CustomPropertyModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a customer custom property selection item.
		/// CustomerCustomPropertySelectionItems_PostCustomerCustomPropertySelectionItem v1/customers/customproperties/customercustompropertyselectionitems
		/// </summary>
		/// <param name="requestBody">CustomPropertySelectionItemInputModel.</param>
		public async Task CustomerCustomPropertySelectionItems_PostCustomerCustomPropertySelectionItemAsync(CustomerCustomPropertySelectionItemInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/customercustompropertyselectionitems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a customer custom property selection item.
		/// Returns: No Content (204) if succeeded.
		/// CustomerCustomPropertySelectionItems_DeleteCustomerCustomPropertySelectionItem v1/customers/customproperties/customercustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the customer custom property selection item.</param>
		public async Task CustomerCustomPropertySelectionItems_DeleteCustomerCustomPropertySelectionItemAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/customercustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer custom property selection item by ID.
		/// CustomerCustomPropertySelectionItems_GetCustomerCustomPropertySelectionItem v1/customers/customproperties/customercustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the customer custom property selection item.</param>
		public async Task<CustomerCustomPropertySelectionItemOutputModel> CustomerCustomPropertySelectionItems_GetCustomerCustomPropertySelectionItemAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/customercustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCustomPropertySelectionItemOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a customer custom property selection item or a part of it.
		/// CustomerCustomPropertySelectionItems_PatchCustomerCustomPropertySelectionItem v1/customers/customproperties/customercustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">ID of the customer custom property selection item.</param>
		/// <param name="requestBody">JSON Patch document of CustomerCustomPropertySelectionItemInputModel.</param>
		/// <returns>List of updated customer custom properties.</returns>
		public async Task<CustomerCustomPropertySelectionItemOutputModel[]> CustomerCustomPropertySelectionItems_PatchCustomerCustomPropertySelectionItemAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/customercustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCustomPropertySelectionItemOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the customer custom properties.
		/// CustomerCustomPropertySelectionItems_GetCustomerCustomPropertySelectionItems v1/customers/customproperties/{customPropertyGuid}/customercustompropertyselectionitems
		/// </summary>
		/// <param name="customPropertyGuid">Custom property id used to get the customer custom property selection items.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isActive">Optional: Get only active or inactive selection items.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="changedSince">Optional: Get custom property selection items that have been added or changed after this date time (greater or equal).</param>
		public async Task<CustomerCustomPropertySelectionItemOutputModel[]> CustomerCustomPropertySelectionItems_GetCustomerCustomPropertySelectionItemsAsync(string customPropertyGuid, int rowCount, bool isActive, string pageToken, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/"+ (customPropertyGuid==null? "" : System.Uri.EscapeDataString(customPropertyGuid))+"/customercustompropertyselectionitems&rowCount="+rowCount+"&isActive="+isActive+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCustomPropertySelectionItemOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a customer custom property.
		/// Returns: No Content (204) if succeeded.
		/// CustomerCustomProperties_DeleteCustomerCustomProperty v1/customers/customproperties/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the customer custom property.</param>
		public async Task CustomerCustomProperties_DeleteCustomerCustomPropertyAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer custom property by ID.
		/// CustomerCustomProperties_GetCustomerCustomProperty v1/customers/customproperties/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the customer custom property.</param>
		public async Task<CustomPropertyModel> CustomerCustomProperties_GetCustomerCustomPropertyAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomPropertyModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a customer custom property or a part of it.
		/// CustomerCustomProperties_PatchCustomerCustomProperty v1/customers/customproperties/{guid}
		/// </summary>
		/// <param name="guid">ID of the customer custom property Can also be comma separate list of IDs to patch multiple customer custom properties with one call. When multiple IDs are given, returns model which has list of succeeded customer custom properties and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of CustomerCustomPropertyModel.</param>
		/// <returns>List of updated customer custom properties.</returns>
		public async Task<CustomPropertyModel[]> CustomerCustomProperties_PatchCustomerCustomPropertyAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomPropertyModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a customer custom value.
		/// CustomerCustomValues_PostCustomerCustomValue v1/customers/customvalues
		/// </summary>
		/// <param name="requestBody">CustomerCustomValueModel.</param>
		public async Task CustomerCustomValues_PostCustomerCustomValueAsync(CustomerCustomValueModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customvalues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a customer custom value.
		/// Returns: No Content (204) if succeeded.
		/// CustomerCustomValues_DeleteCustomerCustomValue v1/customers/customvalues/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the customer custom value.</param>
		public async Task CustomerCustomValues_DeleteCustomerCustomValueAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer custom value by ID.
		/// CustomerCustomValues_GetCustomerCustomValue v1/customers/customvalues/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the customer custom value.</param>
		public async Task<CustomerCustomValueModel> CustomerCustomValues_GetCustomerCustomValueAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCustomValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a customer custom value or a part of it.
		/// CustomerCustomValues_PatchCustomerCustomValue v1/customers/customvalues/{guid}
		/// </summary>
		/// <param name="guid">ID of the customer custom value Can also be comma separate list of IDs to patch multiple customer custom values with one call. When multiple IDs are given, returns model which has list of succeeded customer custom values and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of CustomerCustomValueModel.</param>
		/// <returns>List of updated customer custom values.</returns>
		public async Task<CustomerCustomValueModel[]> CustomerCustomValues_PatchCustomerCustomValueAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCustomValueModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get customer's addresses
		/// Addresses_GetCustomerAddresses v1/customers/{customerGuid}/addresses
		/// </summary>
		/// <param name="customerGuid">ID for the customer.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <returns>Addresses for the customer</returns>
		public async Task<AddressModel[]> Addresses_GetCustomerAddressesAsync(string customerGuid, int firstRow, int rowCount, bool calculateRowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/addresses&firstRow="+firstRow+"&rowCount="+rowCount+"&calculateRowCount="+calculateRowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddressModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert an address.
		/// Addresses_PostCustomerAddress v1/customers/{customerGuid}/addresses
		/// </summary>
		/// <param name="customerGuid">ID of the customer to add the address for.</param>
		/// <param name="requestBody">AddressModel.</param>
		public async Task Addresses_PostCustomerAddressAsync(string customerGuid, AddressModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/addresses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the contact persons for a customer.
		/// Contacts_GetCustomerContacts v1/customers/{customerGuid}/contactpersons
		/// </summary>
		/// <param name="customerGuid">Customer guid used to get the contact persons.</param>
		/// <param name="active">If not given, return all Contact persons, if given as true return only active Contact persons, if given as false returns only inactive Contact persons.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from contact person's name or communication method (i.e. phone number or email address).</param>
		/// <returns>List of contacts for a customer.</returns>
		public async Task<ContactModel[]> Contacts_GetCustomerContactsAsync(string customerGuid, bool active, int firstRow, int rowCount, string textToSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/contactpersons&active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the country settings for a customer.
		/// CustomerCountrySettings_GetCustomerCountrySettings v1/customers/{customerGuid}/customercountrysettings
		/// </summary>
		/// <param name="customerGuid">GUID of the customer.</param>
		/// <returns>All the Currencies.</returns>
		public async Task<CustomerCountrySettingsOutputModel[]> CustomerCountrySettings_GetCustomerCountrySettingsAsync(string customerGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/customercountrysettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCountrySettingsOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Market Segments for a customer.
		/// CustomerMarketSegments_GetCustomerMarketSegments v1/customers/{customerGuid}/customermarketsegments
		/// </summary>
		/// <param name="customerGuid">ID of the customer.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="includeMarketSegmentsFromRegistry">Optional: Return also the markets segments that are not in use for the customer.</param>
		/// <returns>List of Customer Market Segments.</returns>
		public async Task<CustomerMarketSegmentModel[]> CustomerMarketSegments_GetCustomerMarketSegmentsAsync(string customerGuid, int firstRow, int rowCount, bool includeMarketSegmentsFromRegistry, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/customermarketsegments&firstRow="+firstRow+"&rowCount="+rowCount+"&includeMarketSegmentsFromRegistry="+includeMarketSegmentsFromRegistry;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerMarketSegmentModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the customer sales notes.
		/// SalesNotes_GetCustomerSalesNotes v1/customers/{customerGuid}/customersalesnotes
		/// </summary>
		/// <param name="customerGuid">Customer guid used to get the notes.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get sales notes that have been added or changed after this date time (greater or equal).</param>
		/// <returns>List of sales notes for a customer.</returns>
		public async Task<CustomerSalesNoteOutputModel[]> SalesNotes_GetCustomerSalesNotesAsync(string customerGuid, string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/customersalesnotes&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerSalesNoteOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the customer custom values.
		/// CustomerCustomValues_GetCustomerCustomValues v1/customers/{customerGuid}/customvalues
		/// </summary>
		/// <param name="customerGuid">ID of the customer.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="active">Optional: Get only values of active or inactive customer custom properties.</param>
		/// <param name="target">List of target for which to get the values.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".</param>
		public async Task<CustomerCustomValueModel[]> CustomerCustomValues_GetCustomerCustomValuesAsync(string customerGuid, int firstRow, int rowCount, bool active, string[] target, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/customvalues&firstRow="+firstRow+"&rowCount="+rowCount+"&active="+active+"&"+string.Join("&", target.Select(z => $"target={System.Uri.EscapeDataString(z.ToString())}"))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCustomValueModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer's projects
		/// Projects_GetCustomerProjects v1/customers/{customerGuid}/projects
		/// </summary>
		/// <param name="customerGuid">Id of the customer.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isBillable">Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all.</param>
		/// <returns>All the projects for the customer</returns>
		public async Task<ProjectOutputModel[]> Projects_GetCustomerProjectsAsync(
					string customerGuid, 
					string pageToken, 
					int rowCount, 
					bool isBillable, 
					string[] currencyGuids, 
					string[] projectGuids, 
					string[] projectKeywordGuids, 
					string[] projectStatusTypeGuids, 
					string[] salesPersonGuids, 
					string[] projectOwnerGuids, 
					string[] businessUnitGuids, 
					double minimumBillableAmount, 
					string[] customerOwnerGuids, 
					System.DateTimeOffset invoiceableDate, 
					string[] marketSegmentationGuids, 
					string[] salesStatusTypeGuids, 
					bool isClosed, 
					bool hasRecurringFees, 
					string[] companyCurrencyGuids, 
					string[] projectMemberUserGuids, 
					int[] numbers, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/projects&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isBillable="+isBillable+"&"+string.Join("&", currencyGuids.Select(z => $"currencyGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectKeywordGuids.Select(z => $"projectKeywordGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectStatusTypeGuids.Select(z => $"projectStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesPersonGuids.Select(z => $"salesPersonGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectOwnerGuids.Select(z => $"projectOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", businessUnitGuids.Select(z => $"businessUnitGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&minimumBillableAmount="+minimumBillableAmount+"&"+string.Join("&", customerOwnerGuids.Select(z => $"customerOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&invoiceableDate=" + invoiceableDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", marketSegmentationGuids.Select(z => $"marketSegmentationGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesStatusTypeGuids.Select(z => $"salesStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&isClosed="+isClosed+"&hasRecurringFees="+hasRecurringFees+"&"+string.Join("&", companyCurrencyGuids.Select(z => $"companyCurrencyGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectMemberUserGuids.Select(z => $"projectMemberUserGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", numbers.Select(z => $"numbers={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sales notes by customer guid.
		/// SalesNotes_GetAllCustomerSalesNotes v1/customers/{customerGuid}/salesnotes
		/// </summary>
		/// <param name="customerGuid">Customer guid used to get the notes.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get sales notes that have been added or changed after this date time (greater or equal).</param>
		/// <returns>List of sales notes for a customer.</returns>
		public async Task<SalesNoteOutputModel[]> SalesNotes_GetAllCustomerSalesNotesAsync(string customerGuid, string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (customerGuid==null? "" : System.Uri.EscapeDataString(customerGuid))+"/salesnotes&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesNoteOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a customer.
		/// Returns: No Content (204) if succeeded.
		/// Customers_DeleteCustomer v1/customers/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the customer.</param>
		public async Task Customers_DeleteCustomerAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer by GUID.
		/// Customers_GetCustomer v1/customers/{guid}
		/// </summary>
		/// <param name="guid">ID used to get the customer.</param>
		public async Task<CustomerModel> Customers_GetCustomerAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an customer or a part of it.
		/// Customers_PatchCustomer v1/customers/{guid}
		/// </summary>
		/// <param name="guid">ID of the customer.</param>
		/// <param name="requestBody">JSON patch document of CustomerModel.</param>
		/// <returns>List of updated customers.</returns>
		public async Task<CustomerModel[]> Customers_PatchCustomerAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a customer sales note.
		/// SalesNotes_PostCustomerSalesNotes v1/customersalesnotes
		/// </summary>
		/// <param name="requestBody">SalesNoteOutputModel</param>
		public async Task SalesNotes_PostCustomerSalesNotesAsync(CustomerSalesNoteInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customersalesnotes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a customer sales note.
		/// Returns: No Content (204) if succeeded. OK (200) if note has child notes and can't be deleted. It is marked as IsDeleted = true. Not found (404) if note can't be found.
		/// SalesNotes_DeleteCustomerSalesNote v1/customersalesnotes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the customer sales note.</param>
		public async Task SalesNotes_DeleteCustomerSalesNoteAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customersalesnotes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer sales note by ID.
		/// SalesNotes_GetCustomerSalesNote v1/customersalesnotes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the customer sales note.</param>
		/// <returns>ProjectNote</returns>
		public async Task<CustomerSalesNoteOutputModel> SalesNotes_GetCustomerSalesNoteAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customersalesnotes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerSalesNoteOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a customer sales note or a part of it.
		/// SalesNotes_PatchCustomerSalesNote v1/customersalesnotes/{guid}
		/// </summary>
		/// <param name="guid">ID of the customer sales note.</param>
		/// <param name="requestBody">JSON patch document of customer sales note model.</param>
		/// <returns>list of updated sales notes.</returns>
		public async Task<CustomerSalesNoteOutputModel[]> SalesNotes_PatchCustomerSalesNoteAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customersalesnotes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerSalesNoteOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all deleted phase members
		/// Use root phase to get project members.
		/// PhaseMembers_GetAllDeletedPhaseMembers v1/deletedphasemembers
		/// </summary>
		/// <param name="deletedSince">Optional: Get phase members that have been added or changed after this date time (greater or equal).</param>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="isUserActive">Optional: Is the user active. Default nothing = all.</param>
		/// <returns>All the phase members</returns>
		public async Task<DeletedPhaseMemberOutputModel[]> PhaseMembers_GetAllDeletedPhaseMembersAsync(System.DateTimeOffset deletedSince, string pageToken, int rowCount, bool isUserActive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/deletedphasemembers?deletedSince=" + deletedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isUserActive="+isUserActive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletedPhaseMemberOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the deleted project fees.
		/// ProjectFees_GetDeletedProjectFees v1/deletedprojectfees
		/// </summary>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="projectGuids">Optional: ID of the project for the deleted project fees to be fetched. If not provided, returns for all projects. Default all.</param>
		/// <param name="userGuids">Optional: ID of the user. If not provided, returns for all users. Default all.</param>
		/// <param name="deletedSince">Optional: Get project fees that have been deleted after this date time (greater or equal).</param>
		public async Task<DeletedProjectFeeModel[]> ProjectFees_GetDeletedProjectFeesAsync(string pageToken, int rowCount, string[] projectGuids, string[] userGuids, System.DateTimeOffset deletedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/deletedprojectfees?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", userGuids.Select(z => $"userGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&deletedSince=" + deletedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletedProjectFeeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the deleted project travel expenses.
		/// ProjectTravelExpenses_GetDeletedProjectTravelExpenses v1/deletedprojecttravelexpenses
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="projectGuid">Optional: ID of the project for the deleted project travel expenses to be fetched. If not provided, returns for all projects. Default all.</param>
		/// <param name="userGuid">Optional: ID of the user. If not provided, returns for all users. Default all.</param>
		/// <param name="deletedSince">Optional: Get project travel expenses that have been deleted after this date time (greater or equal).</param>
		public async Task<DeletedProjectTravelExpenseModel[]> ProjectTravelExpenses_GetDeletedProjectTravelExpensesAsync(string pageToken, int rowCount, string[] projectGuid, string[] userGuid, System.DateTimeOffset deletedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/deletedprojecttravelexpenses?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&"+string.Join("&", projectGuid.Select(z => $"projectGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", userGuid.Select(z => $"userGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&deletedSince=" + deletedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletedProjectTravelExpenseModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the deleted work hours.
		/// WorkHours_GetDeletedWorkHours v1/deletedworkhours
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="projectGuids">Optional: ID of the project for the deleted work hours to be fetched. If not provided, returns for all projects. Default all.</param>
		/// <param name="userGuids">Optional: ID of the user. If not provided, returns for all users. Default all.</param>
		/// <param name="deletedSince">Optional: Get work hours that have been deleted after this date time (greater or equal).</param>
		public async Task<DeletedWorkHourModel[]> WorkHours_GetDeletedWorkHoursAsync(string pageToken, int rowCount, string[] projectGuids, string[] userGuids, System.DateTimeOffset deletedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/deletedworkhours?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", userGuids.Select(z => $"userGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&deletedSince=" + deletedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletedWorkHourModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the keywords for file.
		/// Keywords_GetFileKeywords v1/files/{fileGuid}/keywords
		/// </summary>
		/// <param name="fileGuid">ID of the file for which keywords are requested.</param>
		/// <param name="active">If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".</param>
		/// <returns>Keywords.</returns>
		public async Task<FileKeywordModel[]> Keywords_GetFileKeywordsAsync(string fileGuid, bool active, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/files/"+ (fileGuid==null? "" : System.Uri.EscapeDataString(fileGuid))+"/keywords&active="+active+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FileKeywordModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a keyword from the file
		/// Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found.
		/// Keywords_DeleteFileKeyword v1/files/{fileGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_DeleteFileKeywordAsync(string fileGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/files/"+ (fileGuid==null? "" : System.Uri.EscapeDataString(fileGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Link existing keyword to file
		/// Keywords_LinkKeywordToFile v1/files/{fileGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_LinkKeywordToFileAsync(string fileGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/files/"+ (fileGuid==null? "" : System.Uri.EscapeDataString(fileGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get file by ID.
		/// Files_GetFile v1/files/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the file.</param>
		/// <param name="includeDataInResponse">Is data included in response as base64 string.</param>
		/// <returns>File.</returns>
		public async Task<FileModel> Files_GetFileAsync(string guid, bool includeDataInResponse, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/files/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&includeDataInResponse="+includeDataInResponse;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FileModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get file data by ID.
		/// Returns binary data, which contains content with type given in Content-Type header.
		/// FileData_GetDataForFile v1/files/{guid}/filedata
		/// </summary>
		/// <param name="guid">GUID used to get the file.</param>
		/// <returns>Get file data by ID</returns>
		public async Task FileData_GetDataForFileAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/files/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/filedata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all flat rates
		/// FlatRates_GetAllFlatRates v1/flatrates
		/// </summary>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get flat rates that have been added or changed after this date time (greater or equal).</param>
		/// <param name="invoiceGuid">Optional: Get flat rates by invoice guid. Default all.</param>
		/// <returns>All the flat rates</returns>
		public async Task<FlatRateOutputModel[]> FlatRates_GetAllFlatRatesAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, string invoiceGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flatrates?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&invoiceGuid=" + (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlatRateOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a flat rate.
		/// FlatRates_PostFlatRate v1/flatrates
		/// </summary>
		/// <param name="requestBody">FlatRateModel.</param>
		public async Task FlatRates_PostFlatRateAsync(FlatRateInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flatrates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a flat rate of a phase.
		/// Returns: No Content (204) if succeeded.
		/// FlatRates_DeleteFlatRate v1/flatrates/{guid}
		/// </summary>
		/// <param name="guid">ID of flat rate.</param>
		public async Task FlatRates_DeleteFlatRateAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flatrates/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get flat rate.
		/// FlatRates_GetFlatrate v1/flatrates/{guid}
		/// </summary>
		/// <param name="guid">Id of the flat rate.</param>
		/// <returns>FlatRateModel.</returns>
		public async Task<FlatRateOutputModel[]> FlatRates_GetFlatrateAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flatrates/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlatRateOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a flat rate or a part of it.
		/// FlatRates_PatchFlatRate v1/flatrates/{guid}
		/// </summary>
		/// <param name="guid">ID of the flat rate.</param>
		/// <param name="requestBody">JSON Patch document of FlatRateModel.</param>
		/// <returns>list of updated flat rates.</returns>
		public async Task<FlatRateOutputModel[]> FlatRates_PatchFlatRateAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flatrates/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlatRateOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a flextime adjustment.
		/// FlextimeAdjustments_PostFlextimeAdjustment v1/flextimeadjustments
		/// </summary>
		/// <param name="requestBody">FlextimeAdjustmentInputModel.</param>
		public async Task FlextimeAdjustments_PostFlextimeAdjustmentAsync(FlextimeAdjustmentInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flextimeadjustments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an flextime adjustment.
		/// Returns: No Content (204) if succeeded. Not found (404) if flextime adjustment can't be found.
		/// FlextimeAdjustments_DeleteFlextimeAdjustment v1/flextimeadjustments/{guid}
		/// </summary>
		/// <param name="guid">ID for the flextime adjustment to delete.</param>
		public async Task FlextimeAdjustments_DeleteFlextimeAdjustmentAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flextimeadjustments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Flextime Adjustment by ID.
		/// FlextimeAdjustments_GetFlextimeAdjustment v1/flextimeadjustments/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Flextime Adjustment.</param>
		/// <returns>Flextime Adjustment.</returns>
		public async Task<FlextimeAdjustmentOutputModel> FlextimeAdjustments_GetFlextimeAdjustmentAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flextimeadjustments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlextimeAdjustmentOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an Flextime Adjustment or a part of it.
		/// FlextimeAdjustments_PatchFlextimeAdjustment v1/flextimeadjustments/{guid}
		/// </summary>
		/// <param name="guid">ID of the Flextime Adjustment.</param>
		/// <param name="requestBody">JSON patch document of FlextimeAdjustmentInputModel.</param>
		/// <returns>Updated Flextime Adjustment.</returns>
		public async Task<FlextimeAdjustmentOutputModel[]> FlextimeAdjustments_PatchFlextimeAdjustmentAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/flextimeadjustments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlextimeAdjustmentOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get holidays.
		/// Holidays_GetHolidays v1/holidays
		/// </summary>
		/// <param name="year">Optional: Holidays for this year only. Default: all years.</param>
		/// <param name="countryGuid">Optional: Holidays for this country only. Default local.</param>
		/// <returns>List of holidays. </returns>
		public async Task<HolidayModel[]> Holidays_GetHolidaysAsync(int year, string countryGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/holidays?year="+year+"&countryGuid=" + (countryGuid==null? "" : System.Uri.EscapeDataString(countryGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HolidayModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holidays with start and end date.
		/// Holidays_GetHolidaysByTimePeriod v1/holidaysbytimeperiod
		/// </summary>
		/// <param name="startDate">Start date for holidays.</param>
		/// <param name="endDate">End date for holidays.</param>
		/// <param name="countryGuid">Optional: Holidays for this country only. Default local.</param>
		/// <returns>List of holidays. </returns>
		public async Task<HolidayModel[]> Holidays_GetHolidaysByTimePeriodAsync(System.DateTimeOffset startDate, System.DateTimeOffset endDate, string countryGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/holidaysbytimeperiod?startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&countryGuid=" + (countryGuid==null? "" : System.Uri.EscapeDataString(countryGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HolidayModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the industries.
		/// Industries_GetIndustries v1/industries
		/// </summary>
		/// <param name="active">If not given, return all industries, if given as true return only active industries, if given as false returns only inactive industries.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from industry name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <returns>All the industries.</returns>
		public async Task<IndustryModel[]> Industries_GetIndustriesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/industries?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IndustryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert an industry.
		/// Industries_PostIndustry v1/industries
		/// </summary>
		/// <param name="requestBody">IndustryModel.</param>
		public async Task Industries_PostIndustryAsync(IndustryModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/industries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an industry.
		/// Returns: No Content (204) if succeeded. Not found (404) if industry can't be found.
		/// Industries_DeleteIndustry v1/industries/{guid}
		/// </summary>
		/// <param name="guid">ID for the industry to delete.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the industry to which to move usages of this industry. Default null. If industry is in use and usages aren't moved the deletion might fail.</param>
		public async Task Industries_DeleteIndustryAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/industries/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get industry by ID.
		/// Industries_GetIndustry v1/industries/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the industry.</param>
		/// <returns>Industry.</returns>
		public async Task<IndustryModel> Industries_GetIndustryAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/industries/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IndustryModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an industry or a part of it.
		/// Industries_PatchIndustry v1/industries/{guid}
		/// </summary>
		/// <param name="guid">ID of the industry.</param>
		/// <param name="requestBody">JSON Patch document of IndustryModel.</param>
		/// <returns>list of updated industries.</returns>
		public async Task<IndustryModel[]> Industries_PatchIndustryAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/industries/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IndustryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Visma.net Financials integration company information.
		/// Organizations_GetVismaFinancialsCompanyInfo v1/integrations/vismafinancials/companyinformation
		/// </summary>
		/// <returns>VismaFinancialsCompanyModel.</returns>
		public async Task<VismaFinancialsCompanyModel> Organizations_GetVismaFinancialsCompanyInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/integrations/vismafinancials/companyinformation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VismaFinancialsCompanyModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invoice file by ID.
		/// Files_GetInvoiceFile v1/invoicefiles/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the invoice file.</param>
		/// <returns>InvoiceFile.</returns>
		public async Task<InvoiceFileModel> Files_GetInvoiceFileAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicefiles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceFileModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invoice rows
		/// InvoiceRows_GetInvoiceRows v1/invoicerows
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get invoice rows that have been added or changed after this date time (greater or equal).</param>
		public async Task<InvoiceRowOutputModel[]> InvoiceRows_GetInvoiceRowsAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an invoice row
		/// Returns: No Content (204) if succeeded.
		/// InvoiceRows_DeleteInvoiceRow v1/invoicerows/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the invoice row.</param>
		public async Task InvoiceRows_DeleteInvoiceRowAsync(string guid, bool setAsNonBillable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&setAsNonBillable="+setAsNonBillable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invoice row by ID
		/// InvoiceRows_GetInvoiceRow v1/invoicerows/{guid}
		/// </summary>
		/// <param name="guid">GUID of the invoice row.</param>
		/// <returns>Invoice row</returns>
		public async Task<InvoiceRowOutputModel> InvoiceRows_GetInvoiceRowAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceRowOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a invoice row or a part of it
		/// If CostCenterNumber, SalesAccountNumber or RecurringSalesAccountNumber are changed and the invoice row is related to one or many ProjectFees or ProjectTravelExpenses, the values for those will also be updated.
		/// InvoiceRows_PatchInvoiceRow v1/invoicerows/{guid}
		/// </summary>
		/// <param name="guid">ID of the invoice row</param>
		/// <param name="requestBody">JSON Patch document of InvoiceRowModel</param>
		/// <returns>List of updated invoice rows</returns>
		public async Task<InvoiceRowOutputModel[]> InvoiceRows_PatchInvoiceRowAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the project fees on an invoice row
		/// ProjectFees_GetInvoiceRowProjectFees v1/invoicerows/{invoiceRowGuid}/projectfees
		/// </summary>
		/// <param name="invoiceRowGuid">ID of the invoice row.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="productType">Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting</param>
		/// <returns>ProjectFees</returns>
		public async Task<ProjectFeeOutputModel[]> ProjectFees_GetInvoiceRowProjectFeesAsync(string invoiceRowGuid, string pageToken, int rowCount, ProductOutputModelType productType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (invoiceRowGuid==null? "" : System.Uri.EscapeDataString(invoiceRowGuid))+"/projectfees&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&productType=" + productType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project travel expenses on an invoice row
		/// ProjectTravelExpenses_GetInvoiceRowProjectTravelExpenses v1/invoicerows/{invoiceRowGuid}/projecttravelexpenses
		/// </summary>
		/// <param name="invoiceRowGuid">ID of the invoice row.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="expenseClass">Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense</param>
		/// <returns>ProjectTravelExpenseOutputModel</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_GetInvoiceRowProjectTravelExpensesAsync(string invoiceRowGuid, string pageToken, int rowCount, ExpensesClass expenseClass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (invoiceRowGuid==null? "" : System.Uri.EscapeDataString(invoiceRowGuid))+"/projecttravelexpenses&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&expenseClass=" + expenseClass;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project fees on an invoice row
		/// ReimbursedProjectFees_GetInvoiceRowReimbursedProjectFees v1/invoicerows/{invoiceRowGuid}/reimbursedprojectfees
		/// </summary>
		/// <param name="invoiceRowGuid">ID of the invoice row.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <returns>ReimbursedProjectFee</returns>
		public async Task<ReimbursedProjectFeeOutputModel[]> ReimbursedProjectFees_GetInvoiceRowReimbursedProjectFeesAsync(string invoiceRowGuid, int rowCount, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (invoiceRowGuid==null? "" : System.Uri.EscapeDataString(invoiceRowGuid))+"/reimbursedprojectfees&rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReimbursedProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project travel expenses on an invoice row.
		/// ReimbursedProjectTravelExpenses_GetInvoiceRowProjectTravelExpenses v1/invoicerows/{invoiceRowGuid}/reimbursedprojecttravelexpenses
		/// </summary>
		/// <param name="invoiceRowGuid">ID of the invoice row.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="textToSearch">Searched string: part of name or description.</param>
		/// <param name="calculateRowCount">Optional. If true, calculates the total count of project fees. Default false.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".</param>
		/// <returns>ReimbursedProjectTravelExpenses.</returns>
		public async Task<ReimbursedProjectTravelExpenseOutputModel[]> ReimbursedProjectTravelExpenses_GetInvoiceRowProjectTravelExpensesAsync(string invoiceRowGuid, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (invoiceRowGuid==null? "" : System.Uri.EscapeDataString(invoiceRowGuid))+"/reimbursedprojecttravelexpenses&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReimbursedProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all reimbursed hours on an invoice row.
		/// ReimbursedWorkHours_GetInvoiceRowReimbursedWorkHours v1/invoicerows/{invoiceRowGuid}/reimbursedworkhours
		/// </summary>
		/// <param name="invoiceRowGuid">ID of the invoice row.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from description or invoice description.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc".</param>
		/// <returns>ReimbursedWorkHour.</returns>
		public async Task<ReimbursedWorkHourOutputModel[]> ReimbursedWorkHours_GetInvoiceRowReimbursedWorkHoursAsync(string invoiceRowGuid, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (invoiceRowGuid==null? "" : System.Uri.EscapeDataString(invoiceRowGuid))+"/reimbursedworkhours&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReimbursedWorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the work hours on an invoice row
		/// WorkHours_GetInvoiceRowWorkHours v1/invoicerows/{invoiceRowGuid}/workhours
		/// </summary>
		/// <param name="invoiceRowGuid">ID of the invoice row.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>WorkHours</returns>
		public async Task<WorkHourOutputModel[]> WorkHours_GetInvoiceRowWorkHoursAsync(string invoiceRowGuid, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicerows/"+ (invoiceRowGuid==null? "" : System.Uri.EscapeDataString(invoiceRowGuid))+"/workhours&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Invoices
		/// Invoices_GetInvoices v1/invoices
		/// </summary>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="paymentDateStart">Optional: Get only invoices paid at this date or later. Default: Get invoices regardless of payment date.</param>
		/// <param name="invoiceStatusGuids">Optional: Get invoices with this status only. Default: all statuses.</param>
		/// <param name="projectGuids">Optional: ID of the project to get the invoices. If not provided, returns for all projects. Default all.</param>
		/// <param name="projectOwnerGuids">Optional: ID of the project manager to get the invoices for. If not provided, returns for all project managers. Default all.</param>
		/// <param name="projectBusinessUnitGuids">Optional: ID of the business unit of the project. If not provided, returns for all business units. Default all.</param>
		/// <param name="customerGuids">Optional: List of customer IDs. Get invoices for these customers.</param>
		/// <param name="startDate">Optional: starting date from which to get the invoices. Default all.</param>
		/// <param name="endDate">Optional: end date from which to get the invoices. Default all.</param>
		/// <param name="minimumTotalExcludingTax">Optional: specifies minimum value for invoice total in organization currency.</param>
		/// <param name="maximumTotalExcludingTax">Optional: specifies maximum value for invoice total in organization currency.</param>
		/// <param name="referenceNumbers">Optional: Invoice reference number. If not provided, returns invoices with any invoice reference number.</param>
		/// <param name="numbers">Optional: Invoice number. If not provided, returns invoices with any invoice number.</param>
		/// <param name="changedSince">Optional: Get invoices that have been added or changed after this date time (greater or equal).</param>
		/// <param name="salesPersonGuids">Optional: ID of the salesperson to get the invoices for. If not provided, returns for all sales persons.</param>
		/// <param name="createdByUserGuids">Optional: ID of the user who created the invoice. If not provided, returns for all users.</param>
		/// <returns>List of Invoices </returns>
		public async Task<InvoiceOutputModel[]> Invoices_GetInvoicesAsync(
					int rowCount, 
					string pageToken, 
					System.DateTimeOffset paymentDateStart, 
					string[] invoiceStatusGuids, 
					string[] projectGuids, 
					string[] projectOwnerGuids, 
					string[] projectBusinessUnitGuids, 
					string[] customerGuids, 
					System.DateTimeOffset startDate, 
					System.DateTimeOffset endDate, 
					double minimumTotalExcludingTax, 
					double maximumTotalExcludingTax, 
					string[] referenceNumbers, 
					int[] numbers, 
					System.DateTimeOffset changedSince, 
					string[] salesPersonGuids, 
					string[] createdByUserGuids, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices?rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&paymentDateStart=" + paymentDateStart.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", invoiceStatusGuids.Select(z => $"invoiceStatusGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectOwnerGuids.Select(z => $"projectOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectBusinessUnitGuids.Select(z => $"projectBusinessUnitGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", customerGuids.Select(z => $"customerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&minimumTotalExcludingTax="+minimumTotalExcludingTax+"&maximumTotalExcludingTax="+maximumTotalExcludingTax+"&"+string.Join("&", referenceNumbers.Select(z => $"referenceNumbers={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", numbers.Select(z => $"numbers={z}"))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", salesPersonGuids.Select(z => $"salesPersonGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", createdByUserGuids.Select(z => $"createdByUserGuids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an invoice to project(s)
		/// Invoices_PostInvoiceCreation v1/invoices
		/// </summary>
		/// <param name="requestBody">CreateInvoiceModel</param>
		public async Task Invoices_PostInvoiceCreationAsync(CreateInvoiceModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an invoice.
		/// Returns: No Content (204) if succeeded. Not found (404) if cost center can't be found.
		/// Invoices_DeleteInvoice v1/invoices/{guid}
		/// </summary>
		/// <param name="guid">ID for the invoice to delete.</param>
		public async Task Invoices_DeleteInvoiceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invoice by ID
		/// Invoices_GetInvoice v1/invoices/{guid}
		/// </summary>
		/// <param name="guid">GUID of the invoice.</param>
		public async Task<InvoiceOutputModel> Invoices_GetInvoiceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an invoice or a part of it
		/// Invoices_PatchInvoice v1/invoices/{guid}
		/// </summary>
		/// <param name="guid">GUID of the invoice</param>
		/// <param name="requestBody">JSON patch document of InvoiceInputModel</param>
		/// <returns>list of invoices</returns>
		public async Task<InvoiceOutputModel[]> Invoices_PatchInvoiceAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an invoice PDF.
		/// Pdf_GetInvoicePdf v1/invoices/{guid}/pdf
		/// </summary>
		/// <param name="guid">The invoice GUID.</param>
		/// <param name="invoiceType">Optional: type of invoice.</param>
		/// <param name="pdfGetOptions">Optional: what to include in the PDF. Defaults to InvoicePdfGetOptions.All.</param>
		/// <returns>Get an invoice PDF</returns>
		public async Task Pdf_GetInvoicePdfAsync(string guid, InvoiceType invoiceType, InvoicePdfGetOptions pdfGetOptions, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/pdf&invoiceType=" + invoiceType+"&pdfGetOptions=" + pdfGetOptions;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a project from invoice.
		/// Invoices_DeleteProjectFromInvoice v1/invoices/{guid}/projects/{projectGuid}
		/// </summary>
		/// <param name="guid">The invoice GUID.</param>
		/// <param name="projectGuid">The project GUID.</param>
		public async Task Invoices_DeleteProjectFromInvoiceAsync(string guid, string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all files of a invoice by its id.
		/// Files_GetInvoiceFiles v1/invoices/{invoiceGuid}/files
		/// </summary>
		/// <param name="invoiceGuid">GUID of the invoice used to get the files.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <returns>InvoiceFile.</returns>
		public async Task<InvoiceFileModel[]> Files_GetInvoiceFilesAsync(string invoiceGuid, int firstRow, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/files&firstRow="+firstRow+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceFileModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finvoices_GetFinvoiceByInvoiceGuid v1/invoices/{invoiceGuid}/finvoice
		/// </summary>
		/// <returns>Exports single invoice as Finvoice</returns>
		public async Task Finvoices_GetFinvoiceByInvoiceGuidAsync(string invoiceGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/finvoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Invoice rows for an invoice.
		/// InvoiceRows_GetInvoiceRowsForInvoice v1/invoices/{invoiceGuid}/invoicerows
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="rowType">Optional: Type of the row. Either Hours or ProjectFees, Default all.</param>
		/// <returns>List of Invoice rows </returns>
		public async Task<InvoiceRowOutputModel[]> InvoiceRows_GetInvoiceRowsForInvoiceAsync(string invoiceGuid, string pageToken, int rowCount, InvoiceRowOutputModelRowType rowType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/invoicerows&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&rowType=" + rowType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invoice settings by invoice GUID
		/// InvoiceSettings_GetInvoiceSettings v1/invoices/{invoiceGuid}/invoicesettings
		/// </summary>
		/// <param name="invoiceGuid">Invoice GUID used to get the invoice settings.</param>
		/// <returns>InvoiceSettingsOutputModel</returns>
		public async Task<InvoiceSettingsOutputModel> InvoiceSettings_GetInvoiceSettingsAsync(string invoiceGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/invoicesettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceSettingsOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project fees on an invoice
		/// ProjectFees_GetInvoiceProjectFees v1/invoices/{invoiceGuid}/projectfees
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="productType">Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting</param>
		/// <returns>ProjectFees</returns>
		public async Task<ProjectFeeOutputModel[]> ProjectFees_GetInvoiceProjectFeesAsync(string invoiceGuid, string pageToken, int rowCount, ProductOutputModelType productType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/projectfees&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&productType=" + productType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project travel expenses on an invoice
		/// ProjectTravelExpenses_GetInvoiceProjectTravelExpenses v1/invoices/{invoiceGuid}/projecttravelexpenses
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="expenseClass">Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense</param>
		/// <returns>ProjectTravelExpenseOutputModel</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_GetInvoiceProjectTravelExpensesAsync(string invoiceGuid, string pageToken, int rowCount, ExpensesClass expenseClass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/projecttravelexpenses&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&expenseClass=" + expenseClass;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project fees on an invoice
		/// ReimbursedProjectFees_GetInvoiceReimbursedProjectFees v1/invoices/{invoiceGuid}/reimbursedprojectfees
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <returns>ReimbursedProjectFee</returns>
		public async Task<ReimbursedProjectFeeOutputModel[]> ReimbursedProjectFees_GetInvoiceReimbursedProjectFeesAsync(string invoiceGuid, int rowCount, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/reimbursedprojectfees&rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReimbursedProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project travel expenses on an invoice.
		/// ReimbursedProjectTravelExpenses_GetInvoiceProjectTravelExpenses v1/invoices/{invoiceGuid}/reimbursedprojecttravelexpenses
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="textToSearch">Searched string: part of name or description.</param>
		/// <param name="calculateRowCount">Optional. If true, calculates the total count of project fees. Default false.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".</param>
		/// <returns>ReimbursedProjectTravelExpenses.</returns>
		public async Task<ReimbursedProjectTravelExpenseOutputModel[]> ReimbursedProjectTravelExpenses_GetInvoiceProjectTravelExpensesAsync(string invoiceGuid, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/reimbursedprojecttravelexpenses&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReimbursedProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all reimbursed hours on an invoice.
		/// ReimbursedWorkHours_GetInvoiceReimbursedWorkHours v1/invoices/{invoiceGuid}/reimbursedworkhours
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from description or invoice description.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=DueDate&sortings[0].value=Asc&sortings[1].key=TotalIncludingTax&sortings[1].value=Desc".</param>
		/// <returns>ReimbursedWorkHour.</returns>
		public async Task<ReimbursedWorkHourOutputModel[]> ReimbursedWorkHours_GetInvoiceReimbursedWorkHoursAsync(string invoiceGuid, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/reimbursedworkhours&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReimbursedWorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get uninvoiced project fees available for invoice
		/// ProjectFees_GetUninvoicedProjectFeesForInvoice v1/invoices/{invoiceGuid}/uninvoicedprojectfees
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="isBillable">Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.</param>
		/// <returns>ProjectFees</returns>
		public async Task<ProjectFeeOutputModel[]> ProjectFees_GetUninvoicedProjectFeesForInvoiceAsync(string invoiceGuid, string pageToken, int rowCount, bool isBillable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/uninvoicedprojectfees&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isBillable="+isBillable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get uninvoiced project travel expenses available for invoice
		/// ProjectTravelExpenses_GetUninvoicedProjectTravelExpensesForInvoice v1/invoices/{invoiceGuid}/uninvoicedprojecttravelexpenses
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="isBillable">Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="expenseClass">Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense</param>
		/// <returns>ProjectTravelExpenseOutputModel</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_GetUninvoicedProjectTravelExpensesForInvoiceAsync(string invoiceGuid, bool isBillable, string pageToken, int rowCount, ExpensesClass expenseClass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/uninvoicedprojecttravelexpenses&isBillable="+isBillable+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&expenseClass=" + expenseClass;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get uninvoiced work hours available for invoice
		/// WorkHours_GetUninvoicedWorkHoursForInvoice v1/invoices/{invoiceGuid}/uninvoicedworkhours
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="isBillable">Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>WorkHours</returns>
		public async Task<WorkHourOutputModel[]> WorkHours_GetUninvoicedWorkHoursForInvoiceAsync(string invoiceGuid, bool isBillable, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/uninvoicedworkhours&isBillable="+isBillable+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the work hours on an invoice
		/// WorkHours_GetInvoiceWorkHours v1/invoices/{invoiceGuid}/workhours
		/// </summary>
		/// <param name="invoiceGuid">ID of the invoice.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>WorkHours</returns>
		public async Task<WorkHourOutputModel[]> WorkHours_GetInvoiceWorkHoursAsync(string invoiceGuid, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoices/"+ (invoiceGuid==null? "" : System.Uri.EscapeDataString(invoiceGuid))+"/workhours&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) invoice setting
		/// InvoiceSettings_PatchInvoiceSettings v1/invoicesettings/{guid}
		/// </summary>
		/// <param name="guid">ID of the invoice settings</param>
		/// <param name="requestBody">JSON patch document of InvoiceSettingsModel</param>
		/// <returns>InvoiceSettingsOutputModel</returns>
		public async Task<InvoiceSettingsOutputModel> InvoiceSettings_PatchInvoiceSettingsAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicesettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceSettingsOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get invoice statuses.
		/// InvoiceStatuses_GetInvoiceStatuses v1/invoicestatuses
		/// </summary>
		/// <param name="active">Filter the invoice statuses. If true/false, only the active/inactive ones are returned. If null, all the invoice statuses are returned.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from invoice status name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc".</param>
		public async Task<InvoiceStatusModel[]> InvoiceStatuses_GetInvoiceStatusesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicestatuses?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceStatusModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a invoice status.
		/// InvoiceStatuses_PostInvoiceStatus v1/invoicestatuses
		/// </summary>
		/// <param name="requestBody">InvoiceStatusModel.</param>
		public async Task InvoiceStatuses_PostInvoiceStatusAsync(InvoiceStatusModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicestatuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an invoice status.
		/// Returns: No Content (204) if succeeded. Not found (404) if invoice status can't be found.
		/// InvoiceStatuses_DeleteInvoiceStatus v1/invoicestatuses/{guid}
		/// </summary>
		/// <param name="guid">ID for the invoice status to delete.</param>
		public async Task InvoiceStatuses_DeleteInvoiceStatusAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicestatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Invoice status by ID.
		/// InvoiceStatuses_GetInvoiceStatus v1/invoicestatuses/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Invoice status.</param>
		/// <returns>Invoice status.</returns>
		public async Task<InvoiceStatusModel> InvoiceStatuses_GetInvoiceStatusAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicestatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceStatusModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an Invoice status or a part of it.
		/// InvoiceStatuses_PatchInvoiceStatus v1/invoicestatuses/{guid}
		/// </summary>
		/// <param name="guid">ID of the Invoice status.</param>
		/// <param name="requestBody">JSON patch document of InvoiceStatusModel.</param>
		/// <returns>List of updated Invoice statuses.</returns>
		public async Task<InvoiceStatusModel[]> InvoiceStatuses_PatchInvoiceStatusAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicestatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceStatusModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Finvoices_GetFinvoicesByInvoiceStatus v1/invoicestatuses/{invoiceStatusGuid}/finvoices
		/// </summary>
		/// <returns>Exports all invoices by invoice status as stream of multiple Finvoices</returns>
		public async Task Finvoices_GetFinvoicesByInvoiceStatusAsync(string invoiceStatusGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicestatuses/"+ (invoiceStatusGuid==null? "" : System.Uri.EscapeDataString(invoiceStatusGuid))+"/finvoices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invoice templates.
		/// InvoiceTemplates_GetInvoiceTemplates v1/invoicetemplates
		/// </summary>
		/// <returns>InvoiceTemplatesModel.</returns>
		public async Task<InvoiceTemplateModel[]> InvoiceTemplates_GetInvoiceTemplatesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicetemplates?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceTemplateModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invoice template by ID.
		/// InvoiceTemplates_GetInvoiceTemplate v1/invoicetemplates/{guid}
		/// </summary>
		/// <param name="guid">ID of the invoice template.</param>
		/// <returns>InvoiceTemplatesModel.</returns>
		public async Task<InvoiceTemplateModel> InvoiceTemplates_GetInvoiceTemplateAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/invoicetemplates/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvoiceTemplateModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the keywords.
		/// Keywords_GetKeywords v1/keywords
		/// </summary>
		/// <param name="category">Optional: category of the keyword.</param>
		/// <param name="active">If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from keyword.</param>
		/// <param name="changedSince">Optional: Get keywords that have been added or changed after this date time (greater or equal).</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc".</param>
		/// <param name="keyword">Optional: Keyword name.</param>
		/// <returns>All the Keywords.</returns>
		public async Task<KeywordModel[]> Keywords_GetKeywordsAsync(ContactKeywordModelCategory category, bool active, int firstRow, int rowCount, string textToSearch, System.DateTimeOffset changedSince, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, string keyword, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/keywords?category=" + category+"&active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a keyword.
		/// Keywords_PostKeyword v1/keywords
		/// </summary>
		/// <param name="requestBody">KeywordModel.</param>
		public async Task Keywords_PostKeywordAsync(KeywordModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/keywords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete keyword by ID. It will also be deleted from any entity it is used in (Project, etc.)
		/// Returns: No Content (204) if succeeded.
		/// Keywords_DeleteKeyword v1/keywords/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the keyword.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the keyword to which to move usages of this keyword. Default null. If keyword is in use and usages aren't moved the deletion might fail.</param>
		public async Task Keywords_DeleteKeywordAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get keyword by ID.
		/// Keywords_GetKeyword v1/keywords/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the keyword.</param>
		/// <returns>Keyword.</returns>
		public async Task<KeywordModel> Keywords_GetKeywordAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a keyword or a part of it.
		/// Keywords_PatchKeyword v1/keywords/{guid}
		/// </summary>
		/// <param name="guid">ID of the keyword.</param>
		/// <param name="requestBody">JSON Patch document.</param>
		/// <returns>list of updated keywords.</returns>
		public async Task<KeywordModel[]> Keywords_PatchKeywordAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get saved KPI formulas.
		/// KpiFormulas_GetKpiFormulas v1/kpiformulas
		/// </summary>
		/// <param name="category">Optional: Category of KPI formula (Project, Invoice, User).</param>
		/// <param name="isActive">Optional: return with given active status. Default is to return all.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc".</param>
		/// <param name="includeDefinition">Optional: Include definition to response. Default false.</param>
		/// <param name="changedSince">Optional: Get KPI formulas that have been added or changed after this date time (greater or equal).</param>
		/// <returns>KPI formulas.</returns>
		public async Task<KpiFormulaModelBase[]> KpiFormulas_GetKpiFormulasAsync(KpiFormulaCategory category, bool isActive, int firstRow, int rowCount, string textToSearch, KeyValuePairOfStringAndSortDirection[] sortings, bool includeDefinition, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/kpiformulas?category=" + category+"&isActive="+isActive+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"))+"&includeDefinition="+includeDefinition+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KpiFormulaModelBase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the lead sources.
		/// LeadSources_GetLeadSources v1/leadsources
		/// </summary>
		/// <param name="active">If not given, return all lead sources, if given as true return only active lead sources, if given as false returns only inactive lead sources.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from lead source name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <returns>List of lead sources.</returns>
		public async Task<LeadSourceModel[]> LeadSources_GetLeadSourcesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/leadsources?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeadSourceModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a lead source.
		/// LeadSources_PostLeadSource v1/leadsources
		/// </summary>
		/// <param name="requestBody">LeadSourceModel.</param>
		public async Task LeadSources_PostLeadSourceAsync(LeadSourceModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/leadsources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a lead source.
		/// Returns: No Content (204) if succeeded. Not found (404) if lead source can't be found.
		/// LeadSources_DeleteLeadSource v1/leadsources/{guid}
		/// </summary>
		/// <param name="guid">ID for the lead source to delete.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the lead source to which to move usages of this lead source. Default null. If industry is in use and usages aren't moved the deletion might fail.</param>
		public async Task LeadSources_DeleteLeadSourceAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/leadsources/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get lead source by ID.
		/// LeadSources_GetLeadSource v1/leadsources/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the lead source.</param>
		/// <returns>lead source.</returns>
		public async Task<LeadSourceModel> LeadSources_GetLeadSourceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/leadsources/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeadSourceModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an lead source or a part of it.
		/// LeadSources_PatchLeadSource v1/leadsources/{guid}
		/// </summary>
		/// <param name="guid">ID of the lead source.</param>
		/// <param name="requestBody">JSON patch document of LeadSourceModel.</param>
		/// <returns>List of updated lead sources.</returns>
		public async Task<LeadSourceModel[]> LeadSources_PatchLeadSourceAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/leadsources/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LeadSourceModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the Countries.
		/// Countries_GetCountries v1/localization/countries
		/// </summary>
		/// <returns>All the Countries.</returns>
		public async Task<CountryModel[]> Countries_GetCountriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/countries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a country by ISO Alpha-2 code
		/// Countries_GetCountryByCode2 v1/localization/countries/{code2}
		/// </summary>
		/// <param name="code2">Optional: ISO Alpha-2 code used to get a country.</param>
		/// <returns>Country</returns>
		public async Task<CountryModel[]> Countries_GetCountryByCode2Async(string code2, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/countries/"+ (code2==null? "" : System.Uri.EscapeDataString(code2));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a country by ISO Alpha-3 code
		/// Countries_GetCountryByCode3 v1/localization/countries/{code3}
		/// </summary>
		/// <param name="code3">Optional: ISO Alpha-3 code used to get a country.</param>
		/// <returns>Country</returns>
		public async Task<CountryModel[]> Countries_GetCountryByCode3Async(string code3, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/countries/"+ (code3==null? "" : System.Uri.EscapeDataString(code3));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the Country regions for a country.
		/// Countries_GetCountryRegions v1/localization/countries/{countryGuid}/countryregions
		/// </summary>
		/// <param name="countryGuid">GUID of the country.</param>
		/// <returns>All the CountryRegions of the country.</returns>
		public async Task<CountryRegionModel[]> Countries_GetCountryRegionsAsync(string countryGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/countries/"+ (countryGuid==null? "" : System.Uri.EscapeDataString(countryGuid))+"/countryregions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryRegionModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a country by name
		/// Countries_GetCountryByName v1/localization/countries/{countryName}
		/// </summary>
		/// <param name="countryName">Optional: English country name.</param>
		/// <returns>Country</returns>
		public async Task<CountryModel[]> Countries_GetCountryByNameAsync(string countryName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/countries/"+ (countryName==null? "" : System.Uri.EscapeDataString(countryName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get country by ID.
		/// Countries_GetCountry v1/localization/countries/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the country.</param>
		/// <returns>Country.</returns>
		public async Task<CountryModel> Countries_GetCountryAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/countries/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get country region by ID.
		/// Countries_GetCountryRegion v1/localization/countryregions/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the country region.</param>
		/// <returns>CountryRegion.</returns>
		public async Task<CountryRegionModel> Countries_GetCountryRegionAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/countryregions/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryRegionModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the Formatting Cultures
		/// FormattingCultures_GetFormattings v1/localization/formattingcultures
		/// </summary>
		/// <returns>All the Formatting Cultures</returns>
		public async Task<FormattingCultureModel[]> FormattingCultures_GetFormattingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/formattingcultures";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FormattingCultureModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get formatting culture by ID.
		/// FormattingCultures_GetFormattingCulture v1/localization/formattingcultures/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the formatting culture.</param>
		/// <returns>Formatting culture.</returns>
		public async Task<FormattingCultureModel> FormattingCultures_GetFormattingCultureAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/formattingcultures/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FormattingCultureModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the languages
		/// Languages_GetLanguages v1/localization/languages
		/// </summary>
		/// <param name="isInvoiceLanguage">Optional: which languages to fetch. only invoice languages or non invoice languages?, default all.</param>
		/// <returns>All the Languages</returns>
		public async Task<LanguageModel[]> Languages_GetLanguagesAsync(bool isInvoiceLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/languages?isInvoiceLanguage="+isInvoiceLanguage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LanguageModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get language by ID
		/// Languages_GetLanguage v1/localization/languages/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the language.</param>
		/// <returns>Language</returns>
		public async Task<LanguageModel> Languages_GetLanguageAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/languages/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LanguageModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the timezones.
		/// Timezones_GetTimezones v1/localization/timezones
		/// </summary>
		/// <returns>All the Timezones.</returns>
		public async Task<TimezoneModel[]> Timezones_GetTimezonesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/timezones";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimezoneModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get timezone by ID.
		/// Timezones_GetTimezone v1/localization/timezones/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the timezone.</param>
		/// <returns>Timezone.</returns>
		public async Task<TimezoneModel> Timezones_GetTimezoneAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/localization/timezones/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimezoneModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get oAuth2 access token.
		/// PublicBearerAuthentication_GetAccessTokenJson v1/login/oauth/access_token
		/// </summary>
		/// <param name="requestBody">AccessTokenCredentials model</param>
		/// <returns>PublicAuthenticationOutputModel</returns>
		public async Task<PublicAuthenticationOutputModel> PublicBearerAuthentication_GetAccessTokenJsonAsync(AccessTokenCredentials requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/login/oauth/access_token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicAuthenticationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the oAuth2 authorization code flow code.
		/// PublicBearerAuthentication_GetAuthorizationCode v1/login/oauth/authorize
		/// </summary>
		/// <param name="response_type">code</param>
		/// <param name="state">Unguessable random string.</param>
		/// <param name="client_id">Client id.</param>
		/// <param name="redirect_uri">Url where to redirect after code has been retrieved.</param>
		/// <param name="scope">Scopes that client requests. If scopes that are not allowed for the client are requested, returns unauthorized.</param>
		public async Task PublicBearerAuthentication_GetAuthorizationCodeAsync(string response_type, string state, string client_id, string redirect_uri, string scope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/login/oauth/authorize?response_type=" + (response_type==null? "" : System.Uri.EscapeDataString(response_type))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri))+"&scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Market Segments.
		/// MarketSegments_GetMarketSegments v1/marketsegments
		/// </summary>
		/// <param name="active">If not given, return all Market Segments, if given as true return only active Market Segments, if given as false returns only inactive Market Segments.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from market segment name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="includeChildSegments">Optional: Include also child market segments. If false returns only parent segments. Default true.</param>
		/// <returns>List of Market Segments.</returns>
		public async Task<MarketSegmentModel[]> MarketSegments_GetMarketSegmentsAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, bool includeChildSegments, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/marketsegments?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&includeChildSegments="+includeChildSegments;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarketSegmentModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a market segment.
		/// MarketSegments_PostMarketSegment v1/marketsegments
		/// </summary>
		/// <param name="requestBody">MarketSegmentModel.</param>
		public async Task MarketSegments_PostMarketSegmentAsync(MarketSegmentModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/marketsegments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a market segment.
		/// Returns: No Content (204) if succeeded. Not found (404) if market segment can't be found.
		/// MarketSegments_DeleteMarketSegment v1/marketsegments/{guid}
		/// </summary>
		/// <param name="guid">ID for the market segment to delete.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the lead source to which to move usages of this market segment. Default null.</param>
		public async Task MarketSegments_DeleteMarketSegmentAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/marketsegments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Market Segment by ID.
		/// MarketSegments_GetMarketSegment v1/marketsegments/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Market Segment.</param>
		/// <returns>Market Segment.</returns>
		public async Task<MarketSegmentModel> MarketSegments_GetMarketSegmentAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/marketsegments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarketSegmentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an Market Segment or a part of it.
		/// MarketSegments_PatchMarketSegment v1/marketsegments/{guid}
		/// </summary>
		/// <param name="guid">ID of the Market Segment.</param>
		/// <param name="requestBody">JSON patch document of MarketSegmentModel.</param>
		/// <returns>List of updated Market Segments.</returns>
		public async Task<MarketSegmentModel[]> MarketSegments_PatchMarketSegmentAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/marketsegments/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MarketSegmentModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the details of organization.
		/// OrganizationDetails_GetOrganizationDetails v1/organizationdetails
		/// </summary>
		/// <returns>Organization</returns>
		public async Task<OrganizationDetailsOutputModel> OrganizationDetails_GetOrganizationDetailsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizationdetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrganizationDetailsOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a organization details or a part of it
		/// OrganizationDetails_PatchOrganizationDetails v1/organizationdetails
		/// </summary>
		/// <returns>organization details</returns>
		public async Task<OrganizationDetailsOutputModel> OrganizationDetails_PatchOrganizationDetailsAsync(PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizationdetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrganizationDetailsOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the settings of organization.
		/// OrganizationSettings_GetOrganizationSettings v1/organizationsettings
		/// </summary>
		/// <returns>Organization.</returns>
		public async Task<OrganizationSettingsModel> OrganizationSettings_GetOrganizationSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizationsettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrganizationSettingsModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get overtime price by ID.
		/// OvertimePrices_GetOvertimePrice v1/overtimeprices/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the overtime price.</param>
		public async Task<OvertimePriceModel> OvertimePrices_GetOvertimePriceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/overtimeprices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OvertimePriceModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get overtime definitions.
		/// Overtimes_GetOvertimes v1/overtimes
		/// </summary>
		/// <param name="active">If not given, return all overtime definitions, if given as true return only active overtime definitions, if given as false returns only inactive overtime definitions.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="textToSearch">Optional: Text to search from overtime name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc"".</param>
		/// <returns>Overtime definitions.</returns>
		public async Task<OvertimeModel[]> Overtimes_GetOvertimesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/overtimes?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OvertimeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert an overtime.
		/// Overtimes_PostOvertime v1/overtimes
		/// </summary>
		/// <param name="requestBody">OvertimeModel.</param>
		public async Task Overtimes_PostOvertimeAsync(OvertimeModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/overtimes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an overtime.
		/// Returns: No Content (204) if succeeded. Not found (404) if overtime can't be found.
		/// Overtimes_DeleteOvertime v1/overtimes/{guid}
		/// </summary>
		/// <param name="guid">ID for the overtime to delete.</param>
		public async Task Overtimes_DeleteOvertimeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/overtimes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get overtime definition by ID.
		/// Overtimes_GetOvertime v1/overtimes/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the overtime definition.</param>
		/// <returns>OvertimeModel.</returns>
		public async Task<OvertimeModel> Overtimes_GetOvertimeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/overtimes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OvertimeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an overtime or a part of it.
		/// Overtimes_PatchOvertime v1/overtimes/{guid}
		/// </summary>
		/// <param name="guid">ID of the overtime.</param>
		/// <param name="requestBody">JSON patch document of OvertimeModel.</param>
		/// <returns>list of overtimes.</returns>
		public async Task<OvertimeModel[]> Overtimes_PatchOvertimeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/overtimes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OvertimeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the Permission Profiles.
		/// PermissionProfiles_GetPermissionProfiles v1/permissionprofiles
		/// </summary>
		/// <param name="active">If not given, return all Permission Profiles, if given as true return only active Permission Profiles, if given as false returns only inactive Permission Profiles.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from permission profile name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc".</param>
		/// <returns>List of Permission Profiles.</returns>
		public async Task<PermissionProfileModel[]> PermissionProfiles_GetPermissionProfilesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/permissionprofiles?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionProfileModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Permission Profile by ID.
		/// PermissionProfiles_GetPermissionProfile v1/permissionprofiles/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Permission Profile.</param>
		/// <returns>PermissionProfileModel.</returns>
		public async Task<PermissionProfileModel> PermissionProfiles_GetPermissionProfileAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/permissionprofiles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionProfileModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all active phase members
		/// Use root phase to get project members.
		/// PhaseMembers_GetAllPhaseMembers v1/phasemembers
		/// </summary>
		/// <param name="changedSince">Optional: Get phase members that have been added or changed after this date time (greater or equal).</param>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="isUserActive">Optional: Is the user active. Default nothing = all.</param>
		/// <returns>All the phase members</returns>
		public async Task<PhaseMemberOutputModel[]> PhaseMembers_GetAllPhaseMembersAsync(System.DateTimeOffset changedSince, string pageToken, int rowCount, bool isUserActive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasemembers?changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isUserActive="+isUserActive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseMemberOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a phase member.
		/// User is always added as a root phase (project) member also.
		/// PhaseMembers_PostPhaseMember v1/phasemembers
		/// </summary>
		/// <param name="addToAllSubPhases">Optional: Add member to all sub phases. Default true.</param>
		/// <param name="requestBody">PhaseMemberModel.</param>
		public async Task PhaseMembers_PostPhaseMemberAsync(bool addToAllSubPhases, PhaseMemberModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasemembers?addToAllSubPhases="+addToAllSubPhases;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a phase member
		/// Returns: No Content (204) if succeeded. Only one of transferToRoleGuid and transferToUserGuid can be provided. Use root phase to delete a project member.
		/// PhaseMembers_DeletePhaseMember v1/phasemembers/{userGuid}
		/// </summary>
		/// <param name="userGuid">GUID of the phase member to remove</param>
		/// <param name="resourceAllocationAction">Optional: The action to be applied to the user's resource allocations</param>
		/// <param name="transferToUserGuid">Optional: GUID of the user to whom the resource allocations are transferred.</param>
		public async Task PhaseMembers_DeletePhaseMemberAsync(string userGuid, ResourceAllocationAction resourceAllocationAction, string transferToUserGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasemembers/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"&resourceAllocationAction=" + resourceAllocationAction+"&transferToUserGuid=" + (transferToUserGuid==null? "" : System.Uri.EscapeDataString(transferToUserGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds business unit users to phase members.
		/// Users are always added as a root phase (project) member also.
		/// PhaseMembers_PostPhaseMembersFromBusinessUnitUsers v1/phasemembersfrombusinessunitusers
		/// </summary>
		/// <param name="addToAllSubPhases">Optional: Add member to all sub phases. Default true.</param>
		/// <param name="requestBody">PhaseMemberModel.</param>
		/// <returns>List of added members.</returns>
		public async Task<PhaseMemberModel[]> PhaseMembers_PostPhaseMembersFromBusinessUnitUsersAsync(bool addToAllSubPhases, PhaseMembersFromBusinessUnitUsersModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasemembersfrombusinessunitusers?addToAllSubPhases="+addToAllSubPhases;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseMemberModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the phases.
		/// Phases_GetPhases v1/phases
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get phases that have been added or changed after this date time (greater or equal).</param>
		/// <param name="code">Optional: Code of the phase.</param>
		/// <param name="projectGuids">Optional: List of project ids.</param>
		public async Task<PhaseOutputModel[]> Phases_GetPhasesAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, string code, string[] projectGuids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a phase
		/// Phases_PostPhase v1/phases
		/// </summary>
		/// <param name="requestBody">PhaseOutputModel</param>
		public async Task Phases_PostPhaseAsync(PhaseInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a phase
		/// Returns: No Content (204) if succeeded.
		/// Phases_DeletePhase v1/phases/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the phase.</param>
		public async Task Phases_DeletePhaseAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get phase by ID
		/// Phases_GetPhase v1/phases/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the phase.</param>
		public async Task<PhaseOutputModel> Phases_GetPhaseAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a phase or a part of it
		/// Phases_PatchPhase v1/phases/{guid}
		/// </summary>
		/// <param name="guid">ID of the phase</param>
		/// <param name="requestBody">JSON Patch document of PhaseInputModel</param>
		/// <returns>Updated phase</returns>
		public async Task<PhaseOutputModel[]> Phases_PatchPhaseAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get phase members
		/// Use root phase to get project members.
		/// PhaseMembers_GetPhaseMembers v1/phases/{phaseGuid}/phasemembers
		/// </summary>
		/// <param name="phaseGuid">GUID of the phase.</param>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="isActive">Optional: Is the member active on the phase. Filters only root phase members. Default nothing = all.</param>
		/// <param name="isUserActive">Optional: Is the user active. Default nothing = all.</param>
		/// <returns>All the phase members</returns>
		public async Task<PhaseMemberOutputModel[]> PhaseMembers_GetPhaseMembersAsync(string phaseGuid, string pageToken, int rowCount, bool isActive, bool isUserActive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases/"+ (phaseGuid==null? "" : System.Uri.EscapeDataString(phaseGuid))+"/phasemembers&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isActive="+isActive+"&isUserActive="+isUserActive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseMemberOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get resource allocations for a phase with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
		/// ResourceAllocations_GetResourceAllocationsByPhaseGuid v1/phases/{phaseGuid}/resourceallocations/allocations
		/// </summary>
		/// <param name="startDate">Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days</param>
		/// <param name="endDate">Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days</param>
		/// <param name="changedSince">Optional: Get resource allocations that have been added or changed after this date time (greater or equal).</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		public async Task<ResourceAllocationOutputModel> ResourceAllocations_GetResourceAllocationsByPhaseGuidAsync(
					string phaseGuid, 
					System.DateTimeOffset startDate, 
					System.DateTimeOffset endDate, 
					System.DateTimeOffset changedSince, 
					LicenseUserType[] userLicenseTypes, 
					string projectGuid, 
					string userGuid, 
					string projectBusinessUnitGuid, 
					string userBusinessUnitGuid, 
					string projectManagerUserGuid, 
					string userTagGuid, 
					bool useSalesProbability, 
					string projectStatusTypeGuid, 
					string projectTagGuid, 
					string superiorUserGuid, 
					string salesStatusTypeGuid, 
					string resourceAllocationGuid, 
					SalesProgress salesProgress, 
					int rowCount, 
					string pageToken, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases/"+ (phaseGuid==null? "" : System.Uri.EscapeDataString(phaseGuid))+"/resourceallocations/allocations&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", userLicenseTypes.Select(z => $"userLicenseTypes={z}"))+"&projectGuid=" + (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"&userGuid=" + (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"&projectBusinessUnitGuid=" + (projectBusinessUnitGuid==null? "" : System.Uri.EscapeDataString(projectBusinessUnitGuid))+"&userBusinessUnitGuid=" + (userBusinessUnitGuid==null? "" : System.Uri.EscapeDataString(userBusinessUnitGuid))+"&projectManagerUserGuid=" + (projectManagerUserGuid==null? "" : System.Uri.EscapeDataString(projectManagerUserGuid))+"&userTagGuid=" + (userTagGuid==null? "" : System.Uri.EscapeDataString(userTagGuid))+"&useSalesProbability="+useSalesProbability+"&projectStatusTypeGuid=" + (projectStatusTypeGuid==null? "" : System.Uri.EscapeDataString(projectStatusTypeGuid))+"&projectTagGuid=" + (projectTagGuid==null? "" : System.Uri.EscapeDataString(projectTagGuid))+"&superiorUserGuid=" + (superiorUserGuid==null? "" : System.Uri.EscapeDataString(superiorUserGuid))+"&salesStatusTypeGuid=" + (salesStatusTypeGuid==null? "" : System.Uri.EscapeDataString(salesStatusTypeGuid))+"&resourceAllocationGuid=" + (resourceAllocationGuid==null? "" : System.Uri.EscapeDataString(resourceAllocationGuid))+"&salesProgress=" + salesProgress+"&rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all work types that are available for a phase (for work hour entry)
		/// Only the active work types are included in the list, whether they come from organization settings or project specific work types.
		/// WorkTypes_GetPhaseWorkTypes v1/phases/{phaseGuid}/worktypes
		/// </summary>
		/// <param name="phaseGuid">Id of the phase.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: number of rows to fetch</param>
		/// <param name="userGuid">Id of the user for whom the work types are retrieved. Default is current user.</param>
		/// <returns>All the work types matching search criteria</returns>
		public async Task<WorkTypeOutputModel[]> WorkTypes_GetPhaseWorkTypesAsync(string phaseGuid, string pageToken, int rowCount, string userGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phases/"+ (phaseGuid==null? "" : System.Uri.EscapeDataString(phaseGuid))+"/worktypes&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&userGuid=" + (userGuid==null? "" : System.Uri.EscapeDataString(userGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get phase status types
		/// PhaseStatusTypes_GetPhaseStatusTypes v1/phasestatustypes
		/// </summary>
		/// <param name="active">If not given, return all phase status types, if given as true return only active phase status types, if given as false returns only inactive phase status types</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <returns>All the phase status types</returns>
		public async Task<PhaseStatusTypeModel[]> PhaseStatusTypes_GetPhaseStatusTypesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasestatustypes?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseStatusTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a phase status type
		/// PhaseStatusTypes_PostPhaseStatusType v1/phasestatustypes
		/// </summary>
		/// <param name="requestBody">PhaseStatusTypeModel</param>
		public async Task PhaseStatusTypes_PostPhaseStatusTypeAsync(PhaseStatusTypeModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasestatustypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a phase status type
		/// Returns: No Content (204) if succeeded. Not found (404) if phase status type can't be found.
		/// PhaseStatusTypes_DeletePhaseStatusType v1/phasestatustypes/{guid}
		/// </summary>
		/// <param name="guid">ID for the phase status type to delete</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the phase status type to which to move usages of this phase status type. Default null. If phase status type is in use and usages aren't moved the deletion might fail.</param>
		public async Task PhaseStatusTypes_DeletePhaseStatusTypeAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasestatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get phase status type by GUID
		/// PhaseStatusTypes_GetPhaseStatusType v1/phasestatustypes/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the phase status type.</param>
		/// <returns>PhaseStatusTypeModel</returns>
		public async Task<PhaseStatusTypeModel> PhaseStatusTypes_GetPhaseStatusTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasestatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseStatusTypeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a phase status type or a part of it
		/// PhaseStatusTypes_PatchPhaseStatusType v1/phasestatustypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the phase status type</param>
		/// <param name="requestBody">JSON patch document of TaskStatusTypeModel</param>
		/// <returns>list of updated phase status type</returns>
		public async Task<PhaseStatusTypeModel[]> PhaseStatusTypes_PatchPhaseStatusTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/phasestatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseStatusTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all price lists.
		/// PriceLists_GetPricelists v1/pricelists
		/// </summary>
		/// <param name="active">If not given, return all price lists, if given as true return only active price lists, if given as false returns only inactive price lists.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from price list name.</param>
		/// <param name="currencyGuid">Optional: ID of the price list currency.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc".</param>
		/// <param name="name">Optional: Name of the price list.</param>
		/// <returns>All the price lists.</returns>
		public async Task<PriceListOutputModel[]> PriceLists_GetPricelistsAsync(bool active, int firstRow, int rowCount, string textToSearch, string currencyGuid, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelists?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&currencyGuid=" + (currencyGuid==null? "" : System.Uri.EscapeDataString(currencyGuid))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PriceListOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get price list by GUID.
		/// PriceLists_GetPriceList v1/pricelists/{guid}
		/// </summary>
		/// <param name="guid">ID used to get the price list.</param>
		public async Task<PriceListModel> PriceLists_GetPriceListAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelists/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PriceListModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all price list versions of a price list.
		/// PriceListVersions_GetPricelistVersionsByPricelist v1/pricelists/{pricelistGuid}/pricelistversions
		/// </summary>
		/// <returns>Price list versions.</returns>
		public async Task<PricelistVersionOutputModel[]> PriceListVersions_GetPricelistVersionsByPricelistAsync(string pricelistGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelists/"+ (pricelistGuid==null? "" : System.Uri.EscapeDataString(pricelistGuid))+"/pricelistversions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PricelistVersionOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a price list version by guid.
		/// PriceListVersions_GetPricelistVersion v1/pricelistversions/{guid}
		/// </summary>
		/// <returns>Price list version.</returns>
		public async Task<PricelistVersionOutputModel> PriceListVersions_GetPricelistVersionAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelistversions/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PricelistVersionOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the overtime prices for a price list version.
		/// OvertimePrices_GetOvertimePrices v1/pricelistversions/{pricelistVersionGuid}/overtimeprices
		/// </summary>
		/// <returns>Projects.</returns>
		public async Task<OvertimePriceModel[]> OvertimePrices_GetOvertimePricesAsync(string pricelistVersionGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelistversions/"+ (pricelistVersionGuid==null? "" : System.Uri.EscapeDataString(pricelistVersionGuid))+"/overtimeprices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OvertimePriceModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the product prices for a price list version.
		/// ProductPrices_GetProductPrices v1/pricelistversions/{pricelistVersionGuid}/productprices
		/// </summary>
		/// <param name="pricelistVersionGuid">ID of the price list version.</param>
		/// <param name="fromPricelistOnly">If true return only prices from the price list, if false also returns prices from the products. Default is false.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from Product name.</param>
		/// <param name="calculateRowCount">Optional: Calculate the number of total rows. Default false = total row count is returned as zero.</param>
		/// <param name="productCode">Optional: Absolute search for products with specified product code.</param>
		/// <param name="productGuids">Optional: Search all product price(s) by products guid(s).</param>
		/// <param name="isVolumePriced">Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products.</param>
		/// <param name="productCategoryGuids">Optional: Search product prices according to product category / categories by product category guid(s).</param>
		/// <param name="productTypes">Optional: Search product prices according to product type / types.</param>
		/// <returns>Projects.</returns>
		public async Task<ProductPriceOutputModel[]> ProductPrices_GetProductPricesAsync(string pricelistVersionGuid, bool fromPricelistOnly, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, string productCode, string[] productGuids, bool isVolumePriced, string[] productCategoryGuids, ProductType[] productTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelistversions/"+ (pricelistVersionGuid==null? "" : System.Uri.EscapeDataString(pricelistVersionGuid))+"/productprices&fromPricelistOnly="+fromPricelistOnly+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&productCode=" + (productCode==null? "" : System.Uri.EscapeDataString(productCode))+"&"+string.Join("&", productGuids.Select(z => $"productGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&isVolumePriced="+isVolumePriced+"&"+string.Join("&", productCategoryGuids.Select(z => $"productCategoryGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", productTypes.Select(z => $"productTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductPriceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the travel prices for a price list version.
		/// TravelPrices_GetTravelPrices v1/pricelistversions/{pricelistVersionGuid}/travelprices
		/// </summary>
		/// <param name="pricelistVersionGuid">ID of the price list version.</param>
		/// <param name="fromPricelistOnly">If true return only prices from the price list, if false also returns prices from the products. Default is false.</param>
		/// <param name="expenseClasses">Optional: List of expense classes to search by, defaults to all travel categories.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from Product name.</param>
		/// <param name="calculateRowCount">Optional: Calculate the number of total rows. Default false = total row count is returned as zero.</param>
		/// <returns>TravelPriceModel.</returns>
		public async Task<TravelPriceOutputModel[]> TravelPrices_GetTravelPricesAsync(string pricelistVersionGuid, bool fromPricelistOnly, ExpensesClass[] expenseClasses, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelistversions/"+ (pricelistVersionGuid==null? "" : System.Uri.EscapeDataString(pricelistVersionGuid))+"/travelprices&fromPricelistOnly="+fromPricelistOnly+"&"+string.Join("&", expenseClasses.Select(z => $"expenseClasses={z}"))+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelPriceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the workHourPrices for a price list version.
		/// WorkHourPrices_GetWorkHourPrices v1/pricelistversions/{pricelistVersionGuid}/workhourprices
		/// </summary>
		/// <param name="pricelistVersionGuid">Price list version identifier.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page..</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get prices that have been added or changed after this date time (greater or equal).</param>
		/// <returns>workHourPrices.</returns>
		public async Task<WorkHourPriceOutputModel> WorkHourPrices_GetWorkHourPricesAsync(string pricelistVersionGuid, string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pricelistversions/"+ (pricelistVersionGuid==null? "" : System.Uri.EscapeDataString(pricelistVersionGuid))+"/workhourprices&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourPriceOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product categories.
		/// ProductCategories_GetProductCategories v1/productcategories
		/// </summary>
		/// <param name="active">If not given, return all Product categories, if given as true return only active Product categories, if given as false returns only inactive Product categories.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="textToSearch">Optional: Text to search from product category name or code.</param>
		/// <param name="changedSince">Optional: Get product categories that have been added or changed after this date time (greater or equal).</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: ?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc.</param>
		/// <returns>Product categories.</returns>
		public async Task<ProductCategoryModel[]> ProductCategories_GetProductCategoriesAsync(bool active, int firstRow, int rowCount, string textToSearch, System.DateTimeOffset changedSince, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcategories?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCategoryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a product category.
		/// ProductCategories_PostProductCategory v1/productcategories
		/// </summary>
		/// <param name="requestBody">ProductCategoryModel.</param>
		public async Task ProductCategories_PostProductCategoryAsync(ProductCategoryModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a product category.
		/// Returns: No Content (204) if succeeded. Not found (404) if product category can't be found.
		/// ProductCategories_DeleteProductCategory v1/productcategories/{guid}
		/// </summary>
		/// <param name="guid">ID for the product category to delete.</param>
		public async Task ProductCategories_DeleteProductCategoryAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcategories/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product category by ID.
		/// ProductCategories_GetProductCategory v1/productcategories/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the product category.</param>
		/// <returns>ProductCategoryModel.</returns>
		public async Task<ProductCategoryModel> ProductCategories_GetProductCategoryAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcategories/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCategoryModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a product category or a part of it.
		/// ProductCategories_PatchProductCategory v1/productcategories/{guid}
		/// </summary>
		/// <param name="guid">ID of the product category.</param>
		/// <param name="requestBody">JSON patch document of ProductCategoryModel.</param>
		/// <returns>list of updated product category.</returns>
		public async Task<ProductCategoryModel[]> ProductCategories_PatchProductCategoryAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcategories/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCategoryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a product country setting
		/// ProductCountrySettings_PostProductCountrySettings v1/productcountrysettings
		/// </summary>
		/// <param name="requestBody">ProductCountrySettingsModel</param>
		public async Task ProductCountrySettings_PostProductCountrySettingsAsync(ProductCountrySettingsModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcountrysettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a product country setting
		/// Returns: No Content (204) if succeeded. Not found (404) if product country setting can't be found.
		/// ProductCountrySettings_DeleteProductCountrySetting v1/productcountrysettings/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the product country setting.</param>
		public async Task ProductCountrySettings_DeleteProductCountrySettingAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcountrysettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a product country setting
		/// ProductCountrySettings_PatchProductCountrySettings v1/productcountrysettings/{guid}
		/// </summary>
		/// <param name="guid">ID of the product country setting</param>
		/// <param name="requestBody">JSON patch document of ProductCountrySettingsModel</param>
		/// <returns>List of updated product country settings</returns>
		public async Task<ProductCountrySettingsModel[]> ProductCountrySettings_PatchProductCountrySettingsAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productcountrysettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCountrySettingsModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get product price by ID.
		/// ProductPrices_GetProductPrice v1/productprices/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the product price.</param>
		public async Task<ProductPriceOutputModel> ProductPrices_GetProductPriceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/productprices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductPriceOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the Products
		/// Products_GetProducts v1/products
		/// </summary>
		/// <param name="rowCount">Optional: Number of rows to fetch</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="type">Product type. if given, it filters the products by the given type.</param>
		/// <param name="isActive">If not given, return all Products, if given as true return only isActive Products, if given as false returns only inactive Products</param>
		/// <param name="code">Optional: Code of the product.</param>
		/// <param name="changedSince">Optional: Get products that have been added or changed after this date time (greater or equal).</param>
		/// <returns>All the Products</returns>
		public async Task<ProductOutputModel[]> Products_GetProductsAsync(int rowCount, string pageToken, ProductOutputModelType type, bool isActive, string code, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products?rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&type=" + type+"&isActive="+isActive+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a product.
		/// Products_PostProduct v1/products
		/// </summary>
		/// <param name="requestBody">ProductModel.</param>
		public async Task Products_PostProductAsync(ProductInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a product.
		/// Returns: No Content (204) if succeeded. Not found (404) if product can't be found.
		/// Products_DeleteProduct v1/products/{guid}
		/// </summary>
		/// <param name="guid">ID for the product to delete.</param>
		public async Task Products_DeleteProductAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product by ID.
		/// Products_GetProduct v1/products/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the product.</param>
		/// <returns>Product.</returns>
		public async Task<ProductOutputModel> Products_GetProductAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an product or a part of it.
		/// Products_PatchProduct v1/products/{guid}
		/// </summary>
		/// <param name="guid">ID of the product.</param>
		/// <param name="requestBody">JSON patch document of ProductModel.</param>
		/// <returns>List of updated products.</returns>
		public async Task<ProductOutputModel[]> Products_PatchProductAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the country settings for a product
		/// ProductCountrySettings_GetProductCountrySettings v1/products/{productGuid}/productcountrysettings
		/// </summary>
		/// <param name="productGuid">GUID of the product.</param>
		/// <returns>All the ProductCountrySettings (tax related information)</returns>
		public async Task<ProductCountrySettingsModel[]> ProductCountrySettings_GetProductCountrySettingsAsync(string productGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productGuid==null? "" : System.Uri.EscapeDataString(productGuid))+"/productcountrysettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCountrySettingsModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a billing customer for a project.
		/// ProjectBillingCustomers_PostProjectBillingCustomer v1/projectbillingcustomers
		/// </summary>
		/// <param name="requestBody">ProjectBillingCustomerModel.</param>
		public async Task ProjectBillingCustomers_PostProjectBillingCustomerAsync(ProjectBillingCustomerModel2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectbillingcustomers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project billing customer.
		/// Returns: No Content (204) if succeeded.
		/// ProjectBillingCustomers_DeleteProjectBillingCustomer v1/projectbillingcustomers/{guid}
		/// </summary>
		/// <param name="guid">GUID of the project billing customer to remove.</param>
		public async Task ProjectBillingCustomers_DeleteProjectBillingCustomerAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectbillingcustomers/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a project billing customer.
		/// ProjectBillingCustomers_GetProjectBillingCustomer v1/projectbillingcustomers/{guid}
		/// </summary>
		/// <param name="guid">ID of the project billing customer.</param>
		/// <returns>Project billing customer.</returns>
		public async Task<ProjectBillingCustomerModel2> ProjectBillingCustomers_GetProjectBillingCustomerAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectbillingcustomers/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectBillingCustomerModel2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a project billing customer.
		/// ProjectBillingCustomers_PatchProjectBillingCustomer v1/projectbillingcustomers/{guid}
		/// </summary>
		/// <param name="guid">ID of the project billing customer.</param>
		/// <param name="requestBody">JSON patch document of ProjectBillingCustomerModel.</param>
		/// <returns>list of updated project billing customer.</returns>
		public async Task<ProjectBillingCustomerModel2[]> ProjectBillingCustomers_PatchProjectBillingCustomerAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectbillingcustomers/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectBillingCustomerModel2[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the project fees.
		/// ProjectFees_GetProjectFeesByToken v1/projectfees
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch</param>
		/// <param name="changedSince">Optional: Get project fees that have been added or changed after this date time (greater or equal).</param>
		/// <returns>ProjectFee</returns>
		public async Task<ProjectFeeOutputModel[]> ProjectFees_GetProjectFeesByTokenAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectfees?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project fee.
		/// ProjectFees_PostProjectFee v1/projectfees
		/// </summary>
		/// <param name="requestBody">ProjectFeeInputModel.</param>
		public async Task ProjectFees_PostProjectFeeAsync(ProjectFeeInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectfees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project fee.
		/// Returns: No Content (204) if succeeded.
		/// ProjectFees_DeleteProjectFree v1/projectfees/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project fee.</param>
		public async Task ProjectFees_DeleteProjectFreeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectfees/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get projectFee by ID.
		/// ProjectFees_GetProjectFee v1/projectfees/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the projectFee.</param>
		public async Task<ProjectFeeOutputModel> ProjectFees_GetProjectFeeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectfees/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a projectFee or a part of it.
		/// ProjectFees_PatchProjectFee v1/projectfees/{guid}
		/// </summary>
		/// <param name="guid">ID of the project fee Can also be comma separate list of IDs to patch multiple project fees with one call. When multiple IDs are given, returns model which has list of succeeded project fees and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of ProjectFeeInputModel.</param>
		/// <returns>List of updated project fees.</returns>
		public async Task<ProjectFeeOutputModel[]> ProjectFees_PatchProjectFeeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectfees/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get project file by ID.
		/// Files_GetProjectFile v1/projectfiles/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the project file.</param>
		/// <returns>ProposalFile.</returns>
		public async Task<ProjectFileModel> Files_GetProjectFileAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectfiles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFileModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project forecast
		/// ProjectForecasts_PostForecast v1/projectforecasts
		/// </summary>
		/// <param name="requestBody">ProjectForecastOutputInputModel</param>
		public async Task ProjectForecasts_PostForecastAsync(ProjectForecastInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectforecasts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project forecast
		/// Returns: No Content (204) if succeeded. Not found (404) if product can't be found.
		/// ProjectForecasts_DeleteForecast v1/projectforecasts/{guid}
		/// </summary>
		/// <param name="guid">ID for the project forecast to delete</param>
		public async Task ProjectForecasts_DeleteForecastAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectforecasts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project forecast by ID
		/// ProjectForecasts_GetForecast v1/projectforecasts/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the project forecast.</param>
		/// <returns>Project forecast</returns>
		public async Task<ProjectForecastOutputModel> ProjectForecasts_GetForecastAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectforecasts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectForecastOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an project forecast or a part of it
		/// ProjectForecasts_PatchForecast v1/projectforecasts/{guid}
		/// </summary>
		/// <param name="guid">ID of the project forecast</param>
		/// <param name="requestBody">JSON patch document of ProjectForecastInputModel</param>
		/// <returns>List of updated Project forecast</returns>
		public async Task<ProjectForecastOutputModel[]> ProjectForecasts_PatchForecastAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectforecasts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectForecastOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new project invoice settings.
		/// ProjectInvoiceSettings_PostProjectInvoiceSettings v1/projectinvoicesettings
		/// </summary>
		/// <param name="requestBody">Project invoice settings.</param>
		public async Task ProjectInvoiceSettings_PostProjectInvoiceSettingsAsync(ProjectInvoiceSettingsInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectinvoicesettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an project invoice settings.
		/// Returns: No Content (204) if succeeded. Not found (404) if project invoice settings can't be found.
		/// ProjectInvoiceSettings_DeleteProjectInvoiceSettings v1/projectinvoicesettings/{guid}
		/// </summary>
		/// <param name="guid">ID for the project invoice settings to delete.</param>
		public async Task ProjectInvoiceSettings_DeleteProjectInvoiceSettingsAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectinvoicesettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project invoice settings by ID.
		/// ProjectInvoiceSettings_GetProjectInvoiceSetting v1/projectinvoicesettings/{guid}
		/// </summary>
		/// <param name="guid">ID of the project invoice settings.</param>
		/// <returns>The project invoice settings.</returns>
		public async Task<ProjectInvoiceSettingsOutputModel> ProjectInvoiceSettings_GetProjectInvoiceSettingAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectinvoicesettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectInvoiceSettingsOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) project invoice settings.
		/// ProjectInvoiceSettings_PatchProjectInvoiceSettings v1/projectinvoicesettings/{guid}
		/// </summary>
		/// <param name="guid">ID of the project invoice settings.</param>
		/// <param name="requestBody">JSON patch document of ProjectInvoiceSettingsInputModel.</param>
		/// <returns>The project invoice settings.</returns>
		public async Task<ProjectInvoiceSettingsOutputModel[]> ProjectInvoiceSettings_PatchProjectInvoiceSettingsAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectinvoicesettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectInvoiceSettingsOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a link to a project.
		/// Files_PostProjectLink v1/projectlinks
		/// </summary>
		/// <param name="requestBody">ProjectFileModel.</param>
		public async Task Files_PostProjectLinkAsync(ProjectFileModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectlinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a cost exception to a project member.
		/// ProjectMemberCostExceptions_Post v1/projectmembercostexceptions
		/// </summary>
		/// <param name="requestBody">ProjectMemberCostExceptionModel.</param>
		public async Task ProjectMemberCostExceptions_PostAsync(ProjectMemberCostExceptionInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectmembercostexceptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project member cost exception.
		/// Deletes project member cost exception. Returns: No Content (204) if succeeded.
		/// ProjectMemberCostExceptions_Delete v1/projectmembercostexceptions/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project member cost exception.</param>
		public async Task ProjectMemberCostExceptions_DeleteAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectmembercostexceptions/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project member cost exception by ID.
		/// ProjectMemberCostExceptions_GetProjectMemberCostException v1/projectmembercostexceptions/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the cost exception.</param>
		/// <returns>Link.</returns>
		public async Task<ProjectMemberCostExceptionOutputModel> ProjectMemberCostExceptions_GetProjectMemberCostExceptionAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectmembercostexceptions/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectMemberCostExceptionOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) project member cost exception.
		/// ProjectMemberCostExceptions_Patch v1/projectmembercostexceptions/{guid}
		/// </summary>
		/// <param name="guid">ID of the project member cost exception.</param>
		/// <param name="requestBody">JSON Patch document of ProjectMemberCostExceptionModel.</param>
		/// <returns>list of updated links.</returns>
		public async Task<ProjectMemberCostExceptionOutputModel[]> ProjectMemberCostExceptions_PatchAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectmembercostexceptions/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectMemberCostExceptionOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a product to a project.
		/// ProjectProducts_PostProjectProduct v1/projectproducts
		/// </summary>
		/// <param name="requestBody">projectProductModel</param>
		public async Task ProjectProducts_PostProjectProductAsync(ProjectProductInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectproducts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project product.
		/// Returns: No Content (204) if succeeded.
		/// ProjectProducts_DeleteProjectProduct v1/projectproducts/{guid}
		/// </summary>
		/// <param name="guid">GUID of the project product to remove.</param>
		public async Task ProjectProducts_DeleteProjectProductAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectproducts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the recurring fee rules.
		/// ProjectRecurringFeeRules_GetProjectRecurringFeeRules v1/projectrecurringfeerules
		/// </summary>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="productType">projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type.</param>
		/// <param name="changedSince">Optional: Get recurring fee rules that have been added or changed after this date time (greater or equal).</param>
		/// <returns>List of updated project recurring fee rules</returns>
		public async Task<ProjectRecurringFeeRuleOutputModel[]> ProjectRecurringFeeRules_GetProjectRecurringFeeRulesAsync(int firstRow, int rowCount, ProductOutputModelType productType, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectrecurringfeerules?firstRow="+firstRow+"&rowCount="+rowCount+"&productType=" + productType+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectRecurringFeeRuleOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a projectRecurringFeeRule.
		/// ProjectRecurringFeeRules_PostProjectRecurringFeeRule v1/projectrecurringfeerules
		/// </summary>
		/// <param name="requestBody">ProjectRecurringFeeRuleModel.</param>
		public async Task ProjectRecurringFeeRules_PostProjectRecurringFeeRuleAsync(ProjectRecurringFeeRuleInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectrecurringfeerules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a projectRecurringFeeRule.
		/// Returns: No Content (204) if succeeded.
		/// ProjectRecurringFeeRules_DeleteProjectRecurringFeeRule v1/projectrecurringfeerules/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project recurring fee rule.</param>
		public async Task ProjectRecurringFeeRules_DeleteProjectRecurringFeeRuleAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectrecurringfeerules/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project's RecurringFeeRule by ID.
		/// ProjectRecurringFeeRules_GetProjectRecurringFeeRule v1/projectrecurringfeerules/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the ProjectRecurringFeeRule.</param>
		/// <param name="includeInactive">Indicates the rule should be returned even if it is not active. Default is false.</param>
		/// <returns>List of updated project recurring fee rules.</returns>
		public async Task<ProjectRecurringFeeRuleOutputModel> ProjectRecurringFeeRules_GetProjectRecurringFeeRuleAsync(string guid, bool includeInactive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectrecurringfeerules/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&includeInactive="+includeInactive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectRecurringFeeRuleOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a projectRecurringFeeRule or a part of it.
		/// ProjectRecurringFeeRules_PatchProjectRecurringFeeRule v1/projectrecurringfeerules/{guid}
		/// </summary>
		/// <param name="guid">ID of the projectRecurringFeeRule.</param>
		/// <param name="requestBody">JSON Patch document of ProjectRecurringFeeRuleModel.</param>
		/// <returns>List of updated projectRecurringFeeRules.</returns>
		public async Task<ProjectRecurringFeeRuleOutputModel[]> ProjectRecurringFeeRules_PatchProjectRecurringFeeRuleAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectrecurringfeerules/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectRecurringFeeRuleOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the projects
		/// Projects_GetProjects v1/projects
		/// </summary>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="currencyGuid">Optional: ID of project currency.</param>
		/// <param name="changedSince">Optional: Get projects that have been added or changed after this date time (greater or equal).</param>
		/// <param name="isBillable">Optional: When true fetch projects that have something to bill, when false nothing to bill. Default nothing = all.</param>
		/// <param name="_internal">Optional: Get internal / non-internal projects.</param>
		/// <returns>Projects</returns>
		public async Task<ProjectOutputModel[]> Projects_GetProjectsAsync(
					string pageToken, 
					int rowCount, 
					string currencyGuid, 
					System.DateTimeOffset changedSince, 
					bool isBillable, 
					string[] customerGuids, 
					string[] projectGuids, 
					string[] projectKeywordGuids, 
					string[] projectStatusTypeGuids, 
					string[] salesPersonGuids, 
					string[] projectOwnerGuids, 
					string[] businessUnitGuids, 
					double minimumBillableAmount, 
					string[] customerOwnerGuids, 
					System.DateTimeOffset invoiceableDate, 
					string[] marketSegmentationGuids, 
					string[] salesStatusTypeGuids, 
					bool isClosed, 
					bool hasRecurringFees, 
					string[] companyCurrencyGuids, 
					string[] projectMemberUserGuids, 
					int[] numbers, 
					bool _internal, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&currencyGuid=" + (currencyGuid==null? "" : System.Uri.EscapeDataString(currencyGuid))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&isBillable="+isBillable+"&"+string.Join("&", customerGuids.Select(z => $"customerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectKeywordGuids.Select(z => $"projectKeywordGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectStatusTypeGuids.Select(z => $"projectStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesPersonGuids.Select(z => $"salesPersonGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectOwnerGuids.Select(z => $"projectOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", businessUnitGuids.Select(z => $"businessUnitGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&minimumBillableAmount="+minimumBillableAmount+"&"+string.Join("&", customerOwnerGuids.Select(z => $"customerOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&invoiceableDate=" + invoiceableDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", marketSegmentationGuids.Select(z => $"marketSegmentationGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesStatusTypeGuids.Select(z => $"salesStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&isClosed="+isClosed+"&hasRecurringFees="+hasRecurringFees+"&"+string.Join("&", companyCurrencyGuids.Select(z => $"companyCurrencyGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectMemberUserGuids.Select(z => $"projectMemberUserGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", numbers.Select(z => $"numbers={z}"))+"&internal="+_internal;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project
		/// When creating a new project, the price list property will be ignored, as it is chosen by default.
		/// Projects_PostProject v1/projects
		/// </summary>
		/// <param name="requestBody">ProjectInputModelBase</param>
		public async Task Projects_PostProjectAsync(ProjectInputModelBase requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the project custom properties.
		/// ProjectCustomProperties_GetProjectCustomProperties v1/projects/customproperties
		/// </summary>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="active">Optional: Get only active or inactive project properties.</param>
		/// <param name="textToSearch">Optional: Text to search from custom property name.</param>
		/// <param name="isInUse">Optional: Is the customer property used in any custom property usage.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".</param>
		public async Task<CustomPropertyModel[]> ProjectCustomProperties_GetProjectCustomPropertiesAsync(int firstRow, int rowCount, bool active, string textToSearch, bool isInUse, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties?firstRow="+firstRow+"&rowCount="+rowCount+"&active="+active+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&isInUse="+isInUse+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomPropertyModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project custom property.
		/// ProjectCustomProperties_PostProjectCustomProperty v1/projects/customproperties
		/// </summary>
		/// <param name="requestBody">ProjectCustomPropertyModel.</param>
		public async Task ProjectCustomProperties_PostProjectCustomPropertyAsync(CustomPropertyModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a project custom property selection item.
		/// ProjectCustomPropertySelectionItems_PostProjectCustomPropertySelectionItem v1/projects/customproperties/projectcustompropertyselectionitems
		/// </summary>
		/// <param name="requestBody">CustomPropertySelectionItemInputModel.</param>
		public async Task ProjectCustomPropertySelectionItems_PostProjectCustomPropertySelectionItemAsync(ProjectCustomPropertySelectionItemInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/projectcustompropertyselectionitems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project custom property selection item.
		/// Returns: No Content (204) if succeeded.
		/// ProjectCustomPropertySelectionItems_DeleteProjectCustomPropertySelectionItem v1/projects/customproperties/projectcustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project custom property selection item.</param>
		public async Task ProjectCustomPropertySelectionItems_DeleteProjectCustomPropertySelectionItemAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/projectcustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project custom property selection item by ID.
		/// ProjectCustomPropertySelectionItems_GetProjectCustomPropertySelectionItem v1/projects/customproperties/projectcustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the project custom property selection item.</param>
		public async Task<ProjectCustomPropertySelectionItemOutputModel> ProjectCustomPropertySelectionItems_GetProjectCustomPropertySelectionItemAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/projectcustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCustomPropertySelectionItemOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a project custom property selection item or a part of it.
		/// ProjectCustomPropertySelectionItems_PatchProjectCustomPropertySelectionItem v1/projects/customproperties/projectcustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">ID of the project custom property selection item.</param>
		/// <param name="requestBody">JSON Patch document of ProjectCustomPropertySelectionItemInputModel.</param>
		/// <returns>List of updated project custom properties.</returns>
		public async Task<ProjectCustomPropertySelectionItemOutputModel[]> ProjectCustomPropertySelectionItems_PatchProjectCustomPropertySelectionItemAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/projectcustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCustomPropertySelectionItemOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the project custom properties.
		/// ProjectCustomPropertySelectionItems_GetProjectCustomPropertySelectionItems v1/projects/customproperties/{customPropertyGuid}/projectcustompropertyselectionitems
		/// </summary>
		/// <param name="customPropertyGuid">Custom property id used to get the project custom property selection items.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isActive">Optional: Get only active or inactive selection items.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="changedSince">Optional: Get custom property selection items that have been added or changed after this date time (greater or equal).</param>
		public async Task<ProjectCustomPropertySelectionItemOutputModel[]> ProjectCustomPropertySelectionItems_GetProjectCustomPropertySelectionItemsAsync(string customPropertyGuid, int rowCount, bool isActive, string pageToken, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/"+ (customPropertyGuid==null? "" : System.Uri.EscapeDataString(customPropertyGuid))+"/projectcustompropertyselectionitems&rowCount="+rowCount+"&isActive="+isActive+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCustomPropertySelectionItemOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a project custom property.
		/// Returns: No Content (204) if succeeded.
		/// ProjectCustomProperties_DeleteProjectCustomProperty v1/projects/customproperties/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project custom property.</param>
		public async Task ProjectCustomProperties_DeleteProjectCustomPropertyAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project custom property by ID.
		/// ProjectCustomProperties_GetProjectCustomProperty v1/projects/customproperties/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the project custom property.</param>
		public async Task<CustomPropertyModel> ProjectCustomProperties_GetProjectCustomPropertyAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomPropertyModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a project custom property or a part of it.
		/// ProjectCustomProperties_PatchProjectCustomProperty v1/projects/customproperties/{guid}
		/// </summary>
		/// <param name="guid">ID of the project custom property Can also be comma separate list of IDs to patch multiple project custom properties with one call. When multiple IDs are given, returns model which has list of succeeded project custom properties and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of ProjectCustomPropertyModel.</param>
		/// <returns>List of updated project custom properties.</returns>
		public async Task<CustomPropertyModel[]> ProjectCustomProperties_PatchProjectCustomPropertyAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomPropertyModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a project custom value.
		/// ProjectCustomValues_PostProjectCustomValue v1/projects/customvalues
		/// </summary>
		/// <param name="requestBody">ProjectCustomValueModel.</param>
		public async Task ProjectCustomValues_PostProjectCustomValueAsync(ProjectCustomValueModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customvalues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project custom value.
		/// Returns: No Content (204) if succeeded.
		/// ProjectCustomValues_DeleteProjectCustomValue v1/projects/customvalues/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project custom value.</param>
		public async Task ProjectCustomValues_DeleteProjectCustomValueAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project custom value by ID.
		/// ProjectCustomValues_GetProjectCustomValue v1/projects/customvalues/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the project custom value.</param>
		public async Task<ProjectCustomValueModel> ProjectCustomValues_GetProjectCustomValueAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCustomValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a project custom value or a part of it.
		/// ProjectCustomValues_PatchProjectCustomValue v1/projects/customvalues/{guid}
		/// </summary>
		/// <param name="guid">ID of the project custom value Can also be comma separate list of IDs to patch multiple project custom values with one call. When multiple IDs are given, returns model which has list of succeeded project custom values and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of ProjectCustomValueModel.</param>
		/// <returns>List of updated project custom values.</returns>
		public async Task<ProjectCustomValueModel[]> ProjectCustomValues_PatchProjectCustomValueAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCustomValueModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project
		/// Returns: No Content (204) if succeeded. Not found (404) if project can't be found.
		/// Projects_DeleteProject v1/projects/{guid}
		/// </summary>
		/// <param name="guid">ID for the project to delete</param>
		public async Task Projects_DeleteProjectAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project by ID
		/// Projects_GetProject v1/projects/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the project.</param>
		public async Task<ProjectOutputModel> Projects_GetProjectAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a project or a part of it
		/// To update current project status, give ProjectStatusTypeGuid and possibly Description. To update current sales status, give SalesStatusTypeGuid (
		/// Projects_PatchProject v1/projects/{guid}
		/// </summary>
		/// <param name="guid">ID of the project</param>
		/// <param name="requestBody">JSON Patch document of ProjectInputModel</param>
		/// <returns>List of updated projects</returns>
		public async Task<ProjectOutputModel[]> Projects_PatchProjectAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get project's phases as flat list
		/// Phases_GetProjectPhases v1/projects/{guid}/phaseswithhierarchy
		/// </summary>
		/// <param name="guid">Id of the project.</param>
		/// <returns>All the phases for the project</returns>
		public async Task<PhaseModelWithHierarchyInfo[]> Phases_GetProjectPhasesAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/phaseswithhierarchy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseModelWithHierarchyInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the project custom values.
		/// ProjectCustomValues_GetProjectCustomValues v1/projects/{projectGuid}/customvalues
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="active">Optional: Get only values of active or inactive project custom properties.</param>
		/// <param name="target">List of target for which to get the values.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (sub-model fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".</param>
		public async Task<ProjectCustomValueModel[]> ProjectCustomValues_GetProjectCustomValuesAsync(string projectGuid, int firstRow, int rowCount, bool active, string[] target, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/customvalues&firstRow="+firstRow+"&rowCount="+rowCount+"&active="+active+"&"+string.Join("&", target.Select(z => $"target={System.Uri.EscapeDataString(z.ToString())}"))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectCustomValueModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all files of a project by its id.
		/// Files_GetProjectFiles v1/projects/{projectGuid}/files
		/// </summary>
		/// <param name="projectGuid">GUID of the project used to get the files.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc&sortings[1].key=Number&sortings[1].value=Asc".</param>
		/// <returns>File.</returns>
		public async Task<ProjectFileModel[]> Files_GetProjectFilesAsync(string projectGuid, int firstRow, int rowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/files&firstRow="+firstRow+"&rowCount="+rowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFileModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project's flat rates.
		/// FlatRates_GetFlatratesForProject v1/projects/{projectGuid}/flatrates
		/// </summary>
		/// <param name="projectGuid">Id of the project.</param>
		/// <returns>All the flat rates for the project.</returns>
		public async Task<FlatRateOutputModel[]> FlatRates_GetFlatratesForProjectAsync(string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/flatrates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlatRateOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the keywords for project.
		/// Keywords_GetProjectKeywords v1/projects/{projectGuid}/keywords
		/// </summary>
		/// <param name="projectGuid">ID of the project for which keywords are requested.</param>
		/// <param name="active">If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".</param>
		/// <returns>Keywords.</returns>
		public async Task<ProjectKeywordModel[]> Keywords_GetProjectKeywordsAsync(string projectGuid, bool active, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/keywords&active="+active+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectKeywordModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a keyword from the project
		/// Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found.
		/// Keywords_DeleteProjectKeyword v1/projects/{projectGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_DeleteProjectKeywordAsync(string projectGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Link existing keyword to project
		/// Keywords_LinkKeywordToProject v1/projects/{projectGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_LinkKeywordToProjectAsync(string projectGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the overtimePrices for a project.
		/// OvertimePrices_GetOvertimePricesForProject v1/projects/{projectGuid}/overtimeprices
		/// </summary>
		/// <returns>Projects.</returns>
		public async Task<OvertimePriceModel[]> OvertimePrices_GetOvertimePricesForProjectAsync(string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/overtimeprices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OvertimePriceModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create custom price list for a project. If project already has a custom price list returns existing price list.
		/// Creates a new price list if project doesn't have a custom price list.
		/// Project can only have one custom price list.
		/// Note that project's price list will be changed to the custom price list created here and
		/// also existing prices are copied to the new price list.
		/// PriceLists_PostCustomPricelist v1/projects/{projectGuid}/pricelists/custom
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <param name="isVolumePricing">Get the custom volume pricing price list or regular custom price list. Default is false.</param>
		public async Task PriceLists_PostCustomPricelistAsync(string projectGuid, bool isVolumePricing, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/pricelists/custom&isVolumePricing="+isVolumePricing;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the productPrices for a project.
		/// ProductPrices_GetProductPricesForProject v1/projects/{projectGuid}/productprices
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <param name="fromPricelistOnly">If true return only prices from the price list, if false also returns prices from the products. Default is false.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from Product name.</param>
		/// <param name="calculateRowCount">Optional: Calculate the number of total rows. Default false = total row count is returned as zero.</param>
		/// <param name="isAvailable">Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all.</param>
		/// <param name="productCode">Optional: Absolute search for products with specified product code.</param>
		/// <param name="productGuids">Optional: Search all product price(s) by products guid(s).</param>
		/// <param name="isVolumePriced">Optional: If true, return only volume priced products. If false, return all non volume priced products. Default is null, which means return all products.</param>
		/// <param name="productCategoryGuids">Optional: Search product prices according to product category / categories by product category guid(s).</param>
		/// <param name="productTypes">Optional: Search product prices according to product type / types.</param>
		/// <returns>Projects.</returns>
		public async Task<ProductPriceOutputModel[]> ProductPrices_GetProductPricesForProjectAsync(string projectGuid, bool fromPricelistOnly, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, bool isAvailable, string productCode, string[] productGuids, bool isVolumePriced, string[] productCategoryGuids, ProductType[] productTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/productprices&fromPricelistOnly="+fromPricelistOnly+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&isAvailable="+isAvailable+"&productCode=" + (productCode==null? "" : System.Uri.EscapeDataString(productCode))+"&"+string.Join("&", productGuids.Select(z => $"productGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&isVolumePriced="+isVolumePriced+"&"+string.Join("&", productCategoryGuids.Select(z => $"productCategoryGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", productTypes.Select(z => $"productTypes={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductPriceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets available products for the given project where price information comes from projects price list
		/// Products_GetSearchedProducts v1/projects/{projectGuid}/productsforproject
		/// </summary>
		/// <param name="projectGuid">Id of the project</param>
		/// <param name="rowCount">Optional: Number of rows to fetch</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="type">Product type. if given, it filters the products by the given type</param>
		/// <param name="includeProductsFromRegistry">Optional: If true returns all the products from registry with project specific prices. If false returns only products specified for the project with project specific prices. Default false.</param>
		/// <returns>All the Products matching search criteria</returns>
		public async Task<ProductForProjectOutputModel[]> Products_GetSearchedProductsAsync(string projectGuid, int rowCount, string pageToken, ProductOutputModelType type, bool includeProductsFromRegistry, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/productsforproject&rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&type=" + type+"&includeProductsFromRegistry="+includeProductsFromRegistry;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductForProjectOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the billing customers for a project
		/// ProjectBillingCustomers_GetWorkHourPricesForProject v1/projects/{projectGuid}/projectbillingcustomers
		/// </summary>
		/// <returns>Project's billing customers</returns>
		public async Task<ProjectBillingCustomerModel[]> ProjectBillingCustomers_GetWorkHourPricesForProjectAsync(string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectbillingcustomers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectBillingCustomerModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project fees for a project
		/// ProjectFees_GetProjectFeesForProject v1/projects/{projectGuid}/projectfees
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="productType">Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting</param>
		/// <param name="isBillable">Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.</param>
		/// <param name="isBilled">Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.</param>
		/// <param name="invoiceableDate">Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null.</param>
		/// <param name="includeRecurringRules">Optional: Also fetches recurring rules along with project fees. Default is false.</param>
		/// <param name="isBillablePeriodInFuture">Optional. Filter the project fees. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.</param>
		/// <returns>ProjectFees</returns>
		public async Task<ProjectFeeOutputModel[]> ProjectFees_GetProjectFeesForProjectAsync(string projectGuid, string pageToken, int rowCount, ProductOutputModelType productType, bool isBillable, bool isBilled, System.DateTimeOffset invoiceableDate, bool includeRecurringRules, bool isBillablePeriodInFuture, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectfees&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&productType=" + productType+"&isBillable="+isBillable+"&isBilled="+isBilled+"&invoiceableDate=" + invoiceableDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&includeRecurringRules="+includeRecurringRules+"&isBillablePeriodInFuture="+isBillablePeriodInFuture;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the project forecasts from a month onward, including the given month.
		/// ProjectForecasts_DeleteForecasts v1/projects/{projectGuid}/projectforecasts
		/// </summary>
		/// <param name="projectGuid">Project for the forecasts to delete</param>
		/// <param name="year">Year where to start deleting the forecasts</param>
		/// <param name="month">Month where to start deleting the forecasts</param>
		public async Task ProjectForecasts_DeleteForecastsAsync(string projectGuid, int year, int month, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectforecasts&year="+year+"&month="+month;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the project forecasts
		/// ProjectForecasts_GetForecasts v1/projects/{projectGuid}/projectforecasts
		/// </summary>
		/// <param name="projectGuid">project for the forecasts</param>
		/// <param name="startDate">Start date of the date range for the forecasts</param>
		/// <param name="endDate">End date of the date range for the forecasts</param>
		/// <returns>List of project forecasts.</returns>
		public async Task<ProjectForecastOutputModel[]> ProjectForecasts_GetForecastsAsync(string projectGuid, System.DateTimeOffset startDate, System.DateTimeOffset endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectforecasts&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectForecastOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project invoice settings by project ID.
		/// ProjectInvoiceSettings_GetProjectInvoiceSettings v1/projects/{projectGuid}/projectinvoicesettings
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <returns>The project invoice settings.</returns>
		public async Task<ProjectInvoiceSettingsOutputModel[]> ProjectInvoiceSettings_GetProjectInvoiceSettingsAsync(string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectinvoicesettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectInvoiceSettingsOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all cost exceptions of project members for a project.
		/// ProjectMemberCostExceptions_GetProjectMemberCostExceptionsForProject v1/projects/{projectGuid}/projectmembercostexceptions
		/// </summary>
		/// <param name="projectGuid">Guid of the project.</param>
		/// <param name="userGuid">Optional: Guid of the user.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>All the member cost exceptions for one project.</returns>
		public async Task<ProjectMemberCostExceptionOutputModel[]> ProjectMemberCostExceptions_GetProjectMemberCostExceptionsForProjectAsync(string projectGuid, string userGuid, int firstRow, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectmembercostexceptions&userGuid=" + (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"&firstRow="+firstRow+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectMemberCostExceptionOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all project products of a project.
		/// Returns: No Content (204) if succeeded.
		/// ProjectProducts_DeleteAllProjectProducts v1/projects/{projectGuid}/projectproducts
		/// </summary>
		/// <param name="projectGuid">GUID of the project from where project products to remove.</param>
		public async Task ProjectProducts_DeleteAllProjectProductsAsync(string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectproducts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project products
		/// This is the same as organization's list of products, unless the project has some specific products and UseProductsFromSetting in project model is set to false.
		/// ProjectProducts_GetProjectProducts v1/projects/{projectGuid}/projectproducts
		/// </summary>
		/// <param name="projectGuid">GUID of the project.</param>
		/// <param name="includeProductsFromRegistry">Optional: Includes products available from product registry</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="active">Fetch only active</param>
		/// <returns>A list of products for the project.</returns>
		public async Task<ProjectProductOutputModel[]> ProjectProducts_GetProjectProductsAsync(string projectGuid, bool includeProductsFromRegistry, string pageToken, int rowCount, bool active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectproducts&includeProductsFromRegistry="+includeProductsFromRegistry+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&active="+active;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectProductOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the Recurring Fee Rules for a project
		/// ProjectRecurringFeeRules_GetProjectRecurringFeeRulesForProject v1/projects/{projectGuid}/projectrecurringfeerules
		/// </summary>
		/// <param name="projectGuid">ID of the project to get the recurring fee rules.</param>
		/// <param name="productType">projectRecurringFeeRule's product type. if given, it filters the projectRecurringFeeRules by the given type.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isBillablePeriodInFuture">Optional. Filter the project recurring fee rules. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.</param>
		/// <param name="billableTimePeriod">the time period for any uninvoiced recurring rules.</param>
		/// <returns>List of updated project recurring fee rules</returns>
		public async Task<ProjectRecurringFeeRuleOutputModel[]> ProjectRecurringFeeRules_GetProjectRecurringFeeRulesForProjectAsync(string projectGuid, ProductOutputModelType productType, int firstRow, int rowCount, bool isBillablePeriodInFuture, BillablePeriod billableTimePeriod, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectrecurringfeerules&productType=" + productType+"&firstRow="+firstRow+"&rowCount="+rowCount+"&isBillablePeriodInFuture="+isBillablePeriodInFuture+"&billableTimePeriod=" + billableTimePeriod;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectRecurringFeeRuleOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sales notes of a case.
		/// SalesNotes_GetProjectSalesNotes v1/projects/{projectGuid}/projectsalesnotes
		/// </summary>
		/// <param name="projectGuid">Project guid used to get the notes.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get sales notes that have been added or changed after this date time (greater or equal).</param>
		/// <returns>List of sales notes for a project.</returns>
		public async Task<ProjectSalesNoteOutputModel[]> SalesNotes_GetProjectSalesNotesAsync(string projectGuid, string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectsalesnotes&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectSalesNoteOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project travel expenses for a project
		/// ProjectTravelExpenses_GetProjectTravelExpensesForProject v1/projects/{projectGuid}/projecttravelexpenses
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <param name="isBillable">Optional: Filter the travel expenses. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.</param>
		/// <param name="isBilled">Optional: Filter the travel expenses. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.</param>
		/// <param name="invoiceableDate">Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isBillablePeriodInFuture">Optional. Filter the project travel expenses. If true/false, only the ones that will be billable in the future are returned. If null, all are returned. Default is false.</param>
		/// <param name="expenseClass">Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense</param>
		/// <returns>ProjectTravelExpenseOutputModel</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_GetProjectTravelExpensesForProjectAsync(string projectGuid, bool isBillable, bool isBilled, System.DateTimeOffset invoiceableDate, string pageToken, int rowCount, bool isBillablePeriodInFuture, ExpensesClass expenseClass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projecttravelexpenses&isBillable="+isBillable+"&isBilled="+isBilled+"&invoiceableDate=" + invoiceableDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isBillablePeriodInFuture="+isBillablePeriodInFuture+"&expenseClass=" + expenseClass;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the work hour prices for a project
		/// ProjectWorkHourPrices_GetWorkHourPricesForProject v1/projects/{projectGuid}/projectworkhourprices
		/// </summary>
		/// <param name="projectGuid">Guid of the project.</param>
		/// <param name="fromPricelistOnly">If true return only prices from the price list, if false also returns prices from the products. Default is false.</param>
		/// <param name="isAvailable">Optional: If true, returns only prices that are available for the project, false returns price that are not available. Default all.</param>
		/// <param name="changedSince">Optional: Get project work hour prices that have been added or changed after this date time (greater or equal).</param>
		/// <returns>Projects</returns>
		public async Task<ProjectWorkHourPriceOutputModel[]> ProjectWorkHourPrices_GetWorkHourPricesForProjectAsync(string projectGuid, bool fromPricelistOnly, bool isAvailable, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectworkhourprices&fromPricelistOnly="+fromPricelistOnly+"&isAvailable="+isAvailable+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectWorkHourPriceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project work types.
		/// This is the same as organization's list of work types, unless the project has some specific work types and "UseWorktypesFromSetting" in project model is set to false.
		/// ProjectWorkTypes_GetProjectWorktypes v1/projects/{projectGuid}/projectworktypes
		/// </summary>
		/// <param name="projectGuid">GUID of the project.</param>
		/// <param name="includeWorktypesFromRegistry">Include work types also from registry. If false, returns only project specific work types. Default false.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="active">If not given, return all work types, if given as true return only active work types, if given as false returns only inactive work types.</param>
		/// <param name="textToSearch">Optional: Text to search from work type name.</param>
		/// <param name="changedSince">Optional: Get project work types that have been added or changed after this date time (greater or equal).</param>
		/// <returns>A list of work types for the project.</returns>
		public async Task<ProjectWorkTypeModel[]> ProjectWorkTypes_GetProjectWorktypesAsync(string projectGuid, bool includeWorktypesFromRegistry, int firstRow, int rowCount, bool active, string textToSearch, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/projectworktypes&includeWorktypesFromRegistry="+includeWorktypesFromRegistry+"&firstRow="+firstRow+"&rowCount="+rowCount+"&active="+active+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectWorkTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the proposals for a project
		/// Proposals_GetProposalsForProject v1/projects/{projectGuid}/proposals
		/// </summary>
		/// <param name="projectGuid">Project id for which to get proposals.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="changedSince">Optional: Get proposals that have been added or changed after this date time (greater or equal).</param>
		/// <returns>Proposal</returns>
		public async Task<ProposalOutputModel[]> Proposals_GetProposalsForProjectAsync(string projectGuid, string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/proposals&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get resource allocations for a project with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
		/// ResourceAllocations_GetResourceAllocationsByProjectGuid v1/projects/{projectGuid}/resourceallocations/allocations
		/// </summary>
		/// <param name="startDate">Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days</param>
		/// <param name="endDate">Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days</param>
		/// <param name="changedSince">Optional: Get resource allocations that have been added or changed after this date time (greater or equal).</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		public async Task<ResourceAllocationOutputModel> ResourceAllocations_GetResourceAllocationsByProjectGuidAsync(
					string projectGuid, 
					System.DateTimeOffset startDate, 
					System.DateTimeOffset endDate, 
					System.DateTimeOffset changedSince, 
					LicenseUserType[] userLicenseTypes, 
					string phaseGuid, 
					string userGuid, 
					string projectBusinessUnitGuid, 
					string userBusinessUnitGuid, 
					string projectManagerUserGuid, 
					string userTagGuid, 
					bool useSalesProbability, 
					string projectStatusTypeGuid, 
					string projectTagGuid, 
					string superiorUserGuid, 
					string salesStatusTypeGuid, 
					string resourceAllocationGuid, 
					SalesProgress salesProgress, 
					int rowCount, 
					string pageToken, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/resourceallocations/allocations&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", userLicenseTypes.Select(z => $"userLicenseTypes={z}"))+"&phaseGuid=" + (phaseGuid==null? "" : System.Uri.EscapeDataString(phaseGuid))+"&userGuid=" + (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"&projectBusinessUnitGuid=" + (projectBusinessUnitGuid==null? "" : System.Uri.EscapeDataString(projectBusinessUnitGuid))+"&userBusinessUnitGuid=" + (userBusinessUnitGuid==null? "" : System.Uri.EscapeDataString(userBusinessUnitGuid))+"&projectManagerUserGuid=" + (projectManagerUserGuid==null? "" : System.Uri.EscapeDataString(projectManagerUserGuid))+"&userTagGuid=" + (userTagGuid==null? "" : System.Uri.EscapeDataString(userTagGuid))+"&useSalesProbability="+useSalesProbability+"&projectStatusTypeGuid=" + (projectStatusTypeGuid==null? "" : System.Uri.EscapeDataString(projectStatusTypeGuid))+"&projectTagGuid=" + (projectTagGuid==null? "" : System.Uri.EscapeDataString(projectTagGuid))+"&superiorUserGuid=" + (superiorUserGuid==null? "" : System.Uri.EscapeDataString(superiorUserGuid))+"&salesStatusTypeGuid=" + (salesStatusTypeGuid==null? "" : System.Uri.EscapeDataString(salesStatusTypeGuid))+"&resourceAllocationGuid=" + (resourceAllocationGuid==null? "" : System.Uri.EscapeDataString(resourceAllocationGuid))+"&salesProgress=" + salesProgress+"&rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sales status history for a project
		/// SalesStatusHistory_GetSalesStatusHistory v1/projects/{projectGuid}/salesstatushistory
		/// </summary>
		/// <param name="projectGuid">The project for which the sales status history is fetched.</param>
		/// <returns>Sales status history</returns>
		public async Task<SalesStatusHistoryOutputModel[]> SalesStatusHistory_GetSalesStatusHistoryAsync(string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/salesstatushistory";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesStatusHistoryOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get team productivity of a project.
		/// TeamProductivity_GetTeamProductivity v1/projects/{projectGuid}/teamproductivity
		/// </summary>
		/// <param name="projectGuid">GUID of the project.</param>
		/// <returns>List of project members with team productivity information.</returns>
		public async Task<TeamProductivityOutputModel[]> TeamProductivity_GetTeamProductivityAsync(string projectGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/teamproductivity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamProductivityOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search active travel expense types of project by part of the name or code.
		/// TravelExpenseTypes_GetSearchedTravelExpenseTypes v1/projects/{projectGuid}/travelexpensetypes
		/// </summary>
		/// <param name="projectGuid">Id of the project.</param>
		/// <param name="textToSearch">Searched string: part of name or code.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="userGuid">Optional: Id of the user to fetch travels for.</param>
		/// <param name="expenseClass">Optional: Expense class of the travel. Mileage/DailyAllowance/OtherTravelExpense.</param>
		/// <returns>All the Travel expense types matching search criteria.</returns>
		public async Task<TravelExpenseTypeOutputModel[]> TravelExpenseTypes_GetSearchedTravelExpenseTypesAsync(string projectGuid, string textToSearch, int firstRow, int rowCount, string userGuid, ExpensesClass expenseClass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/travelexpensetypes&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&firstRow="+firstRow+"&rowCount="+rowCount+"&userGuid=" + (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"&expenseClass=" + expenseClass;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelExpenseTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the travel prices for a project.
		/// TravelPrices_GetTravelPricesForProject v1/projects/{projectGuid}/travelprices
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <param name="fromPricelistOnly">If true return only prices from the price list, if false also returns prices from the settings. Default is false.</param>
		/// <param name="expenseClasses">Optional: List of expense classes to search by, defaults to all travel categories.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from Product name.</param>
		/// <param name="calculateRowCount">Optional: Calculate the number of total rows. Default false = total row count is returned as zero.</param>
		/// <returns>TravelPriceModel.</returns>
		public async Task<TravelPriceOutputModel[]> TravelPrices_GetTravelPricesForProjectAsync(string projectGuid, bool fromPricelistOnly, ExpensesClass[] expenseClasses, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/travelprices&fromPricelistOnly="+fromPricelistOnly+"&"+string.Join("&", expenseClasses.Select(z => $"expenseClasses={z}"))+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelPriceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the work hours for phases of a project for invoicing
		/// WorkHours_GetProjectWorkHours v1/projects/{projectGuid}/workhours
		/// </summary>
		/// <param name="projectGuid">ID of the project.</param>
		/// <param name="isBillable">Optional: Filter the work hours. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.</param>
		/// <param name="isBilled">Optional: Filter the work hours. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.</param>
		/// <param name="startDate">Optional: starting date from which to get the hours. Default all.</param>
		/// <param name="endDate">Optional: starting date to which to get the hours. Default all.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>WorkHours</returns>
		public async Task<WorkHourOutputModel[]> WorkHours_GetProjectWorkHoursAsync(string projectGuid, bool isBillable, bool isBilled, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/workhours&isBillable="+isBillable+"&isBilled="+isBilled+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search active work types by part of the name or code.
		/// WorkTypes_GetSearchedWorktypes v1/projects/{projectGuid}/worktypesforproject
		/// </summary>
		/// <param name="projectGuid">Id of the case to which proposal is connected.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Searched string: part of name or code.</param>
		/// <returns>All the work types matching search criteria.</returns>
		public async Task<WorktypeForProjectOutputModel[]> WorkTypes_GetSearchedWorktypesAsync(string projectGuid, int firstRow, int rowCount, string textToSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"/worktypesforproject&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorktypeForProjectOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project sales note.
		/// SalesNotes_PostProjectSalesNotes v1/projectsalesnotes
		/// </summary>
		/// <param name="requestBody">SalesNoteOutputModel</param>
		public async Task SalesNotes_PostProjectSalesNotesAsync(ProjectSalesNoteInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectsalesnotes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project sales note.
		/// Returns: No Content (204) if succeeded. OK (200) if note has child notes and can't be deleted. It is marked as IsDeleted = true. Not found (404) if note can't be found.
		/// SalesNotes_DeleteProjectSalesNote v1/projectsalesnotes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project sales note.</param>
		public async Task SalesNotes_DeleteProjectSalesNoteAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectsalesnotes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project sales note by ID.
		/// SalesNotes_GetProjectSalesNote v1/projectsalesnotes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the project sales note.</param>
		/// <returns>ProjectNote</returns>
		public async Task<ProjectSalesNoteOutputModel> SalesNotes_GetProjectSalesNoteAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectsalesnotes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectSalesNoteOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a project sales note or a part of it.
		/// SalesNotes_PatchProjectSalesNote v1/projectsalesnotes/{guid}
		/// </summary>
		/// <param name="guid">ID of the project sales note.</param>
		/// <param name="requestBody">JSON patch document of project sales note model.</param>
		/// <returns>list of updated sales notes.</returns>
		public async Task<ProjectSalesNoteOutputModel[]> SalesNotes_PatchProjectSalesNoteAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectsalesnotes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectSalesNoteOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the ProjectStatusTypes
		/// ProjectStatusTypes_GetProjectStatusTypes v1/projectstatustypes
		/// </summary>
		/// <param name="active">If not given, return all ProjectStatusTypes, if given as true return only active ProjectStatusTypes, if given as false returns only inactive ProjectStatusTypes</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from ProjectStatusType name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc&sortings[1].key=isActive&sortings[1].value=Asc"</param>
		/// <returns>All the ProjectStatusTypes</returns>
		public async Task<ProjectStatusTypeModel[]> ProjectStatusTypes_GetProjectStatusTypesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectstatustypes?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectStatusTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project status type
		/// ProjectStatusTypes_PostProjectStatusType v1/projectstatustypes
		/// </summary>
		/// <param name="requestBody">ProjectStatusTypeModel</param>
		public async Task ProjectStatusTypes_PostProjectStatusTypeAsync(ProjectStatusTypeModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectstatustypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a projectStatusType
		/// Returns: No Content (204) if succeeded. Not found (404) if projectStatusType can't be found.
		/// ProjectStatusTypes_DeleteProjectStatusType v1/projectstatustypes/{guid}
		/// </summary>
		/// <param name="guid">ID for the projectStatusType to delete</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the project status type to which to move usages of this project status type. Default null. If project status type is in use and usages aren't moved the deletion might fail.</param>
		public async Task ProjectStatusTypes_DeleteProjectStatusTypeAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectstatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get projectStatusType by ID
		/// ProjectStatusTypes_GetProjectStatusType v1/projectstatustypes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the projectStatusType.</param>
		/// <returns>projectStatusType</returns>
		public async Task<ProjectStatusTypeModel> ProjectStatusTypes_GetProjectStatusTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectstatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectStatusTypeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a projectStatusType or a part of it
		/// ProjectStatusTypes_PatchProjectStatusType v1/projectstatustypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the projectStatusType</param>
		/// <param name="requestBody">JSON patch document of ProjectStatusTypeModel</param>
		/// <returns>List of updated business units</returns>
		public async Task<ProjectStatusTypeModel[]> ProjectStatusTypes_PatchProjectStatusTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectstatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectStatusTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the project task statuses.
		/// ProjectTaskStatuses_GetProjectTaskStatuses v1/projecttaskstatuses
		/// </summary>
		/// <param name="active">If not given, return all project task statuses, if given as true return only active project task statuses, if given as false returns only inactive project task statuses.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from activity type name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".</param>
		/// <returns>List of Activity Types.</returns>
		public async Task<ProjectTaskStatusModel[]> ProjectTaskStatuses_GetProjectTaskStatusesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttaskstatuses?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTaskStatusModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project task status.
		/// ProjectTaskStatuses_PostProjectTaskStatus v1/projecttaskstatuses
		/// </summary>
		/// <param name="requestBody">ProjectTaskStatusModel.</param>
		public async Task ProjectTaskStatuses_PostProjectTaskStatusAsync(ProjectTaskStatusModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttaskstatuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project task status.
		/// Returns: No Content (204) if succeeded. Not found (404) if product can't be found.
		/// ProjectTaskStatuses_DeleteProjectTaskStatus v1/projecttaskstatuses/{guid}
		/// </summary>
		/// <param name="guid">ID for the project task status to delete.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the project task status to which to move usages of this project task status. Default null.</param>
		public async Task ProjectTaskStatuses_DeleteProjectTaskStatusAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttaskstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Project task status by ID.
		/// ProjectTaskStatuses_GetProjectTaskStatus v1/projecttaskstatuses/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Project task status.</param>
		/// <returns>Project task status.</returns>
		public async Task<ProjectTaskStatusModel> ProjectTaskStatuses_GetProjectTaskStatusAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttaskstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTaskStatusModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an Project task status or a part of it.
		/// ProjectTaskStatuses_PatchProjectTaskStatus v1/projecttaskstatuses/{guid}
		/// </summary>
		/// <param name="guid">ID of the Project task status.</param>
		/// <param name="requestBody">JSON patch document of ProjectTaskStatusModel.</param>
		/// <returns>List of updated Project task status.</returns>
		public async Task<ProjectTaskStatusModel[]> ProjectTaskStatuses_PatchProjectTaskStatusAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttaskstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTaskStatusModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get travel expense file by ID.
		/// Files_GetTravelExpenseFile v1/projecttravelexpensefiles/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the travel expense file.</param>
		/// <returns>InvoiceFile.</returns>
		public async Task<ProjectTravelExpenseFileModel> Files_GetTravelExpenseFileAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttravelexpensefiles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseFileModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the project travel expenses.
		/// ProjectTravelExpenses_GetProjectTravelExpenses v1/projecttravelexpenses
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get project travel expenses that have been added or changed after this date time (greater or equal).</param>
		/// <returns>ProjectTravelExpenseOutputModel</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_GetProjectTravelExpensesAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttravelexpenses?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a project travel expense.
		/// ProjectTravelExpenses_PostProjectTravelExpense v1/projecttravelexpenses
		/// </summary>
		/// <param name="requestBody">ProjectTravelExpenseInputModel.</param>
		public async Task ProjectTravelExpenses_PostProjectTravelExpenseAsync(ProjectTravelExpenseInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttravelexpenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project travel expense.
		/// Returns: No Content (204) if succeeded.
		/// ProjectTravelExpenses_DeleteProjectTravelExpense v1/projecttravelexpenses/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the project travel expense.</param>
		public async Task ProjectTravelExpenses_DeleteProjectTravelExpenseAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttravelexpenses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project travel expense by ID.
		/// ProjectTravelExpenses_GetProjectTravelExpense v1/projecttravelexpenses/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the project travel expense.</param>
		/// <returns>ProjectTravelExpenseOutputModel.</returns>
		public async Task<ProjectTravelExpenseOutputModel> ProjectTravelExpenses_GetProjectTravelExpenseAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttravelexpenses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a project travel expense or a part of it.
		/// ProjectTravelExpenses_PatchProjectTravelExpense v1/projecttravelexpenses/{guid}
		/// </summary>
		/// <param name="guid">ID of the project travel expense.</param>
		/// <param name="requestBody">JSON Patch document of ProjectTravelExpenseInputModel.</param>
		/// <returns>List of updated project travel expenses.</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_PatchProjectTravelExpenseAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttravelexpenses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all files of a travel expense by its id.
		/// Files_GetTravelExpenseFiles v1/projecttravelexpenses/{projectTravelExpenseGuid}/files
		/// </summary>
		/// <param name="projectTravelExpenseGuid">GUID of the travel expense used to get the files.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <returns>TravelExpenseFile.</returns>
		public async Task<ProjectTravelExpenseFileModel[]> Files_GetTravelExpenseFilesAsync(string projectTravelExpenseGuid, int firstRow, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projecttravelexpenses/"+ (projectTravelExpenseGuid==null? "" : System.Uri.EscapeDataString(projectTravelExpenseGuid))+"/files&firstRow="+firstRow+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseFileModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a work hour price
		/// ProjectWorkHourPrices_PostProjectWorkHourPrice v1/projectworkhourprices
		/// </summary>
		/// <param name="requestBody">ProjectWorkHourPriceInputModel</param>
		public async Task ProjectWorkHourPrices_PostProjectWorkHourPriceAsync(ProjectWorkHourPriceInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectworkhourprices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a work hour price
		/// Returns: No Content (204) if succeeded.
		/// ProjectWorkHourPrices_DeleteProjectWorkHourPrice v1/projectworkhourprices/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the work hour price.</param>
		public async Task ProjectWorkHourPrices_DeleteProjectWorkHourPriceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectworkhourprices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project work hour price by ID
		/// ProjectWorkHourPrices_GetProjectWorkHourPrice v1/projectworkhourprices/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the work hour price.</param>
		public async Task<ProjectWorkHourPriceOutputModel> ProjectWorkHourPrices_GetProjectWorkHourPriceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectworkhourprices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectWorkHourPriceOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a work hour price or a part of it
		/// ProjectWorkHourPrices_PatchProjectWorkHourPrice v1/projectworkhourprices/{guid}
		/// </summary>
		/// <param name="guid">ID of the work hour price</param>
		/// <param name="requestBody">JSON patch document of ProjectWorkHourPriceInputModel</param>
		/// <returns>list of updated work hour prices</returns>
		public async Task<ProjectWorkHourPriceOutputModel[]> ProjectWorkHourPrices_PatchProjectWorkHourPriceAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectworkhourprices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectWorkHourPriceOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a work type to a project.
		/// The "UseWorktypesFromSetting" flag for the Project should be false (the project should not use the organization list of work types).
		/// ProjectWorkTypes_PostProjectWorktype v1/projectworktypes
		/// </summary>
		/// <param name="requestBody">ProjectWorkTypeModel.</param>
		public async Task ProjectWorkTypes_PostProjectWorktypeAsync(ProjectWorkTypeModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectworktypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project work type.
		/// Returns: No Content (204) if succeeded. The "UseWorktypesFromSetting" flag for the Project should be false (the project should not use the organization list of work types).
		/// ProjectWorkTypes_DeleteProjectWorktype v1/projectworktypes/{guid}
		/// </summary>
		/// <param name="guid">GUID of the project work type to remove.</param>
		public async Task ProjectWorkTypes_DeleteProjectWorktypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectworktypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (patch) a project work type.
		/// This currently can be used only to change the default work type in a project. The "UseWorktypesFromSetting" flag for the Project should be false (the project should not use the organization list of work types).
		/// ProjectWorkTypes_PatchProjectWorktype v1/projectworktypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the project work type.</param>
		/// <param name="requestBody">JSON patch document of ProjectWorkTypeModel.</param>
		/// <returns>list of updated project work types.</returns>
		public async Task<ProjectWorkTypeModel[]> ProjectWorkTypes_PatchProjectWorktypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projectworktypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectWorkTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the proposal fee rows.
		/// ProposalFees_GetProposalFees v1/proposalfeerows
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get proposal fee rows that have been added or changed after this date time (greater or equal).</param>
		/// <returns>Proposal fee rows</returns>
		public async Task<ProposalFeeRowOutputModel[]> ProposalFees_GetProposalFeesAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalfeerows?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalFeeRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a proposal fee row.
		/// ProposalFees_PostProposalFee v1/proposalfeerows
		/// </summary>
		/// <param name="requestBody">ProposalFeeModel</param>
		public async Task ProposalFees_PostProposalFeeAsync(ProposalFeeRowInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalfeerows";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a proposal fee row
		/// Returns: No Content (204) if succeeded. Not found (404) if proposal fee row can't be found.
		/// ProposalFees_DeleteProposalFee v1/proposalfeerows/{guid}
		/// </summary>
		/// <param name="guid">ID for the proposal fee row to delete</param>
		public async Task ProposalFees_DeleteProposalFeeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalfeerows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the proposal fee rows by guid
		/// ProposalFees_GetProposalFee v1/proposalfeerows/{guid}
		/// </summary>
		/// <param name="guid">proposal fee row id to get</param>
		/// <returns>Proposal fee</returns>
		public async Task<ProposalFeeRowOutputModel> ProposalFees_GetProposalFeeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalfeerows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalFeeRowOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a proposal fee row or a part of it
		/// ProposalFees_PatchProposalFee v1/proposalfeerows/{guid}
		/// </summary>
		/// <param name="guid">ID of the proposal fee row</param>
		/// <param name="requestBody">JSON patch document of ProposalFeeModel</param>
		/// <returns>list of updated proposal fee rows</returns>
		public async Task<ProposalFeeRowOutputModel[]> ProposalFees_PatchProposalFeeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalfeerows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalFeeRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the proposals
		/// Proposals_GetProposals v1/proposals
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get proposals that have been added or changed after this date time (greater or equal).</param>
		/// <returns>Proposal</returns>
		public async Task<ProposalOutputModel[]> Proposals_GetProposalsAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a proposal.
		/// Proposals_PostProposal v1/proposals
		/// </summary>
		/// <param name="requestBody">ProposalInputModel</param>
		public async Task Proposals_PostProposalAsync(ProposalInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a proposal
		/// Returns: No Content (204) if succeeded. Not found (404) if proposal can't be found.
		/// Proposals_DeleteProposal v1/proposals/{guid}
		/// </summary>
		/// <param name="guid">Guid for the proposal to delete</param>
		public async Task Proposals_DeleteProposalAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Proposal by ID
		/// Proposals_GetProposal v1/proposals/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Proposal.</param>
		/// <returns>Proposal</returns>
		public async Task<ProposalOutputModel> Proposals_GetProposalAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a Proposal or a part of it
		/// Proposals_PatchProposal v1/proposals/{guid}
		/// </summary>
		/// <param name="guid">Guid of the Proposal</param>
		/// <param name="requestBody">JSON patch document of ProposalInputModel</param>
		/// <returns>List of updated Proposals</returns>
		public async Task<ProposalOutputModel[]> Proposals_PatchProposalAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get settings for a proposal
		/// ProposalSettings_GetProposalSettings v1/proposals/{guid}/proposalsettings
		/// </summary>
		/// <param name="guid">GUID used to get the Proposal.</param>
		/// <returns>Proposal</returns>
		public async Task<ProposalSettingsOutputModel> ProposalSettings_GetProposalSettingsAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/proposalsettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalSettingsOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) proposal settings
		/// ProposalSettings_PatchProposalSettings v1/proposals/{guid}/proposalsettings
		/// </summary>
		/// <param name="guid">Guid of the Proposal</param>
		/// <param name="requestBody">JSON patch document of ProposalSettingsInputModel</param>
		/// <returns>List of updated Proposal settings</returns>
		public async Task<ProposalSettingsOutputModel[]> ProposalSettings_PatchProposalSettingsAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/proposalsettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalSettingsOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the proposal fee rows for a proposal
		/// ProposalFees_GetProposalFeesForProposal v1/proposals/{proposalGuid}/proposalfeerows
		/// </summary>
		/// <param name="proposalGuid">proposal id for which to get proposal fees rows.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <returns>Proposal fee rows</returns>
		public async Task<ProposalFeeRowOutputModel[]> ProposalFees_GetProposalFeesForProposalAsync(string proposalGuid, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (proposalGuid==null? "" : System.Uri.EscapeDataString(proposalGuid))+"/proposalfeerows&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalFeeRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the proposal subtotals for a proposal
		/// ProposalSubtotals_GetProposalSubtotalsForProposal v1/proposals/{proposalGuid}/proposalsubtotals
		/// </summary>
		/// <param name="proposalGuid">proposal id for which to get proposal subtotals.</param>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <returns>Proposal</returns>
		public async Task<ProposalSubtotalOutputModel[]> ProposalSubtotals_GetProposalSubtotalsForProposalAsync(string proposalGuid, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (proposalGuid==null? "" : System.Uri.EscapeDataString(proposalGuid))+"/proposalsubtotals&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalSubtotalOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the proposal work rows.
		/// ProposalWorkhours_GetProposalWorkHoursForProposal v1/proposals/{proposalGuid}/proposalworkrows
		/// </summary>
		/// <param name="proposalGuid">proposal id for which to get proposal work rows.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <returns>Proposal work rows.</returns>
		public async Task<ProposalWorkhourRowOutputModel[]> ProposalWorkhours_GetProposalWorkHoursForProposalAsync(string proposalGuid, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposals/"+ (proposalGuid==null? "" : System.Uri.EscapeDataString(proposalGuid))+"/proposalworkrows&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalWorkhourRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the proposal statuses
		/// ProposalStatuses_GetProposalStatuses v1/proposalstatuses
		/// </summary>
		/// <param name="isActive">Optional: If not given, return all proposal statuses, if given as true return only active proposal statuses, if given as false returns only inactive proposal statuses.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="proposalStatusName">Optional: Search by proposal status name.</param>
		/// <returns>Proposal statuses</returns>
		public async Task<ProposalStatusOutputModel[]> ProposalStatuses_GetProposalStatusesAsync(bool isActive, string pageToken, int rowCount, string proposalStatusName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalstatuses?isActive="+isActive+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&proposalStatusName=" + (proposalStatusName==null? "" : System.Uri.EscapeDataString(proposalStatusName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalStatusOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a proposal status
		/// ProposalStatuses_PostProposalStatus v1/proposalstatuses
		/// </summary>
		/// <param name="requestBody">ProposalStatusModel</param>
		public async Task ProposalStatuses_PostProposalStatusAsync(ProposalStatusInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalstatuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an proposal status
		/// Returns: No Content (204) if succeeded. Not found (404) if proposal status can't be found.
		/// ProposalStatuses_DeleteProposalStatus v1/proposalstatuses/{guid}
		/// </summary>
		/// <param name="guid">ID for the proposal status to delete</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the proposal status to which to move usages of this proposal status. Default null. If proposal status is in use and usages aren't moved the deletion might fail.</param>
		public async Task ProposalStatuses_DeleteProposalStatusAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Proposal status by ID
		/// ProposalStatuses_GetProposalStatus v1/proposalstatuses/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Proposal status.</param>
		/// <returns>Proposal status</returns>
		public async Task<ProposalStatusOutputModel> ProposalStatuses_GetProposalStatusAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalStatusOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an Proposal status or a part of it
		/// ProposalStatuses_PatchProposalStatus v1/proposalstatuses/{guid}
		/// </summary>
		/// <param name="guid">ID of the Proposal status</param>
		/// <param name="requestBody">JSON patch document of ProposalStatusModel</param>
		/// <returns>List of updated Proposal statuses</returns>
		public async Task<ProposalStatusOutputModel[]> ProposalStatuses_PatchProposalStatusAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalStatusOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get usage for an proposal status.
		/// ProposalStatuses_GetUsage v1/proposalstatuses/{guid}/usage
		/// </summary>
		/// <param name="guid">GUID used to get the proposal status.</param>
		/// <returns>Usage</returns>
		public async Task<UsageModel2[]> ProposalStatuses_GetUsageAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/usage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsageModel2[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the proposal subtotals.
		/// ProposalSubtotals_GetProposalSubtotals v1/proposalsubtotals
		/// </summary>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get proposal subtotals that have been added or changed after this date time (greater or equal).</param>
		public async Task<ProposalSubtotalOutputModel[]> ProposalSubtotals_GetProposalSubtotalsAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalsubtotals?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalSubtotalOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a proposal subtotal
		/// ProposalSubtotals_PostProposalSubtotal v1/proposalsubtotals
		/// </summary>
		/// <param name="requestBody">ProposalSubtotalModel</param>
		public async Task ProposalSubtotals_PostProposalSubtotalAsync(ProposalSubtotalInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalsubtotals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a proposal subtotal
		/// Returns: No Content (204) if succeeded. Not found (404) if proposal subtotal can't be found.
		/// ProposalSubtotals_DeleteProposalSubtotal v1/proposalsubtotals/{guid}
		/// </summary>
		/// <param name="guid">ID for the proposal subtotal to delete.</param>
		public async Task ProposalSubtotals_DeleteProposalSubtotalAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalsubtotals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Proposal subtotal by ID
		/// ProposalSubtotals_GetProposalSubtotal v1/proposalsubtotals/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the Proposal subtotal.</param>
		/// <returns>Proposal subtotal</returns>
		public async Task<ProposalSubtotalOutputModel> ProposalSubtotals_GetProposalSubtotalAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalsubtotals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalSubtotalOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a Proposal subtotal or a part of it
		/// It is not possible to changed the proposalGuid for an existing proposal subtotal. Also, when a proposal subtotal is connected to a phase, the connection can only be broken if the phase is deleted.
		/// ProposalSubtotals_PatchProposalSubtotal v1/proposalsubtotals/{guid}
		/// </summary>
		/// <param name="guid">ID of the Proposal subtotal</param>
		/// <param name="requestBody">JSON patch document of ProposalSubtotalModel</param>
		/// <returns>List of updated Proposal subtotals</returns>
		public async Task<ProposalSubtotalOutputModel[]> ProposalSubtotals_PatchProposalSubtotalAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalsubtotals/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalSubtotalOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the proposal work rows.
		/// ProposalWorkhours_GetProposalWorkHours v1/proposalworkrows
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get proposal work rows that have been added or changed after this date time (greater or equal).</param>
		public async Task<ProposalWorkhourRowOutputModel[]> ProposalWorkhours_GetProposalWorkHoursAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalworkrows?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalWorkhourRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a proposal work row.
		/// ProposalWorkhours_PostProposalWorkhour v1/proposalworkrows
		/// </summary>
		/// <param name="requestBody">ProposalWorkhourModel</param>
		public async Task ProposalWorkhours_PostProposalWorkhourAsync(ProposalWorkhourRowInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalworkrows";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a proposal work row.
		/// Returns: No Content (204) if succeeded. Not found (404) if proposal work row can't be found.
		/// ProposalWorkhours_DeleteProposalWorkhour v1/proposalworkrows/{guid}
		/// </summary>
		/// <param name="guid">ID for the proposal work row to delete.</param>
		public async Task ProposalWorkhours_DeleteProposalWorkhourAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalworkrows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the proposal work row by guid.
		/// ProposalWorkhours_GetProposalWorkhour v1/proposalworkrows/{guid}
		/// </summary>
		/// <param name="guid">proposal work row id to get.</param>
		/// <returns>Proposal work row.</returns>
		public async Task<ProposalWorkhourRowOutputModel> ProposalWorkhours_GetProposalWorkhourAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalworkrows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalWorkhourRowOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a proposal work row or a part of it.
		/// ProposalWorkhours_PatchProposalWorkhour v1/proposalworkrows/{guid}
		/// </summary>
		/// <param name="guid">ID of the proposal work row.</param>
		/// <param name="requestBody">JSON patch document of ProposalWorkhourModel.</param>
		/// <returns>updated proposal work row.</returns>
		public async Task<ProposalWorkhourRowOutputModel[]> ProposalWorkhours_PatchProposalWorkhourAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/proposalworkrows/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProposalWorkhourRowOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get new access token using a refresh token.
		/// PublicBearerAuthentication_GetAccessTokenTokenFromRefreshToken v1/refreshtoken
		/// </summary>
		/// <param name="requestBody">Refresh token.</param>
		/// <returns>PublicAuthenticationOutputModel</returns>
		public async Task<PublicAuthenticationOutputModel> PublicBearerAuthentication_GetAccessTokenTokenFromRefreshTokenAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/refreshtoken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicAuthenticationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get resource allocations
		/// ResourceAllocations_GetResourceAllocations v1/resourceallocations
		/// </summary>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="changedSince">Optional: Get resource allocations that have been added or changed after this date time (greater or equal).</param>
		/// <returns>ResourceAllocation</returns>
		public async Task<ResourceAllocationOutputModel> ResourceAllocations_GetResourceAllocationsAsync(int rowCount, string pageToken, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/resourceallocations?rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a resource allocation
		/// ResourceAllocations_PostResourceAllocation v1/resourceallocations
		/// </summary>
		/// <param name="requestBody">ResourceAllocationInputModel</param>
		public async Task ResourceAllocations_PostResourceAllocationAsync(ResourceAllocationInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/resourceallocations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get resource allocations (its POST because of being able to accommodate more filters)
		/// ResourceAllocations_PostResourceAllocations v1/resourceallocations/allocations
		/// </summary>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="changedSince">Optional: Get resource allocations that have been added or changed after this date time (greater or equal).</param>
		/// <param name="requestBody">resourceAllocationCriteriaModel</param>
		/// <returns>ResourceAllocationModel</returns>
		public async Task<ResourceAllocationOutputModel[]> ResourceAllocations_PostResourceAllocationsAsync(int rowCount, string pageToken, System.DateTimeOffset changedSince, ResourceAllocationCriteriaModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/resourceallocations/allocations?rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an resource allocation
		/// Returns: No Content (204) if succeeded. Not found (404) if resource allocation can't be found.
		/// ResourceAllocations_DeleteResourceAllocation v1/resourceallocations/{guid}
		/// </summary>
		/// <param name="guid">ID of the resource allocation to delete</param>
		public async Task ResourceAllocations_DeleteResourceAllocationAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/resourceallocations/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get resource allocation by ID
		/// ResourceAllocations_GetResourceAllocation v1/resourceallocations/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the resource allocation.</param>
		/// <returns>ResourceAllocation</returns>
		public async Task<ResourceAllocationOutputModel> ResourceAllocations_GetResourceAllocationAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/resourceallocations/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a resource allocation or a part of it
		/// ResourceAllocations_PatchResourceAllocation v1/resourceallocations/{guid}
		/// </summary>
		/// <param name="guid">ID of the resource allocation</param>
		/// <param name="requestBody">JSON Patch document of ResourceAllocationModel</param>
		/// <returns>List of updated activities</returns>
		public async Task<ResourceAllocationOutputModel[]> ResourceAllocations_PatchResourceAllocationAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/resourceallocations/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get role allocations.
		/// RoleAllocations_GetRoleAllocations v1/roleallocations
		/// </summary>
		/// <param name="startDate">Starting date from which to get the role allocations. If end date is not specified on the role allocation then it will be compared with phase end date.</param>
		/// <param name="endDate">Optional: Ending date to which to get the role allocations. If start date is not specified on the role allocation then it will be compared with phase start date.</param>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="useSalesProbability">Optional: Calculates the hours based on sales probability set for the project. Default is true.</param>
		/// <param name="roleGuids">Optional: Role IDs.</param>
		/// <param name="phaseGuids">Optional: Phase IDs.</param>
		/// <param name="projectGuids">Optional: Project IDs.</param>
		/// <returns>RoleAllocationModel.</returns>
		public async Task<RoleAllocationOutputModel[]> RoleAllocations_GetRoleAllocationsAsync(System.DateTimeOffset startDate, System.DateTimeOffset endDate, string pageToken, int rowCount, bool useSalesProbability, string[] roleGuids, string[] phaseGuids, string[] projectGuids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roleallocations?startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&useSalesProbability="+useSalesProbability+"&"+string.Join("&", roleGuids.Select(z => $"roleGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", phaseGuids.Select(z => $"phaseGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAllocationOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a role allocation.
		/// RoleAllocations_PostRoleAllocation v1/roleallocations
		/// </summary>
		/// <param name="requestBody">Role allocation to insert.</param>
		public async Task RoleAllocations_PostRoleAllocationAsync(RoleAllocationInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roleallocations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a role allocation.
		/// Returns: No Content (204) if succeeded. Not found (404) if role can't be found.
		/// RoleAllocations_DeleteRoleAllocation v1/roleallocations/{guid}
		/// </summary>
		/// <param name="guid">ID for the role allocation to delete.</param>
		public async Task RoleAllocations_DeleteRoleAllocationAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roleallocations/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get role allocation by GUID.
		/// RoleAllocations_GetRoleAllocation v1/roleallocations/{guid}
		/// </summary>
		/// <param name="guid">ID used to get the role allocation.</param>
		/// <returns>RoleAllocationModel.</returns>
		public async Task<RoleAllocationOutputModel> RoleAllocations_GetRoleAllocationAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roleallocations/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAllocationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a role allocation.
		/// RoleAllocations_PatchRoleAllocation v1/roleallocations/{guid}
		/// </summary>
		/// <param name="guid">ID of the role allocation.</param>
		/// <param name="requestBody">JSON Patch document of RoleAllocationModel.</param>
		/// <returns>RoleAllocationModel.</returns>
		public async Task<RoleAllocationOutputModel[]> RoleAllocations_PatchRoleAllocationAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roleallocations/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleAllocationOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get roles.
		/// Roles_GetRoles v1/roles
		/// </summary>
		/// <param name="isActive">If not given, return all roles, if given as true return only active roles, if given as false returns only inactive roles.</param>
		/// <param name="pageToken">Optional: Page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="changedSince">Optional: Get roles that have been added or changed after this date time (greater or equal).</param>
		/// <returns>All the roles.</returns>
		public async Task<RoleOutputModel[]> Roles_GetRolesAsync(bool isActive, string pageToken, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roles?isActive="+isActive+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a role.
		/// Roles_PostRole v1/roles
		/// </summary>
		/// <param name="requestBody">RoleInputModel.</param>
		public async Task Roles_PostRoleAsync(RoleInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a role.
		/// Returns: No Content (204) if succeeded. Not found (404) if role can't be found.
		/// Roles_DeleteRole v1/roles/{guid}
		/// </summary>
		/// <param name="guid">ID for the role to delete.</param>
		public async Task Roles_DeleteRoleAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get role by GUID.
		/// Roles_GetRole v1/roles/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the role.</param>
		/// <returns>RoleOutputModel.</returns>
		public async Task<RoleOutputModel> Roles_GetRoleAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a role or a part of it.
		/// Roles_PatchRole v1/roles/{guid}
		/// </summary>
		/// <param name="guid">ID of the role.</param>
		/// <param name="requestBody">JSON patch document of RoleInputModel.</param>
		/// <returns>list of updated roles.</returns>
		public async Task<RoleOutputModel[]> Roles_PatchRoleAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/roles/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RoleOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of root phases with information about hierarchy.
		/// Phases_GetRootPhases v1/rootphaseswithhierarchy
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		public async Task<PhaseOutputModel[]> Phases_GetRootPhasesAsync(string pageToken, int rowCount, string[] customerGuids, string[] projectGuids, string[] projectKeywordGuids, string[] projectStatusTypeGuids, string[] salesPersonGuids, string[] projectOwnerGuids, string[] businessUnitGuids, string[] customerOwnerGuids, string[] salesStatusTypeGuids, bool openProjects, string[] projectMemberUserGuids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/rootphaseswithhierarchy?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&"+string.Join("&", customerGuids.Select(z => $"customerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectKeywordGuids.Select(z => $"projectKeywordGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectStatusTypeGuids.Select(z => $"projectStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesPersonGuids.Select(z => $"salesPersonGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectOwnerGuids.Select(z => $"projectOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", businessUnitGuids.Select(z => $"businessUnitGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", customerOwnerGuids.Select(z => $"customerOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesStatusTypeGuids.Select(z => $"salesStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&openProjects="+openProjects+"&"+string.Join("&", projectMemberUserGuids.Select(z => $"projectMemberUserGuids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PhaseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sales accounts.
		/// SalesAccounts_GetSalesAccounts v1/salesaccounts
		/// </summary>
		/// <param name="active">If not given, return all Sales accounts, if given as true return only active Sales accounts, if given as false returns only inactive Sales accounts.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from cost account name or identifier.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Identifier&sortings[1].value=Asc".</param>
		/// <returns>All the sales accounts.</returns>
		public async Task<SalesAccountModel[]> SalesAccounts_GetSalesAccountsAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesaccounts?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesAccountModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a sales account.
		/// SalesAccounts_PostSalesAccount v1/salesaccounts
		/// </summary>
		/// <param name="requestBody">SalesAccountModel.</param>
		public async Task SalesAccounts_PostSalesAccountAsync(SalesAccountModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesaccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a sales account.
		/// Returns: No Content (204) if succeeded. Not found (404) if sales account can't be found.
		/// SalesAccounts_DeleteSalesAccount v1/salesaccounts/{guid}
		/// </summary>
		/// <param name="guid">ID for the sales account to delete.</param>
		public async Task SalesAccounts_DeleteSalesAccountAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesaccounts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sales account by ID.
		/// SalesAccounts_GetSalesAccount v1/salesaccounts/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the sales account.</param>
		/// <returns>SalesAccountModel.</returns>
		public async Task<SalesAccountModel> SalesAccounts_GetSalesAccountAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesaccounts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesAccountModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a sales account or a part of it.
		/// SalesAccounts_PatchSalesAccount v1/salesaccounts/{guid}
		/// </summary>
		/// <param name="guid">ID of the sales account.</param>
		/// <param name="requestBody">JSON patch document of SalesAccountModel.</param>
		/// <returns>list of updated sales account.</returns>
		public async Task<SalesAccountModel[]> SalesAccounts_PatchSalesAccountAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesaccounts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesAccountModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the sales cases (sales status is in progress)
		/// Projects_GetSalesCases v1/salescases
		/// </summary>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>Projects</returns>
		public async Task<ProjectOutputModel[]> Projects_GetSalesCasesAsync(
					string pageToken, 
					int rowCount, 
					string[] customerGuids, 
					string[] currencyGuids, 
					string[] projectGuids, 
					string[] projectKeywordGuids, 
					string[] projectStatusTypeGuids, 
					string[] salesPersonGuids, 
					string[] projectOwnerGuids, 
					string[] businessUnitGuids, 
					double minimumBillableAmount, 
					string[] customerOwnerGuids, 
					System.DateTimeOffset invoiceableDate, 
					string[] marketSegmentationGuids, 
					string[] salesStatusTypeGuids, 
					bool isClosed, 
					bool hasRecurringFees, 
					string[] companyCurrencyGuids, 
					string[] projectMemberUserGuids, 
					int[] numbers, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salescases?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&"+string.Join("&", customerGuids.Select(z => $"customerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", currencyGuids.Select(z => $"currencyGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectGuids.Select(z => $"projectGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectKeywordGuids.Select(z => $"projectKeywordGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectStatusTypeGuids.Select(z => $"projectStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesPersonGuids.Select(z => $"salesPersonGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectOwnerGuids.Select(z => $"projectOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", businessUnitGuids.Select(z => $"businessUnitGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&minimumBillableAmount="+minimumBillableAmount+"&"+string.Join("&", customerOwnerGuids.Select(z => $"customerOwnerGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&invoiceableDate=" + invoiceableDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", marketSegmentationGuids.Select(z => $"marketSegmentationGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", salesStatusTypeGuids.Select(z => $"salesStatusTypeGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&isClosed="+isClosed+"&hasRecurringFees="+hasRecurringFees+"&"+string.Join("&", companyCurrencyGuids.Select(z => $"companyCurrencyGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", projectMemberUserGuids.Select(z => $"projectMemberUserGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", numbers.Select(z => $"numbers={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the sales status types
		/// SalesStatusTypes_GetSalesStatusTypes v1/salesstatustypes
		/// </summary>
		/// <param name="active">If not given, return all sales status types, if given as true return only active sales status types, if given as false returns only inactive sales status types</param>
		/// <param name="salesState">Optional: Get sales status types of the sales state.</param>
		/// <param name="firstRow">Optional: First row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from sales status type name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Name&sortings[0].value=Desc &sortings[1].key=Code&sortings[1].value=Asc"</param>
		/// <returns>Sales status types</returns>
		public async Task<SalesStatusTypeOutputModel[]> SalesStatusTypes_GetSalesStatusTypesAsync(bool active, SalesStatusType salesState, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesstatustypes?active="+active+"&salesState=" + salesState+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesStatusTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a sales status type
		/// SalesStatusTypes_PostSalesStatusType v1/salesstatustypes
		/// </summary>
		/// <param name="requestBody">salesStatusType</param>
		public async Task SalesStatusTypes_PostSalesStatusTypeAsync(SalesStatusTypeInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesstatustypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an sales status type.
		/// Returns: No Content (204) if succeeded. Not found (404) if sales status type can't be found.
		/// SalesStatusTypes_DeleteSalesStatusType v1/salesstatustypes/{guid}
		/// </summary>
		/// <param name="guid">ID for the sales status type to delete.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the sales status type to which to move usages of this sales status type. Default null. If sales status type is in use and usages aren't moved the deletion might fail.</param>
		public async Task SalesStatusTypes_DeleteSalesStatusTypeAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesstatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sales status type by ID
		/// SalesStatusTypes_GetSalesStatusType v1/salesstatustypes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the sales status type.</param>
		/// <returns>Sales status type</returns>
		public async Task<SalesStatusTypeOutputModel> SalesStatusTypes_GetSalesStatusTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesstatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesStatusTypeOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an sales status type or a part of it
		/// SalesStatusTypes_PatchSalesStatusType v1/salesstatustypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the sales status type</param>
		/// <param name="requestBody">JSON patch document of salesStatusType</param>
		/// <returns>List of updated sales status types</returns>
		public async Task<SalesStatusTypeOutputModel[]> SalesStatusTypes_PatchSalesStatusTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/salesstatustypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesStatusTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Logout. Invalidates refresh token. Access token will be invalid when it expires.
		/// PublicBearerAuthentication_Logout v1/signout
		/// </summary>
		public async Task PublicBearerAuthentication_LogoutAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/signout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the time entries.
		/// TimeEntries_GetTimeEntries v1/timeentries
		/// </summary>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="phaseGuid">Optional: Filters time entries for given phases.</param>
		/// <param name="timeEntryTypeGuid">Optional: Filters time entries for given time entry types.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get time entries that have been added or changed after this date time (greater or equal).</param>
		public async Task<TimeEntryModel[]> TimeEntries_GetTimeEntriesAsync(int firstRow, string[] phaseGuid, string[] timeEntryTypeGuid, int rowCount, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentries?firstRow="+firstRow+"&"+string.Join("&", phaseGuid.Select(z => $"phaseGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", timeEntryTypeGuid.Select(z => $"timeEntryTypeGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeEntryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a time entry.
		/// TimeEntries_PostTimeEntry v1/timeentries
		/// </summary>
		/// <param name="requestBody">TimeEntryModel.</param>
		public async Task TimeEntries_PostTimeEntryAsync(TimeEntryModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a time entry.
		/// Returns: No Content (204) if succeeded.
		/// TimeEntries_DeleteTimeEntry v1/timeentries/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the time entry.</param>
		public async Task TimeEntries_DeleteTimeEntryAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentries/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get time entry by ID.
		/// TimeEntries_GetTimeEntry v1/timeentries/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the time entry.</param>
		public async Task<TimeEntryModel> TimeEntries_GetTimeEntryAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentries/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeEntryModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a time entry or a part of it.
		/// TimeEntries_PatchTimeEntry v1/timeentries/{guid}
		/// </summary>
		/// <param name="guid">ID of the time entry.</param>
		/// <param name="requestBody">JSON Patch document of TimeEntryModel.</param>
		/// <returns>List of updated time entries.</returns>
		public async Task<TimeEntryModel[]> TimeEntries_PatchTimeEntryAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentries/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeEntryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all time entry types.
		/// TimeEntryTypes_GetTimeEntryTypes v1/timeentrytypes
		/// </summary>
		/// <param name="active">Filter the time entry types. If true/false, only the active/inactive ones are returned. If null, all the time entry types are returned.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from time entry type name.</param>
		/// <param name="calculateRowCount">Optional: Calculates the total row count.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".</param>
		/// <returns>Projects.</returns>
		public async Task<TimeEntryTypeModel[]> TimeEntryTypes_GetTimeEntryTypesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentrytypes?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeEntryTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a time entry type.
		/// TimeEntryTypes_PostTimeEntryType v1/timeentrytypes
		/// </summary>
		/// <param name="requestBody">TimeEntryTypeModel.</param>
		public async Task TimeEntryTypes_PostTimeEntryTypeAsync(TimeEntryTypeModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentrytypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a time entry type.
		/// Returns: No Content (204) if succeeded.
		/// TimeEntryTypes_DeleteTimeEntryType v1/timeentrytypes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the time entry type.</param>
		public async Task TimeEntryTypes_DeleteTimeEntryTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentrytypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get time entry type by ID.
		/// TimeEntryTypes_GetTimeEntryType v1/timeentrytypes/{guid}
		/// </summary>
		/// <param name="guid">ID used to get the time entry type.</param>
		public async Task<TimeEntryTypeModel> TimeEntryTypes_GetTimeEntryTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentrytypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeEntryTypeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a time entry type or a part of it.
		/// TimeEntryTypes_PatchTimeEntryType v1/timeentrytypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the time entry type.</param>
		/// <param name="requestBody">JSON Patch document of TimeEntryTypeModel.</param>
		/// <returns>Updated time entry type model.</returns>
		public async Task<TimeEntryTypeModel[]> TimeEntryTypes_PatchTimeEntryTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/timeentrytypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeEntryTypeModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Can be used to get the login information and access token for the api client.
		/// PublicBearerAuthentication_GetLoginToken v1/token
		/// </summary>
		/// <param name="requestBody">ClientCredentials of the client.</param>
		/// <returns>PublicAuthenticationOutputModel</returns>
		public async Task<PublicAuthenticationOutputModel> PublicBearerAuthentication_GetLoginTokenAsync(ClientCredentials requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicAuthenticationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a travel expense type country setting
		/// TravelExpenseTypeCountrySettings_PostTravelExpenseTypeCountrySettings v1/travelexpensetypecountrysettings
		/// </summary>
		/// <param name="requestBody">Travel expense type country setting model</param>
		public async Task TravelExpenseTypeCountrySettings_PostTravelExpenseTypeCountrySettingsAsync(TravelExpenseTypeCountrySettingsModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypecountrysettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a travel expense type country setting
		/// Returns: No Content (204) if succeeded. Not found (404) if travel expense type country setting can't be found.
		/// TravelExpenseTypeCountrySettings_DeleteTravelExpenseTypeCountrySetting v1/travelexpensetypecountrysettings/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the travel expense type country setting.</param>
		public async Task TravelExpenseTypeCountrySettings_DeleteTravelExpenseTypeCountrySettingAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypecountrysettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a travel expense type country setting
		/// TravelExpenseTypeCountrySettings_PatchTravelExpenseTypeCountrySettings v1/travelexpensetypecountrysettings/{guid}
		/// </summary>
		/// <param name="guid">ID of the travel expense type country setting</param>
		/// <param name="requestBody">JSON patch document of TravelExpenseTypeCountrySettingsModel</param>
		/// <returns>List of updated travel expense type country settings</returns>
		public async Task<TravelExpenseTypeCountrySettingsModel[]> TravelExpenseTypeCountrySettings_PatchTravelExpenseTypeCountrySettingsAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypecountrysettings/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelExpenseTypeCountrySettingsModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the travel expense types.
		/// TravelExpenseTypes_GetTravelExpenseTypes v1/travelexpensetypes
		/// </summary>
		/// <param name="active">If not given, return all travel expense types, if given as true return only active travel expense types, if given as false returns only inactive travel expense types.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default all.</param>
		/// <param name="textToSearch">Searched string: part of name or code.</param>
		/// <param name="code">Optional: Code of the travel expense type.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=IsActive&sortings[0].value=Asc&sortings[1].key=Name&sortings[1].value=Desc.</param>
		/// <returns>All the travel expense types.</returns>
		public async Task<TravelExpenseTypeOutputModel[]> TravelExpenseTypes_GetTravelExpenseTypesAsync(bool active, int firstRow, int rowCount, string textToSearch, string code, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypes?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelExpenseTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a new travel expense type.
		/// TravelExpenseTypes_PostTravelExpenseType v1/travelexpensetypes
		/// </summary>
		/// <param name="requestBody">TravelExpenseTypeInputModel.</param>
		public async Task TravelExpenseTypes_PostTravelExpenseTypeAsync(TravelExpenseTypeInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a travel expense type.
		/// TravelExpenseTypes_DeleteTravelExpenseType v1/travelexpensetypes/{guid}
		/// </summary>
		/// <param name="guid">Guid for the travel expense type to delete.</param>
		public async Task TravelExpenseTypes_DeleteTravelExpenseTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get travel expense type by guid.
		/// TravelExpenseTypes_GetTravelExpenseType v1/travelexpensetypes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the travel expense type.</param>
		/// <returns>Travel expense type.</returns>
		public async Task<TravelExpenseTypeOutputModel> TravelExpenseTypes_GetTravelExpenseTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelExpenseTypeOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an travel expense type or a part of it.
		/// TravelExpenseTypes_PatchTravelExpenseType v1/travelexpensetypes/{guid}
		/// </summary>
		/// <param name="guid">Guid of the travel expense type.</param>
		/// <param name="requestBody">JSON patch document of TravelExpenseTypeInputModel.</param>
		/// <returns>List of updated travel expense types.</returns>
		public async Task<TravelExpenseTypeOutputModel[]> TravelExpenseTypes_PatchTravelExpenseTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelExpenseTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all country settings for a travel expense type
		/// TravelExpenseTypeCountrySettings_GetTravelExpenseTypeCountrySettings v1/travelexpensetypes/{travelExpenseTypeGuid}/travelexpensetypecountrysettings
		/// </summary>
		/// <param name="travelExpenseTypeGuid">Guid of the travel expense type.</param>
		/// <returns>All the TravelExpenseCountrySettings (tax related information)</returns>
		public async Task<TravelExpenseTypeCountrySettingsModel[]> TravelExpenseTypeCountrySettings_GetTravelExpenseTypeCountrySettingsAsync(string travelExpenseTypeGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelexpensetypes/"+ (travelExpenseTypeGuid==null? "" : System.Uri.EscapeDataString(travelExpenseTypeGuid))+"/travelexpensetypecountrysettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelExpenseTypeCountrySettingsModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get travel price by ID.
		/// TravelPrices_GetTravelPrice v1/travelprices/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the travel price.</param>
		public async Task<TravelPriceOutputModel> TravelPrices_GetTravelPriceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelprices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelPriceOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get travel reimbursements.
		/// TravelReimbursements_GetTravelReimbursements v1/travelreimbursements
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="changedSince">Optional: Get travel reimbursements that have been added or changed after this date time (greater or equal).</param>
		/// <param name="travelReimbursementStatusGuids">Optional: List of travel reimbursement status ids.</param>
		public async Task<TravelReimbursementOutputModel[]> TravelReimbursements_GetTravelReimbursementsAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, string[] travelReimbursementStatusGuids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursements?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", travelReimbursementStatusGuids.Select(z => $"travelReimbursementStatusGuids={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelReimbursementOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a travel reimbursement
		/// TravelReimbursements_PostTravelReimbursement v1/travelreimbursements
		/// </summary>
		/// <param name="addAllUnreimbursedTravelExpenses">Optional: Add all of user's unreimbursed travel expenses to reimbursement. Default is true. If TravelExpenseReimbursementStartDate is given in organization settings, travel expenses are added from that date onwards. If value is false then expenses from includedProjectTravelExpenses list are added.</param>
		/// <param name="includedProjectTravelExpenses">Optional: A list of included projectTravelExpense GUIDs belonging to the user. If addAllUnreimbursedTravelExpenses is true then this list is ignored.</param>
		/// <param name="requestBody">TravelReimbursementModel</param>
		public async Task TravelReimbursements_PostTravelReimbursementAsync(bool addAllUnreimbursedTravelExpenses, string[] includedProjectTravelExpenses, TravelReimbursementInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursements?addAllUnreimbursedTravelExpenses="+addAllUnreimbursedTravelExpenses+"&"+string.Join("&", includedProjectTravelExpenses.Select(z => $"includedProjectTravelExpenses={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a travel reimbursement
		/// TravelReimbursements_DeleteTravelReimbursement v1/travelreimbursements/{guid}
		/// </summary>
		/// <param name="guid">GUID of travel reimbursement</param>
		public async Task TravelReimbursements_DeleteTravelReimbursementAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursements/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get travel reimbursement by ID
		/// TravelReimbursements_GetTravelReimbursement v1/travelreimbursements/{guid}
		/// </summary>
		/// <param name="guid">ID of travel reimbursement</param>
		public async Task<TravelReimbursementOutputModel> TravelReimbursements_GetTravelReimbursementAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursements/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelReimbursementOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a travel reimbursement
		/// TravelReimbursements_PatchTravelReimbursement v1/travelreimbursements/{guid}
		/// </summary>
		/// <param name="guid">ID of the travel reimbursement</param>
		/// <param name="requestBody">JSON Patch document</param>
		/// <returns>Updated travel reimbursement</returns>
		public async Task<TravelReimbursementOutputModel[]> TravelReimbursements_PatchTravelReimbursementAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursements/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelReimbursementOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a travel reimbursement PDF.
		/// Pdf_GetTravelReimbursementPdf v1/travelreimbursements/{guid}/pdf
		/// </summary>
		/// <param name="guid">The travel reimbursement GUID.</param>
		/// <returns>Get a travel reimbursement PDF</returns>
		public async Task Pdf_GetTravelReimbursementPdfAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursements/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project travel expenses for a travel reimbursement
		/// ProjectTravelExpenses_GetProjectTravelExpensesForTravelReimbursement v1/travelreimbursements/{travelReimbursementGuid}/projecttravelexpenses
		/// </summary>
		/// <param name="travelReimbursementGuid">Optional: ID of the travel reimbursement</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="expenseClass">Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense</param>
		/// <returns>ProjectTravelExpenseOutputModel</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_GetProjectTravelExpensesForTravelReimbursementAsync(string travelReimbursementGuid, string pageToken, int rowCount, ExpensesClass expenseClass, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursements/"+ (travelReimbursementGuid==null? "" : System.Uri.EscapeDataString(travelReimbursementGuid))+"/projecttravelexpenses&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&expenseClass=" + expenseClass;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the travel reimbursement statuses.
		/// TravelReimbursementStatus_GetTravelReimbursementStatuses v1/travelreimbursementstatuses
		/// </summary>
		/// <param name="active">Optional: Filter the travel reimbursement statuses. If true/false, only the active/inactive ones are returned. If null, all the travel reimbursement statuses are returned.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from travel reimbursement name.</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".</param>
		public async Task<TravelReimbursementStatusModel[]> TravelReimbursementStatus_GetTravelReimbursementStatusesAsync(bool active, int firstRow, int rowCount, string textToSearch, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursementstatuses?active="+active+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelReimbursementStatusModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a travel reimbursement status.
		/// TravelReimbursementStatus_PostTravelReimbursementStatus v1/travelreimbursementstatuses
		/// </summary>
		/// <param name="requestBody">TravelReimbursementStatusModel.</param>
		public async Task TravelReimbursementStatus_PostTravelReimbursementStatusAsync(TravelReimbursementStatusModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursementstatuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a travel reimbursement status.
		/// Returns: No Content (204) if succeeded. Not found (404) if travel reimbursement status can't be found.
		/// TravelReimbursementStatus_DeleteTravelReimbursementStatus v1/travelreimbursementstatuses/{guid}
		/// </summary>
		/// <param name="guid">ID for the travel reimbursement status to delete.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the travel reimbursement status to which to move usages of this travel reimbursement status. Default null. If travel reimbursement status is in use and usages aren't moved the deletion might fail.</param>
		public async Task TravelReimbursementStatus_DeleteTravelReimbursementStatusAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursementstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the travel reimbursement statuses by guid.
		/// TravelReimbursementStatus_GetTravelReimbursementStatus v1/travelreimbursementstatuses/{guid}
		/// </summary>
		/// <param name="guid">reimbursement status id to get.</param>
		/// <returns>TravelReimbursementStatusModel.</returns>
		public async Task<TravelReimbursementStatusModel> TravelReimbursementStatus_GetTravelReimbursementStatusAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursementstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelReimbursementStatusModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a travel reimbursement status or a part of it.
		/// TravelReimbursementStatus_PatchTravelReimbursementStatus v1/travelreimbursementstatuses/{guid}
		/// </summary>
		/// <param name="guid">ID of the travel reimbursement status.</param>
		/// <param name="requestBody">JSON patch document of TravelReimbursementStatusModel.</param>
		/// <returns>list of updated travel reimbursement statuses.</returns>
		public async Task<TravelReimbursementStatusModel[]> TravelReimbursementStatus_PatchTravelReimbursementStatusAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/travelreimbursementstatuses/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TravelReimbursementStatusModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get users
		/// Users_GetUsers v1/users
		/// </summary>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="isActive">If not given, return all users, if given as true return only active users, if given as false returns only inactive users</param>
		/// <param name="businessUnitGuids">Optional: ID of the business unit of the user. If not provided, returns for all business units. Default all.</param>
		/// <param name="keywordGuids">Optional: ID of the keyword of the user. If not provided, returns for all keywords. Default all.</param>
		/// <param name="changedSince">Optional: Get users that have been added or changed after this date time (greater or equal).</param>
		/// <param name="supervisorUserGuids">Optional: ID of the supervisor to get subordinates for.</param>
		/// <param name="code">Optional: Code of the user.</param>
		/// <param name="email">Optional: Email address of the user.</param>
		/// <param name="purpose">Optional: Filter users by purpose.</param>
		/// <returns>All the users</returns>
		public async Task<UserOutputModel[]> Users_GetUsersAsync(string pageToken, int rowCount, bool isActive, string[] businessUnitGuids, string[] keywordGuids, System.DateTimeOffset changedSince, string[] supervisorUserGuids, string code, string email, GetUsersPurpose purpose, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isActive="+isActive+"&"+string.Join("&", businessUnitGuids.Select(z => $"businessUnitGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", keywordGuids.Select(z => $"keywordGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", supervisorUserGuids.Select(z => $"supervisorUserGuids={System.Uri.EscapeDataString(z.ToString())}"))+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&purpose=" + purpose;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert an user.
		/// Users_PostUser v1/users
		/// </summary>
		/// <param name="requestBody">UserModel.</param>
		public async Task Users_PostUserAsync(UserInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the user custom properties.
		/// UserCustomProperties_GetUserCustomProperties v1/users/customproperties
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isActive">Optional: Get only active or inactive user custom properties.</param>
		/// <param name="isInUse">Optional: Is the customer property used in any custom property usage.</param>
		/// <param name="changedSince">Optional: Get custom properties that have been added or changed after this date time (greater or equal).</param>
		public async Task<UserCustomPropertyOutputModel[]> UserCustomProperties_GetUserCustomPropertiesAsync(string pageToken, int rowCount, bool isActive, bool isInUse, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isActive="+isActive+"&isInUse="+isInUse+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomPropertyOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a user custom property.
		/// UserCustomProperties_PostUserCustomProperty v1/users/customproperties
		/// </summary>
		/// <param name="requestBody">UserCustomPropertyModel.</param>
		public async Task UserCustomProperties_PostUserCustomPropertyAsync(UserCustomPropertyInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a user custom property selection item.
		/// UserCustomPropertySelectionItems_PostUserCustomPropertySelectionItem v1/users/customproperties/usercustompropertyselectionitems
		/// </summary>
		/// <param name="requestBody">UserPropertySelectionItemInputModel.</param>
		public async Task UserCustomPropertySelectionItems_PostUserCustomPropertySelectionItemAsync(UserCustomPropertySelectionItemInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/usercustompropertyselectionitems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a user custom property selection item.
		/// Returns: No Content (204) if succeeded.
		/// UserCustomPropertySelectionItems_DeleteUserCustomPropertySelectionItem v1/users/customproperties/usercustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the user custom property selection item.</param>
		public async Task UserCustomPropertySelectionItems_DeleteUserCustomPropertySelectionItemAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/usercustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user custom property selection item by ID.
		/// UserCustomPropertySelectionItems_GetUserCustomPropertySelectionItem v1/users/customproperties/usercustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the user custom property selection item.</param>
		public async Task<UserCustomPropertySelectionItemOutputModel> UserCustomPropertySelectionItems_GetUserCustomPropertySelectionItemAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/usercustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomPropertySelectionItemOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a user custom property selection item or a part of it.
		/// UserCustomPropertySelectionItems_PatchUserCustomPropertySelectionItem v1/users/customproperties/usercustompropertyselectionitems/{guid}
		/// </summary>
		/// <param name="guid">ID of the user custom property selection item.</param>
		/// <param name="requestBody">JSON Patch document of UserCustomPropertySelectionItemInputModel.</param>
		/// <returns>List of updated user custom properties.</returns>
		public async Task<UserCustomPropertySelectionItemOutputModel[]> UserCustomPropertySelectionItems_PatchUserCustomPropertySelectionItemAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/usercustompropertyselectionitems/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomPropertySelectionItemOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the user custom properties.
		/// UserCustomPropertySelectionItems_GetUserCustomPropertySelectionItems v1/users/customproperties/{customPropertyGuid}/usercustompropertyselectionitems
		/// </summary>
		/// <param name="customPropertyGuid">Custom property id used to get the user custom property selection items.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isActive">Optional: Get only active or inactive selection items.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="changedSince">Optional: Get custom property selection items that have been added or changed after this date time (greater or equal).</param>
		public async Task<UserCustomPropertySelectionItemOutputModel[]> UserCustomPropertySelectionItems_GetUserCustomPropertySelectionItemsAsync(string customPropertyGuid, int rowCount, bool isActive, string pageToken, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/"+ (customPropertyGuid==null? "" : System.Uri.EscapeDataString(customPropertyGuid))+"/usercustompropertyselectionitems&rowCount="+rowCount+"&isActive="+isActive+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomPropertySelectionItemOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a user custom property.
		/// Returns: No Content (204) if succeeded.
		/// UserCustomProperties_DeleteUserCustomProperty v1/users/customproperties/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the user custom property.</param>
		public async Task UserCustomProperties_DeleteUserCustomPropertyAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user custom property by ID.
		/// UserCustomProperties_GetUserCustomProperty v1/users/customproperties/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the user custom property.</param>
		public async Task<UserCustomPropertyOutputModel> UserCustomProperties_GetUserCustomPropertyAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomPropertyOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a user custom property or a part of it.
		/// UserCustomProperties_PatchUserCustomProperty v1/users/customproperties/{guid}
		/// </summary>
		/// <param name="guid">ID of the user custom property Can also be comma separate list of IDs to patch multiple user custom properties with one call. When multiple IDs are given, returns model which has list of succeeded user custom properties and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of UserCustomPropertyModel.</param>
		/// <returns>List of updated user custom properties.</returns>
		public async Task<UserCustomPropertyOutputModel[]> UserCustomProperties_PatchUserCustomPropertyAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customproperties/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomPropertyOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a user custom value.
		/// UserCustomValues_PostUserCustomValue v1/users/customvalues
		/// </summary>
		/// <param name="requestBody">UserCustomValueModel.</param>
		public async Task UserCustomValues_PostUserCustomValueAsync(UserCustomValueInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customvalues";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a user custom value.
		/// Returns: No Content (204) if succeeded.
		/// UserCustomValues_DeleteUserCustomValue v1/users/customvalues/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the user custom value.</param>
		public async Task UserCustomValues_DeleteUserCustomValueAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user custom value by ID.
		/// UserCustomValues_GetUserCustomValue v1/users/customvalues/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the user custom value.</param>
		public async Task<UserCustomValueOutputModel> UserCustomValues_GetUserCustomValueAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomValueOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a user custom value or a part of it.
		/// UserCustomValues_PatchUserCustomValue v1/users/customvalues/{guid}
		/// </summary>
		/// <param name="guid">ID of the user custom value Can also be comma separate list of IDs to patch multiple user custom values with one call. When multiple IDs are given, returns model which has list of succeeded user custom values and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of UserCustomValueModel.</param>
		/// <returns>List of updated user custom values.</returns>
		public async Task<UserCustomValueOutputModel[]> UserCustomValues_PatchUserCustomValueAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/customvalues/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomValueOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an user.
		/// No Content (204) if succeeded. Bad Request (400) if user can't be deleted. Not Found (404) if the user can't be found.
		/// Users_DeleteUser v1/users/{guid}
		/// </summary>
		/// <param name="guid">ID of the user.</param>
		public async Task Users_DeleteUserAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user by ID.
		/// Users_GetUser v1/users/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the user.</param>
		/// <returns>User.</returns>
		public async Task<UserOutputModel> Users_GetUserAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) an user or a part of it.
		/// Users_PatchUser v1/users/{guid}
		/// </summary>
		/// <param name="guid">ID of the user.</param>
		/// <param name="requestBody">JSON Patch document of UserModel.</param>
		/// <returns>List of updated users.</returns>
		public async Task<UserOutputModel[]> Users_PatchUserAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the user custom values.
		/// UserCustomValues_GetUserCustomValues v1/users/{userGuid}/customvalues
		/// </summary>
		/// <param name="userGuid">ID of the user.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="isActive">Optional: Get only values of active or inactive user custom properties.</param>
		/// <param name="targets">Optional: List of target for which to get the values.</param>
		/// <param name="changedSince">Optional: Get user custom values that have been added or changed after this date time (greater or equal).</param>
		public async Task<UserCustomValueOutputModel[]> UserCustomValues_GetUserCustomValuesAsync(string userGuid, string pageToken, int rowCount, bool isActive, string[] targets, System.DateTimeOffset changedSince, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/customvalues&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&isActive="+isActive+"&"+string.Join("&", targets.Select(z => $"targets={System.Uri.EscapeDataString(z.ToString())}"))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserCustomValueOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the flextime balance for a user for a specified date. Total balance is returned for the given date. Month balance is the balance for the month of the given date.
		/// Values are returned only if the advanced time tracking add-on is active.
		/// Flextime_GetFlextime v1/users/{userGuid}/flextime
		/// </summary>
		/// <param name="userGuid">Id of the user.</param>
		/// <param name="eventDate">Date for which to get the balance. Max 12 months into the future.</param>
		/// <returns>FlextimeModel.</returns>
		public async Task<FlextimeModel> Flextime_GetFlextimeAsync(string userGuid, System.DateTimeOffset eventDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/flextime&eventDate=" + eventDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlextimeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Flextime Adjustments.
		/// FlextimeAdjustments_GetFlextimeAdjustments v1/users/{userGuid}/flextimeadjustments
		/// </summary>
		/// <param name="userGuid">ID of the user for whom to get the adjustments.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>List of Flextime Adjustments.</returns>
		public async Task<FlextimeAdjustmentOutputModel[]> FlextimeAdjustments_GetFlextimeAdjustmentsAsync(string userGuid, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/flextimeadjustments&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FlextimeAdjustmentOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the keywords for user.
		/// Keywords_GetUserKeywords v1/users/{userGuid}/keywords
		/// </summary>
		/// <param name="userGuid">ID of the user for who keywords are requested.</param>
		/// <param name="active">If not given, return all Keywords, if given as true return only active Keywords, if given as false returns only inactive Keywords.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=Keyword&sortings[0].value=Desc".</param>
		/// <returns>Keywords.</returns>
		public async Task<UserKeywordModel[]> Keywords_GetUserKeywordsAsync(string userGuid, bool active, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/keywords&active="+active+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserKeywordModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a keyword from the user
		/// Returns: No Content (204) if succeeded. Not found (404) if the keyword or the link can't be found.
		/// Keywords_DeleteUserKeyword v1/users/{userGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_DeleteUserKeywordAsync(string userGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Link existing keyword to user
		/// Keywords_LinkKeywordToUser v1/users/{userGuid}/keywords/{guid}
		/// </summary>
		public async Task Keywords_LinkKeywordToUserAsync(string userGuid, string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/keywords/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the projectFees for a user
		/// ProjectFees_GetUserProjectFees v1/users/{userGuid}/projectfees
		/// </summary>
		/// <param name="userGuid">ID of the user.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="productType">Optional: ProjectFee's product type. if given, it filters the projectFees by the given type. FixedFees (Own work), Materials (Products), Subcontracting.</param>
		/// <param name="isBillable">Optional: Filter the project fees. If true/false, only the billable/non-billable ones are returned. If null, all are returned. Default is null.</param>
		/// <param name="isBilled">Optional: Filter the project fees. If true/false, only the ones that are/are not invoiced are returned. If null, all are returned. Default is null.</param>
		/// <param name="invoiceableDate">Optional: Filter the project fees. When given, only the ones that are invoiceable before or on the given date are returned. Default is null.</param>
		/// <param name="hasPhase">Optional: Filter the project fees. If true/false, only the ones are connected/not-connected to a phase are returned. If null, all are returned. Default is null.</param>
		/// <param name="startDate">Start date search criteria. Only get project fees that have event date from this date.</param>
		/// <param name="endDate">End date search criteria. Only get project fees that have event date until this date.</param>
		/// <returns>ProjectFees</returns>
		public async Task<ProjectFeeOutputModel[]> ProjectFees_GetUserProjectFeesAsync(string userGuid, string pageToken, int rowCount, ProductOutputModelType productType, bool isBillable, bool isBilled, System.DateTimeOffset invoiceableDate, bool hasPhase, System.DateTimeOffset startDate, System.DateTimeOffset endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/projectfees&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&productType=" + productType+"&isBillable="+isBillable+"&isBilled="+isBilled+"&invoiceableDate=" + invoiceableDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&hasPhase="+hasPhase+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectFeeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all cost exceptions of project members for user.
		/// ProjectMemberCostExceptions_GetProjectMemberCostExceptionsForUser v1/users/{userGuid}/projectmembercostexceptions
		/// </summary>
		/// <param name="userGuid">Guid of the user.</param>
		/// <param name="isProjectClosed">Search only for open or closed projects. Default all projects.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>All the member cost exceptions for one project.</returns>
		public async Task<ProjectMemberCostExceptionOutputModel[]> ProjectMemberCostExceptions_GetProjectMemberCostExceptionsForUserAsync(string userGuid, bool isProjectClosed, int firstRow, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/projectmembercostexceptions&isProjectClosed="+isProjectClosed+"&firstRow="+firstRow+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectMemberCostExceptionOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the project travel expenses for a user
		/// ProjectTravelExpenses_GetProjectTravelExpensesForUser v1/users/{userGuid}/projecttravelexpenses
		/// </summary>
		/// <param name="userGuid">ID of the user.</param>
		/// <param name="startDate">Optional: starting date from which to get the travel expenses. Default all.</param>
		/// <param name="endDate">Optional: starting date to which to get the travel expenses. Default all.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="expenseClass">Optional: Class of the expense. Mileage, DailyAllowance or OtherTravelExpense</param>
		/// <param name="isReimbursed">Optional. Filter the project travel expenses. If true/false, only the ones that are reimbursed are returned. If null, all are returned. Default is null.</param>
		/// <param name="isTravelReimbursementRequired">Optional: Filter the project travel expenses by whether or not the reimbursement is required. Default all.</param>
		/// <param name="travelReimbursementGuid">Optional: ID of the travel reimbursement</param>
		/// <param name="costCurrencyGuid">Optional: ID of the cost currency.</param>
		/// <returns>ProjectTravelExpenseOutputModel</returns>
		public async Task<ProjectTravelExpenseOutputModel[]> ProjectTravelExpenses_GetProjectTravelExpensesForUserAsync(string userGuid, System.DateOnly startDate, System.DateOnly endDate, string pageToken, int rowCount, ExpensesClass expenseClass, bool isReimbursed, bool isTravelReimbursementRequired, string travelReimbursementGuid, string costCurrencyGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/projecttravelexpenses&startDate="+startDate+"&endDate="+endDate+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&expenseClass=" + expenseClass+"&isReimbursed="+isReimbursed+"&isTravelReimbursementRequired="+isTravelReimbursementRequired+"&travelReimbursementGuid=" + (travelReimbursementGuid==null? "" : System.Uri.EscapeDataString(travelReimbursementGuid))+"&costCurrencyGuid=" + (costCurrencyGuid==null? "" : System.Uri.EscapeDataString(costCurrencyGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get resource allocations for a user with required filters (startDate and endDate or changedSince, max 30 days to be fetched at once)
		/// ResourceAllocations_GetResourceAllocationsByUserGuid v1/users/{userGuid}/resourceallocations/allocations
		/// </summary>
		/// <param name="startDate">Get resource allocations with startDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days</param>
		/// <param name="endDate">Get resource allocations with endDate. Using startDate and endDate or changedSince parameters are required to fetch a maximum of 30 days</param>
		/// <param name="changedSince">Optional: Get resource allocations that have been added or changed after this date time (greater or equal).</param>
		/// <param name="rowCount">Optional: Number of rows to fetch.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		public async Task<ResourceAllocationOutputModel> ResourceAllocations_GetResourceAllocationsByUserGuidAsync(
					string userGuid, 
					System.DateTimeOffset startDate, 
					System.DateTimeOffset endDate, 
					System.DateTimeOffset changedSince, 
					LicenseUserType[] userLicenseTypes, 
					string phaseGuid, 
					string projectGuid, 
					string projectBusinessUnitGuid, 
					string userBusinessUnitGuid, 
					string projectManagerUserGuid, 
					string userTagGuid, 
					bool useSalesProbability, 
					string projectStatusTypeGuid, 
					string projectTagGuid, 
					string superiorUserGuid, 
					string salesStatusTypeGuid, 
					string resourceAllocationGuid, 
					SalesProgress salesProgress, 
					int rowCount, 
					string pageToken, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/resourceallocations/allocations&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", userLicenseTypes.Select(z => $"userLicenseTypes={z}"))+"&phaseGuid=" + (phaseGuid==null? "" : System.Uri.EscapeDataString(phaseGuid))+"&projectGuid=" + (projectGuid==null? "" : System.Uri.EscapeDataString(projectGuid))+"&projectBusinessUnitGuid=" + (projectBusinessUnitGuid==null? "" : System.Uri.EscapeDataString(projectBusinessUnitGuid))+"&userBusinessUnitGuid=" + (userBusinessUnitGuid==null? "" : System.Uri.EscapeDataString(userBusinessUnitGuid))+"&projectManagerUserGuid=" + (projectManagerUserGuid==null? "" : System.Uri.EscapeDataString(projectManagerUserGuid))+"&userTagGuid=" + (userTagGuid==null? "" : System.Uri.EscapeDataString(userTagGuid))+"&useSalesProbability="+useSalesProbability+"&projectStatusTypeGuid=" + (projectStatusTypeGuid==null? "" : System.Uri.EscapeDataString(projectStatusTypeGuid))+"&projectTagGuid=" + (projectTagGuid==null? "" : System.Uri.EscapeDataString(projectTagGuid))+"&superiorUserGuid=" + (superiorUserGuid==null? "" : System.Uri.EscapeDataString(superiorUserGuid))+"&salesStatusTypeGuid=" + (salesStatusTypeGuid==null? "" : System.Uri.EscapeDataString(salesStatusTypeGuid))+"&resourceAllocationGuid=" + (resourceAllocationGuid==null? "" : System.Uri.EscapeDataString(resourceAllocationGuid))+"&salesProgress=" + salesProgress+"&rowCount="+rowCount+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceAllocationOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the time entries for a user.
		/// TimeEntries_GetTimeEntriesForUser v1/users/{userGuid}/timeentries
		/// </summary>
		/// <param name="userGuid">ID of the user.</param>
		/// <param name="startDate">Optional: starting date from which to get the time entries. Default all.</param>
		/// <param name="endDate">Optional: starting date to which to get the time entries. Default all.</param>
		/// <param name="phaseGuid">Optional: Filters time entries for given phases.</param>
		/// <param name="timeEntryTypeGuid">Optional: Filters time entries for given time entry types.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>TimeEntries.</returns>
		public async Task<TimeEntryModel[]> TimeEntries_GetTimeEntriesForUserAsync(string userGuid, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string[] phaseGuid, string[] timeEntryTypeGuid, int firstRow, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/timeentries&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", phaseGuid.Select(z => $"phaseGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", timeEntryTypeGuid.Select(z => $"timeEntryTypeGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&firstRow="+firstRow+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeEntryModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all files of all travel expenses of the user.
		/// Files_GetUsersTravelExpensesFiles v1/users/{userGuid}/travelexpensesfiles
		/// </summary>
		/// <param name="userGuid">GUID of the user used to get the files attached to travel expenses.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch.</param>
		/// <param name="startDate">Optional: Start date to from which to check travel expenses.</param>
		/// <param name="endDate">Optional: End date to check for availability until travel expenses.</param>
		/// <returns>TravelExpenseFile.</returns>
		public async Task<ProjectTravelExpenseFileModel[]> Files_GetUsersTravelExpensesFilesAsync(string userGuid, int firstRow, int rowCount, System.DateTimeOffset startDate, System.DateTimeOffset endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/travelexpensesfiles&firstRow="+firstRow+"&rowCount="+rowCount+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectTravelExpenseFileModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the work contracts for the user.
		/// WorkContracts_GetWorkContractsForUser v1/users/{userGuid}/workcontracts
		/// </summary>
		/// <param name="userGuid">Id of the user.</param>
		/// <returns>Work contracts.</returns>
		public async Task<WorkContractOutputModel[]> WorkContracts_GetWorkContractsForUserAsync(string userGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/workcontracts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkContractOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets current work contract for the user
		/// WorkContracts_GetCurrentWorkContractForUser v1/users/{userGuid}/workcontracts/current
		/// </summary>
		/// <param name="userGuid">Id of the user</param>
		/// <returns>Work contracts</returns>
		public async Task<WorkContractOutputModel> WorkContracts_GetCurrentWorkContractForUserAsync(string userGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/workcontracts/current";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkContractOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get workdays for a user.
		/// Workdays_GetWorkdays v1/users/{userGuid}/workdays
		/// </summary>
		/// <param name="userGuid">ID of the user.</param>
		/// <param name="startDate">Start date of the workdays.</param>
		/// <param name="endDate">End date of the workdays.</param>
		/// <returns>User's workdays.</returns>
		public async Task<WorkdayModel[]> Workdays_GetWorkdaysAsync(string userGuid, System.DateTimeOffset startDate, System.DateTimeOffset endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/workdays&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkdayModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a workday or a part of it
		/// Workdays_PatchWorkDay v1/users/{userGuid}/workdays/{date}
		/// </summary>
		/// <param name="userGuid">ID of the user.</param>
		/// <param name="date">Date of the workday..</param>
		/// <param name="requestBody">JSON patch document of WorkdayModel</param>
		/// <returns>list of updated workdays</returns>
		public async Task<WorkdayModel[]> Workdays_PatchWorkDayAsync(string userGuid, System.DateTimeOffset date, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/workdays/"+date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkdayModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all the work hours for a user
		/// WorkHours_GetWorkHoursForUser v1/users/{userGuid}/workhours
		/// </summary>
		/// <param name="userGuid">ID of the user.</param>
		/// <param name="startDate">Optional: starting date from which to get the hours. Default all.</param>
		/// <param name="endDate">Optional: starting date to which to get the hours. Default all.</param>
		/// <param name="phaseGuid">Optional: ID of the phase to get the hours for. Default all.</param>
		/// <param name="workTypeGuid">Optional: ID of the work type. Default all.</param>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <returns>WorkHours</returns>
		public async Task<WorkHourOutputModel[]> WorkHours_GetWorkHoursForUserAsync(string userGuid, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string[] phaseGuid, string[] workTypeGuid, string pageToken, int rowCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userGuid==null? "" : System.Uri.EscapeDataString(userGuid))+"/workhours&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", phaseGuid.Select(z => $"phaseGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", workTypeGuid.Select(z => $"workTypeGuid={System.Uri.EscapeDataString(z.ToString())}"))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all organization vat rates
		/// VatRates_GetVatRates v1/vatrates
		/// </summary>
		/// <param name="countryGuid">If not given, return all vat rates in organizations country. If given return only for that country.</param>
		/// <param name="active">If not given, return all vat rates, if given as true return only active ones, if given as false returns only inactive ones.</param>
		/// <returns>Vat rates</returns>
		public async Task<VatRateOutputModel[]> VatRates_GetVatRatesAsync(string countryGuid, bool active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatrates?countryGuid=" + (countryGuid==null? "" : System.Uri.EscapeDataString(countryGuid))+"&active="+active;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VatRateOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a vat rate
		/// VatRates_PostVatRate v1/vatrates
		/// </summary>
		/// <param name="requestBody">VatRateInputModel</param>
		public async Task VatRates_PostVatRateAsync(VatRateInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatrates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a vat rate
		/// Returns: No Content (204) if succeeded. Bad Request (400) if vat rate is the default one. Not Found (404) if vat rate can't be found.
		/// VatRates_DeleteVatRate v1/vatrates/{guid}
		/// </summary>
		/// <param name="guid">GUID for the vat rate to delete</param>
		public async Task VatRates_DeleteVatRateAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatrates/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a vat rate by GUID
		/// VatRates_GetVatRate v1/vatrates/{guid}
		/// </summary>
		/// <param name="guid">GUID used to get the vat rate.</param>
		/// <returns>Vat rate</returns>
		public async Task<VatRateOutputModel> VatRates_GetVatRateAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatrates/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VatRateOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a vat rate or a part of it
		/// VatRates_PatchVatRate v1/vatrates/{guid}
		/// </summary>
		/// <param name="guid">GUID of the vat rate</param>
		/// <param name="requestBody">JSON Patch document of ValueAddedTaxModel</param>
		/// <returns>list of updated vat rates</returns>
		public async Task<VatRateOutputModel[]> VatRates_PatchVatRateAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/vatrates/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VatRateOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Insert a work contract.
		/// WorkContracts_PostWorkContract v1/workcontracts
		/// </summary>
		/// <param name="resetFlextime">Optional. Reset flextime to zero when new work contract starts or keep the flextime value. Default true = reset flextime.</param>
		/// <param name="requestBody">WorkContractOutputModel.</param>
		public async Task WorkContracts_PostWorkContractAsync(bool resetFlextime, WorkContractInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workcontracts?resetFlextime="+resetFlextime;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a work contract.
		/// Returns: No Content (204) if succeeded. Not found (404) if work contract can't be found.
		/// WorkContracts_DeleteWorkContract v1/workcontracts/{guid}
		/// </summary>
		/// <param name="guid">ID for the work contract to delete.</param>
		public async Task WorkContracts_DeleteWorkContractAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workcontracts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get work contract by ID.
		/// WorkContracts_GetWorkContract v1/workcontracts/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the work contract.</param>
		public async Task<WorkContractOutputModel> WorkContracts_GetWorkContractAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workcontracts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkContractOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a work contract or a part of it.
		/// WorkContracts_PatchWorkContract v1/workcontracts/{guid}
		/// </summary>
		/// <param name="guid">ID of the work contract.</param>
		/// <param name="requestBody">JSON patch document of WorkContractOutputModel.</param>
		/// <returns>list of updated work contract.</returns>
		public async Task<WorkContractOutputModel[]> WorkContracts_PatchWorkContractAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workcontracts/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkContractOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get work hour price by ID.
		/// WorkHourPrices_GetWorkHourPrice v1/workhourprices/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the work hour price.</param>
		public async Task<WorkHourPriceOutputModel> WorkHourPrices_GetWorkHourPriceAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workhourprices/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourPriceOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the work hours.
		/// WorkHours_GetWorkHours v1/workhours
		/// </summary>
		/// <param name="pageToken">Optional: page token to fetch the next page.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="changedSince">Optional: Get work hours that have been added or changed after this date time (greater or equal).</param>
		/// <param name="billableStatus">Billable status type</param>
		/// <param name="eventDateStart">Optional: Get work hours that have event date after this date time (greater or equal).</param>
		/// <param name="eventDateEnd">Optional: Get work hours that have event date before this date time (less or equal).</param>
		public async Task<WorkHourOutputModel[]> WorkHours_GetWorkHoursAsync(string pageToken, int rowCount, System.DateTimeOffset changedSince, BillableStatusType billableStatus, System.DateOnly eventDateStart, System.DateOnly eventDateEnd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workhours?pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&rowCount="+rowCount+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&billableStatus=" + billableStatus+"&eventDateStart="+eventDateStart+"&eventDateEnd="+eventDateEnd;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a work hour
		/// WorkHours_PostWorkHour v1/workhours
		/// </summary>
		/// <param name="requestBody">WorkHourInputModel</param>
		public async Task WorkHours_PostWorkHourAsync(WorkHourInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workhours";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a work hour.
		/// Returns: No Content (204) if succeeded.
		/// WorkHours_DeleteWorkHour v1/workhours/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the work hour.</param>
		public async Task WorkHours_DeleteWorkHourAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workhours/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get work hour by ID
		/// WorkHours_GetWorkHour v1/workhours/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the work hour.</param>
		public async Task<WorkHourOutputModel> WorkHours_GetWorkHourAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workhours/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a work hour or a part of it
		/// WorkHours_PatchWorkHour v1/workhours/{guid}
		/// </summary>
		/// <param name="guid">ID of the work hour. Can also be comma separate list of IDs to patch multiple work hours with one call. When multiple IDs are given, returns model which has list of succeeded work hours and list of errors.</param>
		/// <param name="requestBody">JSON Patch document of WorkHourInputModel</param>
		/// <returns>List of updated work hours</returns>
		public async Task<WorkHourOutputModel[]> WorkHours_PatchWorkHourAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/workhours/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkHourOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all work types.
		/// WorkTypes_GetWorkTypes v1/worktypes
		/// </summary>
		/// <param name="active">Filter the work types. If true/false, only the active/inactive ones are returned. If null, all the work types are returned.</param>
		/// <param name="productive">Filter the work types. If true/false, only the productive/non-productive ones are returned. If null, all the work types are returned.</param>
		/// <param name="firstRow">Optional: first row to fetch. Default 0 = first row.</param>
		/// <param name="rowCount">Optional: How many rows to fetch, Default 20, maximum 100.</param>
		/// <param name="textToSearch">Optional: Text to search from work type name or code.</param>
		/// <param name="code">Optional: Code of the work type.</param>
		/// <param name="changedSince">Optional: Get work types that have been added or changed after this date time (greater or equal).</param>
		/// <param name="calculateRowCount">Optional: Calculate total number of rows.</param>
		/// <param name="sortings">Optional: A list of Key-Value pairs, containing names of fields and directions by which the results should be sorted. Any sortable field name (submodel fields not supported) in the model can be used, while value can be "Desc" or "Asc". Example: "?sortings[0].key=name&sortings[0].value=Asc".</param>
		/// <returns>All the work types matching search criteria.</returns>
		public async Task<WorkTypeOutputModel[]> WorkTypes_GetWorkTypesAsync(bool active, bool productive, int firstRow, int rowCount, string textToSearch, string code, System.DateTimeOffset changedSince, bool calculateRowCount, KeyValuePairOfStringAndSortDirection[] sortings, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/worktypes?active="+active+"&productive="+productive+"&firstRow="+firstRow+"&rowCount="+rowCount+"&textToSearch=" + (textToSearch==null? "" : System.Uri.EscapeDataString(textToSearch))+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&changedSince=" + changedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&calculateRowCount="+calculateRowCount+"&"+string.Join("&", sortings.Select(z => $"sortings={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a work type.
		/// WorkTypes_PostWorkType v1/worktypes
		/// </summary>
		/// <param name="requestBody">WorkTypeModel.</param>
		public async Task WorkTypes_PostWorkTypeAsync(WorkTypeInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/worktypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a work type.
		/// Returns: No Content (204) if succeeded.
		/// WorkTypes_DeleteWorkType v1/worktypes/{guid}
		/// </summary>
		/// <param name="guid">GUID used to delete the work type.</param>
		/// <param name="moveUsagesToGuid">Optional: ID of the work type to which to move usages of this work type. Default null. If work type is in use and usages aren't moved the deletion might fail.</param>
		public async Task WorkTypes_DeleteWorkTypeAsync(string guid, string moveUsagesToGuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/worktypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&moveUsagesToGuid=" + (moveUsagesToGuid==null? "" : System.Uri.EscapeDataString(moveUsagesToGuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get work type by ID.
		/// WorkTypes_GetWorkType v1/worktypes/{guid}
		/// </summary>
		/// <param name="guid">Id used to get the work type.</param>
		public async Task<WorkTypeOutputModel> WorkTypes_GetWorkTypeAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/worktypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkTypeOutputModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (Patch) a work type or a part of it.
		/// WorkTypes_PatchWorkType v1/worktypes/{guid}
		/// </summary>
		/// <param name="guid">ID of the work type.</param>
		/// <param name="requestBody">JSON Patch document of WorkTypeModel.</param>
		/// <returns>List of updated work types.</returns>
		public async Task<WorkTypeOutputModel[]> WorkTypes_PatchWorkTypeAsync(string guid, PatchOperation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/worktypes/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WorkTypeOutputModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
