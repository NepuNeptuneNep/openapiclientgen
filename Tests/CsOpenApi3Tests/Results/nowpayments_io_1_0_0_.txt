//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get estimated price
		/// This is a method for calculating the approximate price in cryptocurrency for a given value in Fiat currency. You will need to provide the initial cost in the Fiat currency (amount, currency_from) and the necessary cryptocurrency (currency_to)
		/// Currently following fiat currencies are available: usd, eur, nzd, brl, gbp.
		/// GetEstimatedPrice v1/estimate
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetEstimatedPriceReturn> GetEstimatedPriceAsync(string amount, string currency_from, string currency_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/estimate?amount=" + (amount==null? "" : System.Uri.EscapeDataString(amount))+"&currency_from=" + (currency_from==null? "" : System.Uri.EscapeDataString(currency_from))+"&currency_to=" + (currency_to==null? "" : System.Uri.EscapeDataString(currency_to));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEstimatedPriceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the minimum payment amount
		/// Get the minimum payment amount for a specific pair.
		/// 
		/// You can provide both currencies in the pair or just currency\_from, and we will calculate the minimum payment amount for currency\_from and currency which you have specified as the outcome in the Store Settings.
		/// 
		/// You can also specify one of the fiat currencies in the currency\_from. In this case, the minimum payment will be calculated in this fiat currency.
		/// 
		/// You can also add field fiat\_equivalent (optional field) to get the fiat equivalent of the minimum amount.
		/// 
		/// In the case of several outcome wallets we will calculate the minimum amount in the same way we route your payment to a specific wallet.
		/// GetTheMinimumPaymentAmount v1/min-amount
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetTheMinimumPaymentAmountReturn> GetTheMinimumPaymentAmountAsync(string currency_from, string currency_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/min-amount?currency_from=" + (currency_from==null? "" : System.Uri.EscapeDataString(currency_from))+"&currency_to=" + (currency_to==null? "" : System.Uri.EscapeDataString(currency_to));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTheMinimumPaymentAmountReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of payments
		/// Returns the entire list of all transactions, created with certain API key.
		/// The list of optional parameters:
		/// - limit - number of records in one page. (possible values: from 1 to 500)
		/// - page - the page number you want to get (possible values: from 0 to **page count - 1**)
		/// - sortBy - sort the received list by a paramenter. Set to **created_at** by default (possible values: payment_id, payment_status, pay_address, price_amount, price_currency, pay_amount, actually_paid, pay_currency, order_id, order_description, purchase_id, outcome_amount, outcome_currency)
		/// - orderBy - display the list in ascending or descending order. Set to **asc** by default (possible values: asc, desc)
		/// - dateFrom - select the displayed period start date (date format: YYYY-MM-DD or yy-MM-ddTHH:mm:ss.SSSZ).
		/// - dateTo - select the displayed period end date (date format: YYYY-MM-DD or yy-MM-ddTHH:mm:ss.SSSZ).
		/// GetListOfPayments v1/payment/
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetListOfPaymentsReturn> GetListOfPaymentsAsync(string limit, string page, string sortBy, string orderBy, string dateFrom, string dateTo, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payment/?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&dateFrom=" + (dateFrom==null? "" : System.Uri.EscapeDataString(dateFrom))+"&dateTo=" + (dateTo==null? "" : System.Uri.EscapeDataString(dateTo));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetListOfPaymentsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get/Update payment estimate
		/// This endpoint is required to get the current estimate on the payment, and update the current estimate.
		/// Please note! Calling this estimate before `expiration_estimate_date` will return the current estimate, it won’t be updated.
		/// 
		/// `:id` \- payment ID, for which you want to get the estimate
		/// 
		/// Response:
		/// `id` \- payment ID
		/// `token_id` - id of api key used to create this payment (please discard this parameter)
		/// `pay_amount` - payment estimate, the exact amount the user will have to send to complete the payment
		/// `expiration_estimate_date` - expiration date of this estimate
		/// GetUpdatePaymentEstimate v1/payment/{id}/update-merchant-estimate
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetUpdatePaymentEstimateReturn> GetUpdatePaymentEstimateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payment/{id}/update-merchant-estimate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUpdatePaymentEstimateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get payment status
		/// Get the actual information about the payment. You need to provide the ID of the payment in the request.
		/// 
		/// NOTE! You should make the get payment status request with the same API key that you used in the create payment request.
		/// Here is the list of avalable statuses:
		/// - waiting - waiting for the customer to send the payment. The initial status of each payment.
		/// - confirming - the transaction is being processed on the blockchain. Appears when NOWPayments detect the funds from the user on the blockchain.
		/// - confirmed -  the process is confirmed by the blockchain. Customer’s funds have accumulated enough confirmations.
		/// - sending - the funds are being sent to your personal wallet. We are in the process of sending the funds to you.
		/// - partially_paid -  it shows that the customer sent the less than the actual price. Appears when the funds have arrived in your wallet.
		/// - finished - the funds have reached your personal address and the payment is finished.
		/// - failed -  the payment wasn't completed due to the error of some kind.
		/// - refunded -  the funds were refunded back to the user.
		/// - expired - the user didn't send the funds to the specified address in the 24 hour time window.
		/// 
		/// Additional info:
		/// - outcome_amount - this parameter shows the amount that will be (or is already) received on your Outcome Wallet once the transaction is settled.
		/// - outcome_currency - this parameter shows the currency in which the transaction will be settled.
		/// - invoice_id - this parameter shows invoice ID from which the payment was created
		/// GetPaymentStatus v1/payment/{payment_id}
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetPaymentStatusReturn> GetPaymentStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payment/{payment_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPaymentStatusReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify payout
		/// This method is required to verify payouts by using your 2fa code.
		/// You’ll have 10 attempts to verify the payout. If it is not verified after 10 attempts, the payout will remain in ‘creating’ status.
		/// Payout will be processed only when it is verified.
		/// 
		/// Make sure to have your 2fa authentication enabled in your NOWPayments Account (in Account Settings).
		/// When 2fa is disabled, the code automatically goes to your registration email.
		/// The code sent by email is valid for one hour.
		/// 
		/// Next is a description of the required request fields:
		/// 
		/// - :batch-withdrawal-id - payout id you received in `2. Create payout` method
		/// - verification_code - 2fa code you received with your Google Auth app or via email
		/// 
		/// 
		/// In order to establish an automatic verification of payouts, you should switch 2FA through the application.
		/// There are several libraries for different frameworks aimed on generating a 2FA codes based on a secret key from your account settings.
		/// e.g: Speakeasy for JavaScript.
		/// We do not recommend to change any default settings.
		/// 
		/// ```
		/// const 2faVerificationCode = speakeasy.totp({
		/// your_2fa_secret_key,
		/// encoding: 'base32',
		/// })
		/// ```
		/// VerifyPayout v1/payout/{withdrawals_id}/verify
		/// </summary>
		/// <returns>200</returns>
		public async Task VerifyPayoutAsync(VerifyPayoutPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payout/{withdrawals_id}/verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get sub-partners
		/// This method returns the entire list of your sub-partners.
		/// GetSubPartners v1/sub-partner
		/// </summary>
		/// <param name="id">int or array of int (optional)</param>
		/// <param name="offset">(optional) default 0</param>
		/// <param name="limit">(optional) default 10</param>
		/// <param name="order">ASC / DESC (optional) default ASC</param>
		public async Task GetSubPartnersAsync(string id, string offset, string limit, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sub-partner?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub-partner balance
		/// This request can be made only from a whitelisted IP.
		/// If IP whitelisting is disabled, this request can be made by any user that has an API key.
		/// GetSubPartnerBalance v1/sub-partner/balance/{id}
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetSubPartnerBalanceReturn> GetSubPartnerBalanceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sub-partner/balance/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSubPartnerBalanceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get transfer
		/// Get the actual information about the transfer. You need to provide the transfer ID in the request.
		/// GetTransfer v1/sub-partner/transfer/{id}
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetTransferReturn> GetTransferAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sub-partner/transfer/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTransferReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all transfers
		/// Returns the entire list of transfers created by your sub-partners.
		/// GetAllTransfers v1/sub-partner/transfers
		/// </summary>
		/// <param name="id">int or array of int (optional)</param>
		/// <param name="status">string or array of string 
		///"WAITING"/"CREATED"/"FINISHED"/"REJECTED"
		///(optional)</param>
		/// <param name="limit">(optional) default 10</param>
		/// <param name="offset">(optional) default 0</param>
		/// <param name="order">ASC / DESC (optional) default ASC</param>
		/// <returns>200</returns>
		public async Task<GetAllTransfersReturn> GetAllTransfersAsync(string id, string status, string limit, string offset, string order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sub-partner/transfers?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset))+"&order=" + (order==null? "" : System.Uri.EscapeDataString(order));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAllTransfersReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get many recurring payments
		/// The method allows you to view the entire list of recurring payments filtered by payment status and/or payment plan id
		/// GetManyRecurringPayments v1/subscriptions
		/// </summary>
		/// <param name="status">"WAITING_PAY" / "PAID" /  "PARTIALLY_PAID" / "EXPIRED"</param>
		/// <param name="is_active">true / false</param>
		/// <returns>200</returns>
		public async Task<GetManyRecurringPaymentsReturn> GetManyRecurringPaymentsAsync(string status, string subscription_plan_id, string is_active, string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions?status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&subscription_plan_id=" + (subscription_plan_id==null? "" : System.Uri.EscapeDataString(subscription_plan_id))+"&is_active=" + (is_active==null? "" : System.Uri.EscapeDataString(is_active))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetManyRecurringPaymentsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get many plans
		/// This method allows you to obtain information about all the payment plans you’ve created.
		/// GetManyPlans v1/subscriptions/plans
		/// </summary>
		/// <param name="limit">Number</param>
		/// <param name="offset">Number</param>
		/// <returns>200</returns>
		public async Task<GetManyPlansReturn> GetManyPlansAsync(string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/plans?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetManyPlansReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get one plan
		/// This method allows you to obtain information about your payment plan.
		/// (you need to specify your payment plan id in the request).
		/// GetOnePlan v1/subscriptions/plans/{plan_id}
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetOnePlanReturn> GetOnePlanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/plans/{plan_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOnePlanReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update plan
		/// This method allows you to add necessary changes to a created plan. They won’t affect users who have already paid; however, the changes will take effect when a new payment is to be made.
		/// UpdatePlan v1/subscriptions/plans/{plan_id}
		/// </summary>
		public async Task UpdatePlanAsync(UpdatePlanPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/plans/{plan_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete recurring payment
		/// Completely removes a particular payment from the recurring payment plan.
		/// You need to specify the payment plan id in the request.
		/// DeleteRecurringPayment v1/subscriptions/{sub_id}
		/// </summary>
		/// <returns>200</returns>
		public async Task<DeleteRecurringPaymentReturn> DeleteRecurringPaymentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/{sub_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRecurringPaymentReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get one recurring payment
		/// Get information about a particular recurring payment via its ID.
		/// 
		/// Here’s the list of available statuses:
		/// \- WAITING_PAY
		/// \- PAID
		/// \- PARTIALLY_PAID
		/// \- EXPIRED
		/// GetOneRecurringPayment v1/subscriptions/{sub_id}
		/// </summary>
		/// <returns>200</returns>
		public async Task<GetOneRecurringPaymentReturn> GetOneRecurringPaymentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/{sub_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOneRecurringPaymentReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetEstimatedPriceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount_from")]
		public System.Nullable<System.Double> Amount_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency_from")]
		public string Currency_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency_to")]
		public string Currency_to { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="estimated_amount")]
		public System.Nullable<System.Double> Estimated_amount { get; set; }
	}
	
	public class GetTheMinimumPaymentAmountReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency_from")]
		public string Currency_from { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency_to")]
		public string Currency_to { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fiat_equivalent")]
		public System.Nullable<System.Double> Fiat_equivalent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="min_amount")]
		public System.Nullable<System.Double> Min_amount { get; set; }
	}
	
	public class GetListOfPaymentsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GetListOfPaymentsReturnData[] GetListOfPaymentsReturnData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Double> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Double> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pagesCount")]
		public System.Nullable<System.Double> PagesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class GetListOfPaymentsReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="actually_paid")]
		public System.Nullable<System.Double> Actually_paid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_description")]
		public string Order_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outcome_amount")]
		public System.Nullable<System.Double> Outcome_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outcome_currency")]
		public string Outcome_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pay_address")]
		public string Pay_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pay_amount")]
		public System.Nullable<System.Double> Pay_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pay_currency")]
		public string Pay_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public System.Nullable<System.Double> Payment_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_status")]
		public string Payment_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_amount")]
		public System.Nullable<System.Double> Price_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_currency")]
		public string Price_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchase_id")]
		public string Purchase_id { get; set; }
	}
	
	public class GetUpdatePaymentEstimateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiration_estimate_date")]
		public string Expiration_estimate_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pay_amount")]
		public System.Nullable<System.Double> Pay_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_id")]
		public string Token_id { get; set; }
	}
	
	public class GetPaymentStatusReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="actually_paid")]
		public System.Nullable<System.Double> Actually_paid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_description")]
		public string Order_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outcome_amount")]
		public System.Nullable<System.Double> Outcome_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outcome_currency")]
		public string Outcome_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pay_address")]
		public string Pay_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pay_amount")]
		public System.Nullable<System.Double> Pay_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pay_currency")]
		public string Pay_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_id")]
		public System.Nullable<System.Double> Payment_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_status")]
		public string Payment_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_amount")]
		public System.Nullable<System.Double> Price_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price_currency")]
		public string Price_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchase_id")]
		public string Purchase_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class VerifyPayoutPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="verification_code")]
		public string Verification_code { get; set; }
	}
	
	public class GetSubPartnerBalanceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetSubPartnerBalanceReturnResult Result { get; set; }
	}
	
	public class GetSubPartnerBalanceReturnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="balances")]
		public GetSubPartnerBalanceReturnResultBalances Balances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subPartnerId")]
		public string SubPartnerId { get; set; }
	}
	
	public class GetSubPartnerBalanceReturnResultBalances
	{
		
		[System.Runtime.Serialization.DataMember(Name="usddtrc20")]
		public GetSubPartnerBalanceReturnResultBalancesUsddtrc20 Usddtrc20 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usdtbsc")]
		public GetSubPartnerBalanceReturnResultBalancesUsdtbsc Usdtbsc { get; set; }
	}
	
	public class GetSubPartnerBalanceReturnResultBalancesUsddtrc20
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingAmount")]
		public System.Nullable<System.Double> PendingAmount { get; set; }
	}
	
	public class GetSubPartnerBalanceReturnResultBalancesUsdtbsc
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingAmount")]
		public System.Nullable<System.Double> PendingAmount { get; set; }
	}
	
	public class GetTransferReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetTransferReturnResult Result { get; set; }
	}
	
	public class GetTransferReturnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from_sub_id")]
		public string From_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to_sub_id")]
		public string To_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class GetAllTransfersReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetAllTransfersReturnResult[] GetAllTransfersReturnResult { get; set; }
	}
	
	public class GetAllTransfersReturnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from_sub_id")]
		public string From_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to_sub_id")]
		public string To_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class GetManyRecurringPaymentsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetManyRecurringPaymentsReturnResult[] GetManyRecurringPaymentsReturnResult { get; set; }
	}
	
	public class GetManyRecurringPaymentsReturnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expire_date")]
		public string Expire_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriber")]
		public GetManyRecurringPaymentsReturnResultSubscriber Subscriber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_plan_id")]
		public string Subscription_plan_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class GetManyRecurringPaymentsReturnResultSubscriber
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_partner_id")]
		public string Sub_partner_id { get; set; }
	}
	
	public class GetManyPlansReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetManyPlansReturnResult[] GetManyPlansReturnResult { get; set; }
	}
	
	public class GetManyPlansReturnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancel_url")]
		public object Cancel_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval_day")]
		public string Interval_day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipn_callback_url")]
		public object Ipn_callback_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partially_paid_url")]
		public object Partially_paid_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success_url")]
		public object Success_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class GetOnePlanReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetOnePlanReturnResult Result { get; set; }
	}
	
	public class GetOnePlanReturnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancel_url")]
		public object Cancel_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval_day")]
		public string Interval_day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipn_callback_url")]
		public object Ipn_callback_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partially_paid_url")]
		public object Partially_paid_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success_url")]
		public object Success_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class UpdatePlanPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval_day")]
		public System.Nullable<System.Double> Interval_day { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class DeleteRecurringPaymentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	public class GetOneRecurringPaymentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public GetOneRecurringPaymentReturnResult Result { get; set; }
	}
	
	public class GetOneRecurringPaymentReturnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expire_date")]
		public string Expire_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriber")]
		public GetOneRecurringPaymentReturnResultSubscriber Subscriber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_plan_id")]
		public string Subscription_plan_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	public class GetOneRecurringPaymentReturnResultSubscriber
	{
		
		[System.Runtime.Serialization.DataMember(Name="sub_partner_id")]
		public string Sub_partner_id { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
