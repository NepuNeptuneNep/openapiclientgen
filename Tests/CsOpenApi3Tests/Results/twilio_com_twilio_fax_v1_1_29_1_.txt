//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Faxv1fax
	{
		
		/// <summary>
		/// The SID of the Account that created the resource
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The API version used to transmit the fax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_version")]
		public string Api_version { get; set; }
		
		/// <summary>
		/// The ISO 8601 formatted date and time in GMT when the resource was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The ISO 8601 formatted date and time in GMT when the resource was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The direction of the fax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public System.Nullable<Faxv1faxDirection> Direction { get; set; }
		
		/// <summary>
		/// The time it took to transmit the fax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// The number the fax was sent from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The URLs of the fax's related resources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The SID of the FaxMedia resource that is associated with the Fax
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^ME[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^ME[0-9a-fA-F]{32}$")]
		public string Media_sid { get; set; }
		
		/// <summary>
		/// The Twilio-hosted URL that can be used to download fax media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_url")]
		public string Media_url { get; set; }
		
		/// <summary>
		/// The number of pages contained in the fax document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_pages")]
		public System.Nullable<System.Int32> Num_pages { get; set; }
		
		/// <summary>
		/// The fax transmission price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// The ISO 4217 currency used for billing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_unit")]
		public string Price_unit { get; set; }
		
		/// <summary>
		/// The quality of the fax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quality")]
		public System.Nullable<Faxv1faxQuality> Quality { get; set; }
		
		/// <summary>
		/// The unique string that identifies the resource
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FX[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FX[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The status of the fax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Faxv1faxStatus> Status { get; set; }
		
		/// <summary>
		/// The phone number that received the fax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// The absolute URL of the fax resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Faxv1faxDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound")]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound")]
		outbound = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Faxv1faxQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard")]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fine")]
		fine = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="superfine")]
		superfine = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Faxv1faxStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="processing")]
		processing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sending")]
		sending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delivered")]
		delivered = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="receiving")]
		receiving = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="received")]
		received = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no-answer")]
		noMinusanswer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="busy")]
		busy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Faxv1faxfax_media
	{
		
		/// <summary>
		/// The SID of the Account that created the resource
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The content type of the stored fax media
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		public string Content_type { get; set; }
		
		/// <summary>
		/// The ISO 8601 date and time in GMT when the resource was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The ISO 8601 date and time in GMT when the resource was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The SID of the fax the FaxMedia resource is associated with
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FX[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FX[0-9a-fA-F]{32}$")]
		public string Fax_sid { get; set; }
		
		/// <summary>
		/// The unique string that identifies the resource
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^ME[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^ME[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the FaxMedia resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of all faxes.
		/// ListFax v1/Faxes
		/// </summary>
		/// <param name="From">Retrieve only those faxes sent from this phone number, specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.</param>
		/// <param name="To">Retrieve only those faxes sent to this phone number, specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.</param>
		/// <param name="DateCreatedOnOrBefore">Retrieve only those faxes with a `date_created` that is before or equal to this value, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="DateCreatedAfter">Retrieve only those faxes with a `date_created` that is later than this value, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>OK</returns>
		public async Task<ListFaxReturn> ListFaxAsync(string From, string To, System.DateTimeOffset DateCreatedOnOrBefore, System.DateTimeOffset DateCreatedAfter, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Faxes?From=" + (From==null? "" : System.Uri.EscapeDataString(From))+"&To=" + (To==null? "" : System.Uri.EscapeDataString(To))+"&DateCreatedOnOrBefore=" + DateCreatedOnOrBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DateCreatedAfter=" + DateCreatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&PageSize="+PageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFaxReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of all fax media instances for the specified fax.
		/// ListFaxMedia v1/Faxes/{FaxSid}/Media
		/// </summary>
		/// <param name="FaxSid">The SID of the fax with the FaxMedia resources to read.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>OK</returns>
		public async Task<ListFaxMediaReturn> ListFaxMediaAsync(string FaxSid, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Faxes/"+ (FaxSid==null? "" : System.Uri.EscapeDataString(FaxSid))+"/Media&PageSize="+PageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFaxMediaReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific fax media instance.
		/// DeleteFaxMedia v1/Faxes/{FaxSid}/Media/{Sid}
		/// </summary>
		/// <param name="FaxSid">The SID of the fax with the FaxMedia resource to delete.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the FaxMedia resource to delete.
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteFaxMediaAsync(string FaxSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Faxes/"+ (FaxSid==null? "" : System.Uri.EscapeDataString(FaxSid))+"/Media/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a specific fax media instance.
		/// FetchFaxMedia v1/Faxes/{FaxSid}/Media/{Sid}
		/// </summary>
		/// <param name="FaxSid">The SID of the fax with the FaxMedia resource to fetch.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the FaxMedia resource to fetch.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Faxv1faxfax_media> FetchFaxMediaAsync(string FaxSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Faxes/"+ (FaxSid==null? "" : System.Uri.EscapeDataString(FaxSid))+"/Media/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Faxv1faxfax_media>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific fax and its associated media.
		/// DeleteFax v1/Faxes/{Sid}
		/// </summary>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Fax resource to delete.
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteFaxAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Faxes/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a specific fax.
		/// FetchFax v1/Faxes/{Sid}
		/// </summary>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Fax resource to fetch.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Faxv1fax> FetchFaxAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Faxes/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Faxv1fax>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListFaxReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="faxes")]
		public Faxv1fax[] Faxes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListFaxReturnMeta Meta { get; set; }
	}
	
	public class ListFaxReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListFaxMediaReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Faxv1faxfax_media[] Media { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListFaxMediaReturnMeta Meta { get; set; }
	}
	
	public class ListFaxMediaReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
