//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Collection
	{
		
		/// <summary>
		/// The unique name of a collection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public long Size { get; set; }
		
		/// <summary>
		/// The current status of a collection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionDefinition
	{
		
		/// <summary>
		/// The unique name of a collection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique name of an index.
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleteAll")]
		public System.Nullable<System.Boolean> DeleteAll { get; set; }
		
		/// <summary>
		/// If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public VectorFilter Filter { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// An index namespace name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	/// <summary>
	/// If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VectorFilter
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIndexStatsRequest
	{
		
		/// <summary>
		/// If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public VectorFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeIndexStatsResponse
	{
		
		/// <summary>
		/// The number of dimensions in the vector representation
		/// Minimum: 1
		/// Maximum: 20000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		[System.ComponentModel.DataAnnotations.Range(1, 20000)]
		public System.Nullable<System.Int32> Dimension { get; set; }
		
		/// <summary>
		/// The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexFullness")]
		public System.Nullable<System.Single> IndexFullness { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespaces")]
		public System.Collections.Generic.Dictionary<string, IndexNamespaceStats> Namespaces { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVectorCount")]
		public System.Nullable<System.Int64> TotalVectorCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexNamespaceStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="vectorCount")]
		public System.Nullable<System.Int64> VectorCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Environment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west1-gcp")]
		usMinuswest1Minusgcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west4-gcp")]
		usMinuswest4Minusgcp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-central1-gcp")]
		usMinuscentral1Minusgcp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east1-gcp")]
		usMinuseast1Minusgcp = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east4-gcp")]
		usMinuseast4Minusgcp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west1-gcp")]
		euMinuswest1Minusgcp = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east1-aws")]
		usMinuseast1Minusaws = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchRequest
	{
		
		/// <summary>
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// An index namespace name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchResponse
	{
		
		/// <summary>
		/// An index namespace name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vectors")]
		public System.Collections.Generic.Dictionary<string, double[]> Vectors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Index
	{
		
		[System.Runtime.Serialization.DataMember(Name="database")]
		public IndexDatabase Database { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IndexStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexDatabase
	{
		
		/// <summary>
		/// The number of dimensions in the vector representation
		/// Minimum: 1
		/// Maximum: 20000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		[System.ComponentModel.DataAnnotations.Range(1, 20000)]
		public System.Nullable<System.Int32> Dimension { get; set; }
		
		/// <summary>
		/// The vector similarity metric of the index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public System.Nullable<IndexDatabaseMetric> Metric { get; set; }
		
		/// <summary>
		/// The unique name of an index.
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Name { get; set; }
		
		/// <summary>
		/// The pod type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod_type")]
		public System.Nullable<IndexDatabasePod_type> Pod_type { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pods")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Pods { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicas")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Replicas { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shards")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Shards { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexDatabaseMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		euclidean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cosine = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotproduct = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexDatabasePod_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x1")]
		s1_x1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x2")]
		s1_x2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x4")]
		s1_x4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x8")]
		s1_x8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x1")]
		p1_x1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x2")]
		p1_x2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x4")]
		p1_x4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x8")]
		p1_x8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x1")]
		p2_x1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x2")]
		p2_x2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x4")]
		p2_x4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x8")]
		p2_x8 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ready")]
		public System.Nullable<System.Boolean> Ready { get; set; }
		
		/// <summary>
		/// The current status of a index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<IndexStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScalingUp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScalingDown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexConfiguration
	{
		
		/// <summary>
		/// The pod type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod_type")]
		public System.Nullable<IndexConfigurationPod_type> Pod_type { get; set; }
		
		/// <summary>
		/// The desired number of replicas for the index.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicas")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Replicas { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexConfigurationPod_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x1")]
		s1_x1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x2")]
		s1_x2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x4")]
		s1_x4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x8")]
		s1_x8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x1")]
		p1_x1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x2")]
		p1_x2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x4")]
		p1_x4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x8")]
		p1_x8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x1")]
		p2_x1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x2")]
		p2_x2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x4")]
		p2_x4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x8")]
		p2_x8 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexDefinition
	{
		
		/// <summary>
		/// The number of dimensions in the vector representation
		/// Required
		/// Minimum: 1
		/// Maximum: 20000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		[System.ComponentModel.DataAnnotations.Range(1, 20000)]
		public int Dimension { get; set; }
		
		/// <summary>
		/// Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when metadata_config is present, only specified metadata fields are indexed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata_config")]
		public IndexMetadataConfig Metadata_config { get; set; }
		
		/// <summary>
		/// The vector similarity metric of the index
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public IndexDatabaseMetric Metric { get; set; }
		
		/// <summary>
		/// The unique name of an index.
		/// Required
		/// Min length: 1
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Name { get; set; }
		
		/// <summary>
		/// The pod type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod_type")]
		public System.Nullable<IndexDefinitionPod_type> Pod_type { get; set; }
		
		/// <summary>
		/// The number of pods for the index to use,including replicas.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pods")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Pods { get; set; }
		
		/// <summary>
		/// The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replicas")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Replicas { get; set; }
		
		/// <summary>
		/// The unique name of a collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_collection")]
		public string Source_collection { get; set; }
	}
	
	/// <summary>
	/// Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when metadata_config is present, only specified metadata fields are indexed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexMetadataConfig
	{
		
		/// <summary>
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexed")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		public string[] Indexed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexDefinitionPod_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x1")]
		s1_x1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x2")]
		s1_x2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x4")]
		s1_x4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x8")]
		s1_x8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x1")]
		p1_x1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x2")]
		p1_x2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x4")]
		p1_x4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x8")]
		p1_x8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x1")]
		p2_x1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x2")]
		p2_x2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x4")]
		p2_x4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x8")]
		p2_x8 = 11,
	}
	
	/// <summary>
	/// The vector similarity metric of the index
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		euclidean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cosine = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotproduct = 2,
	}
	
	/// <summary>
	/// The current status of a index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IndexState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScalingUp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScalingDown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 4,
	}
	
	/// <summary>
	/// The pod type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x1")]
		s1_x1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x2")]
		s1_x2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x4")]
		s1_x4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="s1.x8")]
		s1_x8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x1")]
		p1_x1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x2")]
		p1_x2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x4")]
		p1_x4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p1.x8")]
		p1_x8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x1")]
		p2_x1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x2")]
		p2_x2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x4")]
		p2_x4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="p2.x8")]
		p2_x8 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryMatch
	{
		
		/// <summary>
		/// The unique ID of a vector
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public VectorMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparseValues")]
		public SparseVectorData SparseValues { get; set; }
		
		/// <summary>
		/// Vector dense data. This should be the same length as the dimension of the index being queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VectorMetadata
	{
	}
	
	/// <summary>
	/// Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SparseVectorData
	{
		
		/// <summary>
		/// The indices of the sparse data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="indices")]
		public int[] Indices { get; set; }
		
		/// <summary>
		/// The corresponding values of the sparse data, which must be the same length as the indices.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryRequest
	{
		
		/// <summary>
		/// If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public VectorFilter Filter { get; set; }
		
		/// <summary>
		/// The unique ID of a vector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeMetadata")]
		public System.Nullable<System.Boolean> IncludeMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeValues")]
		public System.Nullable<System.Boolean> IncludeValues { get; set; }
		
		/// <summary>
		/// An index namespace name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparseVector")]
		public SparseVectorData SparseVector { get; set; }
		
		/// <summary>
		/// The number of results to return for each query.
		/// Required
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topK")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public long TopK { get; set; }
		
		/// <summary>
		/// Vector dense data. This should be the same length as the dimension of the index being queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vector")]
		public double[] Vector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public QueryMatch[] Matches { get; set; }
		
		/// <summary>
		/// An index namespace name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRequest
	{
		
		/// <summary>
		/// The vector's unique ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An index namespace name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setMetadata")]
		public VectorMetadata SetMetadata { get; set; }
		
		/// <summary>
		/// Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparseValues")]
		public SparseVectorData SparseValues { get; set; }
		
		/// <summary>
		/// Vector dense data. This should be the same length as the dimension of the index being queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertRequest
	{
		
		/// <summary>
		/// An index namespace name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vectors")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public UpsertVector[] Vectors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertVector
	{
		
		/// <summary>
		/// The unique ID of a vector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public VectorMetadata Metadata { get; set; }
		
		/// <summary>
		/// Vector sparse data. Represented as a list of indices and a list of corresponded values, which must be the same length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sparseValues")]
		public SparseVectorData SparseValues { get; set; }
		
		/// <summary>
		/// Vector dense data. This should be the same length as the dimension of the index being queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public double[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="upsertedCount")]
		public System.Nullable<System.Int64> UpsertedCount { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List collections
		/// This operation returns a list of your Pinecone collections.
		/// List_collections collections
		/// </summary>
		/// <returns>This operation returns a list of all the collections in your current project.</returns>
		public async Task<string[]> List_collectionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create collection
		/// This operation creates a Pinecone collection.
		/// Create_collection collections
		/// </summary>
		public async Task Create_collectionAsync(CollectionDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Collection
		/// This operation deletes an existing collection.
		/// Delete_collection collections/{collectionName}
		/// </summary>
		public async Task Delete_collectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collectionName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describe collection
		/// Get a description of a collection.
		/// Describe_collection collections/{collectionName}
		/// </summary>
		/// <returns>This operation returns a list of all the collections in your current project.</returns>
		public async Task<Collection> Describe_collectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collectionName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Collection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List indexes
		/// This operation returns a list of your Pinecone indexes.
		/// List_indexes databases
		/// </summary>
		/// <returns>This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key</returns>
		public async Task<string[]> List_indexesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "databases";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<string[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create index
		/// This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.
		/// Create_index databases
		/// </summary>
		public async Task Create_indexAsync(IndexDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "databases";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Index
		/// This operation deletes an existing index.
		/// Delete_index databases/{indexName}
		/// </summary>
		public async Task Delete_indexAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "databases/{indexName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describe index
		/// Get a description of an index.
		/// Describe_index databases/{indexName}
		/// </summary>
		/// <returns>This operation returns a list of all the collections in your current project.</returns>
		public async Task<Index> Describe_indexAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "databases/{indexName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Index>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Configure index
		/// This operation specifies the pod type and number of replicas for an index.
		/// Configure_index databases/{indexName}
		/// </summary>
		public async Task Configure_indexAsync(IndexConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "databases/{indexName}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Describe Index Stats
		/// The `DescribeIndexStats` operation returns statistics about the index's contents, including the vector count per namespace and the number of dimensions.
		/// DescribeIndexStats describe_index_stats
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<DescribeIndexStatsResponse> DescribeIndexStatsAsync(DescribeIndexStatsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "describe_index_stats";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeIndexStatsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Query
		/// The `Query` operation searches a namespace, using a query vector. It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
		/// Query query
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<QueryResponse> QueryAsync(QueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "query";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<QueryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete
		/// The `Delete` operation deletes vectors, by id, from a single namespace. You can delete items by their id, from a single namespace.
		/// Delete vectors/delete
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<DeleteResponse> DeleteAsync(DeleteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vectors/delete";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch
		/// The `Fetch` operation looks up and returns vectors, by ID, from a single namespace. The returned vectors include the vector data and/or metadata.
		/// Fetch vectors/fetch
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<FetchResponse> FetchAsync(FetchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vectors/fetch";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FetchResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetch
		/// The `Update` operation updates vector in a namespace. If a value is included, it will overwrite the previous value. If a set_metadata is included, the values of the fields specified in it will be added or overwrite the previous value.
		/// Update vectors/update
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<UpdateResponse> UpdateAsync(UpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vectors/update";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Upsert
		/// The Upsert operation writes vectors into a namespace. If a new value is upserted for an existing vector id, it will overwrite the previous value.
		/// Upsert vectors/upsert
		/// </summary>
		/// <returns>A successful response</returns>
		public async Task<UpsertResponse> UpsertAsync(UpsertRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vectors/upsert";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpsertResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
