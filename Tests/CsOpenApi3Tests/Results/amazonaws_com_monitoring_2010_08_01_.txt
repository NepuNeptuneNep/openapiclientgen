//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFound
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAnomalyDetectorOutput
	{
	}
	
	/// <summary>
	/// <p>A dimension is a name/value pair that is part of the identity of a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric. For example, many Amazon EC2 metrics publish <code>InstanceId</code> as a dimension name, and the actual instance ID as the value for that dimension.</p> <p>You can assign up to 30 dimensions to a metric.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dimension
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>This structure is used in both <code>GetMetricData</code> and <code>PutMetricAlarm</code>. The supported use of this structure is different for those two operations.</p> <p>When used in <code>GetMetricData</code>, it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a Metrics Insights query or a math expression. A single <code>GetMetricData</code> call can include up to 500 <code>MetricDataQuery</code> structures.</p> <p>When used in <code>PutMetricAlarm</code>, it enables you to create an alarm based on a metric math expression. Each <code>MetricDataQuery</code> in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single <code>PutMetricAlarm</code> call can include up to 20 <code>MetricDataQuery</code> structures in the array. The 20 structures can include as many as 10 structures that contain a <code>MetricStat</code> parameter to retrieve a metric, and as many as 10 structures that contain the <code>Expression</code> parameter to perform a math expression. Of those <code>Expression</code> structures, one must have <code>true</code> as the value for <code>ReturnData</code>. The result of this expression is the value the alarm watches.</p> <p>Any expression used in a <code>PutMetricAlarm</code> operation must return a single time series. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Some of the parameters of this structure also have different uses whether you are using this structure in a <code>GetMetricData</code> operation or a <code>PutMetricAlarm</code> operation. These differences are explained in the following parameter list.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDataQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStat MetricStat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// This structure defines the metric to be returned, along with the statistics, period, and units.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricStat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Metric Metric { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardUnit Unit { get; set; }
	}
	
	/// <summary>
	/// Represents a specific metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StandardUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServiceFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MissingRequiredParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterCombinationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDashboardsOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashboardNotFoundError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInsightRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PartialFailure[] Failures { get; set; }
	}
	
	/// <summary>
	/// This array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartialFailure
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureResource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExceptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMetricStreamOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlarmHistoryOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmHistoryItem[] AlarmHistoryItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the history of a specific alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlarmHistoryItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmType AlarmType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HistoryItemType HistoryItemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HistorySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HistoryData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlarmType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CompositeAlarm")]
		CompositeAlarm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MetricAlarm")]
		MetricAlarm = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HistoryItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConfigurationUpdate")]
		ConfigurationUpdate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StateUpdate")]
		StateUpdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Action")]
		Action = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNextToken
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlarmsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompositeAlarm[] CompositeAlarms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricAlarm[] MetricAlarms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details about a composite alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompositeAlarm
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ActionsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset AlarmConfigurationUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InsufficientDataActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OKActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReasonData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StateUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StateValue StateValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StateTransitionedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionsSuppressedBy ActionsSuppressedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionsSuppressedReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionsSuppressor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActionsSuppressorWaitPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActionsSuppressorExtensionPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StateValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALARM")]
		ALARM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSUFFICIENT_DATA")]
		INSUFFICIENT_DATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ActionsSuppressedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WaitPeriod")]
		WaitPeriod = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExtensionPeriod")]
		ExtensionPeriod = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Alarm")]
		Alarm = 2,
	}
	
	/// <summary>
	/// The details about a metric alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricAlarm
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset AlarmConfigurationUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ActionsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OKActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InsufficientDataActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StateValue StateValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReasonData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StateUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExtendedStatistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EvaluationPeriods { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DatapointsToAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComparisonOperator ComparisonOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TreatMissingData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EvaluateLowSampleCountPercentile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThresholdMetricId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationState EvaluationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StateTransitionedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Statistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SampleCount")]
		SampleCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Average")]
		Average = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sum")]
		Sum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Minimum")]
		Minimum = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Maximum")]
		Maximum = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GreaterThanOrEqualToThreshold")]
		GreaterThanOrEqualToThreshold = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GreaterThanThreshold")]
		GreaterThanThreshold = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThanThreshold")]
		LessThanThreshold = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThanOrEqualToThreshold")]
		LessThanOrEqualToThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThanLowerOrGreaterThanUpperThreshold")]
		LessThanLowerOrGreaterThanUpperThreshold = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThanLowerThreshold")]
		LessThanLowerThreshold = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GreaterThanUpperThreshold")]
		GreaterThanUpperThreshold = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EvaluationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTIAL_DATA")]
		PARTIAL_DATA = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlarmsForMetricOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricAlarm[] MetricAlarms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAnomalyDetectorsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AnomalyDetector[] AnomalyDetectors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An anomaly detection model associated with a particular CloudWatch metric, statistic, or metric math expression. You can use the model to display a band of expected, normal values when the metric is graphed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnomalyDetector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AnomalyDetectorConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AnomalyDetectorStateValue StateValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingleMetricAnomalyDetector SingleMetricAnomalyDetector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricMathAnomalyDetector MetricMathAnomalyDetector { get; set; }
	}
	
	/// <summary>
	/// The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model and the time zone to use for the metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnomalyDetectorConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Range[] ExcludedTimeRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricTimezone { get; set; }
	}
	
	/// <summary>
	/// Specifies one range of days or times to exclude from use for training an anomaly detection model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Range
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AnomalyDetectorStateValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_TRAINING")]
		PENDING_TRAINING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRAINED_INSUFFICIENT_DATA")]
		TRAINED_INSUFFICIENT_DATA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRAINED")]
		TRAINED = 2,
	}
	
	/// <summary>
	/// Designates the CloudWatch metric and statistic that provides the time series the anomaly detector uses as input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleMetricAnomalyDetector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
	}
	
	/// <summary>
	/// Indicates the CloudWatch math expression that provides the time series the anomaly detector uses as input. The designated math expression must return a single time series.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricMathAnomalyDetector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] MetricDataQueries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AnomalyDetectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE_METRIC")]
		SINGLE_METRIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_MATH")]
		METRIC_MATH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInsightRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InsightRule[] InsightRules { get; set; }
	}
	
	/// <summary>
	/// This structure contains the definition for a Contributor Insights rule. For more information about this rule, see<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html"> Using Constributor Insights to analyze high-cardinality data</a> in the <i>Amazon CloudWatch User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsightRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ManagedRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableInsightRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PartialFailure[] Failures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableInsightRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PartialFailure[] Failures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDashboardOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInsightRuleReportOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] KeyLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AggregationStatistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AggregateValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ApproximateUniqueCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InsightRuleContributor[] Contributors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InsightRuleMetricDatapoint[] MetricDatapoints { get; set; }
	}
	
	/// <summary>
	/// <p>One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then a unique contributor is a unique combination of values from all the keys in the rule.</p> <p>If the rule contains a single key, then each unique contributor is each unique value for this key.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsightRuleContributor
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Keys { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double ApproximateAggregateValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InsightRuleContributorDatapoint[] Datapoints { get; set; }
	}
	
	/// <summary>
	/// <p>One data point related to one contributor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_InsightRuleContributor.html">InsightRuleContributor</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsightRuleContributorDatapoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double ApproximateValue { get; set; }
	}
	
	/// <summary>
	/// <p>One data point from the metric time series returned in a Contributor Insights rule report.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsightRuleMetricDatapoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UniqueContributors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxContributorValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Maximum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricDataOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDataResult[] MetricDataResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageData[] Messages { get; set; }
	}
	
	/// <summary>
	/// A <code>GetMetricData</code> call returns an array of <code>MetricDataResult</code> structures. Each of these structures includes the data points for that metric, along with the timestamps of those data points and other identifying information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Timestamps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageData[] Messages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Complete")]
		Complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InternalError")]
		InternalError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PartialData")]
		PartialData = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Forbidden")]
		Forbidden = 3,
	}
	
	/// <summary>
	/// <p>A message returned by the <code>GetMetricData</code>API, including a code and a description.</p> <p>If a cross-Region <code>GetMetricData</code> operation fails with a code of <code>Forbidden</code> and a value of <code>Authentication too complex to retrieve cross region data</code>, you can correct the problem by running the <code>GetMetricData</code> operation in the same Region where the metric data is.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricStatisticsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Datapoint[] Datapoints { get; set; }
	}
	
	/// <summary>
	/// Encapsulates the statistical data that CloudWatch computes from metric data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Datapoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatapointValueMap ExtendedStatistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatapointValueMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricStreamOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamFilter[] IncludeFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamFilter[] ExcludeFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirehoseArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamOutputFormat OutputFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamStatisticsConfiguration[] StatisticsConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeLinkedAccountsMetrics { get; set; }
	}
	
	/// <summary>
	/// <p>This structure contains a metric namespace and optionally, a list of metric names, to either include in a metric stream or exclude from a metric stream.</p> <p>A metric stream's filters can include up to 1000 total names. This limit applies to the sum of namespace names and metric names in the filters. For example, this could include 10 metric namespace filters with 99 metrics each, or 20 namespace filters with 49 metrics specified in each filter.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricStreamFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MetricNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricStreamOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="opentelemetry0.7")]
		opentelemetry0_7 = 1,
	}
	
	/// <summary>
	/// By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>, and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. This structure contains information for one metric that includes additional statistics in the stream. For more information about statistics, see CloudWatch, listed in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html"> CloudWatch statistics definitions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricStreamStatisticsConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamStatisticsMetric[] IncludeMetrics { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AdditionalStatistics { get; set; }
	}
	
	/// <summary>
	/// This object contains the information for one metric that is to be streamed with additional statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricStreamStatisticsMetric
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricWidgetImageOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricWidgetImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDashboardsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DashboardEntry[] DashboardEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a specific dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashboardEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListManagedInsightRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedRuleDescription[] ManagedRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Contains information about managed Contributor Insights rules, as returned by <code>ListManagedInsightRules</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedRuleDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedRuleState RuleState { get; set; }
	}
	
	/// <summary>
	///  The status of a managed Contributor Insights rule. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedRuleState
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMetricStreamsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// This structure contains the configuration information about one metric stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricStreamEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirehoseArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamOutputFormat OutputFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMetricsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Metric[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OwningAccounts { get; set; }
	}
	
	/// <summary>
	/// Represents filters for a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DimensionFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A key-value pair associated with a CloudWatch resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAnomalyDetectorOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutDashboardOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DashboardValidationMessage[] DashboardValidationMessages { get; set; }
	}
	
	/// <summary>
	/// An error or warning for the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashboardValidationMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashboardInvalidInputError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutInsightRuleOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutManagedInsightRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PartialFailure[] Failures { get; set; }
	}
	
	/// <summary>
	///  Contains the information that's required to enable a managed Contributor Insights rule for an Amazon Web Services resource. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Encapsulates the information sent to either create a metric or add new values to be aggregated into an existing metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDatum
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatisticSet StatisticValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StorageResolution { get; set; }
	}
	
	/// <summary>
	/// Represents a set of statistics that describes a specific metric. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatisticSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double SampleCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Sum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Minimum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Maximum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutMetricStreamOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcurrentModificationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidFormatFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMetricStreamsOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMetricStreamsOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAlarmsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAnomalyDetectorInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingleMetricAnomalyDetector SingleMetricAnomalyDetector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricMathAnomalyDetector MetricMathAnomalyDetector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDashboardsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] DashboardNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInsightRulesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RuleNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteMetricStreamInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScanBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TimestampDescending")]
		TimestampDescending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TimestampAscending")]
		TimestampAscending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlarmHistoryInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmType[] AlarmTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HistoryItemType HistoryItemType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanBy ScanBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlarmsForMetricInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExtendedStatistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAlarmsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmNamePrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmType[] AlarmTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChildrenOfAlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentsOfAlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StateValue StateValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAnomalyDetectorsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AnomalyDetectorType[] AnomalyDetectorTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeInsightRulesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableAlarmActionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableInsightRulesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RuleNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableAlarmActionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableInsightRulesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RuleNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDashboardInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DashboardName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInsightRuleReportInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxContributorCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrderBy { get; set; }
	}
	
	/// <summary>
	/// <p>This structure includes the <code>Timezone</code> parameter, which you can use to specify your time zone so that the labels that are associated with returned metrics display the correct time for your time zone. </p> <p>The <code>Timezone</code> value affects a label only if you have a time-based dynamic expression in the label. For more information about dynamic expressions in labels, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html">Using Dynamic Labels</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricDataInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] MetricDataQueries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScanBy ScanBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDatapoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LabelOptions LabelOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricStatisticsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic[] Statistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExtendedStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricStreamInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMetricWidgetImageInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricWidget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDashboardsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardNamePrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListManagedInsightRulesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMetricStreamsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecentlyActive
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PT3H")]
		PT3H = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMetricsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DimensionFilter[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecentlyActive RecentlyActive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeLinkedAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwningAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAnomalyDetectorInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AnomalyDetectorConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingleMetricAnomalyDetector SingleMetricAnomalyDetector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricMathAnomalyDetector MetricMathAnomalyDetector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutCompositeAlarmInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ActionsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InsufficientDataActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OKActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionsSuppressor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActionsSuppressorWaitPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActionsSuppressorExtensionPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutDashboardInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DashboardName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DashboardBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutInsightRuleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutManagedInsightRulesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ManagedRule[] ManagedRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutMetricAlarmInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlarmDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ActionsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OKActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlarmActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InsufficientDataActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExtendedStatistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardUnit Unit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EvaluationPeriods { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DatapointsToAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Threshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ComparisonOperator ComparisonOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TreatMissingData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EvaluateLowSampleCountPercentile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThresholdMetricId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutMetricDataInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricDatum[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutMetricStreamInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamFilter[] IncludeFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamFilter[] ExcludeFilters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FirehoseArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamOutputFormat OutputFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricStreamStatisticsConfiguration[] StatisticsConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeLinkedAccountsMetrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetAlarmStateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StateValue StateValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReasonData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartMetricStreamsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Names { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopMetricStreamsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Names { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Deletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can't delete two composite alarms with one operation.</p> <p> If you specify an incorrect alarm name or make any other error in the operation, no alarms are deleted. To confirm that alarms were deleted successfully, you can use the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarms.html">DescribeAlarms</a> operation after using <code>DeleteAlarms</code>.</p> <note> <p>It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.</p> <p>To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the <code>AlarmRule</code> of one of the alarms to <code>false</code>. </p> <p>Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. </p> </note>
		/// GET_DeleteAlarms #Action=DeleteAlarms
		/// </summary>
		/// <param name="AlarmNames">The alarms to be deleted. Do not enclose the alarm names in quote marks.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAlarmsAsync(string[] AlarmNames, GET_DeleteAlarmsAction Action, GET_DeleteAlarmsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAlarms?"+string.Join("&", AlarmNames.Select(z => $"AlarmNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified anomaly detection model from your account. For more information about how to delete an anomaly detection model, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html#Delete_Anomaly_Detection_Model">Deleting an anomaly detection model</a> in the <i>CloudWatch User Guide</i>.
		/// GET_DeleteAnomalyDetector #Action=DeleteAnomalyDetector
		/// </summary>
		/// <param name="Namespace">The namespace associated with the anomaly detection model to delete.</param>
		/// <param name="MetricName">The metric name associated with the anomaly detection model to delete.</param>
		/// <param name="Dimensions">The metric dimensions associated with the anomaly detection model to delete.</param>
		/// <param name="Stat">The statistic associated with the anomaly detection model to delete.</param>
		/// <param name="SingleMetricAnomalyDetector"><p>A single metric anomaly detector to be deleted.</p> <p>When using <code>SingleMetricAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p> <ul> <li> <p> <code>Dimensions</code>,</p> </li> <li> <p> <code>MetricName</code> </p> </li> <li> <p> <code>Namespace</code> </p> </li> <li> <p> <code>Stat</code> </p> </li> <li> <p>the <code>MetricMathAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li> </ul> <p>Instead, specify the single metric anomaly detector attributes as part of the <code>SingleMetricAnomalyDetector</code> property.</p></param>
		/// <param name="MetricMathAnomalyDetector"><p>The metric math anomaly detector to be deleted.</p> <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include following parameters in the same operation:</p> <ul> <li> <p> <code>Dimensions</code>,</p> </li> <li> <p> <code>MetricName</code> </p> </li> <li> <p> <code>Namespace</code> </p> </li> <li> <p> <code>Stat</code> </p> </li> <li> <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li> </ul> <p>Instead, specify the metric math anomaly detector attributes as part of the <code>MetricMathAnomalyDetector</code> property.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAnomalyDetectorAsync(string Namespace, string MetricName, Dimension[] Dimensions, string Stat, GET_DeleteAnomalyDetectorSingleMetricAnomalyDetector SingleMetricAnomalyDetector, GET_DeleteAnomalyDetectorMetricMathAnomalyDetector MetricMathAnomalyDetector, GET_DeleteAnomalyDetectorAction Action, GET_DeleteAnomalyDetectorVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAnomalyDetector?Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&MetricName=" + (MetricName==null? "" : System.Uri.EscapeDataString(MetricName))+"&"+string.Join("&", Dimensions.Select(z => $"Dimensions={z}"))+"&Stat=" + (Stat==null? "" : System.Uri.EscapeDataString(Stat))+"&SingleMetricAnomalyDetector=" + SingleMetricAnomalyDetector+"&MetricMathAnomalyDetector=" + MetricMathAnomalyDetector+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.
		/// GET_DeleteDashboards #Action=DeleteDashboards
		/// </summary>
		/// <param name="DashboardNames">The dashboards to be deleted. This parameter is required.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDashboardsAsync(string[] DashboardNames, GET_DeleteDashboardsAction Action, GET_DeleteDashboardsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDashboards?"+string.Join("&", DashboardNames.Select(z => $"DashboardNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Permanently deletes the specified Contributor Insights rules.</p> <p>If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.</p>
		/// GET_DeleteInsightRules #Action=DeleteInsightRules
		/// </summary>
		/// <param name="RuleNames">An array of the rule names to delete. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteInsightRulesAsync(string[] RuleNames, GET_DeleteInsightRulesAction Action, GET_DeleteInsightRulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteInsightRules?"+string.Join("&", RuleNames.Select(z => $"RuleNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes the metric stream that you specify.
		/// GET_DeleteMetricStream #Action=DeleteMetricStream
		/// </summary>
		/// <param name="Name">The name of the metric stream to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteMetricStreamAsync(string Name, GET_DeleteMetricStreamAction Action, GET_DeleteMetricStreamVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteMetricStream?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.</p> <p>CloudWatch retains the history of an alarm even if you delete the alarm.</p> <p>To use this operation and return information about a composite alarm, you must be signed on with the <code>cloudwatch:DescribeAlarmHistory</code> permission that is scoped to <code>*</code>. You can't return information about composite alarms if your <code>cloudwatch:DescribeAlarmHistory</code> permission has a narrower scope.</p>
		/// GET_DescribeAlarmHistory #Action=DescribeAlarmHistory
		/// </summary>
		/// <param name="AlarmName">The name of the alarm.</param>
		/// <param name="AlarmTypes">Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.</param>
		/// <param name="HistoryItemType">The type of alarm histories to retrieve.</param>
		/// <param name="StartDate">The starting date to retrieve alarm history.</param>
		/// <param name="EndDate">The ending date to retrieve alarm history.</param>
		/// <param name="MaxRecords">The maximum number of alarm history records to retrieve.</param>
		/// <param name="NextToken">The token returned by a previous call to indicate that there is more data available.</param>
		/// <param name="ScanBy">Specified whether to return the newest or oldest alarm history first. Specify <code>TimestampDescending</code> to have the newest event history returned first, and specify <code>TimestampAscending</code> to have the oldest history returned first.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAlarmHistoryAsync(string AlarmName, AlarmType[] AlarmTypes, HistoryItemType HistoryItemType, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, int MaxRecords, string NextToken, ScanBy ScanBy, GET_DescribeAlarmHistoryAction Action, GET_DescribeAlarmHistoryVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAlarmHistory?AlarmName=" + (AlarmName==null? "" : System.Uri.EscapeDataString(AlarmName))+"&"+string.Join("&", AlarmTypes.Select(z => $"AlarmTypes={z}"))+"&HistoryItemType=" + HistoryItemType+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&ScanBy=" + ScanBy+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.</p> <p>To use this operation and return information about composite alarms, you must be signed on with the <code>cloudwatch:DescribeAlarms</code> permission that is scoped to <code>*</code>. You can't return information about composite alarms if your <code>cloudwatch:DescribeAlarms</code> permission has a narrower scope.</p>
		/// GET_DescribeAlarms #Action=DescribeAlarms
		/// </summary>
		/// <param name="AlarmNames">The names of the alarms to retrieve information about.</param>
		/// <param name="AlarmNamePrefix"><p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.</p> <p>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</p></param>
		/// <param name="AlarmTypes">Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.</param>
		/// <param name="ChildrenOfAlarmName"><p>If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not returned.</p> <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note> <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code> information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p> </note></param>
		/// <param name="ParentsOfAlarmName"><p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code> parameters that reference the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in <code>ParentsOfAlarmName</code> is not returned.</p> <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note> <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p> </note></param>
		/// <param name="StateValue">Specify this parameter to receive information only about alarms that are currently in the state that you specify.</param>
		/// <param name="ActionPrefix">Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.</param>
		/// <param name="MaxRecords">The maximum number of alarm descriptions to retrieve.</param>
		/// <param name="NextToken">The token returned by a previous call to indicate that there is more data available.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAlarmsAsync(string[] AlarmNames, string AlarmNamePrefix, AlarmType[] AlarmTypes, string ChildrenOfAlarmName, string ParentsOfAlarmName, StateValue StateValue, string ActionPrefix, int MaxRecords, string NextToken, GET_DescribeAlarmsAction Action, GET_DescribeAlarmsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAlarms?"+string.Join("&", AlarmNames.Select(z => $"AlarmNames={System.Uri.EscapeDataString(z.ToString())}"))+"&AlarmNamePrefix=" + (AlarmNamePrefix==null? "" : System.Uri.EscapeDataString(AlarmNamePrefix))+"&"+string.Join("&", AlarmTypes.Select(z => $"AlarmTypes={z}"))+"&ChildrenOfAlarmName=" + (ChildrenOfAlarmName==null? "" : System.Uri.EscapeDataString(ChildrenOfAlarmName))+"&ParentsOfAlarmName=" + (ParentsOfAlarmName==null? "" : System.Uri.EscapeDataString(ParentsOfAlarmName))+"&StateValue=" + StateValue+"&ActionPrefix=" + (ActionPrefix==null? "" : System.Uri.EscapeDataString(ActionPrefix))+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.</p> <p>This operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.</p>
		/// GET_DescribeAlarmsForMetric #Action=DescribeAlarmsForMetric
		/// </summary>
		/// <param name="MetricName">The name of the metric.</param>
		/// <param name="Namespace">The namespace of the metric.</param>
		/// <param name="Statistic">The statistic for the metric, other than percentiles. For percentile statistics, use <code>ExtendedStatistics</code>.</param>
		/// <param name="ExtendedStatistic">The percentile statistic for the metric. Specify a value between p0.0 and p100.</param>
		/// <param name="Dimensions">The dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed.</param>
		/// <param name="Period">The period, in seconds, over which the statistic is applied.</param>
		/// <param name="Unit">The unit for the metric.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAlarmsForMetricAsync(string MetricName, string Namespace, Statistic Statistic, string ExtendedStatistic, Dimension[] Dimensions, int Period, GET_DescribeAlarmsForMetricUnit Unit, GET_DescribeAlarmsForMetricAction Action, GET_DescribeAlarmsForMetricVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAlarmsForMetric?MetricName=" + (MetricName==null? "" : System.Uri.EscapeDataString(MetricName))+"&Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&Statistic=" + Statistic+"&ExtendedStatistic=" + (ExtendedStatistic==null? "" : System.Uri.EscapeDataString(ExtendedStatistic))+"&"+string.Join("&", Dimensions.Select(z => $"Dimensions={z}"))+"&Period="+Period+"&Unit=" + Unit+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the anomaly detection models that you have created in your account. For single metric anomaly detectors, you can list all of the models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension. For metric math anomaly detectors, you can list them by adding <code>METRIC_MATH</code> to the <code>AnomalyDetectorTypes</code> array. This will return all metric math anomaly detectors in your account.
		/// GET_DescribeAnomalyDetectors #Action=DescribeAnomalyDetectors
		/// </summary>
		/// <param name="NextToken">Use the token returned by the previous operation to request the next page of results.</param>
		/// <param name="MaxResults"><p>The maximum number of results to return in one operation. The maximum value that you can specify is 100.</p> <p>To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. </p></param>
		/// <param name="Namespace">Limits the results to only the anomaly detection models that are associated with the specified namespace.</param>
		/// <param name="MetricName">Limits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they're all returned.</param>
		/// <param name="Dimensions">Limits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they're all returned.</param>
		/// <param name="AnomalyDetectorTypes">The anomaly detector types to request when using <code>DescribeAnomalyDetectorsInput</code>. If empty, defaults to <code>SINGLE_METRIC</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAnomalyDetectorsAsync(string NextToken, int MaxResults, string Namespace, string MetricName, Dimension[] Dimensions, AnomalyDetectorType[] AnomalyDetectorTypes, GET_DescribeAnomalyDetectorsAction Action, GET_DescribeAnomalyDetectorsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAnomalyDetectors?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&MetricName=" + (MetricName==null? "" : System.Uri.EscapeDataString(MetricName))+"&"+string.Join("&", Dimensions.Select(z => $"Dimensions={z}"))+"&"+string.Join("&", AnomalyDetectorTypes.Select(z => $"AnomalyDetectorTypes={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of all the Contributor Insights rules in your account.</p> <p>For more information about Contributor Insights, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using Contributor Insights to Analyze High-Cardinality Data</a>.</p>
		/// GET_DescribeInsightRules #Action=DescribeInsightRules
		/// </summary>
		/// <param name="NextToken">Include this value, if it was returned by the previous operation, to get the next set of rules.</param>
		/// <param name="MaxResults">The maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInsightRulesAsync(string NextToken, int MaxResults, GET_DescribeInsightRulesAction Action, GET_DescribeInsightRulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInsightRules?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the actions for the specified alarms. When an alarm's actions are disabled, the alarm actions do not execute when the alarm state changes.
		/// GET_DisableAlarmActions #Action=DisableAlarmActions
		/// </summary>
		/// <param name="AlarmNames">The names of the alarms.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableAlarmActionsAsync(string[] AlarmNames, GET_DisableAlarmActionsAction Action, GET_DisableAlarmActionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableAlarmActions?"+string.Join("&", AlarmNames.Select(z => $"AlarmNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.
		/// GET_DisableInsightRules #Action=DisableInsightRules
		/// </summary>
		/// <param name="RuleNames">An array of the rule names to disable. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableInsightRulesAsync(string[] RuleNames, GET_DisableInsightRulesAction Action, GET_DisableInsightRulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableInsightRules?"+string.Join("&", RuleNames.Select(z => $"RuleNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the actions for the specified alarms.
		/// GET_EnableAlarmActions #Action=EnableAlarmActions
		/// </summary>
		/// <param name="AlarmNames">The names of the alarms.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableAlarmActionsAsync(string[] AlarmNames, GET_EnableAlarmActionsAction Action, GET_EnableAlarmActionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableAlarmActions?"+string.Join("&", AlarmNames.Select(z => $"AlarmNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.
		/// GET_EnableInsightRules #Action=EnableInsightRules
		/// </summary>
		/// <param name="RuleNames">An array of the rule names to enable. If you need to find out the names of your rules, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeInsightRules.html">DescribeInsightRules</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableInsightRulesAsync(string[] RuleNames, GET_EnableInsightRulesAction Action, GET_EnableInsightRulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableInsightRules?"+string.Join("&", RuleNames.Select(z => $"RuleNames={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Displays the details of the dashboard that you specify.</p> <p>To copy an existing dashboard, use <code>GetDashboard</code>, and then use the data returned within <code>DashboardBody</code> as the template for the new dashboard when you call <code>PutDashboard</code> to create the copy.</p>
		/// GET_GetDashboard #Action=GetDashboard
		/// </summary>
		/// <param name="DashboardName">The name of the dashboard to be described.</param>
		/// <returns>Success</returns>
		public async Task GET_GetDashboardAsync(string DashboardName, GET_GetDashboardAction Action, GET_GetDashboardVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetDashboard?DashboardName=" + (DashboardName==null? "" : System.Uri.EscapeDataString(DashboardName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.</p> <p>You can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:</p> <ul> <li> <p> <code>UniqueContributors</code> -- the number of unique contributors for each data point.</p> </li> <li> <p> <code>MaxContributorValue</code> -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.</p> <p>If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule's <code>Value</code>, during that period.</p> </li> <li> <p> <code>SampleCount</code> -- the number of data points matched by the rule.</p> </li> <li> <p> <code>Sum</code> -- the sum of the values from all contributors during the time period represented by that data point.</p> </li> <li> <p> <code>Minimum</code> -- the minimum value from a single observation during the time period represented by that data point.</p> </li> <li> <p> <code>Maximum</code> -- the maximum value from a single observation during the time period represented by that data point.</p> </li> <li> <p> <code>Average</code> -- the average value from all contributors during the time period represented by that data point.</p> </li> </ul>
		/// GET_GetInsightRuleReport #Action=GetInsightRuleReport
		/// </summary>
		/// <param name="RuleName">The name of the rule that you want to see data from.</param>
		/// <param name="StartTime">The start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</param>
		/// <param name="EndTime">The end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as <code>yyyy-MM-dd'T'HH:mm:ss</code>. For example, <code>2019-07-01T23:59:59</code>.</param>
		/// <param name="Period">The period, in seconds, to use for the statistics in the <code>InsightRuleMetricDatapoint</code> results.</param>
		/// <param name="MaxContributorCount">The maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.</param>
		/// <param name="Metrics"><p>Specifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:</p> <ul> <li> <p> <code>UniqueContributors</code> -- the number of unique contributors for each data point.</p> </li> <li> <p> <code>MaxContributorValue</code> -- the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph.</p> <p>If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule's <code>Value</code>, during that period.</p> </li> <li> <p> <code>SampleCount</code> -- the number of data points matched by the rule.</p> </li> <li> <p> <code>Sum</code> -- the sum of the values from all contributors during the time period represented by that data point.</p> </li> <li> <p> <code>Minimum</code> -- the minimum value from a single observation during the time period represented by that data point.</p> </li> <li> <p> <code>Maximum</code> -- the maximum value from a single observation during the time period represented by that data point.</p> </li> <li> <p> <code>Average</code> -- the average value from all contributors during the time period represented by that data point.</p> </li> </ul></param>
		/// <param name="OrderBy">Determines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM.</param>
		/// <returns>Success</returns>
		public async Task GET_GetInsightRuleReportAsync(string RuleName, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Period, int MaxContributorCount, string[] Metrics, string OrderBy, GET_GetInsightRuleReportAction Action, GET_GetInsightRuleReportVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetInsightRuleReport?RuleName=" + (RuleName==null? "" : System.Uri.EscapeDataString(RuleName))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Period="+Period+"&MaxContributorCount="+MaxContributorCount+"&"+string.Join("&", Metrics.Select(z => $"Metrics={System.Uri.EscapeDataString(z.ToString())}"))+"&OrderBy=" + (OrderBy==null? "" : System.Uri.EscapeDataString(OrderBy))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>You can use the <code>GetMetricData</code> API to retrieve CloudWatch metric values. The operation can also include a CloudWatch Metrics Insights query, and one or more metric math functions.</p> <p>A <code>GetMetricData</code> operation that does not include a query can retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform metric math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax">Metric Math Syntax and Functions</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>If you include a Metrics Insights query, each <code>GetMetricData</code> operation can include only one query. But the same <code>GetMetricData</code> operation can also retrieve other metrics. Metrics Insights queries can query only the most recent three hours of metric data. For more information about Metrics Insights, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/query_with_cloudwatch-metrics-insights.html">Query your metrics with CloudWatch Metrics Insights</a>.</p> <p>Calls to the <code>GetMetricData</code> API have a different pricing structure than calls to <code>GetMetricStatistics</code>. For more information about pricing, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p> <p>Amazon CloudWatch retains metric data as follows:</p> <ul> <li> <p>Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a <code>StorageResolution</code> of 1.</p> </li> <li> <p>Data points with a period of 60 seconds (1-minute) are available for 15 days.</p> </li> <li> <p>Data points with a period of 300 seconds (5-minute) are available for 63 days.</p> </li> <li> <p>Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).</p> </li> </ul> <p>Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.</p> <p>If you omit <code>Unit</code> in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</p> <p> <b>Using Metrics Insights queries with metric math</b> </p> <p>You can't mix a Metric Insights query and metric math syntax in the same expression, but you can reference results from a Metrics Insights query within other Metric math expressions. A Metrics Insights query without a <b>GROUP BY</b> clause returns a single time-series (TS), and can be used as input for a metric math expression that expects a single time series. A Metrics Insights query with a <b>GROUP BY</b> clause returns an array of time-series (TS[]), and can be used as input for a metric math expression that expects an array of time series. </p>
		/// GET_GetMetricData #Action=GetMetricData
		/// </summary>
		/// <param name="MetricDataQueries">The metric queries to be returned. A single <code>GetMetricData</code> call can include as many as 500 <code>MetricDataQuery</code> structures. Each of these structures can specify either a metric to retrieve, a Metrics Insights query, or a math expression to perform on retrieved data. </param>
		/// <param name="StartTime"><p>The time stamp indicating the earliest data to be returned.</p> <p>The value specified is inclusive; results include data points with the specified time stamp. </p> <p>CloudWatch rounds the specified time stamp as follows:</p> <ul> <li> <p>Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.</p> </li> <li> <p>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.</p> </li> <li> <p>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.</p> </li> </ul> <p>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. </p> <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code> values that align with the value of the metric's <code>Period</code> and sync up with the beginning and end of an hour. For example, if the <code>Period</code> of a metric is 5 minutes, specifying 12:05 or 12:30 as <code>StartTime</code> can get a faster response from CloudWatch than setting 12:07 or 12:29 as the <code>StartTime</code>.</p></param>
		/// <param name="EndTime"><p>The time stamp indicating the latest data to be returned.</p> <p>The value specified is exclusive; results include data points up to the specified time stamp.</p> <p>For better performance, specify <code>StartTime</code> and <code>EndTime</code> values that align with the value of the metric's <code>Period</code> and sync up with the beginning and end of an hour. For example, if the <code>Period</code> of a metric is 5 minutes, specifying 12:05 or 12:30 as <code>EndTime</code> can get a faster response from CloudWatch than setting 12:07 or 12:29 as the <code>EndTime</code>.</p></param>
		/// <param name="NextToken">Include this value, if it was returned by the previous <code>GetMetricData</code> operation, to get the next set of data points.</param>
		/// <param name="ScanBy">The order in which data points should be returned. <code>TimestampDescending</code> returns the newest data first and paginates when the <code>MaxDatapoints</code> limit is reached. <code>TimestampAscending</code> returns the oldest data first and paginates when the <code>MaxDatapoints</code> limit is reached.</param>
		/// <param name="MaxDatapoints">The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.</param>
		/// <param name="LabelOptions">This structure includes the <code>Timezone</code> parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone. </param>
		/// <returns>Success</returns>
		public async Task GET_GetMetricDataAsync(MetricDataQuery[] MetricDataQueries, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, string NextToken, ScanBy ScanBy, int MaxDatapoints, GET_GetMetricDataLabelOptions LabelOptions, GET_GetMetricDataAction Action, GET_GetMetricDataVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetMetricData?"+string.Join("&", MetricDataQueries.Select(z => $"MetricDataQueries={z}"))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&ScanBy=" + ScanBy+"&MaxDatapoints="+MaxDatapoints+"&LabelOptions=" + LabelOptions+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets statistics for the specified metric.</p> <p>The maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.</p> <p>CloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.</p> <p>CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:</p> <ul> <li> <p>The SampleCount value of the statistic set is 1.</p> </li> <li> <p>The Min and the Max values of the statistic set are equal.</p> </li> </ul> <p>Percentile statistics are not available for metrics when any of the metric values are negative numbers.</p> <p>Amazon CloudWatch retains metric data as follows:</p> <ul> <li> <p>Data points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a <code>StorageResolution</code> of 1.</p> </li> <li> <p>Data points with a period of 60 seconds (1-minute) are available for 15 days.</p> </li> <li> <p>Data points with a period of 300 seconds (5-minute) are available for 63 days.</p> </li> <li> <p>Data points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).</p> </li> </ul> <p>Data points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.</p> <p>CloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.</p> <p>For information about metrics and dimensions supported by Amazon Web Services services, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CW_Support_For_AWS.html">Amazon CloudWatch Metrics and Dimensions Reference</a> in the <i>Amazon CloudWatch User Guide</i>.</p>
		/// GET_GetMetricStatistics #Action=GetMetricStatistics
		/// </summary>
		/// <param name="Namespace">The namespace of the metric, with or without spaces.</param>
		/// <param name="MetricName">The name of the metric, with or without spaces.</param>
		/// <param name="Dimensions">The dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can't retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#dimension-combinations">Dimension Combinations</a> in the <i>Amazon CloudWatch User Guide</i>. For more information about specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</param>
		/// <param name="StartTime"><p>The time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request.</p> <p>The value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).</p> <p>CloudWatch rounds the specified time stamp as follows:</p> <ul> <li> <p>Start time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.</p> </li> <li> <p>Start time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.</p> </li> <li> <p>Start time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.</p> </li> </ul> <p>If you set <code>Period</code> to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15. </p></param>
		/// <param name="EndTime"><p>The time stamp that determines the last data point to return.</p> <p>The value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).</p></param>
		/// <param name="Period"><p>The granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a <code>PutMetricData</code> call that includes a <code>StorageResolution</code> of 1 second.</p> <p>If the <code>StartTime</code> parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:</p> <ul> <li> <p>Start time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).</p> </li> <li> <p>Start time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).</p> </li> <li> <p>Start time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).</p> </li> </ul></param>
		/// <param name="Statistics">The metric statistics, other than percentile. For percentile statistics, use <code>ExtendedStatistics</code>. When calling <code>GetMetricStatistics</code>, you must specify either <code>Statistics</code> or <code>ExtendedStatistics</code>, but not both.</param>
		/// <param name="ExtendedStatistics">The percentile statistics. Specify values between p0.0 and p100. When calling <code>GetMetricStatistics</code>, you must specify either <code>Statistics</code> or <code>ExtendedStatistics</code>, but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers.</param>
		/// <param name="Unit">The unit for a given metric. If you omit <code>Unit</code>, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.</param>
		/// <returns>Success</returns>
		public async Task GET_GetMetricStatisticsAsync(string Namespace, string MetricName, Dimension[] Dimensions, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Period, Statistic[] Statistics, string[] ExtendedStatistics, GET_GetMetricStatisticsUnit Unit, GET_GetMetricStatisticsAction Action, GET_GetMetricStatisticsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetMetricStatistics?Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&MetricName=" + (MetricName==null? "" : System.Uri.EscapeDataString(MetricName))+"&"+string.Join("&", Dimensions.Select(z => $"Dimensions={z}"))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Period="+Period+"&"+string.Join("&", Statistics.Select(z => $"Statistics={z}"))+"&"+string.Join("&", ExtendedStatistics.Select(z => $"ExtendedStatistics={System.Uri.EscapeDataString(z.ToString())}"))+"&Unit=" + Unit+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the metric stream that you specify.
		/// GET_GetMetricStream #Action=GetMetricStream
		/// </summary>
		/// <param name="Name">The name of the metric stream to retrieve information about.</param>
		/// <returns>Success</returns>
		public async Task GET_GetMetricStreamAsync(string Name, GET_GetMetricStreamAction Action, GET_GetMetricStreamVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetMetricStream?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>You can use the <code>GetMetricWidgetImage</code> API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.</p> <p>The graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.</p> <p>There is a limit of 20 transactions per second for this API. Each <code>GetMetricWidgetImage</code> action has the following limits:</p> <ul> <li> <p>As many as 100 metrics in the graph.</p> </li> <li> <p>Up to 100 KB uncompressed payload.</p> </li> </ul>
		/// GET_GetMetricWidgetImage #Action=GetMetricWidgetImage
		/// </summary>
		/// <param name="MetricWidget"><p>A JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one <code>MetricWidget</code> parameter in each <code>GetMetricWidgetImage</code> call.</p> <p>For more information about the syntax of <code>MetricWidget</code> see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Metric-Widget-Structure.html">GetMetricWidgetImage: Metric Widget Structure and Syntax</a>.</p> <p>If any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.</p></param>
		/// <param name="OutputFormat"><p>The format of the resulting image. Only PNG images are supported.</p> <p>The default is <code>png</code>. If you specify <code>png</code>, the API returns an HTTP response with the content-type set to <code>text/xml</code>. The image data is in a <code>MetricWidgetImage</code> field. For example:</p> <p> <code> &lt;GetMetricWidgetImageResponse xmlns=&lt;URLstring&gt;&gt;</code> </p> <p> <code> &lt;GetMetricWidgetImageResult&gt;</code> </p> <p> <code> &lt;MetricWidgetImage&gt;</code> </p> <p> <code> iVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...</code> </p> <p> <code> &lt;/MetricWidgetImage&gt;</code> </p> <p> <code> &lt;/GetMetricWidgetImageResult&gt;</code> </p> <p> <code> &lt;ResponseMetadata&gt;</code> </p> <p> <code> &lt;RequestId&gt;6f0d4192-4d42-11e8-82c1-f539a07e0e3b&lt;/RequestId&gt;</code> </p> <p> <code> &lt;/ResponseMetadata&gt;</code> </p> <p> <code>&lt;/GetMetricWidgetImageResponse&gt;</code> </p> <p>The <code>image/png</code> setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use <code>png</code>. If you specify <code>image/png</code>, the HTTP response has a content-type set to <code>image/png</code>, and the body of the response is a PNG image. </p></param>
		/// <returns>Success</returns>
		public async Task GET_GetMetricWidgetImageAsync(string MetricWidget, string OutputFormat, GET_GetMetricWidgetImageAction Action, GET_GetMetricWidgetImageVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetMetricWidgetImage?MetricWidget=" + (MetricWidget==null? "" : System.Uri.EscapeDataString(MetricWidget))+"&OutputFormat=" + (OutputFormat==null? "" : System.Uri.EscapeDataString(OutputFormat))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the dashboards for your account. If you include <code>DashboardNamePrefix</code>, only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed. </p> <p> <code>ListDashboards</code> returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call <code>ListDashboards</code> again and include the value you received for <code>NextToken</code> in the first call, to receive the next 1000 results.</p>
		/// GET_ListDashboards #Action=ListDashboards
		/// </summary>
		/// <param name="DashboardNamePrefix">If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_". </param>
		/// <param name="NextToken">The token returned by a previous call to indicate that there is more data available.</param>
		/// <returns>Success</returns>
		public async Task GET_ListDashboardsAsync(string DashboardNamePrefix, string NextToken, GET_ListDashboardsAction Action, GET_ListDashboardsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListDashboards?DashboardNamePrefix=" + (DashboardNamePrefix==null? "" : System.Uri.EscapeDataString(DashboardNamePrefix))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list that contains the number of managed Contributor Insights rules in your account.
		/// GET_ListManagedInsightRules #Action=ListManagedInsightRules
		/// </summary>
		/// <param name="ResourceARN"> The ARN of an Amazon Web Services resource that has managed Contributor Insights rules. </param>
		/// <param name="NextToken"> Include this value to get the next set of rules if the value was returned by the previous operation. </param>
		/// <param name="MaxResults"> The maximum number of results to return in one operation. If you omit this parameter, the default number is used. The default number is <code>100</code>. </param>
		/// <returns>Success</returns>
		public async Task GET_ListManagedInsightRulesAsync(string ResourceARN, string NextToken, int MaxResults, GET_ListManagedInsightRulesAction Action, GET_ListManagedInsightRulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListManagedInsightRules?ResourceARN=" + (ResourceARN==null? "" : System.Uri.EscapeDataString(ResourceARN))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of metric streams in this account.
		/// GET_ListMetricStreams #Action=ListMetricStreams
		/// </summary>
		/// <param name="NextToken">Include this value, if it was returned by the previous call, to get the next set of metric streams.</param>
		/// <param name="MaxResults">The maximum number of results to return in one operation.</param>
		/// <returns>Success</returns>
		public async Task GET_ListMetricStreamsAsync(string NextToken, int MaxResults, GET_ListMetricStreamsAction Action, GET_ListMetricStreamsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListMetricStreams?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List the specified metrics. You can use the returned metrics with <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a> to get statistical data.</p> <p>Up to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.</p> <p>After you create a metric, allow up to 15 minutes for the metric to appear. To see metric statistics sooner, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p> <p>If you are using CloudWatch cross-account observability, you can use this operation in a monitoring account and view metrics from the linked source accounts. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html">CloudWatch cross-account observability</a>.</p> <p> <code>ListMetrics</code> doesn't return information about metrics if those metrics haven't reported data in the past two weeks. To retrieve those metrics, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p>
		/// GET_ListMetrics #Action=ListMetrics
		/// </summary>
		/// <param name="Namespace">The metric namespace to filter against. Only the namespace that matches exactly will be returned.</param>
		/// <param name="MetricName">The name of the metric to filter against. Only the metrics with names that match exactly will be returned.</param>
		/// <param name="Dimensions">The dimensions to filter against. Only the dimensions that match exactly will be returned.</param>
		/// <param name="NextToken">The token returned by a previous call to indicate that there is more data available.</param>
		/// <param name="RecentlyActive"><p>To filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of <code>PT3H</code>. This is the only valid value for this parameter.</p> <p>The results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.</p></param>
		/// <param name="IncludeLinkedAccounts"><p>If you are using this operation in a monitoring account, specify <code>true</code> to include metrics from source accounts in the returned data.</p> <p>The default is <code>false</code>.</p></param>
		/// <param name="OwningAccount">When you use this operation in a monitoring account, use this field to return metrics only from one source account. To do so, specify that source account ID in this field, and also specify <code>true</code> for <code>IncludeLinkedAccounts</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ListMetricsAsync(string Namespace, string MetricName, DimensionFilter[] Dimensions, string NextToken, RecentlyActive RecentlyActive, bool IncludeLinkedAccounts, string OwningAccount, GET_ListMetricsAction Action, GET_ListMetricsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListMetrics?Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&MetricName=" + (MetricName==null? "" : System.Uri.EscapeDataString(MetricName))+"&"+string.Join("&", Dimensions.Select(z => $"Dimensions={z}"))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&RecentlyActive=" + RecentlyActive+"&IncludeLinkedAccounts="+IncludeLinkedAccounts+"&OwningAccount=" + (OwningAccount==null? "" : System.Uri.EscapeDataString(OwningAccount))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.
		/// GET_ListTagsForResource #Action=ListTagsForResource
		/// </summary>
		/// <param name="ResourceARN"><p>The ARN of the CloudWatch resource that you want to view tags for.</p> <p>The ARN format of an alarm is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i> </code> </p> <p>The ARN format of a Contributor Insights rule is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i> </code> </p> <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListTagsForResourceAsync(string ResourceARN, GET_ListTagsForResourceAction Action, GET_ListTagsForResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListTagsForResource?ResourceARN=" + (ResourceARN==null? "" : System.Uri.EscapeDataString(ResourceARN))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html">CloudWatch Anomaly Detection</a>.</p>
		/// GET_PutAnomalyDetector #Action=PutAnomalyDetector
		/// </summary>
		/// <param name="Namespace">The namespace of the metric to create the anomaly detection model for.</param>
		/// <param name="MetricName">The name of the metric to create the anomaly detection model for.</param>
		/// <param name="Dimensions">The metric dimensions to create the anomaly detection model for.</param>
		/// <param name="Stat">The statistic to use for the metric and the anomaly detection model.</param>
		/// <param name="Configuration"><p>The configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges.</p> <p>The configuration can also include the time zone to use for the metric.</p></param>
		/// <param name="SingleMetricAnomalyDetector"><p>A single metric anomaly detector to be created.</p> <p>When using <code>SingleMetricAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p> <ul> <li> <p> <code>Dimensions</code> </p> </li> <li> <p> <code>MetricName</code> </p> </li> <li> <p> <code>Namespace</code> </p> </li> <li> <p> <code>Stat</code> </p> </li> <li> <p>the <code>MetricMatchAnomalyDetector</code> parameters of <code>PutAnomalyDetectorInput</code> </p> </li> </ul> <p>Instead, specify the single metric anomaly detector attributes as part of the property <code>SingleMetricAnomalyDetector</code>.</p></param>
		/// <param name="MetricMathAnomalyDetector"><p>The metric math anomaly detector to be created.</p> <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p> <ul> <li> <p> <code>Dimensions</code> </p> </li> <li> <p> <code>MetricName</code> </p> </li> <li> <p> <code>Namespace</code> </p> </li> <li> <p> <code>Stat</code> </p> </li> <li> <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>PutAnomalyDetectorInput</code> </p> </li> </ul> <p>Instead, specify the metric math anomaly detector attributes as part of the property <code>MetricMathAnomalyDetector</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutAnomalyDetectorAsync(string Namespace, string MetricName, Dimension[] Dimensions, string Stat, GET_PutAnomalyDetectorConfiguration Configuration, GET_PutAnomalyDetectorSingleMetricAnomalyDetector SingleMetricAnomalyDetector, GET_PutAnomalyDetectorMetricMathAnomalyDetector MetricMathAnomalyDetector, GET_PutAnomalyDetectorAction Action, GET_PutAnomalyDetectorVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutAnomalyDetector?Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&MetricName=" + (MetricName==null? "" : System.Uri.EscapeDataString(MetricName))+"&"+string.Join("&", Dimensions.Select(z => $"Dimensions={z}"))+"&Stat=" + (Stat==null? "" : System.Uri.EscapeDataString(Stat))+"&Configuration=" + Configuration+"&SingleMetricAnomalyDetector=" + SingleMetricAnomalyDetector+"&MetricMathAnomalyDetector=" + MetricMathAnomalyDetector+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a <i>composite alarm</i>. When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.</p> <p>The alarms specified in a composite alarm's rule expression can include metric alarms and other composite alarms. The rule expression of a composite alarm can include as many as 100 underlying alarms. Any single alarm can be included in the rule expressions of as many as 150 composite alarms.</p> <p>Using composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.</p> <p>Currently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.</p> <note> <p>It is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can't delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.</p> <p>To get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the <code>AlarmRule</code> of one of the alarms to <code>false</code>. </p> <p>Additionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path. </p> </note> <p>When this operation creates an alarm, the alarm state is immediately set to <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in <code>INSUFFICIENT_DATA</code> state.</p> <p>When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.</p> <p>To use this operation, you must be signed on with the <code>cloudwatch:PutCompositeAlarm</code> permission that is scoped to <code>*</code>. You can't create a composite alarms if your <code>cloudwatch:PutCompositeAlarm</code> permission has a narrower scope.</p> <p>If you are an IAM user, you must have <code>iam:CreateServiceLinkedRole</code> to create a composite alarm that has Systems Manager OpsItem actions.</p>
		/// GET_PutCompositeAlarm #Action=PutCompositeAlarm
		/// </summary>
		/// <param name="ActionsEnabled">Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is <code>TRUE</code>.</param>
		/// <param name="AlarmActions"><p>The actions to execute when this alarm transitions to the <code>ALARM</code> state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p> <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i> </code> | <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i> </code> </p></param>
		/// <param name="AlarmDescription">The description for the composite alarm.</param>
		/// <param name="AlarmName">The name for the composite alarm. This name must be unique within the Region.</param>
		/// <param name="AlarmRule"><p>An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.</p> <p>You can use either alarm names or ARNs to reference the other alarms that are to be evaluated.</p> <p>Functions can include the following:</p> <ul> <li> <p> <code>ALARM("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named alarm is in ALARM state.</p> </li> <li> <p> <code>OK("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named alarm is in OK state.</p> </li> <li> <p> <code>INSUFFICIENT_DATA("<i>alarm-name</i> or <i>alarm-ARN</i>")</code> is TRUE if the named alarm is in INSUFFICIENT_DATA state.</p> </li> <li> <p> <code>TRUE</code> always evaluates to TRUE.</p> </li> <li> <p> <code>FALSE</code> always evaluates to FALSE.</p> </li> </ul> <p>TRUE and FALSE are useful for testing a complex <code>AlarmRule</code> structure, and for testing your alarm actions.</p> <p>Alarm names specified in <code>AlarmRule</code> can be surrounded with double-quotes ("), but do not have to be.</p> <p>The following are some examples of <code>AlarmRule</code>:</p> <ul> <li> <p> <code>ALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh)</code> specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.</p> </li> <li> <p> <code>ALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress)</code> specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.</p> </li> <li> <p> <code>(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh)</code> goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.</p> </li> </ul> <p>The <code>AlarmRule</code> can specify as many as 100 "children" alarms. The <code>AlarmRule</code> expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.</p></param>
		/// <param name="InsufficientDataActions"><p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p> <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i> </code> </p></param>
		/// <param name="OKActions"><p>The actions to execute when this alarm transitions to an <code>OK</code> state from any other state. Each action is specified as an Amazon Resource Name (ARN).</p> <p>Valid Values: <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i> </code> </p></param>
		/// <param name="Tags"><p>A list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.</p></param>
		/// <param name="ActionsSuppressor"> Actions will be suppressed if the suppressor alarm is in the <code>ALARM</code> state. <code>ActionsSuppressor</code> can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm. </param>
		/// <param name="ActionsSuppressorWaitPeriod"><p> The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the <code>ALARM</code> state. After this time, the composite alarm performs its actions. </p> <important> <p> <code>WaitPeriod</code> is required only when <code>ActionsSuppressor</code> is specified. </p> </important></param>
		/// <param name="ActionsSuppressorExtensionPeriod"><p> The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the <code>ALARM</code> state. After this time, the composite alarm performs its actions. </p> <important> <p> <code>ExtensionPeriod</code> is required only when <code>ActionsSuppressor</code> is specified. </p> </important></param>
		/// <returns>Success</returns>
		public async Task GET_PutCompositeAlarmAsync(bool ActionsEnabled, string[] AlarmActions, string AlarmDescription, string AlarmName, string AlarmRule, string[] InsufficientDataActions, string[] OKActions, Tag[] Tags, string ActionsSuppressor, int ActionsSuppressorWaitPeriod, int ActionsSuppressorExtensionPeriod, GET_PutCompositeAlarmAction Action, GET_PutCompositeAlarmVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutCompositeAlarm?ActionsEnabled="+ActionsEnabled+"&"+string.Join("&", AlarmActions.Select(z => $"AlarmActions={System.Uri.EscapeDataString(z.ToString())}"))+"&AlarmDescription=" + (AlarmDescription==null? "" : System.Uri.EscapeDataString(AlarmDescription))+"&AlarmName=" + (AlarmName==null? "" : System.Uri.EscapeDataString(AlarmName))+"&AlarmRule=" + (AlarmRule==null? "" : System.Uri.EscapeDataString(AlarmRule))+"&"+string.Join("&", InsufficientDataActions.Select(z => $"InsufficientDataActions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", OKActions.Select(z => $"OKActions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&ActionsSuppressor=" + (ActionsSuppressor==null? "" : System.Uri.EscapeDataString(ActionsSuppressor))+"&ActionsSuppressorWaitPeriod="+ActionsSuppressorWaitPeriod+"&ActionsSuppressorExtensionPeriod="+ActionsSuppressorExtensionPeriod+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.</p> <p>All dashboards in your account are global, not region-specific.</p> <p>A simple way to create a dashboard using <code>PutDashboard</code> is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use <code>GetDashboard</code>, and then use the data returned within <code>DashboardBody</code> as the template for the new dashboard when you call <code>PutDashboard</code>.</p> <p>When you create a dashboard with <code>PutDashboard</code>, a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the <code>DashboardBody</code> script or the CloudFormation template used to create the dashboard.</p>
		/// GET_PutDashboard #Action=PutDashboard
		/// </summary>
		/// <param name="DashboardName">The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, "-", and "_". This parameter is required.</param>
		/// <param name="DashboardBody"><p>The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required.</p> <p>For more information about the syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutDashboardAsync(string DashboardName, string DashboardBody, GET_PutDashboardAction Action, GET_PutDashboardVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutDashboard?DashboardName=" + (DashboardName==null? "" : System.Uri.EscapeDataString(DashboardName))+"&DashboardBody=" + (DashboardBody==null? "" : System.Uri.EscapeDataString(DashboardBody))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights.html">Using Contributor Insights to Analyze High-Cardinality Data</a>.</p> <p>If you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.</p>
		/// GET_PutInsightRule #Action=PutInsightRule
		/// </summary>
		/// <param name="RuleName">A unique name for the rule.</param>
		/// <param name="RuleState">The state of the rule. Valid values are ENABLED and DISABLED.</param>
		/// <param name="RuleDefinition">The definition of the rule, as a JSON object. For details on the valid syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ContributorInsights-RuleSyntax.html">Contributor Insights Rule Syntax</a>.</param>
		/// <param name="Tags"><p>A list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.</p> <p>To be able to associate tags with a rule, you must have the <code>cloudwatch:TagResource</code> permission in addition to the <code>cloudwatch:PutInsightRule</code> permission.</p> <p>If you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutInsightRuleAsync(string RuleName, string RuleState, string RuleDefinition, Tag[] Tags, GET_PutInsightRuleAction Action, GET_PutInsightRuleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutInsightRule?RuleName=" + (RuleName==null? "" : System.Uri.EscapeDataString(RuleName))+"&RuleState=" + (RuleState==null? "" : System.Uri.EscapeDataString(RuleState))+"&RuleDefinition=" + (RuleDefinition==null? "" : System.Uri.EscapeDataString(RuleDefinition))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with <code>PutInsightRule</code>. The rules can be enabled, disabled, and deleted using <code>EnableInsightRules</code>, <code>DisableInsightRules</code>, and <code>DeleteInsightRules</code>. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use <code>ListManagedInsightRules</code> to describe all available rules.
		/// GET_PutManagedInsightRules #Action=PutManagedInsightRules
		/// </summary>
		/// <param name="ManagedRules"> A list of <code>ManagedRules</code> to enable. </param>
		/// <returns>Success</returns>
		public async Task GET_PutManagedInsightRulesAsync(ManagedRule[] ManagedRules, GET_PutManagedInsightRulesAction Action, GET_PutManagedInsightRulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutManagedInsightRules?"+string.Join("&", ManagedRules.Select(z => $"ManagedRules={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates an alarm and associates it with the specified metric, metric math expression, anomaly detection model, or Metrics Insights query. For more information about using a Metrics Insights query for an alarm, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Metrics_Insights_Alarm.html">Create alarms on Metrics Insights queries</a>.</p> <p>Alarms based on anomaly detection models cannot have Auto Scaling actions.</p> <p>When this operation creates an alarm, the alarm state is immediately set to <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.</p> <p>When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.</p> <p>If you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:</p> <ul> <li> <p>The <code>iam:CreateServiceLinkedRole</code> permission for all alarms with EC2 actions</p> </li> <li> <p>The <code>iam:CreateServiceLinkedRole</code> permissions to create an alarm with Systems Manager OpsItem or response plan actions.</p> </li> </ul> <p>The first time you create an alarm in the Amazon Web Services Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called <code>AWSServiceRoleForCloudWatchEvents</code> and <code>AWSServiceRoleForCloudWatchAlarms_ActionSSM</code>. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Amazon Web Services service-linked role</a>.</p> <p>Each <code>PutMetricAlarm</code> action has a maximum uncompressed payload of 120 KB.</p> <p> <b>Cross-account alarms</b> </p> <p>You can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:</p> <ul> <li> <p>The account where the metrics are located (the <i>sharing account</i>) must already have a sharing role named <b>CloudWatch-CrossAccountSharingRole</b>. If it does not already have this role, you must create it using the instructions in <b>Set up a sharing account</b> in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region"> Cross-account cross-Region CloudWatch console</a>. The policy for that role must grant access to the ID of the account where you are creating the alarm. </p> </li> <li> <p>The account where you are creating the alarm (the <i>monitoring account</i>) must already have a service-linked role named <b>AWSServiceRoleForCloudWatchCrossAccount</b> to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in <b>Set up a monitoring account</b> in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Cross-Account-Cross-Region.html#enable-cross-account-cross-Region"> Cross-account cross-Region CloudWatch console</a>.</p> </li> </ul>
		/// GET_PutMetricAlarm #Action=PutMetricAlarm
		/// </summary>
		/// <param name="AlarmName"><p>The name for the alarm. This name must be unique within the Region.</p> <p>The name must contain only UTF-8 characters, and can't contain ASCII control characters</p></param>
		/// <param name="AlarmDescription">The description for the alarm.</param>
		/// <param name="ActionsEnabled">Indicates whether actions should be executed during any changes to the alarm state. The default is <code>TRUE</code>.</param>
		/// <param name="OKActions"><p>The actions to execute when this alarm transitions to an <code>OK</code> state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:</p> <p> <b>EC2 actions:</b> </p> <ul> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:stop</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:terminate</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:reboot</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:recover</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Recover/1.0</code> </p> </li> </ul> <p> <b>Autoscaling action:</b> </p> <ul> <li> <p> <code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i> </code> </p> </li> </ul> <p> <b>SNS notification action:</b> </p> <ul> <li> <p> <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i> </code> </p> </li> </ul> <p> <b>SSM integration actions:</b> </p> <ul> <li> <p> <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>#CATEGORY=<i>category-name</i> </code> </p> </li> <li> <p> <code>arn:aws:ssm-incidents::<i>account-id</i>:responseplan/<i>response-plan-name</i> </code> </p> </li> </ul></param>
		/// <param name="AlarmActions"><p>The actions to execute when this alarm transitions to the <code>ALARM</code> state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:</p> <p> <b>EC2 actions:</b> </p> <ul> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:stop</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:terminate</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:reboot</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:recover</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Recover/1.0</code> </p> </li> </ul> <p> <b>Autoscaling action:</b> </p> <ul> <li> <p> <code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i> </code> </p> </li> </ul> <p> <b>SNS notification action:</b> </p> <ul> <li> <p> <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i> </code> </p> </li> </ul> <p> <b>SSM integration actions:</b> </p> <ul> <li> <p> <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>#CATEGORY=<i>category-name</i> </code> </p> </li> <li> <p> <code>arn:aws:ssm-incidents::<i>account-id</i>:responseplan/<i>response-plan-name</i> </code> </p> </li> </ul></param>
		/// <param name="InsufficientDataActions"><p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from any other state. Each action is specified as an Amazon Resource Name (ARN). Valid values:</p> <p> <b>EC2 actions:</b> </p> <ul> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:stop</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:terminate</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:reboot</code> </p> </li> <li> <p> <code>arn:aws:automate:<i>region</i>:ec2:recover</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Stop/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Terminate/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Reboot/1.0</code> </p> </li> <li> <p> <code>arn:aws:swf:<i>region</i>:<i>account-id</i>:action/actions/AWS_EC2.InstanceId.Recover/1.0</code> </p> </li> </ul> <p> <b>Autoscaling action:</b> </p> <ul> <li> <p> <code>arn:aws:autoscaling:<i>region</i>:<i>account-id</i>:scalingPolicy:<i>policy-id</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i> </code> </p> </li> </ul> <p> <b>SNS notification action:</b> </p> <ul> <li> <p> <code>arn:aws:sns:<i>region</i>:<i>account-id</i>:<i>sns-topic-name</i>:autoScalingGroupName/<i>group-friendly-name</i>:policyName/<i>policy-friendly-name</i> </code> </p> </li> </ul> <p> <b>SSM integration actions:</b> </p> <ul> <li> <p> <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:opsitem:<i>severity</i>#CATEGORY=<i>category-name</i> </code> </p> </li> <li> <p> <code>arn:aws:ssm-incidents::<i>account-id</i>:responseplan/<i>response-plan-name</i> </code> </p> </li> </ul></param>
		/// <param name="MetricName"><p>The name for the metric associated with the alarm. For each <code>PutMetricAlarm</code> operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p> <p>If you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the <code>Dimensions</code>, <code>Period</code>, <code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters. Instead, you specify all this information in the <code>Metrics</code> array.</p></param>
		/// <param name="Namespace">The namespace for the metric associated specified in <code>MetricName</code>.</param>
		/// <param name="Statistic">The statistic for the metric specified in <code>MetricName</code>, other than percentile. For percentile statistics, use <code>ExtendedStatistic</code>. When you call <code>PutMetricAlarm</code> and specify a <code>MetricName</code>, you must specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</param>
		/// <param name="ExtendedStatistic">The percentile statistic for the metric specified in <code>MetricName</code>. Specify a value between p0.0 and p100. When you call <code>PutMetricAlarm</code> and specify a <code>MetricName</code>, you must specify either <code>Statistic</code> or <code>ExtendedStatistic,</code> but not both.</param>
		/// <param name="Dimensions">The dimensions for the metric specified in <code>MetricName</code>.</param>
		/// <param name="Period"><p>The length, in seconds, used each time the metric specified in <code>MetricName</code> is evaluated. Valid values are 10, 30, and any multiple of 60.</p> <p> <code>Period</code> is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the <code>Metrics</code> array.</p> <p>Be sure to specify 10 or 30 only for metrics that are stored by a <code>PutMetricData</code> call with a <code>StorageResolution</code> of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>.</p> <p>An alarm's total current evaluation period can be no longer than one day, so <code>Period</code> multiplied by <code>EvaluationPeriods</code> cannot be more than 86,400 seconds.</p></param>
		/// <param name="Unit"><p>The unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately.</p> <p>If you don't specify <code>Unit</code>, CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended.</p> <p>However, if the metric is published with multiple types of units and you don't specify a unit, the alarm's behavior is not defined and it behaves unpredictably.</p> <p>We recommend omitting <code>Unit</code> so that you don't inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the <code>INSUFFICIENT DATA</code> state.</p></param>
		/// <param name="EvaluationPeriods"><p>The number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an "M out of N" alarm, this value is the N.</p> <p>An alarm's total current evaluation period can be no longer than one day, so this number multiplied by <code>Period</code> cannot be more than 86,400 seconds.</p></param>
		/// <param name="DatapointsToAlarm">The number of data points that must be breaching to trigger the alarm. This is used only if you are setting an "M out of N" alarm. In that case, this value is the M. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarm-evaluation">Evaluating an Alarm</a> in the <i>Amazon CloudWatch User Guide</i>.</param>
		/// <param name="Threshold"><p>The value against which the specified statistic is compared.</p> <p>This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.</p></param>
		/// <param name="ComparisonOperator"><p> The arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.</p> <p>The values <code>LessThanLowerOrGreaterThanUpperThreshold</code>, <code>LessThanLowerThreshold</code>, and <code>GreaterThanUpperThreshold</code> are used only for alarms based on anomaly detection models.</p></param>
		/// <param name="TreatMissingData"><p> Sets how this alarm is to handle missing data points. If <code>TreatMissingData</code> is omitted, the default behavior of <code>missing</code> is used. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data">Configuring How CloudWatch Alarms Treats Missing Data</a>.</p> <p>Valid Values: <code>breaching | notBreaching | ignore | missing</code> </p> <note> <p>Alarms that evaluate metrics in the <code>AWS/DynamoDB</code> namespace always <code>ignore</code> missing data even if you choose a different option for <code>TreatMissingData</code>. When an <code>AWS/DynamoDB</code> metric has missing data, alarms that evaluate that metric remain in their current state.</p> </note></param>
		/// <param name="EvaluateLowSampleCountPercentile"><p> Used only for alarms based on percentiles. If you specify <code>ignore</code>, the alarm state does not change during periods with too few data points to be statistically significant. If you specify <code>evaluate</code> or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#percentiles-with-low-samples">Percentile-Based CloudWatch Alarms and Low Data Samples</a>.</p> <p>Valid Values: <code>evaluate | ignore</code> </p></param>
		/// <param name="Metrics"><p>An array of <code>MetricDataQuery</code> structures that enable you to create an alarm based on the result of a metric math expression. For each <code>PutMetricAlarm</code> operation, you must specify either <code>MetricName</code> or a <code>Metrics</code> array.</p> <p>Each item in the <code>Metrics</code> array either retrieves a metric or performs a math expression.</p> <p>One item in the <code>Metrics</code> array is the expression that the alarm watches. You designate this expression by setting <code>ReturnData</code> to true for this object in the array. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html">MetricDataQuery</a>.</p> <p>If you use the <code>Metrics</code> parameter, you cannot include the <code>MetricName</code>, <code>Dimensions</code>, <code>Period</code>, <code>Namespace</code>, <code>Statistic</code>, or <code>ExtendedStatistic</code> parameters of <code>PutMetricAlarm</code> in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the <code>Metrics</code> array.</p></param>
		/// <param name="Tags"><p>A list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>If you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p></param>
		/// <param name="ThresholdMetricId"><p>If this is an alarm based on an anomaly detection model, make this value match the ID of the <code>ANOMALY_DETECTION_BAND</code> function.</p> <p>For an example of how to use this parameter, see the <b>Anomaly Detection Model Alarm</b> example on this page.</p> <p>If your alarm uses this parameter, it cannot have Auto Scaling actions.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutMetricAlarmAsync(
					string AlarmName, 
					string AlarmDescription, 
					bool ActionsEnabled, 
					string[] OKActions, 
					string[] AlarmActions, 
					string[] InsufficientDataActions, 
					string MetricName, 
					string Namespace, 
					Statistic Statistic, 
					string ExtendedStatistic, 
					Dimension[] Dimensions, 
					int Period, 
					GET_PutMetricAlarmUnit Unit, 
					int EvaluationPeriods, 
					int DatapointsToAlarm, 
					double Threshold, 
					ComparisonOperator ComparisonOperator, 
					string TreatMissingData, 
					string EvaluateLowSampleCountPercentile, 
					MetricDataQuery[] Metrics, 
					Tag[] Tags, 
					string ThresholdMetricId, 
					GET_PutMetricAlarmAction Action, 
					GET_PutMetricAlarmVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutMetricAlarm?AlarmName=" + (AlarmName==null? "" : System.Uri.EscapeDataString(AlarmName))+"&AlarmDescription=" + (AlarmDescription==null? "" : System.Uri.EscapeDataString(AlarmDescription))+"&ActionsEnabled="+ActionsEnabled+"&"+string.Join("&", OKActions.Select(z => $"OKActions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", AlarmActions.Select(z => $"AlarmActions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", InsufficientDataActions.Select(z => $"InsufficientDataActions={System.Uri.EscapeDataString(z.ToString())}"))+"&MetricName=" + (MetricName==null? "" : System.Uri.EscapeDataString(MetricName))+"&Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&Statistic=" + Statistic+"&ExtendedStatistic=" + (ExtendedStatistic==null? "" : System.Uri.EscapeDataString(ExtendedStatistic))+"&"+string.Join("&", Dimensions.Select(z => $"Dimensions={z}"))+"&Period="+Period+"&Unit=" + Unit+"&EvaluationPeriods="+EvaluationPeriods+"&DatapointsToAlarm="+DatapointsToAlarm+"&Threshold="+Threshold+"&ComparisonOperator=" + ComparisonOperator+"&TreatMissingData=" + (TreatMissingData==null? "" : System.Uri.EscapeDataString(TreatMissingData))+"&EvaluateLowSampleCountPercentile=" + (EvaluateLowSampleCountPercentile==null? "" : System.Uri.EscapeDataString(EvaluateLowSampleCountPercentile))+"&"+string.Join("&", Metrics.Select(z => $"Metrics={z}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&ThresholdMetricId=" + (ThresholdMetricId==null? "" : System.Uri.EscapeDataString(ThresholdMetricId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Publishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html">ListMetrics</a>.</p> <p>You can publish either individual data points in the <code>Value</code> field, or arrays of values and the number of times each value occurred during the period by using the <code>Values</code> and <code>Counts</code> fields in the <code>MetricDatum</code> structure. Using the <code>Values</code> and <code>Counts</code> method enables you to publish up to 150 values per metric with one <code>PutMetricData</code> request, and supports retrieving percentile statistics on this data.</p> <p>Each <code>PutMetricData</code> request is limited to 1 MB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 1000 different metrics.</p> <p>Although the <code>Value</code> parameter accepts numbers of type <code>Double</code>, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.</p> <p>You can use up to 30 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publishing Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>You specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.</p> <p>Data points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a> from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html">GetMetricData</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricStatistics.html">GetMetricStatistics</a>.</p> <p>CloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:</p> <ul> <li> <p>The <code>SampleCount</code> value of the statistic set is 1 and <code>Min</code>, <code>Max</code>, and <code>Sum</code> are all equal.</p> </li> <li> <p>The <code>Min</code> and <code>Max</code> are equal, and <code>Sum</code> is equal to <code>Min</code> multiplied by <code>SampleCount</code>.</p> </li> </ul>
		/// GET_PutMetricData #Action=PutMetricData
		/// </summary>
		/// <param name="Namespace"><p>The namespace for the metric data. You can use ASCII characters for the namespace, except for control characters which are not supported.</p> <p>To avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with <code>AWS/</code> </p></param>
		/// <param name="MetricData">The data for the metric. The array can include no more than 1000 metrics per call.</param>
		/// <returns>Success</returns>
		public async Task GET_PutMetricDataAsync(string Namespace, MetricDatum[] MetricData, GET_PutMetricDataAction Action, GET_PutMetricDataVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutMetricData?Namespace=" + (Namespace==null? "" : System.Uri.EscapeDataString(Namespace))+"&"+string.Join("&", MetricData.Select(z => $"MetricData={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations, including Amazon S3, and to many third-party solutions.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html"> Using Metric Streams</a>.</p> <p>To create a metric stream, you must be signed in to an account that has the <code>iam:PassRole</code> permission and either the <code>CloudWatchFullAccess</code> policy or the <code>cloudwatch:PutMetricStream</code> permission.</p> <p>When you create or update a metric stream, you choose one of the following:</p> <ul> <li> <p>Stream metrics from all metric namespaces in the account.</p> </li> <li> <p>Stream metrics from all metric namespaces in the account, except for the namespaces that you list in <code>ExcludeFilters</code>.</p> </li> <li> <p>Stream metrics from only the metric namespaces that you list in <code>IncludeFilters</code>.</p> </li> </ul> <p>By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>, and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. You can use the <code>StatisticsConfigurations</code> parameter to have the metric stream send additional statistics in the stream. Streaming additional statistics incurs additional costs. For more information, see <a href="https://aws.amazon.com/cloudwatch/pricing/">Amazon CloudWatch Pricing</a>. </p> <p>When you use <code>PutMetricStream</code> to create a new metric stream, the stream is created in the <code>running</code> state. If you use it to update an existing stream, the state of the stream is not changed.</p> <p>If you are using CloudWatch cross-account observability and you create a metric stream in a monitoring account, you can choose whether to include metrics from source accounts in the stream. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Unified-Cross-Account.html">CloudWatch cross-account observability</a>.</p>
		/// GET_PutMetricStream #Action=PutMetricStream
		/// </summary>
		/// <param name="Name"><p>If you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region.</p> <p>If you are updating a metric stream, specify the name of that stream here.</p> <p>Valid characters are A-Z, a-z, 0-9, "-" and "_".</p></param>
		/// <param name="IncludeFilters"><p>If you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.</p> <p>You cannot include <code>IncludeFilters</code> and <code>ExcludeFilters</code> in the same operation.</p></param>
		/// <param name="ExcludeFilters"><p>If you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.</p> <p>You cannot include <code>ExcludeFilters</code> and <code>IncludeFilters</code> in the same operation.</p></param>
		/// <param name="FirehoseArn">The ARN of the Amazon Kinesis Data Firehose delivery stream to use for this metric stream. This Amazon Kinesis Data Firehose delivery stream must already exist and must be in the same account as the metric stream.</param>
		/// <param name="RoleArn"><p>The ARN of an IAM role that this metric stream will use to access Amazon Kinesis Data Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:</p> <ul> <li> <p>firehose:PutRecord</p> </li> <li> <p>firehose:PutRecordBatch</p> </li> </ul></param>
		/// <param name="OutputFormat">The output format for the stream. Valid values are <code>json</code> and <code>opentelemetry0.7</code>. For more information about metric stream output formats, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-formats.html"> Metric streams output formats</a>.</param>
		/// <param name="Tags"><p>A list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>You can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_TagResource.html">TagResource</a> or <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p></param>
		/// <param name="StatisticsConfigurations"><p>By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>, and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. You can use this parameter to have the metric stream also send additional statistics in the stream. This array can have up to 100 members.</p> <p>For each entry in this array, you specify one or more metrics and the list of additional statistics to stream for those metrics. The additional statistics that you can stream depend on the stream's <code>OutputFormat</code>. If the <code>OutputFormat</code> is <code>json</code>, you can stream any additional statistic that is supported by CloudWatch, listed in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html"> CloudWatch statistics definitions</a>. If the <code>OutputFormat</code> is <code>opentelemetry0.7</code>, you can stream percentile statistics such as p95, p99.9, and so on.</p></param>
		/// <param name="IncludeLinkedAccountsMetrics">If you are creating a metric stream in a monitoring account, specify <code>true</code> to include metrics from source accounts in the metric stream.</param>
		/// <returns>Success</returns>
		public async Task GET_PutMetricStreamAsync(string Name, MetricStreamFilter[] IncludeFilters, MetricStreamFilter[] ExcludeFilters, string FirehoseArn, string RoleArn, GET_PutMetricStreamOutputFormat OutputFormat, Tag[] Tags, MetricStreamStatisticsConfiguration[] StatisticsConfigurations, bool IncludeLinkedAccountsMetrics, GET_PutMetricStreamAction Action, GET_PutMetricStreamVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutMetricStream?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&"+string.Join("&", IncludeFilters.Select(z => $"IncludeFilters={z}"))+"&"+string.Join("&", ExcludeFilters.Select(z => $"ExcludeFilters={z}"))+"&FirehoseArn=" + (FirehoseArn==null? "" : System.Uri.EscapeDataString(FirehoseArn))+"&RoleArn=" + (RoleArn==null? "" : System.Uri.EscapeDataString(RoleArn))+"&OutputFormat=" + OutputFormat+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&"+string.Join("&", StatisticsConfigurations.Select(z => $"StatisticsConfigurations={z}"))+"&IncludeLinkedAccountsMetrics="+IncludeLinkedAccountsMetrics+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Temporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to <code>ALARM</code> sends an SNS message.</p> <p>Metric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm's <b>History</b> tab in the Amazon CloudWatch console or through <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_DescribeAlarmHistory.html">DescribeAlarmHistory</a>.</p> <p>If you use <code>SetAlarmState</code> on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.</p> <p>If an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the <code>StateReasonData</code> parameter to enable the policy to take the correct action.</p>
		/// GET_SetAlarmState #Action=SetAlarmState
		/// </summary>
		/// <param name="AlarmName">The name of the alarm.</param>
		/// <param name="StateValue">The value of the state.</param>
		/// <param name="StateReason">The reason that this alarm is set to this specific state, in text format.</param>
		/// <param name="StateReasonData"><p>The reason that this alarm is set to this specific state, in JSON format.</p> <p>For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SetAlarmStateAsync(string AlarmName, StateValue StateValue, string StateReason, string StateReasonData, GET_SetAlarmStateAction Action, GET_SetAlarmStateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetAlarmState?AlarmName=" + (AlarmName==null? "" : System.Uri.EscapeDataString(AlarmName))+"&StateValue=" + StateValue+"&StateReason=" + (StateReason==null? "" : System.Uri.EscapeDataString(StateReason))+"&StateReasonData=" + (StateReasonData==null? "" : System.Uri.EscapeDataString(StateReasonData))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts the streaming of metrics for one or more of your metric streams.
		/// GET_StartMetricStreams #Action=StartMetricStreams
		/// </summary>
		/// <param name="Names"><p>The array of the names of metric streams to start streaming.</p> <p>This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.</p></param>
		/// <returns>Success</returns>
		public async Task GET_StartMetricStreamsAsync(string[] Names, GET_StartMetricStreamsAction Action, GET_StartMetricStreamsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StartMetricStreams?"+string.Join("&", Names.Select(z => $"Names={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops the streaming of metrics for one or more of your metric streams.
		/// GET_StopMetricStreams #Action=StopMetricStreams
		/// </summary>
		/// <param name="Names"><p>The array of the names of metric streams to stop streaming.</p> <p>This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.</p></param>
		/// <returns>Success</returns>
		public async Task GET_StopMetricStreamsAsync(string[] Names, GET_StopMetricStreamsAction Action, GET_StopMetricStreamsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StopMetricStreams?"+string.Join("&", Names.Select(z => $"Names={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can use the <code>TagResource</code> action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a CloudWatch resource.</p>
		/// GET_TagResource #Action=TagResource
		/// </summary>
		/// <param name="ResourceARN"><p>The ARN of the CloudWatch resource that you're adding tags to.</p> <p>The ARN format of an alarm is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i> </code> </p> <p>The ARN format of a Contributor Insights rule is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i> </code> </p> <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="Tags">The list of key-value pairs to associate with the alarm.</param>
		/// <returns>Success</returns>
		public async Task GET_TagResourceAsync(string ResourceARN, Tag[] Tags, GET_TagResourceAction Action, GET_TagResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagResource?ResourceARN=" + (ResourceARN==null? "" : System.Uri.EscapeDataString(ResourceARN))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified resource.
		/// GET_UntagResource #Action=UntagResource
		/// </summary>
		/// <param name="ResourceARN"><p>The ARN of the CloudWatch resource that you're removing tags from.</p> <p>The ARN format of an alarm is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:alarm:<i>alarm-name</i> </code> </p> <p>The ARN format of a Contributor Insights rule is <code>arn:aws:cloudwatch:<i>Region</i>:<i>account-id</i>:insight-rule:<i>insight-rule-name</i> </code> </p> <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazoncloudwatch.html#amazoncloudwatch-resources-for-iam-policies"> Resource Types Defined by Amazon CloudWatch</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="TagKeys">The list of tag keys to remove from the resource.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagResourceAsync(string ResourceARN, string[] TagKeys, GET_UntagResourceAction Action, GET_UntagResourceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagResource?ResourceARN=" + (ResourceARN==null? "" : System.Uri.EscapeDataString(ResourceARN))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_DeleteAlarmsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteAlarms")]
		DeleteAlarms = 0,
	}
	
	public enum GET_DeleteAlarmsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DeleteAlarmsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public class GET_DeleteAnomalyDetectorSingleMetricAnomalyDetector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
	}
	
	public class GET_DeleteAnomalyDetectorMetricMathAnomalyDetector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] MetricDataQueries { get; set; }
	}
	
	public enum GET_DeleteAnomalyDetectorAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteAnomalyDetector")]
		DeleteAnomalyDetector = 0,
	}
	
	public enum GET_DeleteAnomalyDetectorVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DeleteAnomalyDetectorVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DeleteDashboardsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDashboards")]
		DeleteDashboards = 0,
	}
	
	public enum GET_DeleteDashboardsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DeleteDashboardsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DeleteInsightRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteInsightRules")]
		DeleteInsightRules = 0,
	}
	
	public enum GET_DeleteInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DeleteInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DeleteMetricStreamAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteMetricStream")]
		DeleteMetricStream = 0,
	}
	
	public enum GET_DeleteMetricStreamVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DeleteMetricStreamVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DescribeAlarmHistoryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeAlarmHistory")]
		DescribeAlarmHistory = 0,
	}
	
	public enum GET_DescribeAlarmHistoryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DescribeAlarmHistoryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DescribeAlarmsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeAlarms")]
		DescribeAlarms = 0,
	}
	
	public enum GET_DescribeAlarmsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DescribeAlarmsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DescribeAlarmsForMetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	public enum GET_DescribeAlarmsForMetricAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeAlarmsForMetric")]
		DescribeAlarmsForMetric = 0,
	}
	
	public enum GET_DescribeAlarmsForMetricVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DescribeAlarmsForMetricVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DescribeAnomalyDetectorsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeAnomalyDetectors")]
		DescribeAnomalyDetectors = 0,
	}
	
	public enum GET_DescribeAnomalyDetectorsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DescribeAnomalyDetectorsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DescribeInsightRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DescribeInsightRules")]
		DescribeInsightRules = 0,
	}
	
	public enum GET_DescribeInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DescribeInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DisableAlarmActionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DisableAlarmActions")]
		DisableAlarmActions = 0,
	}
	
	public enum GET_DisableAlarmActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DisableAlarmActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_DisableInsightRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DisableInsightRules")]
		DisableInsightRules = 0,
	}
	
	public enum GET_DisableInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_DisableInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_EnableAlarmActionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EnableAlarmActions")]
		EnableAlarmActions = 0,
	}
	
	public enum GET_EnableAlarmActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_EnableAlarmActionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_EnableInsightRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EnableInsightRules")]
		EnableInsightRules = 0,
	}
	
	public enum GET_EnableInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_EnableInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_GetDashboardAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetDashboard")]
		GetDashboard = 0,
	}
	
	public enum GET_GetDashboardVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_GetDashboardVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_GetInsightRuleReportAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetInsightRuleReport")]
		GetInsightRuleReport = 0,
	}
	
	public enum GET_GetInsightRuleReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_GetInsightRuleReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public class GET_GetMetricDataLabelOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
	}
	
	public enum GET_GetMetricDataAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetMetricData")]
		GetMetricData = 0,
	}
	
	public enum GET_GetMetricDataVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_GetMetricDataVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_GetMetricStatisticsUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	public enum GET_GetMetricStatisticsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetMetricStatistics")]
		GetMetricStatistics = 0,
	}
	
	public enum GET_GetMetricStatisticsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_GetMetricStatisticsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_GetMetricStreamAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetMetricStream")]
		GetMetricStream = 0,
	}
	
	public enum GET_GetMetricStreamVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_GetMetricStreamVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_GetMetricWidgetImageAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetMetricWidgetImage")]
		GetMetricWidgetImage = 0,
	}
	
	public enum GET_GetMetricWidgetImageVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_GetMetricWidgetImageVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_ListDashboardsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListDashboards")]
		ListDashboards = 0,
	}
	
	public enum GET_ListDashboardsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_ListDashboardsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_ListManagedInsightRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListManagedInsightRules")]
		ListManagedInsightRules = 0,
	}
	
	public enum GET_ListManagedInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_ListManagedInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_ListMetricStreamsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListMetricStreams")]
		ListMetricStreams = 0,
	}
	
	public enum GET_ListMetricStreamsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_ListMetricStreamsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_ListMetricsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListMetrics")]
		ListMetrics = 0,
	}
	
	public enum GET_ListMetricsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_ListMetricsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_ListTagsForResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ListTagsForResource")]
		ListTagsForResource = 0,
	}
	
	public enum GET_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_ListTagsForResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public class GET_PutAnomalyDetectorConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Range[] ExcludedTimeRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricTimezone { get; set; }
	}
	
	public class GET_PutAnomalyDetectorSingleMetricAnomalyDetector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Dimension[] Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stat { get; set; }
	}
	
	public class GET_PutAnomalyDetectorMetricMathAnomalyDetector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDataQuery[] MetricDataQueries { get; set; }
	}
	
	public enum GET_PutAnomalyDetectorAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutAnomalyDetector")]
		PutAnomalyDetector = 0,
	}
	
	public enum GET_PutAnomalyDetectorVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutAnomalyDetectorVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_PutCompositeAlarmAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutCompositeAlarm")]
		PutCompositeAlarm = 0,
	}
	
	public enum GET_PutCompositeAlarmVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutCompositeAlarmVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_PutDashboardAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutDashboard")]
		PutDashboard = 0,
	}
	
	public enum GET_PutDashboardVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutDashboardVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_PutInsightRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutInsightRule")]
		PutInsightRule = 0,
	}
	
	public enum GET_PutInsightRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutInsightRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_PutManagedInsightRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutManagedInsightRules")]
		PutManagedInsightRules = 0,
	}
	
	public enum GET_PutManagedInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutManagedInsightRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_PutMetricAlarmUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	public enum GET_PutMetricAlarmAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutMetricAlarm")]
		PutMetricAlarm = 0,
	}
	
	public enum GET_PutMetricAlarmVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutMetricAlarmVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_PutMetricDataAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutMetricData")]
		PutMetricData = 0,
	}
	
	public enum GET_PutMetricDataVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutMetricDataVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_PutMetricStreamOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="opentelemetry0.7")]
		opentelemetry0_7 = 1,
	}
	
	public enum GET_PutMetricStreamAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutMetricStream")]
		PutMetricStream = 0,
	}
	
	public enum GET_PutMetricStreamVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_PutMetricStreamVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_SetAlarmStateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetAlarmState")]
		SetAlarmState = 0,
	}
	
	public enum GET_SetAlarmStateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_SetAlarmStateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_StartMetricStreamsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StartMetricStreams")]
		StartMetricStreams = 0,
	}
	
	public enum GET_StartMetricStreamsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_StartMetricStreamsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_StopMetricStreamsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StopMetricStreams")]
		StopMetricStreams = 0,
	}
	
	public enum GET_StopMetricStreamsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_StopMetricStreamsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_TagResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TagResource")]
		TagResource = 0,
	}
	
	public enum GET_TagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_TagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum GET_UntagResourceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UntagResource")]
		UntagResource = 0,
	}
	
	public enum GET_UntagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
	
	public enum POST_UntagResourceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-08-01")]
		_2010Minus08Minus01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
