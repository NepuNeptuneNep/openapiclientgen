//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Generate a chart (GET)
		/// Generate a chart based on the provided parameters.
		/// ChartGetByChartAndWidthAndHeightAndFormatAndBackgroundColor chart
		/// </summary>
		/// <param name="chart">The chart configuration in Chart.js format (JSON or Javascript).</param>
		/// <param name="width">The width of the chart in pixels.</param>
		/// <param name="height">The height of the chart in pixels.</param>
		/// <param name="format">The output format of the chart, 'png', 'jpg', 'svg', or 'webp'.</param>
		/// <param name="backgroundColor">The background color of the chart.</param>
		/// <returns>A generated chart image.</returns>
		public async Task ChartGetByChartAndWidthAndHeightAndFormatAndBackgroundColorAsync(string chart, int width, int height, string format, string backgroundColor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "chart?chart=" + (chart==null? "" : System.Uri.EscapeDataString(chart))+"&width="+width+"&height="+height+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&backgroundColor=" + (backgroundColor==null? "" : System.Uri.EscapeDataString(backgroundColor));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a chart (POST)
		/// Generate a chart based on the provided configuration in the request body.
		/// ChartPost chart
		/// </summary>
		/// <returns>A generated chart image.</returns>
		public async Task ChartPostAsync(ChartPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "chart";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate a QR code (GET)
		/// Generate a QR code based on the provided parameters.
		/// QrGetByTextAndWidthAndHeightAndFormatAndMargin qr
		/// </summary>
		/// <param name="text">The text to be encoded in the QR code.</param>
		/// <param name="width">The width of the QR code in pixels.</param>
		/// <param name="height">The height of the QR code in pixels.</param>
		/// <param name="format">The output format of the QR code, e.g., 'png' or 'svg'.</param>
		/// <param name="margin">The margin around the QR code in pixels.</param>
		/// <returns>A generated QR code image.</returns>
		public async Task QrGetByTextAndWidthAndHeightAndFormatAndMarginAsync(string text, int width, int height, string format, int margin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qr?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&width="+width+"&height="+height+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&margin="+margin;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a QR code (POST)
		/// Generate a QR code based on the provided configuration in the request body.
		/// QrPost qr
		/// </summary>
		/// <returns>A generated QR code image.</returns>
		public async Task QrPostAsync(QrPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "qr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class ChartPostPostBody
	{
		
		/// <summary>
		/// The background color of the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		/// <summary>
		/// The chart configuration in Chart.js format (JSON or Javascript).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chart")]
		public string Chart { get; set; }
		
		/// <summary>
		/// The output format of the chart, 'png', 'jpg', 'svg', or 'webp'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The height of the chart in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The width of the chart in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class QrPostPostBody
	{
		
		/// <summary>
		/// The output format of the QR code, e.g., 'png' or 'svg'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The height of the QR code in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The margin around the QR code in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="margin")]
		public System.Nullable<System.Int32> Margin { get; set; }
		
		/// <summary>
		/// The text to be encoded in the QR code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The width of the QR code in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
