//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ASNLookup endpoint: This method helps you lookup any AS Number. It returns the type, organisation details, routes, etc.
		/// ASNLookupGetByKeyAndAsnAndIsListAndFormat ASNLookup
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="asn">The AS Number you want to lookup</param>
		/// <param name="isList">Set this to true if you want to list all routes of both IPv4 and IPv6.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task ASNLookupGetByKeyAndAsnAndIsListAndFormatAsync(string key, string asn, string isList, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ASNLookup?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&asn=" + (asn==null? "" : System.Uri.EscapeDataString(asn))+"&isList=" + (isList==null? "" : System.Uri.EscapeDataString(isList))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method helps you validate any BIN/IIN number and retrieve the full details related to the bank, brand, type, scheme, country, etc.
		/// BINLookupGetByKeyAndBinAndFormat BINLookup
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="bin">The BIN/IIN you want to lookup/validate.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task BINLookupGetByKeyAndBinAndFormatAsync(string key, string bin, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BINLookup?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&bin=" + (bin==null? "" : System.Uri.EscapeDataString(bin))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
		/// BulkLookupGetByKeyAndIpsAnd_paramsAndLangAndFormat BulkLookup
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="ips">The IP Addresses you want to lookup. It's a CSV (Comma Separated Values)</param>
		/// <param name="_params">The modules you want to use of the request. It's a CSV (Comma Separated Values)</param>
		/// <param name="lang">Used to inform the API to retrieve the response in your native language.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task BulkLookupGetByKeyAndIpsAnd_paramsAndLangAndFormatAsync(string key, string ips, string _params, string lang, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BulkLookup?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&ips=" + (ips==null? "" : System.Uri.EscapeDataString(ips))+"&params=" + (_params==null? "" : System.Uri.EscapeDataString(_params))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Country endpoint: Returns the information of a specific country by passing the `countrCode`.
		/// CountryGetByKeyAndCountryCodeAnd_paramsAndLangAndFormat Country
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="CountryCode">The Country Code of the country you want to fetch it's data.</param>
		/// <param name="_params">The modules you want to use of the request. It's a CSV (Comma Separated Values)</param>
		/// <param name="lang">Used to inform the API to retrieve the response in your native language.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task CountryGetByKeyAndCountryCodeAnd_paramsAndLangAndFormatAsync(string key, string CountryCode, string _params, string lang, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Country?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&CountryCode=" + (CountryCode==null? "" : System.Uri.EscapeDataString(CountryCode))+"&params=" + (_params==null? "" : System.Uri.EscapeDataString(_params))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the geolocation data of the visitor.
		/// GeoIPGetByKeyAnd_paramsAndLangAndFormat GeoIP
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="_params">The modules you want to use of the request. It's a CSV (Comma Separated Values)</param>
		/// <param name="lang">Used to inform the API to retrieve the response in your native language.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task GeoIPGetByKeyAnd_paramsAndLangAndFormatAsync(string key, string _params, string lang, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GeoIP?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&params=" + (_params==null? "" : System.Uri.EscapeDataString(_params))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the geolocation data of a specific IP Address.
		/// IPLookupGetByKeyAndIpAnd_paramsAndLangAndFormat IPLookup
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="ip">The IP Address you want to lookup.</param>
		/// <param name="_params">The modules you want to use of the request. It's a CSV (Comma Separated Values)</param>
		/// <param name="lang">Used to inform the API to retrieve the response in your native language.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task IPLookupGetByKeyAndIpAnd_paramsAndLangAndFormatAsync(string key, string ip, string _params, string lang, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "IPLookup?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip))+"&params=" + (_params==null? "" : System.Uri.EscapeDataString(_params))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// badWords endpoint: Detects whether user inputs contain profanity or not.
		/// BadWordsGetByKeyAndTextAndListBadWordsAndScoreOnlyAndFormat badWords
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="text">The text you want to check.</param>
		/// <param name="listBadWords">Set to `yes` to list the bad-words as an Array.</param>
		/// <param name="scoreOnly">Set to `yes` to return only the score of the text and whether it's safe or not.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task BadWordsGetByKeyAndTextAndListBadWordsAndScoreOnlyAndFormatAsync(string key, string text, string listBadWords, string scoreOnly, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "badWords?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&listBadWords=" + (listBadWords==null? "" : System.Uri.EscapeDataString(listBadWords))+"&scoreOnly=" + (scoreOnly==null? "" : System.Uri.EscapeDataString(scoreOnly))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method can be used as an extra-layer of your system for validating email addresses.
		/// ValidateEmailGetByKeyAndEmailAndFormat validateEmail
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="email">The Email Address you want to validate.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task ValidateEmailGetByKeyAndEmailAndFormatAsync(string key, string email, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "validateEmail?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This method can be used as an extra-layer of your system for validating phone numbers.
		/// ValidatePhoneGetByKeyAndPhoneAndCountryCodeAndFormat validatePhone
		/// </summary>
		/// <param name="key">Your API Key. Each user has a unique API Key that can be used to access the API functions. If you don't have an account yet, please create new account first.</param>
		/// <param name="phone">The Phone Number you want to validate.</param>
		/// <param name="countryCode">The ISO 3166-1 alpha-2 format of the country code of the phone number.</param>
		/// <param name="format">Sets the format of the API response. JSON is the default format.</param>
		/// <returns>OK</returns>
		public async Task ValidatePhoneGetByKeyAndPhoneAndCountryCodeAndFormatAsync(string key, string phone, string countryCode, string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "validatePhone?key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&phone=" + (phone==null? "" : System.Uri.EscapeDataString(phone))+"&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
