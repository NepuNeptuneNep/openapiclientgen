//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Blog
	{
		
		/// <summary>
		/// The JSON custom meta-data for the Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetaData")]
		public string CustomMetaData { get; set; }
		
		/// <summary>
		/// The description of this blog. This is displayed underneath the title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of this entry. Always blogger#blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The locale this Blog is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public BlogLocale Locale { get; set; }
		
		/// <summary>
		/// The name of this blog. This is displayed as the title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The container of pages in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public BlogPages Pages { get; set; }
		
		/// <summary>
		/// The container of posts in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="posts")]
		public BlogPosts Posts { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this blog was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The status of the blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BlogStatus> Status { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this blog was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
		
		/// <summary>
		/// The URL where this blog is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class BlogLocale
	{
		
		/// <summary>
		/// The country this blog's locale is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The language this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The language variant this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public string Variant { get; set; }
	}
	
	public class BlogPages
	{
		
		/// <summary>
		/// The URL of the container for pages in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The count of pages in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	public class BlogPosts
	{
		
		/// <summary>
		/// The List of Posts for this Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Post[] Items { get; set; }
		
		/// <summary>
		/// The URL of the container for posts in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The count of posts in this blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Post
	{
		
		/// <summary>
		/// The author of this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public PostAuthor Author { get; set; }
		
		/// <summary>
		/// Data about the blog containing this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public PostBlog Blog { get; set; }
		
		/// <summary>
		/// The content of the Post. May contain HTML markup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The JSON meta-data for the Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetaData")]
		public string CustomMetaData { get; set; }
		
		/// <summary>
		/// Etag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The identifier of this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Display image for the Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PostImages[] PostImages { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The list of labels this Post was tagged with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// The location for geotagged posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public PostLocation Location { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Post was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// Comment control and display setting for readers of this post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readerComments")]
		public System.Nullable<PostReaderComments> ReaderComments { get; set; }
		
		/// <summary>
		/// The container of comments on this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public PostReplies Replies { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Status of the post. Only set for admin-level requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PostStatus> Status { get; set; }
		
		/// <summary>
		/// The title of the Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The title link URL, similar to atom's related link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleLink")]
		public string TitleLink { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Post was last trashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashed")]
		public string Trashed { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Post was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
		
		/// <summary>
		/// The URL where this Post is displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostAuthor
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The creator's avatar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public PostAuthorImage Image { get; set; }
		
		/// <summary>
		/// The URL of the creator's Profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostAuthorImage
	{
		
		/// <summary>
		/// The creator's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostBlog
	{
		
		/// <summary>
		/// The identifier of the Blog that contains this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class PostImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostLocation
	{
		
		/// <summary>
		/// Location's latitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// Location's longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		/// <summary>
		/// Location name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Location's viewport span. Can be used when rendering a map preview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="span")]
		public string Span { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PostReaderComments
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_ALLOW_SHOW_EXISTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_ALLOW_HIDE_EXISTING = 2,
	}
	
	public class PostReplies
	{
		
		/// <summary>
		/// The List of Comments for this Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// The URL of the comments on this post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The count of comments on this post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public string TotalItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Comment
	{
		
		/// <summary>
		/// The author of this Comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public CommentAuthor Author { get; set; }
		
		/// <summary>
		/// Data about the blog containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public CommentBlog Blog { get; set; }
		
		/// <summary>
		/// The actual content of the comment. May include HTML markup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The identifier for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Data about the comment this is in reply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inReplyTo")]
		public CommentInReplyTo InReplyTo { get; set; }
		
		/// <summary>
		/// The kind of this entry. Always blogger#comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Data about the post containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post")]
		public CommentPost Post { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this comment was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The status of the comment (only populated for admin users).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CommentStatus> Status { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this comment was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
	}
	
	public class CommentAuthor
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The creator's avatar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public CommentAuthorImage Image { get; set; }
		
		/// <summary>
		/// The URL of the creator's Profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CommentAuthorImage
	{
		
		/// <summary>
		/// The creator's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CommentBlog
	{
		
		/// <summary>
		/// The identifier of the blog containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CommentInReplyTo
	{
		
		/// <summary>
		/// The identified of the parent of this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CommentPost
	{
		
		/// <summary>
		/// The identifier of the post containing this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPAM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PostStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_TRASHED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BlogStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlogList
	{
		
		/// <summary>
		/// Admin level list of blog per-user information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogUserInfos")]
		public BlogUserInfo[] BlogUserInfos { get; set; }
		
		/// <summary>
		/// The list of Blogs this user has Authorship or Admin rights over.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Blog[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#blogList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlogUserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public Blog Blog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blog_user_info")]
		public BlogPerUserInfo Blog_user_info { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#blogUserInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlogPerUserInfo
	{
		
		/// <summary>
		/// ID of the Blog resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogId")]
		public string BlogId { get; set; }
		
		/// <summary>
		/// True if the user has Admin level access to the blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasAdminAccess")]
		public System.Nullable<System.Boolean> HasAdminAccess { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#blogPerUserInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The Photo Album Key for the user when adding photos to the blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photosAlbumKey")]
		public string PhotosAlbumKey { get; set; }
		
		/// <summary>
		/// Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<BlogPerUserInfoRole> Role { get; set; }
		
		/// <summary>
		/// ID of the User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BlogPerUserInfoRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommentList
	{
		
		/// <summary>
		/// Etag of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The List of Comments for a Post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entry. Always blogger#commentList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the next page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the previous page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Page
	{
		
		/// <summary>
		/// The author of this Page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public PageAuthor Author { get; set; }
		
		/// <summary>
		/// Data about the blog containing this Page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blog")]
		public PageBlog Blog { get; set; }
		
		/// <summary>
		/// The body content of this Page, in HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Etag of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The identifier for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Page was published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public string Published { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The status of the page for admin resources (either LIVE or DRAFT).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PageStatus> Status { get; set; }
		
		/// <summary>
		/// The title of this entity. This is the name displayed in the Admin user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Page was trashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashed")]
		public string Trashed { get; set; }
		
		/// <summary>
		/// RFC 3339 date-time when this Page was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
		
		/// <summary>
		/// The URL that this Page is displayed at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PageAuthor
	{
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier of the creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The creator's avatar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public PageAuthorImage Image { get; set; }
		
		/// <summary>
		/// The URL of the creator's Profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PageAuthorImage
	{
		
		/// <summary>
		/// The creator's avatar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PageBlog
	{
		
		/// <summary>
		/// The identifier of the blog containing this page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_TRASHED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageList
	{
		
		/// <summary>
		/// Etag of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of Pages for a Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Page[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#pageList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the next page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostList
	{
		
		/// <summary>
		/// Etag of the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of Posts for this Blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Post[] Items { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#postList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the next page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Pagination token to fetch the previous page, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prevPageToken")]
		public string PrevPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Profile summary information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		/// <summary>
		/// The container of blogs for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blogs")]
		public UserBlogs Blogs { get; set; }
		
		/// <summary>
		/// The timestamp of when this profile was created, in seconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// The display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier for this User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of this entity. Always blogger#user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// This user's locale
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public UserLocale Locale { get; set; }
		
		/// <summary>
		/// The API REST URL to fetch this resource from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class UserBlogs
	{
		
		/// <summary>
		/// The URL of the Blogs for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	public class UserLocale
	{
		
		/// <summary>
		/// The country this blog's locale is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The language this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The language variant this blog is authored in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public string Variant { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a blog by id.
		/// Blogger_blogs_get v2/blogs/{blogId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Blog> Blogger_blogs_getAsync(string blogId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Blog>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists pages.
		/// Blogger_pages_list v2/blogs/{blogId}/pages
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PageList> Blogger_pages_listAsync(string blogId, bool fetchBodies, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages&fetchBodies="+fetchBodies;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a page by blog id and page id.
		/// Blogger_pages_get v2/blogs/{blogId}/pages/{pageId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Page> Blogger_pages_getAsync(string blogId, string pageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists posts.
		/// Blogger_posts_list v2/blogs/{blogId}/posts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PostList> Blogger_posts_listAsync(string blogId, bool fetchBodies, int maxResults, string pageToken, string startDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts&fetchBodies="+fetchBodies+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PostList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a post by blog id and post id
		/// Blogger_posts_get v2/blogs/{blogId}/posts/{postId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Post> Blogger_posts_getAsync(string blogId, string postId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Post>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists comments.
		/// Blogger_comments_list v2/blogs/{blogId}/posts/{postId}/comments
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CommentList> Blogger_comments_listAsync(string blogId, string postId, bool fetchBodies, int maxResults, string pageToken, string startDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments&fetchBodies="+fetchBodies+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a comment by blog id, post id and comment id.
		/// Blogger_comments_get v2/blogs/{blogId}/posts/{postId}/comments/{commentId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Comment> Blogger_comments_getAsync(string blogId, string postId, string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/blogs/"+ (blogId==null? "" : System.Uri.EscapeDataString(blogId))+"/posts/"+ (postId==null? "" : System.Uri.EscapeDataString(postId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a user by user id.
		/// Blogger_users_get v2/users/{userId}
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<User> Blogger_users_getAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists blogs by user id, possibly filtered.
		/// Blogger_blogs_list v2/users/{userId}/blogs
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BlogList> Blogger_blogs_listAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/blogs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BlogList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
