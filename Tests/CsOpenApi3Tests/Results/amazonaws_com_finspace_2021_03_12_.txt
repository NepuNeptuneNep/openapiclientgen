//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentUrl")]
		public string EnvironmentUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributeMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxChangesetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeRequests")]
		public ChangeRequest[] ChangeRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChangesetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public ErrorInfo ErrorInfo { get; set; }
	}
	
	/// <summary>
	/// A list of change request objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public ChangeType ChangeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Path")]
		public string S3Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dbPath")]
		public string DbPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUT")]
		PUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangesetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESSING")]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 3,
	}
	
	/// <summary>
	/// Provides details in the event of a failed flow, including the error type and the related error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public ErrorDetails ErrorType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ErrorDetails
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="The inputs to this request are invalid.")]
		The_inputs_to_this_request_are_invalid_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Service limits have been exceeded.")]
		Service_limits_have_been_exceeded_ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Missing required permission to perform this request.")]
		Missing_required_permission_to_perform_this_request_ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="One or more inputs to this request were not found.")]
		One_or_more_inputs_to_this_request_were_not_found_ = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="The system temporarily lacks sufficient resources to process the request.")]
		The_system_temporarily_lacks_sufficient_resources_to_process_the_request_ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="An internal error has occurred.")]
		An_internal_error_has_occurred_ = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="A user recoverable error has occurred")]
		A_user_recoverable_error_has_occurred = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxClusterResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public KxClusterStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterType")]
		public KxClusterType ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public KxDatabaseConfiguration[] Databases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheStorageConfigurations")]
		public KxCacheStorageConfiguration[] CacheStorageConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingConfiguration")]
		public AutoScalingConfiguration AutoScalingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterDescription")]
		public string ClusterDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capacityConfiguration")]
		public CapacityConfiguration CapacityConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcConfiguration VpcConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initializationScript")]
		public string InitializationScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commandLineArguments")]
		public KxCommandLineArgument[] CommandLineArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public CodeConfiguration Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionRole")]
		public string ExecutionRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="savedownStorageConfiguration")]
		public KxSavedownStorageConfiguration SavedownStorageConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azMode")]
		public KxAzMode AzMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KxClusterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_FAILED")]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_FAILED")]
		DELETE_FAILED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KxClusterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HDB")]
		HDB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RDB")]
		RDB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GATEWAY")]
		GATEWAY = 2,
	}
	
	/// <summary>
	/// The configuration of data that is available for querying from this database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxDatabaseConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheConfigurations")]
		public KxDatabaseCacheConfiguration[] CacheConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
	}
	
	/// <summary>
	/// The structure of database cache configuration that is used for mapping database paths to cache types in clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxDatabaseCacheConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cacheType")]
		public string CacheType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dbPaths")]
		public string[] DbPaths { get; set; }
	}
	
	/// <summary>
	/// The configuration for read only disk cache associated with a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxCacheStorageConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public int Size { get; set; }
	}
	
	/// <summary>
	/// The configuration based on which FinSpace will scale in or scale out nodes in your cluster. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoScalingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="minNodeCount")]
		public System.Nullable<System.Int32> MinNodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxNodeCount")]
		public System.Nullable<System.Int32> MaxNodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingMetric")]
		public AutoScalingMetric AutoScalingMetric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricTarget")]
		public System.Nullable<System.Double> MetricTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scaleInCooldownSeconds")]
		public System.Nullable<System.Double> ScaleInCooldownSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scaleOutCooldownSeconds")]
		public System.Nullable<System.Double> ScaleOutCooldownSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutoScalingMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CPU_UTILIZATION_PERCENTAGE")]
		CPU_UTILIZATION_PERCENTAGE = 0,
	}
	
	/// <summary>
	/// A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, number of instances, and the port used while establishing a connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CapacityConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodeType")]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
	}
	
	/// <summary>
	/// Configuration details about the network where the Privatelink endpoint of the cluster resides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IPAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IPAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IP_V4")]
		IP_V4 = 0,
	}
	
	/// <summary>
	/// Defines the key-value pairs to make them available inside the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxCommandLineArgument
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The structure of the customer code available within the running cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Key")]
		public string S3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3ObjectVersion")]
		public string S3ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// The size and type of temporary storage that is used to hold data during the savedown process. All the data written to this storage space is lost when the cluster node is restarted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxSavedownStorageConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public KxSavedownStorageType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public int Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KxSavedownStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SDS01")]
		SDS01 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KxAzMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE")]
		SINGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTI")]
		MULTI = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxDatabaseResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseArn")]
		public string DatabaseArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxEnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EnvironmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_REQUESTED")]
		CREATE_REQUESTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED")]
		CREATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE_REQUESTED")]
		DELETE_REQUESTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_CREATION")]
		FAILED_CREATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETRY_DELETION")]
		RETRY_DELETION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_DELETION")]
		FAILED_DELETION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_NETWORK_REQUESTED")]
		UPDATE_NETWORK_REQUESTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING_NETWORK")]
		UPDATING_NETWORK = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_UPDATING_NETWORK")]
		FAILED_UPDATING_NETWORK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUSPENDED")]
		SUSPENDED = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userArn")]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		public string IamRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEnvironmentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxClusterResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxDatabaseResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxEnvironmentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxUserResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public Environment Environment { get; set; }
	}
	
	/// <summary>
	/// Represents an FinSpace environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Environment
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentUrl")]
		public string EnvironmentUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sageMakerStudioDomainUrl")]
		public string SageMakerStudioDomainUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dedicatedServiceAccountId")]
		public string DedicatedServiceAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationMode")]
		public FederationMode FederationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationParameters")]
		public FederationParameters FederationParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FederationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FEDERATED")]
		FEDERATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCAL")]
		LOCAL = 1,
	}
	
	/// <summary>
	/// Configuration information when authentication mode is FEDERATED.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FederationParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="samlMetadataDocument")]
		public string SamlMetadataDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samlMetadataURL")]
		public string SamlMetadataURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationCallBackURL")]
		public string ApplicationCallBackURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationURN")]
		public string FederationURN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationProviderName")]
		public string FederationProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributeMap")]
		public AttributeMap AttributeMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxChangesetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeRequests")]
		public ChangeRequest[] ChangeRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeFromTimestamp")]
		public System.DateTimeOffset ActiveFromTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChangesetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public ErrorInfo ErrorInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxClusterResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public KxClusterStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterType")]
		public KxClusterType ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public KxDatabaseConfiguration[] Databases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheStorageConfigurations")]
		public KxCacheStorageConfiguration[] CacheStorageConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingConfiguration")]
		public AutoScalingConfiguration AutoScalingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterDescription")]
		public string ClusterDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capacityConfiguration")]
		public CapacityConfiguration CapacityConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcConfiguration VpcConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initializationScript")]
		public string InitializationScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commandLineArguments")]
		public KxCommandLineArgument[] CommandLineArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public CodeConfiguration Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionRole")]
		public string ExecutionRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="savedownStorageConfiguration")]
		public KxSavedownStorageConfiguration SavedownStorageConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azMode")]
		public KxAzMode AzMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxConnectionStringResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="signedConnectionString")]
		public string SignedConnectionString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxDatabaseResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseArn")]
		public string DatabaseArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastCompletedChangesetId")]
		public string LastCompletedChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numBytes")]
		public System.Nullable<System.Int32> NumBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numChangesets")]
		public System.Nullable<System.Int32> NumChangesets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numFiles")]
		public System.Nullable<System.Int32> NumFiles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxEnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tgwStatus")]
		public TgwStatus TgwStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsStatus")]
		public TgwStatus DnsStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dedicatedServiceAccountId")]
		public string DedicatedServiceAccountId { get; set; }
		
		/// <summary>
		/// The structure of the transit gateway and network configuration that is used to connect the kdb environment to an internal network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitGatewayConfiguration")]
		public TransitGatewayConfiguration TransitGatewayConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDNSConfiguration")]
		public CustomDNSServer[] CustomDNSConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.DateTimeOffset UpdateTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneIds")]
		public string[] AvailabilityZoneIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateAuthorityArn")]
		public string CertificateAuthorityArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TgwStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_REQUESTED")]
		UPDATE_REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_UPDATE")]
		FAILED_UPDATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFULLY_UPDATED")]
		SUCCESSFULLY_UPDATED = 4,
	}
	
	/// <summary>
	/// The structure of the transit gateway and network configuration that is used to connect the kdb environment to an internal network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitGatewayConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transitGatewayID")]
		public string TransitGatewayID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routableCIDRSpace")]
		public string RoutableCIDRSpace { get; set; }
	}
	
	/// <summary>
	/// A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomDNSServer
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customDNSServerName")]
		public string CustomDNSServerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customDNSServerIP")]
		public string CustomDNSServerIP { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userArn")]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		public string IamRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEnvironmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public Environment[] Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxChangesetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="kxChangesets")]
		public KxChangesetListEntry[] KxChangesets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details of changeset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxChangesetListEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeFromTimestamp")]
		public System.DateTimeOffset ActiveFromTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChangesetStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxClusterNodesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public KxNode[] Nodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A structure that stores metadata for a kdb node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxNode
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public string NodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchTime")]
		public System.DateTimeOffset LaunchTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxClustersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="kxClusterSummaries")]
		public KxCluster[] KxClusterSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of a kdb cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxCluster
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public KxClusterStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterType")]
		public KxClusterType ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterDescription")]
		public string ClusterDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initializationScript")]
		public string InitializationScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionRole")]
		public string ExecutionRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azMode")]
		public KxAzMode AzMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxDatabasesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="kxDatabases")]
		public KxDatabaseListEntry[] KxDatabases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details about a FinSpace managed kdb database
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxDatabaseListEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxEnvironmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public KxEnvironment[] Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of a kdb environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tgwStatus")]
		public TgwStatus TgwStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsStatus")]
		public TgwStatus DnsStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dedicatedServiceAccountId")]
		public string DedicatedServiceAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitGatewayConfiguration")]
		public TransitGatewayConfiguration TransitGatewayConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDNSConfiguration")]
		public CustomDNSServer[] CustomDNSConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.DateTimeOffset UpdateTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneIds")]
		public string[] AvailabilityZoneIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateAuthorityArn")]
		public string CertificateAuthorityArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public KxUser[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A structure that stores metadata for a kdb user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KxUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="userArn")]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTimestamp")]
		public System.DateTimeOffset CreateTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.DateTimeOffset UpdateTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public Environment Environment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxClusterDatabasesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxDatabaseResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTimestamp")]
		public System.DateTimeOffset LastModifiedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxEnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tgwStatus")]
		public TgwStatus TgwStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsStatus")]
		public TgwStatus DnsStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dedicatedServiceAccountId")]
		public string DedicatedServiceAccountId { get; set; }
		
		/// <summary>
		/// The structure of the transit gateway and network configuration that is used to connect the kdb environment to an internal network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitGatewayConfiguration")]
		public TransitGatewayConfiguration TransitGatewayConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDNSConfiguration")]
		public CustomDNSServer[] CustomDNSConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.DateTimeOffset UpdateTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneIds")]
		public string[] AvailabilityZoneIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxEnvironmentNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tgwStatus")]
		public TgwStatus TgwStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsStatus")]
		public TgwStatus DnsStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentArn")]
		public string EnvironmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dedicatedServiceAccountId")]
		public string DedicatedServiceAccountId { get; set; }
		
		/// <summary>
		/// The structure of the transit gateway and network configuration that is used to connect the kdb environment to an internal network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitGatewayConfiguration")]
		public TransitGatewayConfiguration TransitGatewayConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDNSConfiguration")]
		public CustomDNSServer[] CustomDNSConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimestamp")]
		public System.DateTimeOffset CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateTimestamp")]
		public System.DateTimeOffset UpdateTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneIds")]
		public string[] AvailabilityZoneIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userArn")]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		public string IamRole { get; set; }
	}
	
	/// <summary>
	/// Configuration information for the superuser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuperuserParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEnvironmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationMode")]
		public FederationMode FederationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationParameters")]
		public FederationParameters FederationParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="superuserParameters")]
		public SuperuserParameters SuperuserParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataBundles")]
		public string[] DataBundles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxChangesetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeRequests")]
		public ChangeRequest[] ChangeRequests { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxClusterRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clusterType")]
		public KxClusterType ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public KxDatabaseConfiguration[] Databases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheStorageConfigurations")]
		public KxCacheStorageConfiguration[] CacheStorageConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingConfiguration")]
		public AutoScalingConfiguration AutoScalingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterDescription")]
		public string ClusterDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="capacityConfiguration")]
		public CapacityConfiguration CapacityConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		public string ReleaseLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public VpcConfiguration VpcConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initializationScript")]
		public string InitializationScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commandLineArguments")]
		public KxCommandLineArgument[] CommandLineArguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public CodeConfiguration Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionRole")]
		public string ExecutionRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="savedownStorageConfiguration")]
		public KxSavedownStorageConfiguration SavedownStorageConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azMode")]
		public KxAzMode AzMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxEnvironmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKxUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxClusterRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxDatabaseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKxUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxChangesetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxClusterRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxConnectionStringRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxDatabaseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DnsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_REQUESTED")]
		UPDATE_REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_UPDATE")]
		FAILED_UPDATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFULLY_UPDATED")]
		SUCCESSFULLY_UPDATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKxUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEnvironmentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxChangesetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxClusterNodesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxClustersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxDatabasesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxEnvironmentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListKxUsersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEnvironmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationMode")]
		public FederationMode FederationMode { get; set; }
		
		/// <summary>
		/// Configuration information when authentication mode is FEDERATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federationParameters")]
		public FederationParameters FederationParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxClusterDatabasesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public KxDatabaseConfiguration[] Databases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxDatabaseRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxEnvironmentNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="transitGatewayConfiguration")]
		public TransitGatewayConfiguration TransitGatewayConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDNSConfiguration")]
		public CustomDNSServer[] CustomDNSConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxEnvironmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateKxUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a new FinSpace environment.
		/// CreateEnvironment environment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEnvironmentResponse> CreateEnvironmentAsync(CreateEnvironmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of all of your FinSpace environments.
		/// ListEnvironments environment
		/// </summary>
		/// <param name="nextToken">A token generated by FinSpace that specifies where to continue pagination if a previous request was truncated. To get the next set of pages, pass in the <code>nextToken</code>nextToken value from the response object of the previous page call.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <returns>Success</returns>
		public async Task<ListEnvironmentsResponse> ListEnvironmentsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environment?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEnvironmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a changeset for a kdb database. A changeset allows you to add and delete existing files by using an ordered list of change requests.
		/// CreateKxChangeset kx/environments/{environmentId}/databases/{databaseName}/changesets
		/// </summary>
		/// <param name="environmentId">A unique identifier of the kdb environment.</param>
		/// <param name="databaseName">The name of the kdb database.</param>
		/// <returns>Success</returns>
		public async Task<CreateKxChangesetResponse> CreateKxChangesetAsync(string environmentId, string databaseName, CreateKxChangesetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/changesets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateKxChangesetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all the changesets for a database.
		/// ListKxChangesets kx/environments/{environmentId}/databases/{databaseName}/changesets
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="databaseName">The name of the kdb database.</param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <returns>Success</returns>
		public async Task<ListKxChangesetsResponse> ListKxChangesetsAsync(string environmentId, string databaseName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/changesets&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKxChangesetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new kdb cluster.
		/// CreateKxCluster kx/environments/{environmentId}/clusters
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<CreateKxClusterResponse> CreateKxClusterAsync(string environmentId, CreateKxClusterPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/clusters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateKxClusterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of clusters.
		/// ListKxClusters kx/environments/{environmentId}/clusters
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="clusterType"><p>Specifies the type of KDB database that is being created. The following types are available: </p> <ul> <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li> <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li> <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li> </ul></param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <returns>Success</returns>
		public async Task<ListKxClustersResponse> ListKxClustersAsync(string environmentId, KxClusterType clusterType, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/clusters&clusterType=" + clusterType+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKxClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new kdb database in the environment.
		/// CreateKxDatabase kx/environments/{environmentId}/databases
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<CreateKxDatabaseResponse> CreateKxDatabaseAsync(string environmentId, CreateKxDatabasePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateKxDatabaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all the databases in the kdb environment.
		/// ListKxDatabases kx/environments/{environmentId}/databases
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <returns>Success</returns>
		public async Task<ListKxDatabasesResponse> ListKxDatabasesAsync(string environmentId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKxDatabasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a managed kdb environment for the account.
		/// CreateKxEnvironment kx/environments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateKxEnvironmentResponse> CreateKxEnvironmentAsync(CreateKxEnvironmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateKxEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of kdb environments created in an account.
		/// ListKxEnvironments kx/environments
		/// </summary>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <returns>Success</returns>
		public async Task<ListKxEnvironmentsResponse> ListKxEnvironmentsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKxEnvironmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a user in FinSpace kdb environment with an associated IAM role.
		/// CreateKxUser kx/environments/{environmentId}/users
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment where you want to create a user.</param>
		/// <returns>Success</returns>
		public async Task<CreateKxUserResponse> CreateKxUserAsync(string environmentId, CreateKxUserPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateKxUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the users in a kdb environment.
		/// ListKxUsers kx/environments/{environmentId}/users
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <returns>Success</returns>
		public async Task<ListKxUsersResponse> ListKxUsersAsync(string environmentId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/users&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKxUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an FinSpace environment.
		/// DeleteEnvironment environment/{environmentId}
		/// </summary>
		/// <param name="environmentId">The identifier for the FinSpace environment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteEnvironmentResponse> DeleteEnvironmentAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environment/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the FinSpace environment object.
		/// GetEnvironment environment/{environmentId}
		/// </summary>
		/// <param name="environmentId">The identifier of the FinSpace environment.</param>
		/// <returns>Success</returns>
		public async Task<GetEnvironmentResponse> GetEnvironmentAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environment/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update your FinSpace environment.
		/// UpdateEnvironment environment/{environmentId}
		/// </summary>
		/// <param name="environmentId">The identifier of the FinSpace environment.</param>
		/// <returns>Success</returns>
		public async Task<UpdateEnvironmentResponse> UpdateEnvironmentAsync(string environmentId, UpdateEnvironmentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environment/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a kdb cluster.
		/// DeleteKxCluster kx/environments/{environmentId}/clusters/{clusterName}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="clusterName">The name of the cluster that you want to delete.</param>
		/// <param name="clientToken">A token that ensures idempotency. This token expires in 10 minutes.</param>
		/// <returns>Success</returns>
		public async Task<DeleteKxClusterResponse> DeleteKxClusterAsync(string environmentId, string clusterName, string clientToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteKxClusterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a kdb cluster.
		/// GetKxCluster kx/environments/{environmentId}/clusters/{clusterName}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="clusterName">The name of the cluster that you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetKxClusterResponse> GetKxClusterAsync(string environmentId, string clusterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKxClusterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified database and all of its associated data. This action is irreversible. You must copy any data out of the database before deleting it if the data is to be retained.
		/// DeleteKxDatabase kx/environments/{environmentId}/databases/{databaseName}#clientToken
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="databaseName">The name of the kdb database that you want to delete.</param>
		/// <param name="clientToken">A token that ensures idempotency. This token expires in 10 minutes.</param>
		/// <returns>Success</returns>
		public async Task<DeleteKxDatabaseResponse> DeleteKxDatabaseAsync(string environmentId, string databaseName, string clientToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"#clientToken&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteKxDatabaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the kdb environment. This action is irreversible. Deleting a kdb environment will remove all the associated data and any services running in it.
		/// DeleteKxEnvironment kx/environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteKxEnvironmentResponse> DeleteKxEnvironmentAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteKxEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves all the information for the specified kdb environment.
		/// GetKxEnvironment kx/environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<GetKxEnvironmentResponse> GetKxEnvironmentAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKxEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates information for the given kdb environment.
		/// UpdateKxEnvironment kx/environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<UpdateKxEnvironmentResponse> UpdateKxEnvironmentAsync(string environmentId, UpdateKxEnvironmentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateKxEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a user in the specified kdb environment.
		/// DeleteKxUser kx/environments/{environmentId}/users/{userName}
		/// </summary>
		/// <param name="userName">A unique identifier for the user that you want to delete.</param>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteKxUserResponse> DeleteKxUserAsync(string userName, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteKxUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified kdb user.
		/// GetKxUser kx/environments/{environmentId}/users/{userName}
		/// </summary>
		/// <param name="userName">A unique identifier for the user.</param>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<GetKxUserResponse> GetKxUserAsync(string userName, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKxUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the user details. You can only update the IAM role associated with a user.
		/// UpdateKxUser kx/environments/{environmentId}/users/{userName}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="userName">A unique identifier for the user.</param>
		/// <returns>Success</returns>
		public async Task<UpdateKxUserResponse> UpdateKxUserAsync(string environmentId, string userName, UpdateKxUserPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/users/"+ (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateKxUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a kdb changeset.
		/// GetKxChangeset kx/environments/{environmentId}/databases/{databaseName}/changesets/{changesetId}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="databaseName">The name of the kdb database.</param>
		/// <param name="changesetId">A unique identifier of the changeset for which you want to retrieve data.</param>
		/// <returns>Success</returns>
		public async Task<GetKxChangesetResponse> GetKxChangesetAsync(string environmentId, string databaseName, string changesetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName))+"/changesets/"+ (changesetId==null? "" : System.Uri.EscapeDataString(changesetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKxChangesetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a connection string for a user to connect to a kdb cluster. You must call this API using the same role that you have defined while creating a user.
		/// GetKxConnectionString kx/environments/{environmentId}/connectionString#userArn&clusterName
		/// </summary>
		/// <param name="userArn"> The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see <a href="IAM/latest/UserGuide/reference_identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>. </param>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="clusterName">A name of the kdb cluster.</param>
		/// <returns>Success</returns>
		public async Task<GetKxConnectionStringResponse> GetKxConnectionStringAsync(string userArn, string environmentId, string clusterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/connectionString#userArn&clusterName?userArn=" + (userArn==null? "" : System.Uri.EscapeDataString(userArn))+"&clusterName=" + (clusterName==null? "" : System.Uri.EscapeDataString(clusterName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKxConnectionStringResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns database information for the specified environment ID.
		/// GetKxDatabase kx/environments/{environmentId}/databases/{databaseName}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="databaseName">The name of the kdb database.</param>
		/// <returns>Success</returns>
		public async Task<GetKxDatabaseResponse> GetKxDatabaseAsync(string environmentId, string databaseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKxDatabaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates information for the given kdb database.
		/// UpdateKxDatabase kx/environments/{environmentId}/databases/{databaseName}
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="databaseName">The name of the kdb database.</param>
		/// <returns>Success</returns>
		public async Task<UpdateKxDatabaseResponse> UpdateKxDatabaseAsync(string environmentId, string databaseName, UpdateKxDatabasePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/databases/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateKxDatabaseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the nodes in a kdb cluster.
		/// ListKxClusterNodes kx/environments/{environmentId}/clusters/{clusterName}/nodes
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <param name="clusterName">A unique name for the cluster.</param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <returns>Success</returns>
		public async Task<ListKxClusterNodesResponse> ListKxClusterNodesAsync(string environmentId, string clusterName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/nodes&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKxClusterNodesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// A list of all tags for a resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds metadata tags to a FinSpace resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the resource.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes metadata tags from a FinSpace resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">A FinSpace resource from which you want to remove a tag or tags. The value for this parameter is an Amazon Resource Name (ARN).</param>
		/// <param name="tagKeys">The tag keys (names) of one or more tags to be removed.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the databases mounted on a kdb cluster, which includes the <code>changesetId</code> and all the dbPaths to be cached. This API does not allow you to change a database name or add a database if you created a cluster without one. </p> <p>Using this API you can point a cluster to a different changeset and modify a list of partitions being cached.</p>
		/// UpdateKxClusterDatabases kx/environments/{environmentId}/clusters/{clusterName}/configuration/databases
		/// </summary>
		/// <param name="environmentId">The unique identifier of a kdb environment.</param>
		/// <param name="clusterName">A unique name for the cluster that you want to modify.</param>
		/// <returns>Success</returns>
		public async Task<UpdateKxClusterDatabasesResponse> UpdateKxClusterDatabasesAsync(string environmentId, string clusterName, UpdateKxClusterDatabasesPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/clusters/"+ (clusterName==null? "" : System.Uri.EscapeDataString(clusterName))+"/configuration/databases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateKxClusterDatabasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates environment network to connect to your internal network by using a transit gateway. This API supports request to create a transit gateway attachment from FinSpace VPC to your transit gateway ID and create a custom Route-53 outbound resolvers.</p> <p>Once you send a request to update a network, you cannot change it again. Network update might require termination of any clusters that are running in the existing network.</p>
		/// UpdateKxEnvironmentNetwork kx/environments/{environmentId}/network
		/// </summary>
		/// <param name="environmentId">A unique identifier for the kdb environment.</param>
		/// <returns>Success</returns>
		public async Task<UpdateKxEnvironmentNetworkResponse> UpdateKxEnvironmentNetworkAsync(string environmentId, UpdateKxEnvironmentNetworkPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "kx/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/network";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateKxEnvironmentNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateEnvironmentPostBody
	{
		
		/// <summary>
		/// The name of the FinSpace environment to be created.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the FinSpace environment to be created.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9. ]{1,1000}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9. ]{1,1000}$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The KMS key id to encrypt your data in the FinSpace environment.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z-0-9-:\/]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z-0-9-:\/]*$")]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// Add tags to your FinSpace environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federationMode")]
		public FederationMode FederationMode { get; set; }
		
		/// <summary>
		/// Configuration information when authentication mode is FEDERATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federationParameters")]
		public CreateEnvironmentPostBodyFederationParameters FederationParameters { get; set; }
		
		/// <summary>
		/// Configuration information for the superuser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="superuserParameters")]
		public CreateEnvironmentPostBodySuperuserParameters SuperuserParameters { get; set; }
		
		/// <summary>
		/// <p>The list of Amazon Resource Names (ARN) of the data bundles to install. Currently supported data bundle ARNs:</p> <ul> <li> <p> <code>arn:aws:finspace:${Region}::data-bundle/capital-markets-sample</code> - Contains sample Capital Markets datasets, categories and controlled vocabularies.</p> </li> <li> <p> <code>arn:aws:finspace:${Region}::data-bundle/taq</code> (default) - Contains trades and quotes data in addition to sample Capital Markets data.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataBundles")]
		public string[] DataBundles { get; set; }
	}
	
	public class CreateEnvironmentPostBodyFederationParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="samlMetadataDocument")]
		public string SamlMetadataDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samlMetadataURL")]
		public string SamlMetadataURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationCallBackURL")]
		public string ApplicationCallBackURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationURN")]
		public string FederationURN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationProviderName")]
		public string FederationProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributeMap")]
		public AttributeMap AttributeMap { get; set; }
	}
	
	public class CreateEnvironmentPostBodySuperuserParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	public class CreateKxChangesetPostBody
	{
		
		/// <summary>
		/// <p>A list of change request objects that are run in order. A change request object consists of changeType , s3Path, and a dbPath. A changeType can has the following values: </p> <ul> <li> <p>PUT – Adds or updates files in a database.</p> </li> <li> <p>DELETE – Deletes files in a database.</p> </li> </ul> <p>All the change requests require a mandatory <i>dbPath</i> attribute that defines the path within the database directory. The <i>s3Path</i> attribute defines the s3 source file path and is required for a PUT change type.</p> <p>Here is an example of how you can use the change request object:</p> <p> <code>[ { "changeType": "PUT", "s3Path":"s3://bucket/db/2020.01.02/", "dbPath":"/2020.01.02/"}, { "changeType": "PUT", "s3Path":"s3://bucket/db/sym", "dbPath":"/"}, { "changeType": "DELETE", "dbPath": "/2020.01.01/"} ]</code> </p> <p>In this example, the first request with <i>PUT</i> change type allows you to add files in the given s3Path under the <i>2020.01.02</i> partition of the database. The second request with <i>PUT</i> change type allows you to add a single sym file at database root location. The last request with <i>DELETE</i> change type allows you to delete the files under the <i>2020.01.01</i> partition of the database. </p>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public ChangeRequest[] ChangeRequests { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-]+$")]
		public string ClientToken { get; set; }
	}
	
	public class CreateKxClusterPostBody
	{
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 36
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// A unique name for the cluster that you want to create.
		/// Required
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// <p>Specifies the type of KDB database that is being created. The following types are available: </p> <ul> <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li> <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li> <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clusterType")]
		public KxClusterType ClusterType { get; set; }
		
		/// <summary>
		/// A list of databases that will be available for querying.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public KxDatabaseConfiguration[] Databases { get; set; }
		
		/// <summary>
		/// The configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheStorageConfigurations")]
		public KxCacheStorageConfiguration[] CacheStorageConfigurations { get; set; }
		
		/// <summary>
		/// The configuration based on which FinSpace will scale in or scale out nodes in your cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoScalingConfiguration")]
		public CreateKxClusterPostBodyAutoScalingConfiguration AutoScalingConfiguration { get; set; }
		
		/// <summary>
		/// A description of the cluster.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9\_\-\.\s]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\_\-\.\s]+$")]
		public string ClusterDescription { get; set; }
		
		/// <summary>
		/// A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, number of instances, and the port used while establishing a connection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="capacityConfiguration")]
		public CreateKxClusterPostBodyCapacityConfiguration CapacityConfiguration { get; set; }
		
		/// <summary>
		/// The version of FinSpace managed kdb to run.
		/// Required
		/// Max length: 16
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="releaseLabel")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9._-]+")]
		public string ReleaseLabel { get; set; }
		
		/// <summary>
		/// Configuration details about the network where the Privatelink endpoint of the cluster resides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcConfiguration")]
		public CreateKxClusterPostBodyVpcConfiguration VpcConfiguration { get; set; }
		
		/// <summary>
		/// Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9\_\-\.\/\\]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationScript")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9\_\-\.\/\\]+$")]
		public string InitializationScript { get; set; }
		
		/// <summary>
		/// Defines the key-value pairs to make them available inside the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArguments")]
		public KxCommandLineArgument[] CommandLineArguments { get; set; }
		
		/// <summary>
		/// The structure of the customer code available within the running cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public CreateKxClusterPostBodyCode Code { get; set; }
		
		/// <summary>
		/// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn:aws[a-z0-9-]*:iam::\d{12}:role\/[\w-\/.@+=,]{1,1017}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionRole")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[a-z0-9-]*:iam::\d{12}:role\/[\w-\/.@+=,]{1,1017}$")]
		public string ExecutionRole { get; set; }
		
		/// <summary>
		/// The size and type of temporary storage that is used to hold data during the savedown process. All the data written to this storage space is lost when the cluster node is restarted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savedownStorageConfiguration")]
		public CreateKxClusterPostBodySavedownStorageConfiguration SavedownStorageConfiguration { get; set; }
		
		/// <summary>
		/// <p>The number of availability zones you want to assign per cluster. This can be one of the following </p> <ul> <li> <p> <code>SINGLE</code> – Assigns one availability zone per cluster.</p> </li> <li> <p> <code>MULTI</code> – Assigns all the availability zones per cluster.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="azMode")]
		public KxAzMode AzMode { get; set; }
		
		/// <summary>
		/// The availability zone identifiers for the requested regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityZoneId")]
		public string AvailabilityZoneId { get; set; }
		
		/// <summary>
		/// A list of key-value pairs to label the cluster. You can add up to 50 tags to a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateKxClusterPostBodyAutoScalingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="minNodeCount")]
		public System.Nullable<System.Int32> MinNodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxNodeCount")]
		public System.Nullable<System.Int32> MaxNodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingMetric")]
		public AutoScalingMetric AutoScalingMetric { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricTarget")]
		public System.Nullable<System.Double> MetricTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scaleInCooldownSeconds")]
		public System.Nullable<System.Double> ScaleInCooldownSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scaleOutCooldownSeconds")]
		public System.Nullable<System.Double> ScaleOutCooldownSeconds { get; set; }
	}
	
	public class CreateKxClusterPostBodyCapacityConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodeType")]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
	}
	
	public class CreateKxClusterPostBodyVpcConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IPAddressType IpAddressType { get; set; }
	}
	
	public class CreateKxClusterPostBodyCode
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Key")]
		public string S3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3ObjectVersion")]
		public string S3ObjectVersion { get; set; }
	}
	
	public class CreateKxClusterPostBodySavedownStorageConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public KxSavedownStorageType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	public class CreateKxDatabasePostBody
	{
		
		/// <summary>
		/// The name of the kdb database.
		/// Required
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// A description of the database.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9. ]{1,1000}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9. ]{1,1000}$")]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of key-value pairs to label the kdb database. You can add up to 50 tags to your kdb database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-]+$")]
		public string ClientToken { get; set; }
	}
	
	public class CreateKxEnvironmentPostBody
	{
		
		/// <summary>
		/// The name of the kdb environment that you want to create.
		/// Required
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description for the kdb environment.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9. ]{1,1000}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9. ]{1,1000}$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The KMS key ID to encrypt your data in the FinSpace environment.
		/// Required
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^arn:aws:kms:.*:\d+:.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:kms:.*:\d+:.*$")]
		public string KmsKeyId { get; set; }
		
		/// <summary>
		/// A list of key-value pairs to label the kdb environment. You can add up to 50 tags to your kdb environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 36
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateKxUserPostBody
	{
		
		/// <summary>
		/// A unique identifier for the user.
		/// Required
		/// Max length: 50
		/// Min length: 1
		/// Pattern: ^[0-9A-Za-z_-]{1,50}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9A-Za-z_-]{1,50}$")]
		public string UserName { get; set; }
		
		/// <summary>
		/// The IAM role ARN that will be associated with the user.
		/// Required
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$")]
		public string IamRole { get; set; }
		
		/// <summary>
		/// A list of key-value pairs to label the user. You can add up to 50 tags to a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 36
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateEnvironmentPutBody
	{
		
		/// <summary>
		/// The name of the environment.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the environment.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9. ]{1,1000}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9. ]{1,1000}$")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>Authentication mode for the environment.</p> <ul> <li> <p> <code>FEDERATED</code> - Users access FinSpace through Single Sign On (SSO) via your Identity provider.</p> </li> <li> <p> <code>LOCAL</code> - Users access FinSpace via email and password managed within the FinSpace environment.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federationMode")]
		public FederationMode FederationMode { get; set; }
		
		/// <summary>
		/// Configuration information when authentication mode is FEDERATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federationParameters")]
		public UpdateEnvironmentPutBodyFederationParameters FederationParameters { get; set; }
	}
	
	public class UpdateEnvironmentPutBodyFederationParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="samlMetadataDocument")]
		public string SamlMetadataDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samlMetadataURL")]
		public string SamlMetadataURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationCallBackURL")]
		public string ApplicationCallBackURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationURN")]
		public string FederationURN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationProviderName")]
		public string FederationProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributeMap")]
		public AttributeMap AttributeMap { get; set; }
	}
	
	public class UpdateKxEnvironmentPutBody
	{
		
		/// <summary>
		/// The name of the kdb environment.
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9][a-zA-Z0-9-_]*[a-zA-Z0-9]$")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description of the kdb environment.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9. ]{1,1000}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9. ]{1,1000}$")]
		public string Description { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 36
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateKxUserPutBody
	{
		
		/// <summary>
		/// The IAM role ARN that is associated with the user.
		/// Required
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iamRole")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$")]
		public string IamRole { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 36
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateKxDatabasePutBody
	{
		
		/// <summary>
		/// A description of the database.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9. ]{1,1000}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9. ]{1,1000}$")]
		public string Description { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-]+$")]
		public string ClientToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// One or more tags to be assigned to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateKxClusterDatabasesPutBody
	{
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-]+$")]
		public string ClientToken { get; set; }
		
		/// <summary>
		///  The structure of databases mounted on the cluster.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public KxDatabaseConfiguration[] Databases { get; set; }
	}
	
	public class UpdateKxEnvironmentNetworkPutBody
	{
		
		/// <summary>
		/// The structure of the transit gateway and network configuration that is used to connect the kdb environment to an internal network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitGatewayConfiguration")]
		public UpdateKxEnvironmentNetworkPutBodyTransitGatewayConfiguration TransitGatewayConfiguration { get; set; }
		
		/// <summary>
		/// A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDNSConfiguration")]
		public CustomDNSServer[] CustomDNSConfiguration { get; set; }
		
		/// <summary>
		/// A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 36
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateKxEnvironmentNetworkPutBodyTransitGatewayConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="transitGatewayID")]
		public string TransitGatewayID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="routableCIDRSpace")]
		public string RoutableCIDRSpace { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
