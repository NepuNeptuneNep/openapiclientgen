//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddProductCustomField
	{
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public AddProductCustomFieldFields Field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddProductCustomFieldFields
	{
		
		/// <summary>
		/// Unique identifier of the ProductCustomField (custom_field_id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The value for the ProductCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class App
	{
		
		[System.Runtime.Serialization.DataMember(Name="apps")]
		public AppFields[] Apps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppFields
	{
		
		/// <summary>
		/// Author of the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// Code of the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Description of the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// True if the app is a jsapp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="js")]
		public System.Nullable<System.Boolean> Js { get; set; }
		
		/// <summary>
		/// Name of the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Page of the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public string Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachment")]
		public AttachmentFields Attachment1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentFields
	{
		
		/// <summary>
		/// Unique identifier of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Private URL of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachment")]
		public AttachmentEditFields Attachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachmentEditFields
	{
		
		/// <summary>
		/// Filename of the attachment (with file extensison)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Public accessible URL with the desired file contents. (LIMIT: 100MB)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BestSold
	{
		
		/// <summary>
		/// Quantity sold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_id")]
		public System.Nullable<System.Int32> Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_name")]
		public string Product_name { get; set; }
		
		/// <summary>
		/// Total sold amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingAddress
	{
		
		/// <summary>
		/// Address of the Customer's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of the Customer's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country code of the Customer's Billing Address (ISO 3166-1 alpha-2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Municipality of the Customer's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="municipality")]
		public string Municipality { get; set; }
		
		/// <summary>
		/// Name of the Customer's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Postal code of the Customer's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal")]
		public string Postal { get; set; }
		
		/// <summary>
		/// Region code of the Customer's Billing Address (Use the FIPS standard - http://www.geonames.org/countries/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Surname of the Customer's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
		
		/// <summary>
		/// Tax id of the Customer's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxid")]
		public string Taxid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CategoryFields Category1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryFields
	{
		
		/// <summary>
		/// Unique identifier of the Category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the Category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique identifier of the Parent Category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public System.Nullable<System.Int32> Parent_id { get; set; }
		
		/// <summary>
		/// Category unique URL path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink")]
		public string Permalink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CategoryEditFields Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryEditFields
	{
		
		/// <summary>
		/// Name of the Category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique identifier of the Parent Category
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public System.Nullable<System.Int32> Parent_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckoutCustomField
	{
		
		[System.Runtime.Serialization.DataMember(Name="checkout_custom_field")]
		public CheckoutCustomFieldFields Checkout_custom_field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckoutCustomFieldFields
	{
		
		/// <summary>
		/// Area of the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area")]
		public System.Nullable<CheckoutCustomFieldFieldsArea> Area { get; set; }
		
		/// <summary>
		/// The values for the CheckoutCustomField selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_field_select_options")]
		public string[] Custom_field_select_options { get; set; }
		
		/// <summary>
		/// True if the CheckoutCustomField can be removed from the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletable")]
		public System.Nullable<System.Boolean> Deletable { get; set; }
		
		/// <summary>
		/// Unique identifier of the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Label given to the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Position of the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// True if the CheckoutCustomField is mandatory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Type of the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CheckoutCustomFieldFieldsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckoutCustomFieldFieldsArea
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contact")]
		contact = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="billing_shipping")]
		billing_shipping = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckoutCustomFieldFieldsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="select")]
		select = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="input")]
		input = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="checkbox")]
		checkbox = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckoutCustomFieldEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="checkout_custom_field")]
		public CheckoutCustomFieldEditFields Checkout_custom_field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckoutCustomFieldEditFields
	{
		
		/// <summary>
		/// Area of the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area")]
		public CheckoutCustomFieldFieldsArea Area { get; set; }
		
		/// <summary>
		/// The values for the CheckoutCustomField selection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_field_select_options")]
		public string[] Custom_field_select_options { get; set; }
		
		/// <summary>
		/// True if the CheckoutCustomField can be removed from the store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletable")]
		public System.Nullable<System.Boolean> Deletable { get; set; }
		
		/// <summary>
		/// Label given to the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Position of the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// True if the CheckoutCustomField is mandatory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Type of the CheckoutCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CheckoutCustomFieldEditFieldsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckoutCustomFieldEditFieldsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="select")]
		select = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="input")]
		input = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="checkbox")]
		checkbox = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="date")]
		date = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Count
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountryOrders
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Number of country orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Orders per region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public RegionOrders[] Orders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionOrders
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public System.Nullable<System.Int32> Country { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomField
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public CustomFieldFields Custom_field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldFields
	{
		
		/// <summary>
		/// Unique identifier of the Custom Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Label given to the Custom Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Type of the Custom Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CustomFieldFieldsType> Type { get; set; }
		
		/// <summary>
		/// All the possible Values of the Custom Field (for type 'selection')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomFieldFieldsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="selection")]
		selection = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="input")]
		input = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_field")]
		public CustomFieldEditFields Custom_field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldEditFields
	{
		
		/// <summary>
		/// Label given to the Custom Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Type of the Custom Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CustomFieldFieldsType Type { get; set; }
		
		/// <summary>
		/// All the possible Values of the Custom Field (for type 'selection')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldSelectOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_field_select_option")]
		public CustomFieldSelectOptionFields Custom_field_select_option { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldSelectOptionFields
	{
		
		/// <summary>
		/// Unique identifier of the Custom Field Select Option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Value given to the Custom Field Select Option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldSelectOptionEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="custom_field_select_option")]
		public CustomFieldSelectOptionEditFields Custom_field_select_option { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldSelectOptionEditFields
	{
		
		/// <summary>
		/// Value given to the Custom Field Select Option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer
	{
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public CustomerFields Customer1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public BillingAddress Billing_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_additional_fields")]
		public CustomerAdditionalField[] Customer_additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_categories")]
		public CustomerCategory[] Customer_categories { get; set; }
		
		/// <summary>
		/// Email of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Unique identifier of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Phone of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public ShippingAddress Shipping_address { get; set; }
		
		/// <summary>
		/// Status of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CustomerFieldsStatus> Status { get; set; }
		
		/// <summary>
		/// Surname of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerAdditionalField
	{
		
		[System.Runtime.Serialization.DataMember(Name="customer_additional_field")]
		public CustomerAdditionalFieldFields Customer_additional_field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerAdditionalFieldFields
	{
		
		/// <summary>
		/// Area of the Customer Additional Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area")]
		public string Area { get; set; }
		
		/// <summary>
		/// Unique identifier of the Checkout Custom Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout_custom_field_id")]
		public System.Nullable<System.Int32> Checkout_custom_field_id { get; set; }
		
		/// <summary>
		/// Unique identifier of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public System.Nullable<System.Int32> Customer_id { get; set; }
		
		/// <summary>
		/// Unique identifier of the Customer Additional Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Label of the Customer Additional Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Value of the Customer Additional Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CustomerCategoryFields Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCategoryFields
	{
		
		/// <summary>
		/// Code of the CustomerCategory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Unique identifier of the CustomerCategory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the CustomerCategory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomerFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerAdditionalFieldEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="customer_additional_field")]
		public CustomerAdditionalFieldEditFields Customer_additional_field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerAdditionalFieldEditFields
	{
		
		/// <summary>
		/// Unique identifier of the Checkout Custom Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout_custom_field_id")]
		public System.Nullable<System.Int32> Checkout_custom_field_id { get; set; }
		
		/// <summary>
		/// Value of the Customer Additional Field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCategoryEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CustomerCategoryEditFields Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerCategoryEditFields
	{
		
		/// <summary>
		/// Name of the CustomerCategory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerFieldsWithBillingAddressAndShippingAddressFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public BillingAddress Billing_address { get; set; }
		
		/// <summary>
		/// Unique identifier of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public ShippingAddress Shipping_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerFieldsWithPassword
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public BillingAddress Billing_address { get; set; }
		
		/// <summary>
		/// Email of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Unique identifier of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Phone of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public ShippingAddress Shipping_address { get; set; }
		
		/// <summary>
		/// Status of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CustomerFieldsStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerFieldsWithPasswordNoID
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public BillingAddress Billing_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_category")]
		public int[] Customer_category { get; set; }
		
		/// <summary>
		/// Email of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Phone of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public ShippingAddress Shipping_address { get; set; }
		
		/// <summary>
		/// Status of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CustomerFieldsStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerToCustomerCategory
	{
		
		/// <summary>
		/// Email of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Unique identifier of the Customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerWithPassword
	{
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public CustomerFieldsWithPassword Customer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerWithPasswordNoID
	{
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public CustomerFieldsWithPasswordNoID Customer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomersToCustomerCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public CustomerToCustomerCategory[] Customers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DailyVisits
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visits")]
		public System.Nullable<System.Int32> Visits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DigitalProduct
	{
		
		[System.Runtime.Serialization.DataMember(Name="digital_product")]
		public DigitalProductFields Digital_product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DigitalProductFields
	{
		
		/// <summary>
		/// Time left in seconds before the current private URL expires
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration_seconds")]
		public System.Nullable<System.Int32> Expiration_seconds { get; set; }
		
		/// <summary>
		/// Unique identifier of the digital product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Private URL of the digital product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DigitalProductEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="digital_product")]
		public DigitalProductEditFields Digital_product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DigitalProductEditFields
	{
		
		/// <summary>
		/// Filename of the digital product (with file extensison)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// Public accessible URL with the desired file contents. (LIMIT: 100MB)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fulfillment
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public FulfillmentFields Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FulfillmentFields
	{
		
		/// <summary>
		/// Unique identifier of the Fulfillment used by the tracking company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// Unique identifier of the Fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Order associated with the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Type of Service requested to the tracking company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_type")]
		public string Service_type { get; set; }
		
		/// <summary>
		/// Status of the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipment_status")]
		public string Shipment_status { get; set; }
		
		/// <summary>
		/// Tracking company responsible for the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_company")]
		public string Tracking_company { get; set; }
		
		/// <summary>
		/// Tracking Number associated with the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_number")]
		public string Tracking_number { get; set; }
		
		/// <summary>
		/// Type of fulfillment Service used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FulfillmentCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public FulfillmentCreateFields Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FulfillmentCreateFields
	{
		
		/// <summary>
		/// First date expected for the fulfillment to arrive at customer place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expected_arrival_from")]
		public string Expected_arrival_from { get; set; }
		
		/// <summary>
		/// Last date expected for the fulfillment to arrive at customer place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expected_arrival_to")]
		public string Expected_arrival_to { get; set; }
		
		/// <summary>
		/// Unique identifier of the Fulfillment used by the tracking company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// Order associated with the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Type of Service requested to the tracking company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_type")]
		public string Service_type { get; set; }
		
		/// <summary>
		/// Status of the Fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipment_status")]
		public System.Nullable<FulfillmentCreateFieldsShipment_status> Shipment_status { get; set; }
		
		/// <summary>
		/// Tracking company responsible for the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_company")]
		public string Tracking_company { get; set; }
		
		/// <summary>
		/// Tracking Number associated with the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_number")]
		public string Tracking_number { get; set; }
		
		/// <summary>
		/// Type of fulfillment Service used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FulfillmentCreateFieldsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FulfillmentCreateFieldsShipment_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requested")]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_transit")]
		in_transit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delivered")]
		delivered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FulfillmentCreateFieldsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="manual")]
		manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="shipit")]
		shipit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chilexpress")]
		chilexpress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ctt")]
		ctt = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="correos_chile")]
		correos_chile = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dhl")]
		dhl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="servientrega")]
		servientrega = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="starken")]
		starken = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bluexpress")]
		bluexpress = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FulfillmentEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public FulfillmentEditFields Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FulfillmentEditFields
	{
		
		/// <summary>
		/// First date expected for the fulfillment to arrive at customer place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expected_arrival_from")]
		public string Expected_arrival_from { get; set; }
		
		/// <summary>
		/// Last date expected for the fulfillment to arrive at customer place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expected_arrival_to")]
		public string Expected_arrival_to { get; set; }
		
		/// <summary>
		/// Unique identifier of the Fulfillment used by the tracking company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// Order associated with the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Type of Service requested to the tracking company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_type")]
		public string Service_type { get; set; }
		
		/// <summary>
		/// Status of the Fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipment_status")]
		public FulfillmentCreateFieldsShipment_status Shipment_status { get; set; }
		
		/// <summary>
		/// Tracking company responsible for the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_company")]
		public string Tracking_company { get; set; }
		
		/// <summary>
		/// Tracking Number associated with the fulfillment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_number")]
		public string Tracking_number { get; set; }
		
		/// <summary>
		/// Type of fulfillment Service used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FulfillmentCreateFieldsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hook
	{
		
		[System.Runtime.Serialization.DataMember(Name="hook")]
		public HookFields Hook1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HookFields
	{
		
		/// <summary>
		/// Hook creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Event associated with Hook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public string Event { get; set; }
		
		/// <summary>
		/// Unique identifier of the Hook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Hook name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Hook URL to be notified
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HookEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="hook")]
		public HookEditFields Hook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HookEditFields
	{
		
		/// <summary>
		/// Event associated with Hook
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public HookEditFieldsEvent Event { get; set; }
		
		/// <summary>
		/// Hook URL to be notified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HookEditFieldsEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="order_updated")]
		order_updated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="order_pending_payment")]
		order_pending_payment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="order_paid")]
		order_paid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="order_shipped")]
		order_shipped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="order_canceled")]
		order_canceled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="order_abandoned")]
		order_abandoned = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_created")]
		product_created = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_updated")]
		product_updated = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="product_deleted")]
		product_deleted = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer_created")]
		customer_created = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer_updated")]
		customer_updated = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer_deleted")]
		customer_deleted = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Id
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageFields Image1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageFields
	{
		
		/// <summary>
		/// Unique identifier of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Position of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// Complete URL of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageEditFields Image { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageEditFields
	{
		
		/// <summary>
		/// Complete URL of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JSApp
	{
		
		/// <summary>
		/// Element of Template to inject HTML
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="element")]
		public string Element { get; set; }
		
		/// <summary>
		/// Template of Store Theme to inject HTML
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// Url of the HTML to inject
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JSAppEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="app")]
		public JSApp App { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Language
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewPartnerStore
	{
		
		[System.Runtime.Serialization.DataMember(Name="store")]
		public NewPartnerStoreStore Store { get; set; }
	}
	
	public class NewPartnerStoreStore
	{
		
		/// <summary>
		/// New Store code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Partner email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_partner")]
		public string Email_partner { get; set; }
		
		/// <summary>
		/// New Store name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// New Store redirect url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewVsReturning
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public System.Nullable<System.Int32> New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returning")]
		public System.Nullable<System.Int32> Returning { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFound
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderFields Order1 { get; set; }
	}
	
	/// <summary>
	/// Additional field of an order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderAdditionalFields
	{
		
		/// <summary>
		/// Label of the additional field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Value of the additional field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderBillingAddress
	{
		
		/// <summary>
		/// Address of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country code of the Order's Billing Address (ISO 3166-1 alpha-2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Country name of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
		
		/// <summary>
		/// Municipality of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="municipality")]
		public string Municipality { get; set; }
		
		/// <summary>
		/// Name of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Postal code of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal")]
		public string Postal { get; set; }
		
		/// <summary>
		/// Region code of the Order's Billing Address (Use the FIPS standard - http://www.geonames.org/countries/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street number of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_number")]
		public System.Nullable<System.Double> Street_number { get; set; }
		
		/// <summary>
		/// Surname of the Order's Billing Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderCreateFields Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderCreateFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public CustomerFieldsWithBillingAddressAndShippingAddressFields Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public OrderProductOrderCreate[] Products { get; set; }
		
		/// <summary>
		/// Shipping method id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_method_id")]
		public System.Nullable<System.Int32> Shipping_method_id { get; set; }
		
		/// <summary>
		/// Shipping method name e.g. Royal Mail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_method_name")]
		public string Shipping_method_name { get; set; }
		
		/// <summary>
		/// Shipping method's price (applicable if shipping_method_name is provided instead of a shipping_method_id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_price")]
		public System.Nullable<System.Single> Shipping_price { get; set; }
		
		/// <summary>
		/// Status of the Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OrderCreateFieldsStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderProductOrderCreate
	{
		
		/// <summary>
		/// Discount of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Single> Discount { get; set; }
		
		/// <summary>
		/// Unique identifier of the original Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Price of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Single> Price { get; set; }
		
		/// <summary>
		/// Price of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qty")]
		public System.Nullable<System.Int32> Qty { get; set; }
		
		/// <summary>
		/// Unique identifier of the original Product Variant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant_id")]
		public System.Nullable<System.Int32> Variant_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderCreateFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Abandoned")]
		Abandoned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Canceled")]
		Canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending Payment")]
		Pending_Payment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Paid")]
		Paid = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderEditFields Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderEditFields
	{
		
		/// <summary>
		/// Array of additional fields for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_fields")]
		public OrderAdditionalFields[] Additional_fields { get; set; }
		
		/// <summary>
		/// Additional information for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_information")]
		public string Additional_information { get; set; }
		
		/// <summary>
		/// Status of the Order Shipping
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipment_status")]
		public System.Nullable<OrderEditFieldsShipment_status> Shipment_status { get; set; }
		
		/// <summary>
		/// Status of the Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OrderEditFieldsStatus> Status { get; set; }
		
		/// <summary>
		/// Shipping Company used for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_company")]
		public string Tracking_company { get; set; }
		
		/// <summary>
		/// Shipping Tracking Number used for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_number")]
		public string Tracking_number { get; set; }
		
		/// <summary>
		/// URL to check delivery information for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_url")]
		public string Tracking_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderEditFieldsShipment_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requested")]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_transit")]
		in_transit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delivered")]
		delivered = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pickup_available")]
		pickup_available = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderEditFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Abandoned")]
		Abandoned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Canceled")]
		Canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending Payment")]
		Pending_Payment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Paid")]
		Paid = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderFields
	{
		
		/// <summary>
		/// Array of additional fields for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_fields")]
		public OrderAdditionalFields[] Additional_fields { get; set; }
		
		/// <summary>
		/// Additional information for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_information")]
		public string Additional_information { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public OrderBillingAddress Billing_address { get; set; }
		
		/// <summary>
		/// Store Checkout Order URL for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout_url")]
		public string Checkout_url { get; set; }
		
		/// <summary>
		/// Promotion Coupons used on the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coupons")]
		public string Coupons { get; set; }
		
		/// <summary>
		/// Order date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Currency of the Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Discount value for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Single> Discount { get; set; }
		
		/// <summary>
		/// Duplicate Order URL for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicate_url")]
		public string Duplicate_url { get; set; }
		
		/// <summary>
		/// Rate id for selected External Shipping Method rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_shipping_rate_id")]
		public string External_shipping_rate_id { get; set; }
		
		/// <summary>
		/// Unique identifier of the Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Payment information for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_information")]
		public string Payment_information { get; set; }
		
		/// <summary>
		/// Payment Method name used e.g. PayPal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_name")]
		public string Payment_method_name { get; set; }
		
		/// <summary>
		/// Payment Method type used e.g. paypal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_type")]
		public string Payment_method_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public OrderProduct[] Products { get; set; }
		
		/// <summary>
		/// Recovery Order URL for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recovery_url")]
		public string Recovery_url { get; set; }
		
		/// <summary>
		/// Shipment Status for Order Fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipment_status")]
		public System.Nullable<OrderFieldsShipment_status> Shipment_status { get; set; }
		
		/// <summary>
		/// Shipping value for the given Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public System.Nullable<System.Single> Shipping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public OrderShippingAddress Shipping_address { get; set; }
		
		/// <summary>
		/// Shipping Discount value for the given order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_discount")]
		public System.Nullable<System.Single> Shipping_discount { get; set; }
		
		/// <summary>
		/// Shipping method e.g. Royal Mail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_method_id")]
		public System.Nullable<System.Int32> Shipping_method_id { get; set; }
		
		/// <summary>
		/// Shipping method e.g. Royal Mail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_method_name")]
		public string Shipping_method_name { get; set; }
		
		/// <summary>
		/// Shipping option for this order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_option")]
		public System.Nullable<OrderFieldsShipping_option> Shipping_option { get; set; }
		
		/// <summary>
		/// False if the order is digital.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_required")]
		public System.Nullable<System.Boolean> Shipping_required { get; set; }
		
		/// <summary>
		/// Shipping Tax value for the given order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_tax")]
		public System.Nullable<System.Single> Shipping_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_taxes")]
		public OrderShippingTax[] Shipping_taxes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public TrafficSource Source { get; set; }
		
		/// <summary>
		/// Status of the Order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OrderFieldsStatus> Status { get; set; }
		
		/// <summary>
		/// Subtotal value for the given Order. Excluding taxes, shipping and discounts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public System.Nullable<System.Single> Subtotal { get; set; }
		
		/// <summary>
		/// Tax value for the given order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Single> Tax { get; set; }
		
		/// <summary>
		/// Total value for the given Order. Including taxes, shipping and discounts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// Company Used for Order Fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_company")]
		public string Tracking_company { get; set; }
		
		/// <summary>
		/// Tracking Number for Order Fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_number")]
		public string Tracking_number { get; set; }
		
		/// <summary>
		/// Tracking URL for Order Fulfillment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking_url")]
		public string Tracking_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderProduct
	{
		
		/// <summary>
		/// Discount of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Single> Discount { get; set; }
		
		/// <summary>
		/// Unique identifier of the original Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Image URL of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Name of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Price of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Single> Price { get; set; }
		
		/// <summary>
		/// Price of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qty")]
		public System.Nullable<System.Int32> Qty { get; set; }
		
		/// <summary>
		/// Stock Keeping Unit of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public OrderProductTax[] Taxes { get; set; }
		
		/// <summary>
		/// Unique identifier of the original Product Variant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant_id")]
		public System.Nullable<System.Int32> Variant_id { get; set; }
		
		/// <summary>
		/// Weight of the Order Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Single> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderProductTax
	{
		
		/// <summary>
		/// False if rate is a percentage and true if rate is monetary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public System.Nullable<System.Boolean> Fixed { get; set; }
		
		/// <summary>
		/// Unique identifier of the Order Product Tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the category that the tax is associated with or the tax name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tax rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Single> Rate { get; set; }
		
		/// <summary>
		/// False if tax is not included on product price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_on_product_price")]
		public System.Nullable<System.Boolean> Tax_on_product_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFieldsShipment_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delivered")]
		delivered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="requested")]
		requested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_transit")]
		in_transit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pickup_available")]
		pickup_available = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFieldsShipping_option
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="delivery")]
		delivery = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="store_pickup")]
		store_pickup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no_shipping")]
		no_shipping = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderShippingTax
	{
		
		/// <summary>
		/// Code of the associated country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// False if rate is a percentage and true if rate is monetary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public System.Nullable<System.Boolean> Fixed { get; set; }
		
		/// <summary>
		/// Unique identifier of the Order Shipping Tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Tax name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Tax rate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Single> Rate { get; set; }
		
		/// <summary>
		/// Code of the associated region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// False if shipping tax is not included on shipping price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_on_shipping_price")]
		public System.Nullable<System.Boolean> Tax_on_shipping_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Abandoned")]
		Abandoned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Canceled")]
		Canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending Payment")]
		Pending_Payment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Paid")]
		Paid = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHistory
	{
		
		[System.Runtime.Serialization.DataMember(Name="order_history")]
		public OrderHistoryFields Order_history { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHistoryFields
	{
		
		/// <summary>
		/// Creation date of the order history
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Unique identifier of the Order History
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Message of the Order History
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHistoryEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="order_history")]
		public OrderHistoryEditFields Order_history { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderHistoryEditFields
	{
		
		/// <summary>
		/// Message of the Order History
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderShippingAddress
	{
		
		/// <summary>
		/// Address of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country code of the Order's Shipping Address (ISO 3166-1 alpha-2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Country name of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_name")]
		public string Country_name { get; set; }
		
		/// <summary>
		/// Latitude of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// Municipality of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="municipality")]
		public string Municipality { get; set; }
		
		/// <summary>
		/// Name of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Postal code of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal")]
		public string Postal { get; set; }
		
		/// <summary>
		/// Region code of the Order's Shipping Address (Use the FIPS standard - http://www.geonames.org/countries/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Street number of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_number")]
		public System.Nullable<System.Double> Street_number { get; set; }
		
		/// <summary>
		/// Surname of the Order's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrdersData
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Single> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Single> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Total amount paid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paid")]
		public System.Nullable<System.Single> Paid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public System.Nullable<System.Single> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PageFields Page1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageFields
	{
		
		/// <summary>
		/// Body of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Page categories to which the Page belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public PageCategory[] Categories { get; set; }
		
		/// <summary>
		/// Id of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Image of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public PageFieldsImage Image { get; set; }
		
		/// <summary>
		/// True if it is a legal page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legal")]
		public System.Nullable<System.Boolean> Legal { get; set; }
		
		/// <summary>
		/// Meta description of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta_description")]
		public string Meta_description { get; set; }
		
		/// <summary>
		/// Meta title of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_title")]
		public string Page_title { get; set; }
		
		/// <summary>
		/// URL of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink")]
		public string Permalink { get; set; }
		
		/// <summary>
		/// Status of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PageFieldsStatus> Status { get; set; }
		
		/// <summary>
		/// Template of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public PageTemplate Template { get; set; }
		
		/// <summary>
		/// Title of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
	}
	
	public class PageFieldsImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PageFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draft")]
		draft = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hidden")]
		hidden = 2,
	}
	
	/// <summary>
	/// Template of the Page
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageModify
	{
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PageModifyFields Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageModifyFields
	{
		
		/// <summary>
		/// Body of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Page categories to which the Page belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public PageCategory[] Categories { get; set; }
		
		/// <summary>
		/// Image of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public PageModifyFieldsImage Image { get; set; }
		
		/// <summary>
		/// Meta description of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta_description")]
		public string Meta_description { get; set; }
		
		/// <summary>
		/// Meta title of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_title")]
		public string Page_title { get; set; }
		
		/// <summary>
		/// URL of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink")]
		public string Permalink { get; set; }
		
		/// <summary>
		/// Status of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PageModifyFieldsStatus> Status { get; set; }
		
		/// <summary>
		/// ID of the Page template. Use null for the blank layout ('None')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public System.Nullable<System.Int32> Template { get; set; }
		
		/// <summary>
		/// Title of the Page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class PageModifyFieldsImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PageModifyFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draft")]
		draft = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hidden")]
		hidden = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerError
	{
		
		/// <summary>
		/// True when an error occurs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public System.Nullable<System.Boolean> Error { get; set; }
		
		/// <summary>
		/// Field causing the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Message describing the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerStoreCode
	{
		
		[System.Runtime.Serialization.DataMember(Name="store")]
		public PartnerStoreCodeStore Store { get; set; }
	}
	
	public class PartnerStoreCodeStore
	{
		
		/// <summary>
		/// Store code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerStoreCreate
	{
		
		/// <summary>
		/// Partner code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aff")]
		public string Aff { get; set; }
		
		/// <summary>
		/// New Store administrator email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ISO3166-2 code for the store langauge.
		/// </summary>
		[System.ComponentModel.DefaultValue("en")]
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; } = "en";
		
		/// <summary>
		/// New Store administrator password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// New Store plan name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan_name")]
		public System.Nullable<PartnerStoreCreatePlan_name> Plan_name { get; set; }
		
		/// <summary>
		/// Indicates whether the request should fail if the Store name provided is already in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reject_duplicates")]
		public System.Nullable<System.Boolean> Reject_duplicates { get; set; }
		
		/// <summary>
		/// New Store name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="store_name")]
		public string Store_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartnerStoreCreatePlan_name
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pro")]
		pro = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plus")]
		plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="premium")]
		premium = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartnerStoreStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PartnerStoreStatusStatus Status { get; set; }
	}
	
	public class PartnerStoreStatusStatus
	{
		
		/// <summary>
		/// Message describing the current creation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Percentage of the creation process that was already completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentMethod
	{
		
		[System.Runtime.Serialization.DataMember(Name="payment_method")]
		public PaymentMethodFields Payment_method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentMethodFields
	{
		
		/// <summary>
		/// Unique identifier of the Payment Method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the Payment Method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the Payment Method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PaymentMethodFieldsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PaymentMethodFieldsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="manual")]
		manual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paypal")]
		paypal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pagseguro")]
		pagseguro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moneybookers")]
		moneybookers = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webpay_cl")]
		webpay_cl = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="easypay")]
		easypay = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="easypaycc")]
		easypaycc = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="easypayboleto")]
		easypayboleto = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ideal_basic")]
		ideal_basic = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hipay")]
		hipay = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="khipu")]
		khipu = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mercado_pago")]
		mercado_pago = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ifthenpay")]
		ifthenpay = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eupago")]
		eupago = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stripe")]
		stripe = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="payu")]
		payu = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="servipag")]
		servipag = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentMethodFreq
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductFields Product1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductFields
	{
		
		/// <summary>
		/// Barcode of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public string Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public CategoryFields[] Categories { get; set; }
		
		/// <summary>
		/// Date of product creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Description of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Diameter of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diameter")]
		public System.Nullable<System.Single> Diameter { get; set; }
		
		/// <summary>
		/// Discount of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Single> Discount { get; set; }
		
		/// <summary>
		/// True if the product is featured
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featured")]
		public System.Nullable<System.Boolean> Featured { get; set; }
		
		/// <summary>
		/// Category of a Product based on the Google product taxonomy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="google_product_category")]
		public string Google_product_category { get; set; }
		
		/// <summary>
		/// Height of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Single> Height { get; set; }
		
		/// <summary>
		/// Unique identifier of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageFields[] Images { get; set; }
		
		/// <summary>
		/// Length of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Single> Length { get; set; }
		
		/// <summary>
		/// Name of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Format the product package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package_format")]
		public System.Nullable<ProductFieldsPackage_format> Package_format { get; set; }
		
		/// <summary>
		/// Product unique URL path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink")]
		public string Permalink { get; set; }
		
		/// <summary>
		/// Price of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Single> Price { get; set; }
		
		/// <summary>
		/// Stock Keeping Unit of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Status of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ProductFieldsStatus> Status { get; set; }
		
		/// <summary>
		/// Quantity in stock for the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock")]
		public System.Nullable<System.Int32> Stock { get; set; }
		
		/// <summary>
		/// True if the Product has unlimited stock
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock_unlimited")]
		public System.Nullable<System.Boolean> Stock_unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public VariantFields[] Variants { get; set; }
		
		/// <summary>
		/// Weight of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Single> Weight { get; set; }
		
		/// <summary>
		/// Width of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Single> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductFieldsPackage_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="box")]
		box = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cylinder")]
		cylinder = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-available")]
		notMinusavailable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantFields
	{
		
		/// <summary>
		/// Unique identifier of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageFields Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ProductOptionVariantEdit[] Options { get; set; }
		
		/// <summary>
		/// Price of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Single> Price { get; set; }
		
		/// <summary>
		/// Stock Keeping Unit of the Product's Variant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Quantity in stock for the Product's Variant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock")]
		public System.Nullable<System.Int32> Stock { get; set; }
		
		/// <summary>
		/// True if the Product's Variant has unlimited stock
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock_unlimited")]
		public System.Nullable<System.Boolean> Stock_unlimited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionVariantEdit
	{
		
		/// <summary>
		/// Name of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Id of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_option_id")]
		public System.Nullable<System.Int32> Product_option_id { get; set; }
		
		/// <summary>
		/// position of product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_option_position")]
		public System.Nullable<System.Int32> Product_option_position { get; set; }
		
		/// <summary>
		/// Id of product option value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_option_value_id")]
		public System.Nullable<System.Int32> Product_option_value_id { get; set; }
		
		/// <summary>
		/// position of product option value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_value_position")]
		public System.Nullable<System.Int32> Product_value_position { get; set; }
		
		/// <summary>
		/// Value of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductCustomField
	{
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public ProductCustomFieldFields Field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductCustomFieldFields
	{
		
		/// <summary>
		/// Unique identifier of the ProductCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_field_id")]
		public System.Nullable<System.Int32> Custom_field_id { get; set; }
		
		/// <summary>
		/// Unique identifier of the ProductCustomField value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The label for the ProductCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The type of the ProductCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The value for the ProductCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// The value id for the ProductCustomField
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value_id")]
		public string Value_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductEditFields Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductEditFields
	{
		
		/// <summary>
		/// Barcode of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barcode")]
		public string Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public CategoryFields[] Categories { get; set; }
		
		/// <summary>
		/// Description of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Diameter of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diameter")]
		public System.Nullable<System.Single> Diameter { get; set; }
		
		/// <summary>
		/// True if the product is featured
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featured")]
		public System.Nullable<System.Boolean> Featured { get; set; }
		
		/// <summary>
		/// Category of a Product based on the Google product taxonomy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="google_product_category")]
		public string Google_product_category { get; set; }
		
		/// <summary>
		/// Height of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Single> Height { get; set; }
		
		/// <summary>
		/// Length of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Single> Length { get; set; }
		
		/// <summary>
		/// SEO meta description of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meta_description")]
		public string Meta_description { get; set; }
		
		/// <summary>
		/// Name of the product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Format the product package
		/// </summary>
		[System.ComponentModel.DefaultValue(ProductFieldsPackage_format.box)]
		[System.Runtime.Serialization.DataMember(Name="package_format")]
		public ProductFieldsPackage_format Package_format { get; set; } = ProductFieldsPackage_format.box;
		
		/// <summary>
		/// SEO title of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_title")]
		public string Page_title { get; set; }
		
		/// <summary>
		/// Product unique URL path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permalink")]
		public string Permalink { get; set; }
		
		/// <summary>
		/// Price of the product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public float Price { get; set; }
		
		/// <summary>
		/// False if the product is digital
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_required")]
		public System.Nullable<System.Boolean> Shipping_required { get; set; }
		
		/// <summary>
		/// Stock Keeping Unit of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Status of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ProductEditFieldsStatus> Status { get; set; }
		
		/// <summary>
		/// Quantity in stock for the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock")]
		public System.Nullable<System.Int32> Stock { get; set; }
		
		/// <summary>
		/// True if the Product has unlimited stock
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock_unlimited")]
		public System.Nullable<System.Boolean> Stock_unlimited { get; set; }
		
		/// <summary>
		/// Weight of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Single> Weight { get; set; }
		
		/// <summary>
		/// Width of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Single> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductEditFieldsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-available")]
		notMinusavailable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="option")]
		public ProductOptionFields Option { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionFields
	{
		
		/// <summary>
		/// Unique identifier of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="option_type")]
		public System.Nullable<ProductOptionFieldsOption_type> Option_type { get; set; }
		
		/// <summary>
		/// Position of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ProductOptionValueFields[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductOptionFieldsOption_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="option")]
		option = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="input")]
		input = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text")]
		text = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="file")]
		file = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionValueFields
	{
		
		/// <summary>
		/// Unique identifier of the product option value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the product option value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Position of the product option value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_option")]
		public ProductOption Product_option { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public Variant[] Variants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Variant
	{
		
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public VariantFields Variant1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="option")]
		public ProductOptionEditFields Option { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionEditFields
	{
		
		/// <summary>
		/// Name of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="option_type")]
		public ProductOptionFieldsOption_type Option_type { get; set; }
		
		/// <summary>
		/// Position of the product option
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProductOptionValueFields Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionValueEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProductOptionValueEditFields Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductOptionValueEditFields
	{
		
		/// <summary>
		/// Name of the product option value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Position of the product option value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Promotion
	{
		
		[System.Runtime.Serialization.DataMember(Name="promotion")]
		public PromotionFields Promotion1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PromotionFields
	{
		
		/// <summary>
		/// Creation date of the promotion (requires 'lasts' param - 'date')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begins_at")]
		public string Begins_at { get; set; }
		
		/// <summary>
		/// Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Id[] Categories { get; set; }
		
		/// <summary>
		/// Code of the promotion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Minimum order amount to validate the promotion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition_price")]
		public System.Nullable<System.Single> Condition_price { get; set; }
		
		/// <summary>
		/// Minimum quantity of ordered itens to validate the promotion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition_qty")]
		public System.Nullable<System.Int32> Condition_qty { get; set; }
		
		/// <summary>
		/// True if the promotion can be acumulated with others
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public System.Nullable<System.Boolean> Cumulative { get; set; }
		
		/// <summary>
		/// Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_categories")]
		public Id[] Customer_categories { get; set; }
		
		/// <summary>
		/// Fixed discount amount of the promotion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_amount_fix")]
		public System.Nullable<System.Single> Discount_amount_fix { get; set; }
		
		/// <summary>
		/// Percentual discount amount of the promotion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_amount_percent")]
		public System.Nullable<System.Single> Discount_amount_percent { get; set; }
		
		/// <summary>
		/// Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_target")]
		public string Discount_target { get; set; }
		
		/// <summary>
		/// If the promotion is currently enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Expiration date of the promotion (requires 'lasts' param - 'date')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// Unique identifier of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Controls when the promotion will expire ('none', 'date', 'max_times_used')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lasts")]
		public string Lasts { get; set; }
		
		/// <summary>
		/// Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_times_used")]
		public System.Nullable<System.Int32> Max_times_used { get; set; }
		
		/// <summary>
		/// Name of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Id[] Products { get; set; }
		
		/// <summary>
		/// Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products_x")]
		public Id[] Products_x { get; set; }
		
		/// <summary>
		/// Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_x")]
		public System.Nullable<System.Int32> Quantity_x { get; set; }
		
		/// <summary>
		/// Status of the promotion ('active', 'expired')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Amount of times the promotion was used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_used")]
		public System.Nullable<System.Int32> Times_used { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PromotionEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="promotion")]
		public PromotionEditFields Promotion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PromotionEditFields
	{
		
		/// <summary>
		/// Creation date of the promotion (requires 'lasts' param - 'date')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begins_at")]
		public string Begins_at { get; set; }
		
		/// <summary>
		/// Controls the promotion's condition ('none', 'price', 'qty')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buys_at_least")]
		public string Buys_at_least { get; set; }
		
		/// <summary>
		/// Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Id[] Categories { get; set; }
		
		/// <summary>
		/// Code of the promotion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Minimum order amount to validate the promotion (requires 'buys_at_least' param - 'price')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition_price")]
		public System.Nullable<System.Single> Condition_price { get; set; }
		
		/// <summary>
		/// Minimum quantity of ordered itens to validate the promotion (requires 'buys_at_least' param - 'qty')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition_qty")]
		public System.Nullable<System.Int32> Condition_qty { get; set; }
		
		/// <summary>
		/// True if the promotion can be acumulated with others
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative")]
		public System.Nullable<System.Boolean> Cumulative { get; set; }
		
		/// <summary>
		/// Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_categories")]
		public Id[] Customer_categories { get; set; }
		
		/// <summary>
		/// Controls to which customers the promotion will be applied ('all', 'loggedin', 'categories', 'guests')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public string Customers { get; set; }
		
		/// <summary>
		/// Fixed discount amount of the promotion (requires 'type' param - 'fix')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_amount_fix")]
		public System.Nullable<System.Single> Discount_amount_fix { get; set; }
		
		/// <summary>
		/// Percentual discount amount of the promotion (requires 'type' param - 'percentage')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_amount_percent")]
		public System.Nullable<System.Single> Discount_amount_percent { get; set; }
		
		/// <summary>
		/// Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discount_target")]
		public string Discount_target { get; set; }
		
		/// <summary>
		/// If the promotion is to be temporarily disabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Expiration date of the promotion (requires 'lasts' param - 'date')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public string Expires_at { get; set; }
		
		/// <summary>
		/// Controls when the promotion will expire ('none', 'date', 'max_times_used')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lasts")]
		public string Lasts { get; set; }
		
		/// <summary>
		/// Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max_times_used")]
		public System.Nullable<System.Int32> Max_times_used { get; set; }
		
		/// <summary>
		/// Name of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Id[] Products { get; set; }
		
		/// <summary>
		/// Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products_x")]
		public Id[] Products_x { get; set; }
		
		/// <summary>
		/// Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_x")]
		public System.Nullable<System.Int32> Quantity_x { get; set; }
		
		/// <summary>
		/// Controls if the discount will be a fixed area ('fix', 'percentage')
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Referrer
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Region
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingAddress
	{
		
		/// <summary>
		/// Address of the Customer's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of the Customer's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country code of the Customer's Shipping Address (ISO 3166-1 alpha-2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Municipality of the Customer's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="municipality")]
		public string Municipality { get; set; }
		
		/// <summary>
		/// Name of the Customer's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Postal code of the Customer's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal")]
		public string Postal { get; set; }
		
		/// <summary>
		/// Region code of the Customer's Shipping Address (Use the FIPS standard - http://www.geonames.org/countries/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Surname of the Customer's Shipping Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingMethod
	{
		
		[System.Runtime.Serialization.DataMember(Name="shipping_method")]
		public ShippingMethodFields Shipping_method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingMethodFields
	{
		
		/// <summary>
		/// URL that receives the shipping data and returns rates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback_url")]
		public string Callback_url { get; set; }
		
		/// <summary>
		/// City/Municipality name of origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// URL that returns available shipping services
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetch_services_url")]
		public string Fetch_services_url { get; set; }
		
		/// <summary>
		/// Unique identifier of the Shipping Method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the Shipping Method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Postal/Zipcode of origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal")]
		public string Postal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public ShippingService[] Services { get; set; }
		
		/// <summary>
		/// State/Region code of origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Type of the Shipping Method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ShippingMethodFieldsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingService
	{
		
		/// <summary>
		/// Unique identifier of the Shipping Service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the Shipping Service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Code of the Shipping Service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_code")]
		public string Service_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShippingMethodFieldsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="free")]
		free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tables")]
		tables = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="correiosbr")]
		correiosbr = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="correos_chile")]
		correos_chile = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chilexpress")]
		chilexpress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="flat")]
		flat = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ups")]
		ups = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external")]
		external = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingMethodEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="shipping_method")]
		public ShippingMethodEditShipping_method Shipping_method { get; set; }
	}
	
	public class ShippingMethodEditShipping_method
	{
		
		/// <summary>
		/// URL that receives the shipping data and returns rates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback_url")]
		public string Callback_url { get; set; }
		
		/// <summary>
		/// City/Municipality name of origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// URL that returns available shipping services
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetch_services_url")]
		public string Fetch_services_url { get; set; }
		
		/// <summary>
		/// Name of the Shipping Method
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Postal/Zipcode of origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal")]
		public string Postal { get; set; }
		
		/// <summary>
		/// State/Region code of origin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Token used to authentica on the the fetch_services_url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingMethodFreq
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusInvalid
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Store
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public StoreAddress Address { get; set; }
		
		/// <summary>
		/// Store Code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Store Country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Store Currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Store Admin Email
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Store Hooks Auth token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hooks_token")]
		public string Hooks_token { get; set; }
		
		/// <summary>
		/// Store Logo URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Store Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Store Timezone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Store URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Store Weight Unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight_unit")]
		public string Weight_unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreAddress
	{
		
		/// <summary>
		/// Address of the Store's Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of the Store's Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country of the Store's Address (ISO 3166-1 alpha-2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Country code of the Store's Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// Postal code of the Store's Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal")]
		public string Postal { get; set; }
		
		/// <summary>
		/// Region of the Store's Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Region code of the Store's Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region_code")]
		public string Region_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StoreStats
	{
		
		/// <summary>
		/// Top 10 best sold products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="best_sold")]
		public BestSold[] Best_sold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversions")]
		public StoreStatsConversions Conversions { get; set; }
		
		/// <summary>
		/// Store currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Visits per day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daily_visits")]
		public DailyVisits[] Daily_visits { get; set; }
		
		/// <summary>
		/// Statistics start date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_vs_returning_customers")]
		public StoreStatsNew_vs_returning_customers New_vs_returning_customers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new_vs_returning_orders")]
		public StoreStatsNew_vs_returning_orders New_vs_returning_orders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orders")]
		public StoreStatsOrders Orders { get; set; }
		
		/// <summary>
		/// Store payment methods and their frequency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_methods")]
		public PaymentMethodFreq[] Payment_methods { get; set; }
		
		/// <summary>
		/// Top 10 referrer sources and their frequency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referrers")]
		public Referrer[] Referrers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region_orders")]
		public StoreStatsRegion_orders Region_orders { get; set; }
		
		/// <summary>
		/// Number of times each search was conducted under the form of an aggregation query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_frequencies_all")]
		public string[] Search_frequencies_all { get; set; }
		
		/// <summary>
		/// Number of times each search with zero results was conducted under the form of an aggregation query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="search_frequencies_without_results")]
		public string[] Search_frequencies_without_results { get; set; }
		
		/// <summary>
		/// Store shipping methods and their frequency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping_methods")]
		public ShippingMethodFreq[] Shipping_methods { get; set; }
		
		/// <summary>
		/// Statistics end date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Type of store traffic and its frequency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traffic_type")]
		public TrafficType[] Traffic_type { get; set; }
		
		/// <summary>
		/// Total number of visits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visits")]
		public System.Nullable<System.Int32> Visits { get; set; }
	}
	
	public class StoreStatsConversions
	{
		
		/// <summary>
		/// Total add to cart conversions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_to_cart")]
		public System.Nullable<System.Single> Added_to_cart { get; set; }
		
		/// <summary>
		/// Total checkout conversions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkout")]
		public System.Nullable<System.Single> Checkout { get; set; }
		
		/// <summary>
		/// Total paid conversions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paid")]
		public System.Nullable<System.Single> Paid { get; set; }
	}
	
	public class StoreStatsNew_vs_returning_customers
	{
		
		/// <summary>
		/// Global percentage of new vs returning customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global")]
		public System.Nullable<System.Int32> Global { get; set; }
		
		/// <summary>
		/// Numbers of new and returning customers per day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_day")]
		public NewVsReturning[] Per_day { get; set; }
	}
	
	public class StoreStatsNew_vs_returning_orders
	{
		
		/// <summary>
		/// Global percentage of new vs returning customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global")]
		public System.Nullable<System.Int32> Global { get; set; }
		
		/// <summary>
		/// Numbers of new and returning customers per day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="per_day")]
		public NewVsReturning[] Per_day { get; set; }
	}
	
	public class StoreStatsOrders
	{
		
		/// <summary>
		/// Average order amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Single> Average { get; set; }
		
		/// <summary>
		/// Total number of orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Orders data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public OrdersData[] Data { get; set; }
		
		/// <summary>
		/// Total amount from all orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	public class StoreStatsRegion_orders
	{
		
		/// <summary>
		/// Can be 'regions' when orders are specific of 1 country or 'auto'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_mode")]
		public string Display_mode { get; set; }
		
		/// <summary>
		/// Orders per country and region(inside the country).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions_orders")]
		public CountryOrders[] Regions_orders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrafficType
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tax
	{
		
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public TaxFields Tax1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxFields
	{
		
		/// <summary>
		/// Unique identifier of the category of the Tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public System.Nullable<System.Int32> Category_id { get; set; }
		
		/// <summary>
		/// Country name where the Tax applies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// True if the tax has a fixed valued amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public System.Nullable<System.Boolean> Fixed { get; set; }
		
		/// <summary>
		/// Unique identifier of the Tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name that identifies tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Region name where the Tax applies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// True if the tax should be applied to shipping costs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public System.Nullable<System.Boolean> Shipping { get; set; }
		
		/// <summary>
		/// Tax value for the given Tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_amount")]
		public System.Nullable<System.Single> Tax_amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public TaxEditFields Tax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxEditFields
	{
		
		/// <summary>
		/// Unique identifier of the category of the Tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public System.Nullable<System.Int32> Category_id { get; set; }
		
		/// <summary>
		/// Country where the Tax applies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// True if the tax has a fixed valued amount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public System.Nullable<System.Boolean> Fixed { get; set; }
		
		/// <summary>
		/// Name that identifies tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Region where the Tax applies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// True if the tax should be applied to shipping costs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipping")]
		public System.Nullable<System.Boolean> Shipping { get; set; }
		
		/// <summary>
		/// Tax value for the given Tax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax")]
		public System.Nullable<System.Single> Tax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrafficSource
	{
		
		/// <summary>
		/// The campaign that referred the customer to the checkout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public string Campaign { get; set; }
		
		/// <summary>
		/// The first url visited by the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_page_visited")]
		public string First_page_visited { get; set; }
		
		/// <summary>
		/// The date when the customer visited the first page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_page_visited_at")]
		public string First_page_visited_at { get; set; }
		
		/// <summary>
		/// The medium that referred the customer to the checkout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medium")]
		public string Medium { get; set; }
		
		/// <summary>
		/// The code that referred the customer to the checkout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referral_code")]
		public string Referral_code { get; set; }
		
		/// <summary>
		/// The source that referred the customer to the website
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referral_source")]
		public string Referral_source { get; set; }
		
		/// <summary>
		/// The website that referred the customer to the checkout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referral_url")]
		public string Referral_url { get; set; }
		
		/// <summary>
		/// Where the checkout originated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source_name")]
		public string Source_name { get; set; }
		
		/// <summary>
		/// User agent of the referred request to checkout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_agent")]
		public string User_agent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantEdit
	{
		
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public VariantEditFields Variant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariantEditFields
	{
		
		/// <summary>
		/// Unique identifier of the product image to associate with this variant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_id")]
		public System.Nullable<System.Int32> Image_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public ProductOptionVariantEdit[] Options { get; set; }
		
		/// <summary>
		/// Price of the product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Single> Price { get; set; }
		
		/// <summary>
		/// Stock Keeping Unit of the Product's Variant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		/// <summary>
		/// Quantity in stock for the Product's Variant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock")]
		public System.Nullable<System.Int32> Stock { get; set; }
		
		/// <summary>
		/// True if the Product's Variant has unlimited stock
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stock_unlimited")]
		public System.Nullable<System.Boolean> Stock_unlimited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Type
	{
		
		/// <summary>
		/// Store code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public StoreStats Stats { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve all Categories.
		/// Categories_jsonGetByLoginAndAuthtoken categories.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Category> Categories_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Category.
		/// Category's permalink is automatically generated from the given category's name.
		/// Categories_jsonPostByLoginAndAuthtoken categories.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Category parameters.</param>
		/// <returns>OK</returns>
		public async Task<Category> Categories_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, CategoryEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Categories.
		/// CategoriesCount_jsonGetByLoginAndAuthtoken categories/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Count> CategoriesCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Category.
		/// Categories_id_jsonDeleteByLoginAndAuthtoken categories/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Category</param>
		/// <returns>OK</returns>
		public async Task<string> Categories_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Category.
		/// Categories_id_jsonGetByLoginAndAuthtoken categories/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Category</param>
		/// <returns>The selected Category.</returns>
		public async Task<Category> Categories_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an existing Category.
		/// Categories_id_jsonPutByLoginAndAuthtoken categories/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Category</param>
		/// <param name="requestBody">Category parameters.</param>
		/// <returns>OK</returns>
		public async Task<Category> Categories_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, CategoryEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Checkout Custom Fields.
		/// Checkout_custom_fields_jsonGetByLoginAndAuthtokenAndLimitAndPage checkout_custom_fields.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <returns>An array of Checkout Custom Fields</returns>
		public async Task<CheckoutCustomField[]> Checkout_custom_fields_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkout_custom_fields.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckoutCustomField[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CheckoutCustomField.
		/// Type values can be: input, selection, checkbox, date or text. Area values can be: contact, billing_shipping or other.
		/// Checkout_custom_fields_jsonPostByLoginAndAuthtoken checkout_custom_fields.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">CheckoutCustomField parameters.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutCustomField> Checkout_custom_fields_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, CheckoutCustomFieldEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkout_custom_fields.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckoutCustomField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing CheckoutCustomField.
		/// Checkout_custom_fields_id_jsonDeleteByLoginAndAuthtoken checkout_custom_fields/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CheckoutCustomField</param>
		/// <returns>OK</returns>
		public async Task<string> Checkout_custom_fields_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkout_custom_fields/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single CheckoutCustomField.
		/// Checkout_custom_fields_id_jsonGetByLoginAndAuthtoken checkout_custom_fields/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CheckoutCustomField</param>
		/// <returns>OK</returns>
		public async Task<CheckoutCustomField> Checkout_custom_fields_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkout_custom_fields/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckoutCustomField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a CheckoutCustomField.
		/// Checkout_custom_fields_id_jsonPutByLoginAndAuthtoken checkout_custom_fields/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CheckoutCustomField</param>
		/// <param name="requestBody">CheckoutCustomField parameters.</param>
		/// <returns>OK</returns>
		public async Task<CheckoutCustomField> Checkout_custom_fields_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, CheckoutCustomFieldEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checkout_custom_fields/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckoutCustomField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Countries.
		/// Countries_jsonGetByLoginAndAuthtoken countries.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>An array of Countries</returns>
		public async Task<Country[]> Countries_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "countries.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Country[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Country information.
		/// Countries_country_code_jsonGetByLoginAndAuthtoken countries/{country_code}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="country_code">ISO3166 Country Code</param>
		/// <returns>A Country information object</returns>
		public async Task<Country> Countries_country_code_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, string country_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "countries/"+ (country_code==null? "" : System.Uri.EscapeDataString(country_code))+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Country>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Regions from a single Country.
		/// Countries_country_codeRegions_jsonGetByLoginAndAuthtoken countries/{country_code}/regions.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="country_code">ISO3166 Country Code</param>
		/// <returns>An array of Regions from a single Country</returns>
		public async Task<Region[]> Countries_country_codeRegions_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, string country_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "countries/"+ (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"/regions.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Region[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Region information object.
		/// Countries_country_codeRegions_region_code_jsonGetByLoginAndAuthtoken countries/{country_code}/regions/{region_code}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="country_code">ISO3166 Country Code</param>
		/// <param name="region_code">Region Code</param>
		/// <returns>A Region information object</returns>
		public async Task<Region> Countries_country_codeRegions_region_code_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, string country_code, string region_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "countries/"+ (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"/regions/"+ (region_code==null? "" : System.Uri.EscapeDataString(region_code))+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Region>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Store's Custom Fields.
		/// Custom_fields_jsonGetByLoginAndAuthtoken custom_fields.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>An array of Custom Fields</returns>
		public async Task<CustomField[]> Custom_fields_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomField[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Custom Field.
		/// Custom_fields_jsonPostByLoginAndAuthtoken custom_fields.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Custom Field parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomField> Custom_fields_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, CustomFieldEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing CustomField.
		/// Custom_fields_id_jsonDeleteByLoginAndAuthtoken custom_fields/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomField</param>
		/// <returns>OK</returns>
		public async Task<string> Custom_fields_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single CustomField.
		/// Custom_fields_id_jsonGetByLoginAndAuthtoken custom_fields/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomField</param>
		/// <returns>OK</returns>
		public async Task<CustomField> Custom_fields_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a CustomField.
		/// Custom_fields_id_jsonPutByLoginAndAuthtoken custom_fields/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomField</param>
		/// <param name="requestBody">CustomField parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomField> Custom_fields_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, CustomFieldEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Store's Custom Fields.
		/// Custom_fields_idSelect_options_jsonGetByLoginAndAuthtoken custom_fields/{id}/select_options.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomField</param>
		/// <returns>An array of Custom Fields Select Options</returns>
		public async Task<CustomFieldSelectOption[]> Custom_fields_idSelect_options_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+id+"/select_options.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomFieldSelectOption[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Custom Field Select Option.
		/// Custom_fields_idSelect_options_jsonPostByLoginAndAuthtoken custom_fields/{id}/select_options.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Automatically added</param>
		/// <param name="requestBody">Custom Field Select Option parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomFieldSelectOption> Custom_fields_idSelect_options_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, string id, CustomFieldSelectOptionEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/select_options.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomFieldSelectOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing CustomFieldSelectOption.
		/// Custom_fields_idSelect_options_custom_field_select_option_id_jsonDeleteByLoginAndAuthtoken custom_fields/{id}/select_options/{custom_field_select_option_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomField</param>
		/// <param name="custom_field_select_option_id">Id of the CustomFieldSelectOption</param>
		/// <returns>OK</returns>
		public async Task<string> Custom_fields_idSelect_options_custom_field_select_option_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, int custom_field_select_option_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+id+"/select_options/"+custom_field_select_option_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single SelectOption from a CustomField.
		/// Custom_fields_idSelect_options_custom_field_select_option_id_jsonGetByLoginAndAuthtoken custom_fields/{id}/select_options/{custom_field_select_option_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomField</param>
		/// <param name="custom_field_select_option_id">Id of the CustomFieldSelectOption</param>
		/// <returns>OK</returns>
		public async Task<CustomFieldSelectOption> Custom_fields_idSelect_options_custom_field_select_option_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int custom_field_select_option_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+id+"/select_options/"+custom_field_select_option_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomFieldSelectOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a SelectOption from a CustomField.
		/// Custom_fields_idSelect_options_custom_field_select_option_id_jsonPutByLoginAndAuthtoken custom_fields/{id}/select_options/{custom_field_select_option_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomField</param>
		/// <param name="custom_field_select_option_id">Id of the CustomFieldSelectOption</param>
		/// <param name="requestBody">CustomFieldSelectOption parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomFieldSelectOption> Custom_fields_idSelect_options_custom_field_select_option_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, int custom_field_select_option_id, CustomFieldSelectOptionEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "custom_fields/"+id+"/select_options/"+custom_field_select_option_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomFieldSelectOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Customer Categories.
		/// Customer_categories_jsonGetByLoginAndAuthtokenAndLimitAndPage customer_categories.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <returns>An array of Customer Categories</returns>
		public async Task<CustomerCategory[]> Customer_categories_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCategory[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CustomerCategory.
		/// Customer_categories_jsonPostByLoginAndAuthtoken customer_categories.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">CustomerCategory parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomerCategory> Customer_categories_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, CustomerCategoryEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing CustomerCategory.
		/// Customer_categories_id_jsonDeleteByLoginAndAuthtoken customer_categories/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomerCategory</param>
		/// <returns>OK</returns>
		public async Task<string> Customer_categories_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single CustomerCategory.
		/// Customer_categories_id_jsonGetByLoginAndAuthtoken customer_categories/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomerCategory</param>
		/// <returns>OK</returns>
		public async Task<CustomerCategory> Customer_categories_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a CustomerCategory.
		/// Customer_categories_id_jsonPutByLoginAndAuthtoken customer_categories/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomerCategory</param>
		/// <param name="requestBody">CustomerCategory parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomerCategory> Customer_categories_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, CustomerCategoryEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Customers from an existing CustomerCategory.
		/// Customer_categories_idCustomers_jsonDeleteByLoginAndAuthtoken customer_categories/{id}/customers.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomerCategory</param>
		/// <returns>OK</returns>
		public async Task<string> Customer_categories_idCustomers_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories/"+id+"/customers.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the customers in a CustomerCategory.
		/// Customer_categories_idCustomers_jsonGetByLoginAndAuthtoken customer_categories/{id}/customers.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomerCategory</param>
		/// <returns>OK</returns>
		public async Task<Customer[]> Customer_categories_idCustomers_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories/"+id+"/customers.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds Customers to a CustomerCategory.
		/// Customer_categories_idCustomers_jsonPostByLoginAndAuthtoken customer_categories/{id}/customers.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the CustomerCategory</param>
		/// <param name="requestBody">Customer parameters.</param>
		/// <returns>Array of Customers in the Customer Category</returns>
		public async Task<Customer[]> Customer_categories_idCustomers_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, CustomersToCustomerCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer_categories/"+id+"/customers.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Customers.
		/// Customers_jsonGetByLoginAndAuthtokenAndLimitAndPage customers.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <returns>An array of Orders</returns>
		public async Task<Customer[]> Customers_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Customer.
		/// Customers_jsonPostByLoginAndAuthtoken customers.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Customer parameters.</param>
		/// <returns>OK</returns>
		public async Task<Customer> Customers_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, CustomerWithPasswordNoID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Customers.
		/// CustomersCount_jsonGetByLoginAndAuthtoken customers/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Count> CustomersCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Customer by email.
		/// CustomersEmail_email_jsonGetByLoginAndAuthtoken customers/email/{email}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="email">Email of the Customer</param>
		/// <returns>OK</returns>
		public async Task<Customer> CustomersEmail_email_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/email/"+ (email==null? "" : System.Uri.EscapeDataString(email))+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Customer.
		/// Customers_id_jsonDeleteByLoginAndAuthtoken customers/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <returns>OK</returns>
		public async Task<string> Customers_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Customer by id.
		/// Customers_id_jsonGetByLoginAndAuthtoken customers/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <returns>OK</returns>
		public async Task<Customer> Customers_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a new Customer.
		/// Customers_id_jsonPutByLoginAndAuthtoken customers/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <param name="requestBody">Customer parameters.</param>
		/// <returns>OK</returns>
		public async Task<Customer> Customers_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, CustomerWithPasswordNoID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Customer Additional Field of a Customer.
		/// Customers_idFieldsGetByLoginAndAuthtoken customers/{id}/fields
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <returns>OK</returns>
		public async Task<CustomerAdditionalField[]> Customers_idFieldsGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+"/fields?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerAdditionalField[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds Customer Additional Fields to a Customer.
		/// Customers_idFieldsPostByLoginAndAuthtoken customers/{id}/fields
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <param name="requestBody">Customer Additional Field parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomerAdditionalField> Customers_idFieldsPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, CustomerAdditionalFieldEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+"/fields?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerAdditionalField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Customer Additional Field.
		/// Customers_idFields_field_idDeleteByLoginAndAuthtoken customers/{id}/fields/{field_id}
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <param name="field_id">Id of the Customer Additional Field</param>
		/// <returns>OK</returns>
		public async Task<string> Customers_idFields_field_idDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, int field_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+"/fields/"+field_id+"?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Customer Additional Field.
		/// Customers_idFields_field_idGetByLoginAndAuthtoken customers/{id}/fields/{field_id}
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <param name="field_id">Id of the Customer Additional Field</param>
		/// <returns>OK</returns>
		public async Task<CustomerAdditionalField> Customers_idFields_field_idGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int field_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+"/fields/"+field_id+"?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerAdditionalField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Customer Additional Field.
		/// Customers_idFields_field_idPutByLoginAndAuthtoken customers/{id}/fields/{field_id}
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Customer</param>
		/// <param name="field_id">Id of the Customer Additional Field</param>
		/// <param name="requestBody">Customer Additional Field parameters.</param>
		/// <returns>OK</returns>
		public async Task<CustomerAdditionalField> Customers_idFields_field_idPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, int field_id, CustomerAdditionalFieldEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customers/"+id+"/fields/"+field_id+"?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerAdditionalField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Fulfillments.
		/// Fulfillments_jsonGetByLoginAndAuthtokenAndLimitAndPage fulfillments.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <returns>An array of Fulfillments</returns>
		public async Task<Fulfillment[]> Fulfillments_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fulfillments.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Fulfillment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count all Fulfillments.
		/// FulfillmentsCount_jsonGetByLoginAndAuthtoken fulfillments/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Count> FulfillmentsCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fulfillments/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Fulfillment.
		/// Fulfillments_id_jsonGetByLoginAndAuthtoken fulfillments/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Fulfillment</param>
		/// <returns>OK</returns>
		public async Task<Fulfillment> Fulfillments_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fulfillments/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Fulfillment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Hooks.
		/// Hooks_jsonGetByLoginAndAuthtokenAndLimitAndPage hooks.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <returns>An array of Hooks</returns>
		public async Task<Hook[]> Hooks_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hooks.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hook[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Hook.
		/// Hooks_jsonPostByLoginAndAuthtoken hooks.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Hook parameters.</param>
		/// <returns>OK</returns>
		public async Task<Hook> Hooks_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, HookEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hooks.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Hook.
		/// Hooks_id_jsonDeleteByLoginAndAuthtoken hooks/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Hook</param>
		/// <returns>OK</returns>
		public async Task<string> Hooks_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hooks/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Hook.
		/// Hooks_id_jsonGetByLoginAndAuthtoken hooks/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Hook</param>
		/// <returns>OK</returns>
		public async Task<Hook> Hooks_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hooks/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Hook.
		/// Hooks_id_jsonPutByLoginAndAuthtoken hooks/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Hook</param>
		/// <param name="requestBody">Hook parameters.</param>
		/// <returns>OK</returns>
		public async Task<Hook> Hooks_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, HookEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hooks/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all the Store's JSApps.
		/// Jsapps_jsonGetByLoginAndAuthtoken jsapps.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<App> Jsapps_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jsapps.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Store JSApp.
		/// Jsapps_jsonPostByLoginAndAuthtoken jsapps.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">JSApp parameters to create</param>
		/// <returns>OK</returns>
		public async Task<JSApp> Jsapps_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, JSAppEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jsapps.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JSApp>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing JSApp.
		/// Jsapps_code_jsonDeleteByLoginAndAuthtoken jsapps/{code}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="code">Code of the App</param>
		/// <returns>OK</returns>
		public async Task<string> Jsapps_code_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jsapps/"+ (code==null? "" : System.Uri.EscapeDataString(code))+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a JSApp.
		/// Jsapps_code_jsonGetByLoginAndAuthtoken jsapps/{code}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="code">Code of the App</param>
		/// <returns>OK</returns>
		public async Task<JSApp> Jsapps_code_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jsapps/"+ (code==null? "" : System.Uri.EscapeDataString(code))+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JSApp>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the Fulfillments associated with the Order.
		/// Order_idFulfillments_jsonGetByLoginAndAuthtoken order/{id}/fulfillments.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Order</param>
		/// <returns>OK</returns>
		public async Task<Fulfillment[]> Order_idFulfillments_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order/"+id+"/fulfillments.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Fulfillment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Orders.
		/// Orders_jsonGetByLoginAndAuthtokenAndLimitAndPage orders.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <returns>An array of Orders</returns>
		public async Task<Order[]> Orders_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Order.
		/// Orders created externally keep the given order product's values (bypassing internal promotion or product amounts).
		/// Orders_jsonPostByLoginAndAuthtoken orders.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Order parameters.</param>
		/// <returns>OK</returns>
		public async Task<Order> Orders_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, OrderCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve orders filtered by Order Id.
		/// For example the GET /orders/after/5000 will return Order 5001, 5002, 5003, etc.
		/// OrdersAfter_id_jsonGetByLoginAndAuthtoken orders/after/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Order</param>
		/// <returns>OK</returns>
		public async Task<Order> OrdersAfter_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/after/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count all Orders.
		/// OrdersCount_jsonGetByLoginAndAuthtoken orders/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Count> OrdersCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve orders filtered by status.
		/// OrdersStatus_status_jsonGetByLoginAndAuthtoken orders/status/{status}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="status">Status of the Order used as filter</param>
		/// <returns>OK</returns>
		public async Task<Order[]> OrdersStatus_status_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, OrdersStatus_status_jsonGetByLoginAndAuthtokenStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/status/"+status+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Order.
		/// Orders_id_jsonGetByLoginAndAuthtoken orders/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Order</param>
		/// <returns>OK</returns>
		public async Task<Order> Orders_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an existing Order.
		/// Only `status`, `shipment_status`, `tracking_number`, `tracking_company`, `tracking_url`, `additional_information` and `additional_fields` are available for update. An email is send if `shipment_status` changes.
		/// Orders_id_jsonPutByLoginAndAuthtoken orders/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Order</param>
		/// <param name="requestBody">Order parameters to change</param>
		/// <returns>OK</returns>
		public async Task<Order> Orders_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, OrderEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Order History.
		/// Orders_idHistory_jsonGetByLoginAndAuthtoken orders/{id}/history.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Order</param>
		/// <returns>An array with Order History</returns>
		public async Task<OrderHistory[]> Orders_idHistory_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id+"/history.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderHistory[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Order History Entry.
		/// Orders_idHistory_jsonPostByLoginAndAuthtoken orders/{id}/history.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the OrderHistory</param>
		/// <param name="requestBody">Order History parameters.</param>
		/// <returns>OK</returns>
		public async Task<OrderHistory> Orders_idHistory_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, OrderHistoryEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id+"/history.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrderHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Pages.
		/// Pages_jsonGetByLoginAndAuthtokenAndLimitAndPage pages.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <returns>An array of Pages</returns>
		public async Task<Page[]> Pages_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pages.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Page[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Page.
		/// Pages_jsonPostByLoginAndAuthtoken pages.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Page parameters.</param>
		/// <returns>OK</returns>
		public async Task<Page> Pages_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, PageModify requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pages.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Pages.
		/// PagesCount_jsonGetByLoginAndAuthtoken pages/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>Total number of pages</returns>
		public async Task<Count> PagesCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pages/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Page.
		/// Pages_id_jsonDeleteByLoginAndAuthtoken pages/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Page</param>
		/// <returns>OK</returns>
		public async Task<string> Pages_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pages/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Page by id.
		/// Pages_id_jsonGetByLoginAndAuthtoken pages/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Page</param>
		/// <returns>OK</returns>
		public async Task<Page> Pages_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pages/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Page.
		/// Pages_id_jsonPutByLoginAndAuthtoken pages/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Page</param>
		/// <param name="requestBody">Page parameters.</param>
		/// <returns>OK</returns>
		public async Task<Page> Pages_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, PageModify requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pages/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve statistics.
		/// PartnersStores_jsonGetByPartner_codeAndAuth_tokenAndPageAndFromAndTo partners/stores.json
		/// </summary>
		/// <param name="partner_code">Partner code.</param>
		/// <param name="auth_token">Partner authentication token.</param>
		/// <param name="page">List page</param>
		/// <param name="from">Statistics start date. Should be in format 'Y-m-d'.</param>
		/// <param name="to">Statistics end date. Should be in format 'Y-m-d'.</param>
		/// <returns>Array of partner stores statistics.</returns>
		public async Task<Type[]> PartnersStores_jsonGetByPartner_codeAndAuth_tokenAndPageAndFromAndToAsync(string partner_code, string auth_token, string page, string from, string to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "partners/stores.json?partner_code=" + (partner_code==null? "" : System.Uri.EscapeDataString(partner_code))+"&auth_token=" + (auth_token==null? "" : System.Uri.EscapeDataString(auth_token))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Store's Payment Methods.
		/// Payment_methods_jsonGetByLoginAndAuthtoken payment_methods.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>An array of Payment Methods</returns>
		public async Task<PaymentMethod[]> Payment_methods_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment_methods.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentMethod[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Payment Method.
		/// Payment_methods_id_jsonGetByLoginAndAuthtoken payment_methods/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Payment Method</param>
		/// <returns>OK</returns>
		public async Task<PaymentMethod> Payment_methods_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment_methods/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentMethod>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Products.
		/// Products_jsonGetByLoginAndAuthtokenAndLimitAndPageAndLocale products.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">List restriction
		/// Maximum: 200
		// </param>
		/// <param name="page">List page</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <returns>OK</returns>
		public async Task<Product[]> Products_jsonGetByLoginAndAuthtokenAndLimitAndPageAndLocaleAsync(string login, string authtoken, string limit, string page, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Product.
		/// Products_jsonPostByLoginAndAuthtokenAndLocale products.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="requestBody">Product parameters.</param>
		/// <returns>OK</returns>
		public async Task<Product> Products_jsonPostByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, string locale, ProductEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves Products after the given id.
		/// ProductsAfter_id_jsonGetByLoginAndAuthtokenAndLocale products/after/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <returns>OK</returns>
		public async Task<Product[]> ProductsAfter_id_jsonGetByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, int id, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/after/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Products filtered by category.
		/// ProductsCategory_category_id_jsonGetByLoginAndAuthtokenAndLocale products/category/{category_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="category_id">Category ID of the Product used as filter</param>
		/// <returns>OK</returns>
		public async Task<Product[]> ProductsCategory_category_id_jsonGetByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, string locale, int category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/category/"+category_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count Products filtered by category.
		/// ProductsCategory_category_idCount_jsonGetByLoginAndAuthtokenAndLocale products/category/{category_id}/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="category_id">Category ID of the Product used as filter</param>
		/// <returns>OK</returns>
		public async Task<Count> ProductsCategory_category_idCount_jsonGetByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, string locale, int category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/category/"+category_id+"/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count all Products.
		/// ProductsCount_jsonGetByLoginAndAuthtoken products/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Count> ProductsCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Product List from a query.
		/// Endpoint example:
		/// 
		/// ```text
		/// https://api.jumpseller.com/v1/products/search.json?login=XXXXXX&authtoken=XXXXX&query=test&fields=name,description
		/// ```
		/// ProductsSearch_jsonGetByLoginAndAuthtokenAndLocaleAndQueryAndFields products/search.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="query">Text to query for the Product</param>
		/// <param name="fields">Comma separated values of the fields to query for the Product</param>
		/// <returns>An array of products</returns>
		public async Task<Product[]> ProductsSearch_jsonGetByLoginAndAuthtokenAndLocaleAndQueryAndFieldsAsync(string login, string authtoken, string locale, string query, ProductsSearch_jsonGetByLoginAndAuthtokenAndLocaleAndQueryAndFieldsFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/search.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Products filtered by status.
		/// ProductsStatus_status_jsonGetByLoginAndAuthtokenAndLocale products/status/{status}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="status">Status of the Product used as filter</param>
		/// <returns>OK</returns>
		public async Task<Product[]> ProductsStatus_status_jsonGetByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, string locale, ProductsStatus_status_jsonGetByLoginAndAuthtokenAndLocaleStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/status/"+status+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count Products filtered by status.
		/// ProductsStatus_statusCount_jsonGetByLoginAndAuthtokenAndLocale products/status/{status}/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="status">Status of the Product used as filter</param>
		/// <returns>OK</returns>
		public async Task<Count> ProductsStatus_statusCount_jsonGetByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, string locale, ProductsStatus_statusCount_jsonGetByLoginAndAuthtokenAndLocaleStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/status/"+status+"/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Product.
		/// Products_id_jsonDeleteByLoginAndAuthtoken products/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <returns>OK</returns>
		public async Task<string> Products_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Product.
		/// Products_id_jsonGetByLoginAndAuthtokenAndLocale products/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Product> Products_id_jsonGetByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, string locale, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an existing Product.
		/// Products_id_jsonPutByLoginAndAuthtokenAndLocale products/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="locale">Locale code of the translation</param>
		/// <param name="requestBody">Product parameters to change</param>
		/// <returns>OK</returns>
		public async Task<Product> Products_id_jsonPutByLoginAndAuthtokenAndLocaleAsync(string login, string authtoken, int id, string locale, ProductEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Product Attachments.
		/// Products_idAttachments_jsonGetByLoginAndAuthtoken products/{id}/attachments.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Attachment[]> Products_idAttachments_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/attachments.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Product Attachment.
		/// Products_idAttachments_jsonPostByLoginAndAuthtoken products/{id}/attachments.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="requestBody">Product Attachment parameters.</param>
		/// <returns>OK</returns>
		public async Task<Attachment> Products_idAttachments_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, AttachmentEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/attachments.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Product Attachments.
		/// Products_idAttachmentsCount_jsonGetByLoginAndAuthtoken products/{id}/attachments/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Count> Products_idAttachmentsCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/attachments/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Product Attachment.
		/// Products_idAttachments_attachment_id_jsonDeleteByLoginAndAuthtoken products/{id}/attachments/{attachment_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="attachment_id">Id of the Product Attachment</param>
		/// <returns>OK</returns>
		public async Task<string> Products_idAttachments_attachment_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, int attachment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/attachments/"+attachment_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Product Attachment.
		/// Products_idAttachments_attachment_id_jsonGetByLoginAndAuthtoken products/{id}/attachments/{attachment_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="attachment_id">Id of the Product Attachment</param>
		/// <returns>OK</returns>
		public async Task<Attachment> Products_idAttachments_attachment_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int attachment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/attachments/"+attachment_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Product DigitalProducts.
		/// Products_idDigital_products_jsonGetByLoginAndAuthtoken products/{id}/digital_products.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<DigitalProduct[]> Products_idDigital_products_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/digital_products.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DigitalProduct[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Product DigitalProduct.
		/// Products_idDigital_products_jsonPostByLoginAndAuthtoken products/{id}/digital_products.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="requestBody">Product DigitalProduct parameters.</param>
		/// <returns>OK</returns>
		public async Task<DigitalProduct> Products_idDigital_products_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, DigitalProductEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/digital_products.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DigitalProduct>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Product DigitalProducts.
		/// Products_idDigital_productsCount_jsonGetByLoginAndAuthtoken products/{id}/digital_products/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Count> Products_idDigital_productsCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/digital_products/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Product DigitalProduct.
		/// Products_idDigital_products_digital_product_id_jsonDeleteByLoginAndAuthtoken products/{id}/digital_products/{digital_product_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="digital_product_id">Id of the Product DigitalProduct</param>
		/// <returns>OK</returns>
		public async Task<string> Products_idDigital_products_digital_product_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, int digital_product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/digital_products/"+digital_product_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Product DigitalProduct.
		/// Products_idDigital_products_digital_product_id_jsonGetByLoginAndAuthtoken products/{id}/digital_products/{digital_product_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="digital_product_id">Id of the Product DigitalProduct</param>
		/// <returns>OK</returns>
		public async Task<DigitalProduct> Products_idDigital_products_digital_product_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int digital_product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/digital_products/"+digital_product_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DigitalProduct>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Product Custom Fields
		/// Products_idFields_jsonGetByLoginAndAuthtoken products/{id}/fields.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <returns>OK</returns>
		public async Task<ProductCustomField[]> Products_idFields_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/fields.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCustomField[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an existing Custom Field to a Product.
		/// Products_idFields_jsonPostByLoginAndAuthtoken products/{id}/fields.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="requestBody">Product Custom Field parameters.</param>
		/// <returns>OK</returns>
		public async Task<Product> Products_idFields_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, AddProductCustomField requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/fields.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Product Custom Fields.
		/// Products_idFieldsCount_jsonGetByLoginAndAuthtoken products/{id}/fields/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Count> Products_idFieldsCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/fields/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Product Images.
		/// Products_idImages_jsonGetByLoginAndAuthtoken products/{id}/images.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Image[]> Products_idImages_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/images.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Image[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Product Image.
		/// Products_idImages_jsonPostByLoginAndAuthtoken products/{id}/images.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="requestBody">Product Image parameters.</param>
		/// <returns>OK</returns>
		public async Task<Image> Products_idImages_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, ImageEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/images.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Image>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Product Images.
		/// Products_idImagesCount_jsonGetByLoginAndAuthtoken products/{id}/images/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Count> Products_idImagesCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/images/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Product Image.
		/// Products_idImages_image_id_jsonDeleteByLoginAndAuthtoken products/{id}/images/{image_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="image_id">Id of the Product Image</param>
		/// <returns>OK</returns>
		public async Task<string> Products_idImages_image_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, int image_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/images/"+image_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Product Image.
		/// Products_idImages_image_id_jsonGetByLoginAndAuthtoken products/{id}/images/{image_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="image_id">Id of the Product Image</param>
		/// <returns>OK</returns>
		public async Task<Image> Products_idImages_image_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int image_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/images/"+image_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Image>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Product Options.
		/// Products_idOptions_jsonGetByLoginAndAuthtoken products/{id}/options.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<ProductOption[]> Products_idOptions_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOption[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Product Option.
		/// Products_idOptions_jsonPostByLoginAndAuthtoken products/{id}/options.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="requestBody">Product Option parameters.</param>
		/// <returns>OK</returns>
		public async Task<ProductOption> Products_idOptions_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, ProductOptionEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Product Options.
		/// Products_idOptionsCount_jsonGetByLoginAndAuthtoken products/{id}/options/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Count> Products_idOptionsCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Product Option.
		/// Products_idOptions_option_id_jsonDeleteByLoginAndAuthtoken products/{id}/options/{option_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="option_id">Id of the Product Option</param>
		/// <returns>OK</returns>
		public async Task<string> Products_idOptions_option_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Product Option.
		/// Products_idOptions_option_id_jsonGetByLoginAndAuthtoken products/{id}/options/{option_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="option_id">Id of the Product Option</param>
		/// <returns>OK</returns>
		public async Task<ProductOption> Products_idOptions_option_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an existing Product Option.
		/// Products_idOptions_option_id_jsonPutByLoginAndAuthtoken products/{id}/options/{option_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="option_id">Id of the Product Option</param>
		/// <param name="requestBody">Product option parameters to change</param>
		/// <returns>OK</returns>
		public async Task<ProductOption> Products_idOptions_option_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, ProductOptionEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOption>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Product Option Values.
		/// Products_idOptions_option_idValues_jsonGetByLoginAndAuthtoken products/{id}/options/{option_id}/values.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <param name="option_id">ID of the Product Option</param>
		/// <returns>OK</returns>
		public async Task<ProductOptionValue[]> Products_idOptions_option_idValues_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+"/values.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOptionValue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Product Option Value.
		/// Products_idOptions_option_idValues_jsonPostByLoginAndAuthtoken products/{id}/options/{option_id}/values.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="option_id">Id of the Product Option</param>
		/// <param name="requestBody">Product Option Value parameters.</param>
		/// <returns>OK</returns>
		public async Task<ProductOptionValue> Products_idOptions_option_idValues_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, ProductOptionValueEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+"/values.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOptionValue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Product Option Values.
		/// Products_idOptions_option_idValuesCount_jsonGetByLoginAndAuthtoken products/{id}/options/{option_id}/values/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <param name="option_id">ID of the Product Option</param>
		/// <returns>OK</returns>
		public async Task<Count> Products_idOptions_option_idValuesCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+"/values/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Product Option Value.
		/// Products_idOptions_option_idValues_value_id_jsonDeleteByLoginAndAuthtoken products/{id}/options/{option_id}/values/{value_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="option_id">Id of the Product Option</param>
		/// <param name="value_id">ID of the Product Option Value</param>
		/// <returns>OK</returns>
		public async Task<string> Products_idOptions_option_idValues_value_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, int value_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+"/values/"+value_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Product Option Value.
		/// Products_idOptions_option_idValues_value_id_jsonGetByLoginAndAuthtoken products/{id}/options/{option_id}/values/{value_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="option_id">Id of the Product Option</param>
		/// <param name="value_id">ID of the Product Option Value</param>
		/// <returns>OK</returns>
		public async Task<ProductOptionValue> Products_idOptions_option_idValues_value_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, int value_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+"/values/"+value_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOptionValue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an existing Product Option Value.
		/// Products_idOptions_option_idValues_value_id_jsonPutByLoginAndAuthtoken products/{id}/options/{option_id}/values/{value_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="option_id">Id of the Product Option</param>
		/// <param name="value_id">Id of the Product Option Value</param>
		/// <param name="requestBody">Product option value parameters to change</param>
		/// <returns>OK</returns>
		public async Task<ProductOptionValue> Products_idOptions_option_idValues_value_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, int option_id, int value_id, ProductOptionValueEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/options/"+option_id+"/values/"+value_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductOptionValue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Product Variants.
		/// Products_idVariants_jsonGetByLoginAndAuthtoken products/{id}/variants.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Variant[]> Products_idVariants_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/variants.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variant[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Product Variant.
		/// Products_idVariants_jsonPostByLoginAndAuthtoken products/{id}/variants.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="requestBody">Product Variant parameters.</param>
		/// <returns>OK</returns>
		public async Task<Variant> Products_idVariants_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, int id, VariantEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/variants.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variant>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count all Product Variants.
		/// Products_idVariantsCount_jsonGetByLoginAndAuthtoken products/{id}/variants/count.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">ID of the Product</param>
		/// <returns>OK</returns>
		public async Task<Count> Products_idVariantsCount_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/variants/count.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Count>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Product Variant.
		/// Products_idVariants_variant_id_jsonGetByLoginAndAuthtoken products/{id}/variants/{variant_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="variant_id">Id of the Product Variant</param>
		/// <returns>OK</returns>
		public async Task<Variant> Products_idVariants_variant_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, int variant_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/variants/"+variant_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variant>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an existing Product Variant.
		/// Products_idVariants_variant_id_jsonPutByLoginAndAuthtoken products/{id}/variants/{variant_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Product</param>
		/// <param name="variant_id">Id of the Product Variant</param>
		/// <param name="requestBody">Product Variant parameters to change</param>
		/// <returns>OK</returns>
		public async Task<Variant> Products_idVariants_variant_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, int variant_id, VariantEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+id+"/variants/"+variant_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variant>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete value of Product Custom Field
		/// Products_product_idFields_field_id_jsonDeleteByLoginAndAuthtoken products/{product_id}/fields/{field_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="product_id">Id of the Product.</param>
		/// <param name="field_id">Id of the Custom Field Value.</param>
		/// <returns>OK</returns>
		public async Task<MessageObject> Products_product_idFields_field_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int product_id, int field_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+product_id+"/fields/"+field_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MessageObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update value of Product Custom Field
		/// Products_product_idFields_field_id_jsonPutByLoginAndAuthtoken products/{product_id}/fields/{field_id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="product_id">Id of the Product.</param>
		/// <param name="field_id">Id of the Custom Field Value.</param>
		/// <returns>OK</returns>
		public async Task<ProductCustomField> Products_product_idFields_field_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int product_id, int field_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+product_id+"/fields/"+field_id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCustomField>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Promotions.
		/// Promotions_jsonGetByLoginAndAuthtokenAndLimitAndPage promotions.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="limit">Promotions' list restriction (default: 50 | max: 200).</param>
		/// <param name="page">Promotions' list page (default: 1).</param>
		/// <returns>An array of Promotions</returns>
		public async Task<Promotion[]> Promotions_jsonGetByLoginAndAuthtokenAndLimitAndPageAsync(string login, string authtoken, string limit, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "promotions.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Promotion[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Promotion.
		/// Promotions_jsonPostByLoginAndAuthtoken promotions.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Promotion parameters.</param>
		/// <returns>OK</returns>
		public async Task<Promotion> Promotions_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, PromotionEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "promotions.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Promotion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Promotion.
		/// Promotions_id_jsonDeleteByLoginAndAuthtoken promotions/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Promotion</param>
		/// <returns>OK</returns>
		public async Task<string> Promotions_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "promotions/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Promotion.
		/// Promotions_id_jsonGetByLoginAndAuthtoken promotions/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Promotion</param>
		/// <returns>OK</returns>
		public async Task<Promotion> Promotions_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "promotions/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Promotion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Promotion.
		/// Promotions_id_jsonPutByLoginAndAuthtoken promotions/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Promotion</param>
		/// <param name="requestBody">Promotion parameters.</param>
		/// <returns>OK</returns>
		public async Task<Promotion> Promotions_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, PromotionEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "promotions/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Promotion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Store's Shipping Methods.
		/// Shipping_methods_jsonGetByLoginAndAuthtoken shipping_methods.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>An array of Shipping Methods</returns>
		public async Task<ShippingMethod[]> Shipping_methods_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shipping_methods.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShippingMethod[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Shipping Method.
		/// Shipping_methods_jsonPostByLoginAndAuthtoken shipping_methods.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Shipping Method parameters.</param>
		/// <returns>OK</returns>
		public async Task<ShippingMethod> Shipping_methods_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, ShippingMethodEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shipping_methods.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShippingMethod>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Shipping Method.
		/// Shipping_methods_id_jsonDeleteByLoginAndAuthtoken shipping_methods/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Shipping Method</param>
		/// <returns>OK</returns>
		public async Task<string> Shipping_methods_id_jsonDeleteByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shipping_methods/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Shipping Method.
		/// Shipping_methods_id_jsonGetByLoginAndAuthtoken shipping_methods/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Shipping Method</param>
		/// <returns>OK</returns>
		public async Task<ShippingMethod> Shipping_methods_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shipping_methods/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShippingMethod>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Shipping Method.
		/// Shipping_methods_id_jsonPutByLoginAndAuthtoken shipping_methods/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Shipping Method</param>
		/// <param name="requestBody">Shipping Method parameters.</param>
		/// <returns>OK</returns>
		public async Task<ShippingMethod> Shipping_methods_id_jsonPutByLoginAndAuthtokenAsync(string login, string authtoken, int id, ShippingMethodEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shipping_methods/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ShippingMethod>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrive store creation status.
		/// StoreCheck_status_jsonGetByPartner_codeAndAuth_tokenAndStore_codeAndLocale store/check_status.json
		/// </summary>
		/// <param name="partner_code">Partner code.</param>
		/// <param name="auth_token">Partner authentication token.</param>
		/// <param name="store_code">Store Code</param>
		/// <param name="locale">ISO 3166-2 code of the language used in the response messages.</param>
		/// <returns>A Store status object if creation is still in progress. A new Partner Store object when creation is done.</returns>
		public async Task<PartnerStoreStatus> StoreCheck_status_jsonGetByPartner_codeAndAuth_tokenAndStore_codeAndLocaleAsync(string partner_code, string auth_token, string store_code, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "store/check_status.json?partner_code=" + (partner_code==null? "" : System.Uri.EscapeDataString(partner_code))+"&auth_token=" + (auth_token==null? "" : System.Uri.EscapeDataString(auth_token))+"&store_code=" + (store_code==null? "" : System.Uri.EscapeDataString(store_code))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartnerStoreStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Partnered Store
		/// StoreCreate_jsonPostByPartner_codeAndAuth_token store/create.json
		/// </summary>
		/// <param name="partner_code">Partner code.</param>
		/// <param name="auth_token">Partner authentication token.</param>
		/// <param name="requestBody">New partnered Store parameters.</param>
		/// <returns>A Partner Store object.</returns>
		public async Task<PartnerStoreCode> StoreCreate_jsonPostByPartner_codeAndAuth_tokenAsync(string partner_code, string auth_token, PartnerStoreCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "store/create.json?partner_code=" + (partner_code==null? "" : System.Uri.EscapeDataString(partner_code))+"&auth_token=" + (auth_token==null? "" : System.Uri.EscapeDataString(auth_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartnerStoreCode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve Store Information.
		/// StoreInfo_jsonGetByLoginAndAuthtoken store/info.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Store> StoreInfo_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "store/info.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Store>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Store Languages.
		/// StoreLanguages_jsonGetByLoginAndAuthtoken store/languages.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>OK</returns>
		public async Task<Language[]> StoreLanguages_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "store/languages.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Language[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all Taxes.
		/// Taxes_jsonGetByLoginAndAuthtoken taxes.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <returns>An array of Taxes</returns>
		public async Task<Tax[]> Taxes_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taxes.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tax[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Tax.
		/// Taxes_jsonPostByLoginAndAuthtoken taxes.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="requestBody">Tax parameters.</param>
		/// <returns>OK</returns>
		public async Task<Tax> Taxes_jsonPostByLoginAndAuthtokenAsync(string login, string authtoken, TaxEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taxes.json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tax>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single Tax information.
		/// Taxes_id_jsonGetByLoginAndAuthtoken taxes/{id}.json
		/// </summary>
		/// <param name="login">API OAuth login.</param>
		/// <param name="authtoken">API OAuth token.</param>
		/// <param name="id">Id of the Tax</param>
		/// <returns>A Tax information object</returns>
		public async Task<Tax> Taxes_id_jsonGetByLoginAndAuthtokenAsync(string login, string authtoken, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taxes/"+id+".json?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&authtoken=" + (authtoken==null? "" : System.Uri.EscapeDataString(authtoken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tax>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum OrdersStatus_status_jsonGetByLoginAndAuthtokenStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Abandoned")]
		Abandoned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Canceled")]
		Canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending Payment")]
		Pending_Payment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Paid")]
		Paid = 3,
	}
	
	public enum ProductsSearch_jsonGetByLoginAndAuthtokenAndLocaleAndQueryAndFieldsFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sku")]
		sku = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="barcode")]
		barcode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="brand")]
		brand = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="description")]
		description = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="variants")]
		variants = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="option_name")]
		option_name = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom_fields")]
		custom_fields = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom_fields_selects")]
		custom_fields_selects = 8,
	}
	
	public enum ProductsStatus_status_jsonGetByLoginAndAuthtokenAndLocaleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-available")]
		notMinusavailable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 2,
	}
	
	public enum ProductsStatus_statusCount_jsonGetByLoginAndAuthtokenAndLocaleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-available")]
		notMinusavailable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
