//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteRecipeVersionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipeVersionErrorDetail[] Errors { get; set; }
	}
	
	/// <summary>
	/// Represents any errors encountered when attempting to delete multiple recipe versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecipeVersionErrorDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipeVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the JSON-specific options that define how input is to be interpreted by Glue DataBrew.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiLine { get; set; }
	}
	
	/// <summary>
	/// Represents a set of options that define how DataBrew will interpret a Microsoft Excel file when creating a dataset from that file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExcelOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SheetNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SheetIndexes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HeaderRow { get; set; }
	}
	
	/// <summary>
	/// Represents a set of options that define how DataBrew will read a comma-separated value (CSV) file when creating a dataset from that file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CsvOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HeaderRow { get; set; }
	}
	
	/// <summary>
	/// Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Location
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketOwner { get; set; }
	}
	
	/// <summary>
	/// Represents how metadata stored in the Glue Data Catalog is defined in a DataBrew dataset. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataCatalogInputDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CatalogId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3Location TempDirectory { get; set; }
	}
	
	/// <summary>
	/// Connection information for dataset input files stored in a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseInputDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlueConnectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseTableName { get; set; }
		
		/// <summary>
		/// Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location TempDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryString { get; set; }
	}
	
	/// <summary>
	/// Contains additional resource information needed for specific datasets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
	}
	
	/// <summary>
	/// Represents a structure for defining parameter conditions. Supported conditions are described here: <a href="https://docs.aws.amazon.com/databrew/latest/dg/datasets.multiple-files.html#conditions.for.dynamic.datasets">Supported conditions for dynamic datasets</a> in the <i>Glue DataBrew Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterExpression
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ValuesMap ValuesMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValuesMap
	{
	}
	
	/// <summary>
	/// Represents a limit imposed on number of Amazon S3 files that should be selected for a dataset from a connected Amazon S3 path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilesLimit
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderedBy OrderedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_DATE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
	}
	
	/// <summary>
	/// A structure that map names of parameters used in the Amazon S3 path of a dataset to their definitions. A definition includes parameter type and conditions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathParametersMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProfileJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Configuration of evaluations for a profile job. This configuration can be used to select evaluations and override the parameters of selected evaluations. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatisticsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IncludedStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatisticOverride[] Overrides { get; set; }
	}
	
	/// <summary>
	/// Override of a particular evaluation for a profile job. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatisticOverride
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Statistic { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ParameterMap Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterMap
	{
	}
	
	/// <summary>
	/// Selector of a column from a dataset for profile job configuration. One selector includes either a column name or a regular expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColumnSelector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Regex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Configuration for column evaluations for a profile job. ColumnStatisticsConfiguration can be used to select evaluations and override parameters of evaluations for particular columns. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColumnStatisticsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnSelector[] Selectors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatisticsConfiguration Statistics { get; set; }
	}
	
	/// <summary>
	/// Configuration of entity detection for a profile job. When undefined, entity detection is disabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityDetectorConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] EntityTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AllowedStatistics[] AllowedStatistics { get; set; }
	}
	
	/// <summary>
	/// Configuration of statistics that are allowed to be run on columns that contain detected entities. When undefined, no statistics will be computed on columns that contain detected entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllowedStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Statistics { get; set; }
	}
	
	/// <summary>
	/// Configuration for data quality validation. Used to select the Rulesets and Validation Mode to be used in the profile job. When ValidationConfiguration is null, the profile job will run without data quality validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RulesetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationMode ValidationMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValidationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_ALL = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SampleMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_DATASET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_ROWS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProjectResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SampleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_N = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_N = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANDOM = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRecipeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a single step from a DataBrew recipe to be performed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecipeStep
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecipeAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionExpression[] ConditionExpressions { get; set; }
	}
	
	/// <summary>
	/// Represents a transformation and associated parameters that are used to apply a change to a DataBrew dataset. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/recipe-actions-reference.html">Recipe actions reference</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecipeAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterMap Parameters { get; set; }
	}
	
	/// <summary>
	/// <p>Represents an individual condition that evaluates to true or false.</p> <p>Conditions are used with recipe actions. The action is only performed for column values where the condition evaluates to true.</p> <p>If a recipe requires more than one condition, then the recipe must specify multiple <code>ConditionExpression</code> elements. Each condition is applied to the rows in a dataset first, before the recipe action is performed.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionExpression
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Condition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetColumn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRecipeJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents options that specify how and where in Amazon S3 DataBrew writes the output generated by recipe jobs or profile jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Output
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompressionFormat CompressionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PartitionColumns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Overwrite { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputFormatOptions FormatOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxOutputFiles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LZ4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZIP2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFLATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LZO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROTLI = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZSTD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZLIB = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLUEPARQUET = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVRO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XML = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLEAUHYPER = 7,
	}
	
	/// <summary>
	/// Represents a set of options that define the structure of comma-separated (CSV) job output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputFormatOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CsvOutputOptions Csv { get; set; }
	}
	
	/// <summary>
	/// Represents a set of options that define how DataBrew will write a comma-separated value (CSV) file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CsvOutputOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
	}
	
	/// <summary>
	/// Represents options that specify how and where in the Glue Data Catalog DataBrew writes the output generated by recipe jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataCatalogOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CatalogId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3TableOutputOptions S3Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseTableOutputOptions DatabaseOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Overwrite { get; set; }
	}
	
	/// <summary>
	/// Represents options that specify how and where DataBrew writes the Amazon S3 output generated by recipe jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3TableOutputOptions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Location Location { get; set; }
	}
	
	/// <summary>
	/// Represents options that specify how and where DataBrew writes the database output generated by recipe jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseTableOutputOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3Location TempDirectory { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// Represents a JDBC database output object which defines the output destination for a DataBrew recipe job to write into.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlueConnectionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DatabaseTableOutputOptions DatabaseOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseOutputMode DatabaseOutputMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatabaseOutputMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_TABLE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRulesetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a single data quality requirement that should be validated in the scope of this dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CheckExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValuesMap SubstitutionMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Threshold Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnSelector[] ColumnSelectors { get; set; }
	}
	
	/// <summary>
	/// The threshold used with a non-aggregate check expression. The non-aggregate check expression will be applied to each row in a specific column. Then the threshold will be used to determine whether the validation succeeds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Threshold
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThresholdType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThresholdUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThresholdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThresholdUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTAGE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateScheduleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatasetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProjectResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRecipeVersionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecipeVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRulesetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteScheduleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputFormat Format { get; set; }
		
		/// <summary>
		/// Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FormatOptions FormatOptions { get; set; }
		
		/// <summary>
		/// Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathOptions PathOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCEL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 4,
	}
	
	/// <summary>
	/// Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FormatOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JsonOptions Json { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExcelOptions Excel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CsvOptions Csv { get; set; }
	}
	
	/// <summary>
	/// Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Input
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3InputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogInputDefinition DataCatalogInputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseInputDefinition DatabaseInputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA-CATALOG")]
		DATAMinusCATALOG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE = 2,
	}
	
	/// <summary>
	/// Represents a set of options that define how DataBrew selects files for a given Amazon S3 path in a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FilterExpression LastModifiedDateCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilesLimit FilesLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathParametersMap Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionMode EncryptionMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileConfiguration ProfileConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
		
		/// <summary>
		/// Represents the name and version of a DataBrew recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecipeReference RecipeReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSample JobSample { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-KMS")]
		SSEMinusKMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-S3")]
		SSEMinusS3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECIPE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogSubscription
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE = 1,
	}
	
	/// <summary>
	/// Configuration for profile jobs. Configuration can be used to select columns, do evaluations, and override default parameters of evaluations. When configuration is undefined, the profile job will apply default settings to all supported columns. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProfileConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StatisticsConfiguration DatasetStatisticsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnSelector[] ProfileColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnStatisticsConfiguration[] ColumnStatisticsConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityDetectorConfiguration EntityDetectorConfiguration { get; set; }
	}
	
	/// <summary>
	/// Represents the name and version of a DataBrew recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecipeReference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipeVersion { get; set; }
	}
	
	/// <summary>
	/// A sample configuration for profile jobs only, which determines the number of rows on which the profile job is run. If a <code>JobSample</code> value isn't provided, the default is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the size parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobSample
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SampleMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobRunResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExecutionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileConfiguration ProfileConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobRunState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		/// <summary>
		/// Represents the name and version of a DataBrew recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecipeReference RecipeReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSample JobSample { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobRunState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeProjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Represents the sample size and sampling type for DataBrew to use for interactive data analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Sample Sample { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SessionStatus SessionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OpenDate { get; set; }
	}
	
	/// <summary>
	/// Represents the sample size and sampling type for DataBrew to use for interactive data analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sample
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SampleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSIGNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECYCLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROTATING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublishedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset PublishedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipeStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipeVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRulesetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeScheduleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] JobNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CronExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Dataset[] Datasets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a dataset that can be processed by DataBrew.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FormatOptions FormatOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathOptions PathOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobRunsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobRun[] JobRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents one run of a DataBrew job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobRun
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Attempt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CompletedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExecutionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobRunState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipeReference RecipeReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSample JobSample { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Job[] Jobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents all of the attributes of a DataBrew job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionMode EncryptionMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipeReference RecipeReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSample JobSample { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProjectsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Project[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents all of the attributes of a DataBrew project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecipeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sample Sample { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OpenDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecipeVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Recipe[] Recipes { get; set; }
	}
	
	/// <summary>
	/// Represents one or more actions to be performed on a DataBrew dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Recipe
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublishedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset PublishedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipeStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipeVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecipesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Recipe[] Recipes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRulesetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RulesetItem[] Rulesets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about the ruleset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RulesetItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RuleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSchedulesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Schedule[] Schedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents one or more dates and times when a job is to run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] JobNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CronExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishRecipeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendProjectSessionActionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Result { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnalyticsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartJobRunResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartProjectSessionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientSessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopJobRunResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDatasetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProfileJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecipeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecipeJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRulesetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateScheduleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteRecipeVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RecipeVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputFormat Format { get; set; }
		
		/// <summary>
		/// Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FormatOptions FormatOptions { get; set; }
		
		/// <summary>
		/// Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathOptions PathOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProfileJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionMode EncryptionMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		/// <summary>
		/// Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Location OutputLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSample JobSample { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecipeName { get; set; }
		
		/// <summary>
		/// Represents the sample size and sampling type for DataBrew to use for interactive data analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Sample Sample { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRecipeJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionMode EncryptionMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Represents the name and version of a DataBrew recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecipeReference RecipeReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRecipeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecipeStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRulesetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateScheduleRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] JobNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CronExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Datetime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 2,
	}
	
	/// <summary>
	/// Represents additional options for correct interpretation of datetime parameters used in the Amazon S3 path of a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatetimeOptions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimezoneOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocaleCode { get; set; }
	}
	
	/// <summary>
	/// Represents a dataset parameter that defines type and conditions for a parameter in the Amazon S3 path of the dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetParameter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ParameterType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatetimeOptions DatetimeOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CreateColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterExpression Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatasetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRecipeVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRulesetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteScheduleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeJobRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeProjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRecipeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeRulesetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeScheduleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobRunsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProjectsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecipeVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRecipesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRulesetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSchedulesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishRecipeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Represents the data being transformed during an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViewFrame
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartColumnIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ColumnRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HiddenColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartRowIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RowRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription Analytics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendProjectSessionActionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Preview { get; set; }
		
		/// <summary>
		/// Represents a single step from a DataBrew recipe to be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecipeStep RecipeStep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientSessionId { get; set; }
		
		/// <summary>
		/// Represents the data being transformed during an action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ViewFrame ViewFrame { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartJobRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartProjectSessionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssumeControl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopJobRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDatasetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputFormat Format { get; set; }
		
		/// <summary>
		/// Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FormatOptions FormatOptions { get; set; }
		
		/// <summary>
		/// Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathOptions PathOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProfileJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionMode EncryptionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		/// <summary>
		/// Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Location OutputLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSample JobSample { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectRequest
	{
		
		/// <summary>
		/// Represents the sample size and sampling type for DataBrew to use for interactive data analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Sample Sample { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecipeJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionMode EncryptionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRecipeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipeStep[] Steps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRulesetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateScheduleRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] JobNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CronExpression { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Deletes one or more versions of a recipe at a time.</p> <p>The entire request will be rejected if:</p> <ul> <li> <p>The recipe does not exist.</p> </li> <li> <p>There is an invalid version identifier in the list of versions.</p> </li> <li> <p>The version list is empty.</p> </li> <li> <p>The version list size exceeds 50.</p> </li> <li> <p>The version list contains duplicate entries.</p> </li> </ul> <p>The request will complete successfully, but with partial failures, if:</p> <ul> <li> <p>A version does not exist.</p> </li> <li> <p>A version is being used by a job.</p> </li> <li> <p>You specify <code>LATEST_WORKING</code>, but it's being used by a project.</p> </li> <li> <p>The version fails to be deleted.</p> </li> </ul> <p>The <code>LATEST_WORKING</code> version will only be deleted if the recipe has no other versions. If you try to delete <code>LATEST_WORKING</code> while other versions exist (or if they can't be deleted), then <code>LATEST_WORKING</code> will be listed as partial failure in the response.</p>
		/// BatchDeleteRecipeVersion recipes/{name}/batchDeleteRecipeVersion
		/// </summary>
		/// <param name="name">The name of the recipe whose versions are to be deleted.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchDeleteRecipeVersionResponse> BatchDeleteRecipeVersionAsync(string name, BatchDeleteRecipeVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/batchDeleteRecipeVersion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchDeleteRecipeVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new DataBrew dataset.
		/// CreateDataset datasets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDatasetResponse> CreateDatasetAsync(CreateDatasetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateDatasetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the DataBrew datasets.
		/// ListDatasets datasets
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in this request. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token returned by a previous call to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetsResponse> ListDatasetsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDatasetsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new job to analyze a dataset and create its data profile.
		/// CreateProfileJob profileJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProfileJobResponse> CreateProfileJobAsync(CreateProfileJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profileJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateProfileJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new DataBrew project.
		/// CreateProject projects
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProjectResponse> CreateProjectAsync(CreateProjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateProjectResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the DataBrew projects that are defined.
		/// ListProjects projects
		/// </summary>
		/// <param name="nextToken">The token returned by a previous call to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this request. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProjectsResponse> ListProjectsAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProjectsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new DataBrew recipe.
		/// CreateRecipe recipes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRecipeResponse> CreateRecipeAsync(CreateRecipePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateRecipeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the DataBrew recipes that are defined.
		/// ListRecipes recipes
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in this request. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token returned by a previous call to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="recipeVersion"><p>Return only those recipes with a version identifier of <code>LATEST_WORKING</code> or <code>LATEST_PUBLISHED</code>. If <code>RecipeVersion</code> is omitted, <code>ListRecipes</code> returns all of the <code>LATEST_PUBLISHED</code> recipe versions.</p> <p>Valid values: <code>LATEST_WORKING</code> | <code>LATEST_PUBLISHED</code> </p>
		/// Min length: 1
		/// Max length: 16
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRecipesResponse> ListRecipesAsync(int maxResults, string nextToken, string recipeVersion, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&recipeVersion=" + (recipeVersion==null? "" : System.Uri.EscapeDataString(recipeVersion))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRecipesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new job to transform input data, using steps defined in an existing Glue DataBrew recipe
		/// CreateRecipeJob recipeJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRecipeJobResponse> CreateRecipeJobAsync(CreateRecipeJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipeJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateRecipeJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new ruleset that can be used in a profile job to validate the data quality of a dataset.
		/// CreateRuleset rulesets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRulesetResponse> CreateRulesetAsync(CreateRulesetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rulesets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateRulesetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all rulesets available in the current account or rulesets associated with a specific resource (dataset).
		/// ListRulesets rulesets
		/// </summary>
		/// <param name="targetArn">The Amazon Resource Name (ARN) of a resource (dataset). Using this parameter indicates to return only those rulesets that are associated with the specified resource.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A token generated by DataBrew that specifies where to continue pagination if a previous request was truncated. To get the next set of pages, pass in the NextToken value from the response object of the previous page call.
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRulesetsResponse> ListRulesetsAsync(string targetArn, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rulesets?targetArn=" + (targetArn==null? "" : System.Uri.EscapeDataString(targetArn))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRulesetsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new schedule for one or more DataBrew jobs. Jobs can be run at a specific date and time, or at regular intervals.
		/// CreateSchedule schedules
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateScheduleResponse> CreateScheduleAsync(CreateSchedulePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateScheduleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the DataBrew schedules that are defined.
		/// ListSchedules schedules
		/// </summary>
		/// <param name="jobName">The name of the job that these schedules apply to.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this request. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token returned by a previous call to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSchedulesResponse> ListSchedulesAsync(string jobName, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules?jobName=" + (jobName==null? "" : System.Uri.EscapeDataString(jobName))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSchedulesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a dataset from DataBrew.
		/// DeleteDataset datasets/{name}
		/// </summary>
		/// <param name="name">The name of the dataset to be deleted.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDatasetResponse> DeleteDatasetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteDatasetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the definition of a specific DataBrew dataset.
		/// DescribeDataset datasets/{name}
		/// </summary>
		/// <param name="name">The name of the dataset to be described.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetResponse> DescribeDatasetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeDatasetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the definition of an existing DataBrew dataset.
		/// UpdateDataset datasets/{name}
		/// </summary>
		/// <param name="name">The name of the dataset to be updated.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDatasetResponse> UpdateDatasetAsync(string name, UpdateDatasetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateDatasetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified DataBrew job.
		/// DeleteJob jobs/{name}
		/// </summary>
		/// <param name="name">The name of the job to be deleted.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteJobResponse> DeleteJobAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the definition of a specific DataBrew job.
		/// DescribeJob jobs/{name}
		/// </summary>
		/// <param name="name">The name of the job to be described.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeJobResponse> DescribeJobAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing DataBrew project.
		/// DeleteProject projects/{name}
		/// </summary>
		/// <param name="name">The name of the project to be deleted.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProjectResponse> DeleteProjectAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteProjectResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the definition of a specific DataBrew project.
		/// DescribeProject projects/{name}
		/// </summary>
		/// <param name="name">The name of the project to be described.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeProjectResponse> DescribeProjectAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeProjectResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the definition of an existing DataBrew project.
		/// UpdateProject projects/{name}
		/// </summary>
		/// <param name="name">The name of the project to be updated.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProjectResponse> UpdateProjectAsync(string name, UpdateProjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateProjectResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single version of a DataBrew recipe.
		/// DeleteRecipeVersion recipes/{name}/recipeVersion/{recipeVersion}
		/// </summary>
		/// <param name="name">The name of the recipe.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="recipeVersion">The version of the recipe to be deleted. You can specify a numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.
		/// Min length: 1
		/// Max length: 16
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteRecipeVersionResponse> DeleteRecipeVersionAsync(string name, string recipeVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/recipeVersion/"+ (recipeVersion==null? "" : System.Uri.EscapeDataString(recipeVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteRecipeVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a ruleset.
		/// DeleteRuleset rulesets/{name}
		/// </summary>
		/// <param name="name">The name of the ruleset to be deleted.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteRulesetResponse> DeleteRulesetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rulesets/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteRulesetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves detailed information about the ruleset.
		/// DescribeRuleset rulesets/{name}
		/// </summary>
		/// <param name="name">The name of the ruleset to be described.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeRulesetResponse> DescribeRulesetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rulesets/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRulesetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates specified ruleset.
		/// UpdateRuleset rulesets/{name}
		/// </summary>
		/// <param name="name">The name of the ruleset to be updated.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRulesetResponse> UpdateRulesetAsync(string name, UpdateRulesetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rulesets/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateRulesetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified DataBrew schedule.
		/// DeleteSchedule schedules/{name}
		/// </summary>
		/// <param name="name">The name of the schedule to be deleted.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteScheduleResponse> DeleteScheduleAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteScheduleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the definition of a specific DataBrew schedule.
		/// DescribeSchedule schedules/{name}
		/// </summary>
		/// <param name="name">The name of the schedule to be described.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeScheduleResponse> DescribeScheduleAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeScheduleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the definition of an existing DataBrew schedule.
		/// UpdateSchedule schedules/{name}
		/// </summary>
		/// <param name="name">The name of the schedule to update.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateScheduleResponse> UpdateScheduleAsync(string name, UpdateSchedulePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateScheduleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Represents one run of a DataBrew job.
		/// DescribeJobRun jobs/{name}/jobRun/{runId}
		/// </summary>
		/// <param name="name">The name of the job being processed during this run.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <param name="runId">The unique identifier of the job run.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeJobRunResponse> DescribeJobRunAsync(string name, string runId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/jobRun/"+ (runId==null? "" : System.Uri.EscapeDataString(runId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeJobRunResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the definition of a specific DataBrew recipe corresponding to a particular version.
		/// DescribeRecipe recipes/{name}
		/// </summary>
		/// <param name="name">The name of the recipe to be described.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="recipeVersion">The recipe version identifier. If this parameter isn't specified, then the latest published version is returned.
		/// Min length: 1
		/// Max length: 16
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeRecipeResponse> DescribeRecipeAsync(string name, string recipeVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&recipeVersion=" + (recipeVersion==null? "" : System.Uri.EscapeDataString(recipeVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeRecipeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the definition of the <code>LATEST_WORKING</code> version of a DataBrew recipe.
		/// UpdateRecipe recipes/{name}
		/// </summary>
		/// <param name="name">The name of the recipe to be updated.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRecipeResponse> UpdateRecipeAsync(string name, UpdateRecipePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateRecipeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the previous runs of a particular DataBrew job.
		/// ListJobRuns jobs/{name}/jobRuns
		/// </summary>
		/// <param name="name">The name of the job.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this request. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token returned by a previous call to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobRunsResponse> ListJobRunsAsync(string name, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/jobRuns&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListJobRunsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the DataBrew jobs that are defined.
		/// ListJobs jobs
		/// </summary>
		/// <param name="datasetName">The name of a dataset. Using this parameter indicates to return only those jobs that act on the specified dataset.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this request. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A token generated by DataBrew that specifies where to continue pagination if a previous request was truncated. To get the next set of pages, pass in the NextToken value from the response object of the previous page call. 
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="projectName">The name of a project. Using this parameter indicates to return only those jobs that are associated with the specified project.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResponse> ListJobsAsync(string datasetName, int maxResults, string nextToken, string projectName, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs?datasetName=" + (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&projectName=" + (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a particular DataBrew recipe, except for <code>LATEST_WORKING</code>.
		/// ListRecipeVersions recipeVersions#name
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in this request. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token returned by a previous call to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 2000
		// </param>
		/// <param name="name">The name of the recipe for which to return version information.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRecipeVersionsResponse> ListRecipeVersionsAsync(int maxResults, string nextToken, string name, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipeVersions#name?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRecipeVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the tags for a DataBrew resource.
		/// ListTagsForResource tags/{ResourceArn}
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) string that uniquely identifies the DataBrew resource. 
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string ResourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds metadata tags to a DataBrew resource, such as a dataset, project, recipe, job, or schedule.
		/// TagResource tags/{ResourceArn}
		/// </summary>
		/// <param name="ResourceArn">The DataBrew resource to which tags should be added. The value for this parameter is an Amazon Resource Name (ARN). For DataBrew, you can tag a dataset, a job, a project, or a recipe.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string ResourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publishes a new version of a DataBrew recipe.
		/// PublishRecipe recipes/{name}/publishRecipe
		/// </summary>
		/// <param name="name">The name of the recipe to be published.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<PublishRecipeResponse> PublishRecipeAsync(string name, PublishRecipePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/publishRecipe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublishRecipeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Performs a recipe step within an interactive DataBrew session that's currently open.
		/// SendProjectSessionAction projects/{name}/sendProjectSessionAction
		/// </summary>
		/// <param name="name">The name of the project to apply the action to.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<SendProjectSessionActionResponse> SendProjectSessionActionAsync(string name, SendProjectSessionActionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/sendProjectSessionAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SendProjectSessionActionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a DataBrew job.
		/// StartJobRun jobs/{name}/startJobRun
		/// </summary>
		/// <param name="name">The name of the job to be run.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <returns>Success</returns>
		public async Task<StartJobRunResponse> StartJobRunAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/startJobRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartJobRunResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an interactive session, enabling you to manipulate data in a DataBrew project.
		/// StartProjectSession projects/{name}/startProjectSession
		/// </summary>
		/// <param name="name">The name of the project to act upon.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<StartProjectSessionResponse> StartProjectSessionAsync(string name, StartProjectSessionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/startProjectSession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartProjectSessionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a particular run of a job.
		/// StopJobRun jobs/{name}/jobRun/{runId}/stopJobRun
		/// </summary>
		/// <param name="name">The name of the job to be stopped.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <param name="runId">The ID of the job run to be stopped.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<StopJobRunResponse> StopJobRunAsync(string name, string runId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "jobs/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/jobRun/"+ (runId==null? "" : System.Uri.EscapeDataString(runId))+"/stopJobRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopJobRunResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes metadata tags from a DataBrew resource.
		/// UntagResource tags/{ResourceArn}#tagKeys
		/// </summary>
		/// <param name="ResourceArn">A DataBrew resource from which you want to remove a tag or tags. The value for this parameter is an Amazon Resource Name (ARN). 
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">The tag keys (names) of one or more tags to be removed.
		/// Minimum items: 1
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string ResourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the definition of an existing profile job.
		/// UpdateProfileJob profileJobs/{name}
		/// </summary>
		/// <param name="name">The name of the job to be updated.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProfileJobResponse> UpdateProfileJobAsync(string name, UpdateProfileJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profileJobs/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateProfileJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the definition of an existing DataBrew recipe job.
		/// UpdateRecipeJob recipeJobs/{name}
		/// </summary>
		/// <param name="name">The name of the job to update.
		/// Min length: 1
		/// Max length: 240
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRecipeJobResponse> UpdateRecipeJobAsync(string name, UpdateRecipeJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipeJobs/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateRecipeJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchDeleteRecipeVersionPostBody
	{
		
		/// <summary>
		/// An array of version identifiers, for the recipe versions to be deleted. You can specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is not supported.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] RecipeVersions { get; set; }
	}
	
	public class CreateDatasetPostBody
	{
		
		/// <summary>
		/// The name of the dataset to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The file format of a dataset that is created from an Amazon S3 file or folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputFormat Format { get; set; }
		
		/// <summary>
		/// Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDatasetPostBodyFormatOptions FormatOptions { get; set; }
		
		/// <summary>
		/// Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDatasetPostBodyInput Input { get; set; }
		
		/// <summary>
		/// Represents a set of options that define how DataBrew selects files for a given Amazon S3 path in a dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDatasetPostBodyPathOptions PathOptions { get; set; }
		
		/// <summary>
		/// Metadata tags to apply to this dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateDatasetPostBodyFormatOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JsonOptions Json { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExcelOptions Excel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CsvOptions Csv { get; set; }
	}
	
	public class CreateDatasetPostBodyInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3InputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogInputDefinition DataCatalogInputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseInputDefinition DatabaseInputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	public class CreateDatasetPostBodyPathOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FilterExpression LastModifiedDateCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilesLimit FilesLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathParametersMap Parameters { get; set; }
	}
	
	public class CreateProfileJobPostBody
	{
		
		/// <summary>
		/// The name of the dataset that this job is to act upon.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string EncryptionKeyArn { get; set; }
		
		/// <summary>
		/// <p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - <code>SSE-KMS</code> - Server-side encryption with KMS-managed keys.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CreateProfileJobPostBodyEncryptionMode> EncryptionMode { get; set; }
		
		/// <summary>
		/// The name of the job to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
		/// Required
		/// Min length: 1
		/// Max length: 240
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(240)]
		public string Name { get; set; }
		
		/// <summary>
		/// Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		/// <summary>
		/// The maximum number of nodes that DataBrew can use when the job processes data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		/// <summary>
		/// The maximum number of times to retry the job after a job run fails.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		/// <summary>
		/// Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateProfileJobPostBodyOutputLocation OutputLocation { get; set; }
		
		/// <summary>
		/// Configuration for profile jobs. Configuration can be used to select columns, do evaluations, and override default parameters of evaluations. When configuration is undefined, the profile job will apply default settings to all supported columns. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProfileJobPostBodyConfiguration Configuration { get; set; }
		
		/// <summary>
		/// List of validation configurations that are applied to the profile job.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Metadata tags to apply to this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// A sample configuration for profile jobs only, which determines the number of rows on which the profile job is run. If a <code>JobSample</code> value isn't provided, the default is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the size parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProfileJobPostBodyJobSample JobSample { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateProfileJobPostBodyEncryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-KMS")]
		SSEMinusKMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-S3")]
		SSEMinusS3 = 1,
	}
	
	public class CreateProfileJobPostBodyOutputLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketOwner { get; set; }
	}
	
	public class CreateProfileJobPostBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StatisticsConfiguration DatasetStatisticsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnSelector[] ProfileColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnStatisticsConfiguration[] ColumnStatisticsConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityDetectorConfiguration EntityDetectorConfiguration { get; set; }
	}
	
	public class CreateProfileJobPostBodyJobSample
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SampleMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	public class CreateProjectPostBody
	{
		
		/// <summary>
		/// The name of an existing dataset to associate this project with.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// A unique name for the new project. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of an existing recipe to associate with the project.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string RecipeName { get; set; }
		
		/// <summary>
		/// Represents the sample size and sampling type for DataBrew to use for interactive data analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProjectPostBodySample Sample { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed for this request.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Metadata tags to apply to this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateProjectPostBodySample
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SampleType Type { get; set; }
	}
	
	public class CreateRecipePostBody
	{
		
		/// <summary>
		/// A description for the recipe.
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// A unique name for the recipe. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// An array containing the steps to be performed by the recipe. Each recipe step consists of one recipe action and (optionally) an array of condition expressions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecipeStep[] Steps { get; set; }
		
		/// <summary>
		/// Metadata tags to apply to this recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateRecipeJobPostBody
	{
		
		/// <summary>
		/// The name of the dataset that this job processes.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string EncryptionKeyArn { get; set; }
		
		/// <summary>
		/// <p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CreateRecipeJobPostBodyEncryptionMode> EncryptionMode { get; set; }
		
		/// <summary>
		/// A unique name for the job. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
		/// Required
		/// Min length: 1
		/// Max length: 240
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(240)]
		public string Name { get; set; }
		
		/// <summary>
		/// Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		/// <summary>
		/// The maximum number of nodes that DataBrew can consume when the job processes data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		/// <summary>
		/// The maximum number of times to retry the job after a job run fails.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		/// <summary>
		/// One or more artifacts that represent the output from running the job.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Output[] Outputs { get; set; }
		
		/// <summary>
		/// One or more artifacts that represent the Glue Data Catalog output from running the job.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		/// <summary>
		/// Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write to. 
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		/// <summary>
		/// Either the name of an existing project, or a combination of a recipe and a dataset to associate with the recipe.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Represents the name and version of a DataBrew recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateRecipeJobPostBodyRecipeReference RecipeReference { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Metadata tags to apply to this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateRecipeJobPostBodyEncryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-KMS")]
		SSEMinusKMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-S3")]
		SSEMinusS3 = 1,
	}
	
	public class CreateRecipeJobPostBodyRecipeReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipeVersion { get; set; }
	}
	
	public class CreateRulesetPostBody
	{
		
		/// <summary>
		/// The name of the ruleset to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the ruleset.
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of a resource (dataset) that the ruleset is associated with.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string TargetArn { get; set; }
		
		/// <summary>
		/// A list of rules that are defined with the ruleset. A rule includes one or more checks to be validated on a DataBrew dataset.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Rule[] Rules { get; set; }
		
		/// <summary>
		/// Metadata tags to apply to the ruleset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateSchedulePostBody
	{
		
		/// <summary>
		/// The name or names of one or more jobs to be run.
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] JobNames { get; set; }
		
		/// <summary>
		/// The date or dates and time or times when the jobs are to be run. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron expressions</a> in the <i>Glue DataBrew Developer Guide</i>.
		/// Required
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string CronExpression { get; set; }
		
		/// <summary>
		/// Metadata tags to apply to this schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A unique name for the schedule. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen (-), period (.), and space.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	public class UpdateDatasetPutBody
	{
		
		/// <summary>
		/// The file format of a dataset that is created from an Amazon S3 file or folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputFormat Format { get; set; }
		
		/// <summary>
		/// Represents a set of options that define the structure of either comma-separated value (CSV), Excel, or JSON input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDatasetPutBodyFormatOptions FormatOptions { get; set; }
		
		/// <summary>
		/// Represents information on how DataBrew can find data, in either the Glue Data Catalog or Amazon S3.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateDatasetPutBodyInput Input { get; set; }
		
		/// <summary>
		/// Represents a set of options that define how DataBrew selects files for a given Amazon S3 path in a dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDatasetPutBodyPathOptions PathOptions { get; set; }
	}
	
	public class UpdateDatasetPutBodyFormatOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JsonOptions Json { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExcelOptions Excel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CsvOptions Csv { get; set; }
	}
	
	public class UpdateDatasetPutBodyInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3InputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataCatalogInputDefinition DataCatalogInputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatabaseInputDefinition DatabaseInputDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	public class UpdateDatasetPutBodyPathOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FilterExpression LastModifiedDateCondition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilesLimit FilesLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathParametersMap Parameters { get; set; }
	}
	
	public class UpdateProjectPutBody
	{
		
		/// <summary>
		/// Represents the sample size and sampling type for DataBrew to use for interactive data analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateProjectPutBodySample Sample { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the IAM role to be assumed for this request.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
	}
	
	public class UpdateProjectPutBodySample
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SampleType Type { get; set; }
	}
	
	public class UpdateRulesetPutBody
	{
		
		/// <summary>
		/// The description of the ruleset.
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of rules that are defined with the ruleset. A rule includes one or more checks to be validated on a DataBrew dataset.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Rule[] Rules { get; set; }
	}
	
	public class UpdateSchedulePutBody
	{
		
		/// <summary>
		/// The name or names of one or more jobs to be run for this schedule.
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] JobNames { get; set; }
		
		/// <summary>
		/// The date or dates and time or times when the jobs are to be run. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron expressions</a> in the <i>Glue DataBrew Developer Guide</i>.
		/// Required
		/// Min length: 1
		/// Max length: 512
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string CronExpression { get; set; }
	}
	
	public class UpdateRecipePutBody
	{
		
		/// <summary>
		/// A description of the recipe.
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// One or more steps to be performed by the recipe. Each step consists of an action, and the conditions under which the action should succeed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecipeStep[] Steps { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// One or more tags to be assigned to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class PublishRecipePostBody
	{
		
		/// <summary>
		/// A description of the recipe to be published, for this version of the recipe.
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
	}
	
	public class SendProjectSessionActionPutBody
	{
		
		/// <summary>
		/// If true, the result of the recipe step will be returned, but not applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Preview { get; set; }
		
		/// <summary>
		/// Represents a single step from a DataBrew recipe to be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SendProjectSessionActionPutBodyRecipeStep RecipeStep { get; set; }
		
		/// <summary>
		/// The index from which to preview a step. This index is used to preview the result of steps that have already been applied, so that the resulting view frame is from earlier in the view frame stack.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> StepIndex { get; set; }
		
		/// <summary>
		/// A unique identifier for an interactive session that's currently open and ready for work. The action will be performed on this session.
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z0-9][a-zA-Z0-9-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9][a-zA-Z0-9-]*$")]
		public string ClientSessionId { get; set; }
		
		/// <summary>
		/// Represents the data being transformed during an action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SendProjectSessionActionPutBodyViewFrame ViewFrame { get; set; }
	}
	
	public class SendProjectSessionActionPutBodyRecipeStep
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecipeAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConditionExpression[] ConditionExpressions { get; set; }
	}
	
	public class SendProjectSessionActionPutBodyViewFrame
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartColumnIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ColumnRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HiddenColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartRowIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RowRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription Analytics { get; set; }
	}
	
	public class StartProjectSessionPutBody
	{
		
		/// <summary>
		/// A value that, if true, enables you to take control of a session, even if a different client is currently accessing the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssumeControl { get; set; }
	}
	
	public class UpdateProfileJobPutBody
	{
		
		/// <summary>
		/// Configuration for profile jobs. Configuration can be used to select columns, do evaluations, and override default parameters of evaluations. When configuration is undefined, the profile job will apply default settings to all supported columns. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateProfileJobPutBodyConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string EncryptionKeyArn { get; set; }
		
		/// <summary>
		/// <p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<UpdateProfileJobPutBodyEncryptionMode> EncryptionMode { get; set; }
		
		/// <summary>
		/// Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		/// <summary>
		/// The maximum number of compute nodes that DataBrew can use when the job processes data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		/// <summary>
		/// The maximum number of times to retry the job after a job run fails.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		/// <summary>
		/// Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read input data, or write output from a job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateProfileJobPutBodyOutputLocation OutputLocation { get; set; }
		
		/// <summary>
		/// List of validation configurations that are applied to the profile job.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ValidationConfiguration[] ValidationConfigurations { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// A sample configuration for profile jobs only, which determines the number of rows on which the profile job is run. If a <code>JobSample</code> value isn't provided, the default is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the size parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateProfileJobPutBodyJobSample JobSample { get; set; }
	}
	
	public class UpdateProfileJobPutBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StatisticsConfiguration DatasetStatisticsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnSelector[] ProfileColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnStatisticsConfiguration[] ColumnStatisticsConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityDetectorConfiguration EntityDetectorConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateProfileJobPutBodyEncryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-KMS")]
		SSEMinusKMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-S3")]
		SSEMinusS3 = 1,
	}
	
	public class UpdateProfileJobPutBodyOutputLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketOwner { get; set; }
	}
	
	public class UpdateProfileJobPutBodyJobSample
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SampleMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	public class UpdateRecipeJobPutBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an encryption key that is used to protect the job.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string EncryptionKeyArn { get; set; }
		
		/// <summary>
		/// <p>The encryption mode for the job, which can be one of the following:</p> <ul> <li> <p> <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p> </li> <li> <p> <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<UpdateRecipeJobPutBodyEncryptionMode> EncryptionMode { get; set; }
		
		/// <summary>
		/// Enables or disables Amazon CloudWatch logging for the job. If logging is enabled, CloudWatch writes one log stream for each job run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogSubscription LogSubscription { get; set; }
		
		/// <summary>
		/// The maximum number of nodes that DataBrew can consume when the job processes data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		/// <summary>
		/// The maximum number of times to retry the job after a job run fails.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxRetries { get; set; }
		
		/// <summary>
		/// One or more artifacts that represent the output from running the job. 
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Output[] Outputs { get; set; }
		
		/// <summary>
		/// One or more artifacts that represent the Glue Data Catalog output from running the job.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DataCatalogOutput[] DataCatalogOutputs { get; set; }
		
		/// <summary>
		/// Represents a list of JDBC database output objects which defines the output destination for a DataBrew recipe job to write into.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DatabaseOutput[] DatabaseOutputs { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to be assumed when DataBrew runs the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The job's timeout in minutes. A job that attempts to run longer than this timeout period ends with a status of <code>TIMEOUT</code>.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateRecipeJobPutBodyEncryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-KMS")]
		SSEMinusKMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSE-S3")]
		SSEMinusS3 = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
