//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Metadata of Access Context Manager's Long Running Operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessContextManagerOperationMetadata
	{
	}
	
	/// <summary>
	/// An `AccessLevel` is a label that can be applied to requests to Google Cloud services, along with a list of requirements necessary for the label to be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessLevel
	{
		
		/// <summary>
		/// `BasicLevel` is an `AccessLevel` using a set of recommended features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basic")]
		public BasicLevel Basic { get; set; }
		
		/// <summary>
		/// `CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request. See CEL spec at: https://github.com/google/cel-spec
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public CustomLevel Custom { get; set; }
		
		/// <summary>
		/// Description of the `AccessLevel` and its use. Does not affect behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Human readable title. Must be unique within the Policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// `BasicLevel` is an `AccessLevel` using a set of recommended features.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicLevel
	{
		
		/// <summary>
		/// How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="combiningFunction")]
		public System.Nullable<BasicLevelCombiningFunction> CombiningFunction { get; set; }
		
		/// <summary>
		/// Required. A list of requirements for the `AccessLevel` to be granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public Condition[] Conditions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BasicLevelCombiningFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 1,
	}
	
	/// <summary>
	/// A condition necessary for an `AccessLevel` to be granted. The Condition is an AND over its fields. So a Condition is true if: 1) the request IP is from one of the listed subnetworks AND 2) the originating device complies with the listed device policy AND 3) all listed access levels are granted AND 4) the request was sent at a time allowed by the DateTimeRestriction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Condition
	{
		
		/// <summary>
		/// `DevicePolicy` specifies device specific restrictions necessary to acquire a given access level. A `DevicePolicy` specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. `DevicePolicy` acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devicePolicy")]
		public DevicePolicy DevicePolicy { get; set; }
		
		/// <summary>
		/// CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly, for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipSubnetworks")]
		public string[] IpSubnetworks { get; set; }
		
		/// <summary>
		/// The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields. Any non-empty field criteria evaluating to false will result in the Condition to be satisfied. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negate")]
		public System.Nullable<System.Boolean> Negate { get; set; }
		
		/// <summary>
		/// The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
		
		/// <summary>
		/// A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: "`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredAccessLevels")]
		public string[] RequiredAccessLevels { get; set; }
	}
	
	/// <summary>
	/// `DevicePolicy` specifies device specific restrictions necessary to acquire a given access level. A `DevicePolicy` specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. `DevicePolicy` acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevicePolicy
	{
		
		/// <summary>
		/// Allowed device management levels, an empty list allows all management levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedDeviceManagementLevels")]
		public string[] AllowedDeviceManagementLevels { get; set; }
		
		/// <summary>
		/// Allowed encryptions statuses, an empty list allows all statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedEncryptionStatuses")]
		public string[] AllowedEncryptionStatuses { get; set; }
		
		/// <summary>
		/// Allowed OS versions, an empty list allows all types and all versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osConstraints")]
		public OsConstraint[] OsConstraints { get; set; }
		
		/// <summary>
		/// Whether the device needs to be approved by the customer admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireAdminApproval")]
		public System.Nullable<System.Boolean> RequireAdminApproval { get; set; }
		
		/// <summary>
		/// Whether the device needs to be corp owned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireCorpOwned")]
		public System.Nullable<System.Boolean> RequireCorpOwned { get; set; }
		
		/// <summary>
		/// Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireScreenlock")]
		public System.Nullable<System.Boolean> RequireScreenlock { get; set; }
	}
	
	/// <summary>
	/// A restriction on the OS type and version of devices making requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OsConstraint
	{
		
		/// <summary>
		/// The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `"major.minor.patch"`. Examples: `"10.5.301"`, `"9.2.1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumVersion")]
		public string MinimumVersion { get; set; }
		
		/// <summary>
		/// Required. The allowed OS type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public System.Nullable<OsConstraintOsType> OsType { get; set; }
		
		/// <summary>
		/// Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireVerifiedChromeOs")]
		public System.Nullable<System.Boolean> RequireVerifiedChromeOs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OsConstraintOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESKTOP_MAC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESKTOP_WINDOWS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESKTOP_LINUX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESKTOP_CHROME_OS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 6,
	}
	
	/// <summary>
	/// `CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request. See CEL spec at: https://github.com/google/cel-spec
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomLevel
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expr")]
		public Expr Expr { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// `AccessPolicy` is a container for `AccessLevels` (which define the necessary attributes to use Google Cloud services) and `ServicePerimeters` (which define regions of services able to freely pass data within a perimeter). An access policy is globally visible within an organization, and the restrictions it specifies apply to all projects within an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessPolicy
	{
		
		/// <summary>
		/// Output only. Resource name of the `AccessPolicy`. Format: `accessPolicies/{policy_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The parent of this `AccessPolicy` in the Cloud Resource Hierarchy. Currently immutable once created. Format: `organizations/{organization_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// Required. Human readable title. Does not affect behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A response to `ListAccessLevelsRequest`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccessLevelsResponse
	{
		
		/// <summary>
		/// List of the Access Level instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessLevels")]
		public AccessLevel[] AccessLevels { get; set; }
		
		/// <summary>
		/// The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response to `ListAccessPoliciesRequest`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccessPoliciesResponse
	{
		
		/// <summary>
		/// List of the AccessPolicy instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessPolicies")]
		public AccessPolicy[] AccessPolicies { get; set; }
		
		/// <summary>
		/// The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A response to `ListServicePerimetersRequest`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServicePerimetersResponse
	{
		
		/// <summary>
		/// The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of the Service Perimeter instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicePerimeters")]
		public ServicePerimeter[] ServicePerimeters { get; set; }
	}
	
	/// <summary>
	/// `ServicePerimeter` describes a set of Google Cloud resources which can freely import and export data amongst themselves, but not export outside of the `ServicePerimeter`. If a request with a source within this `ServicePerimeter` has a target outside of the `ServicePerimeter`, the request will be blocked. Otherwise the request is allowed. There are two types of Service Perimeter - Regular and Bridge. Regular Service Perimeters cannot overlap, a single Google Cloud project can only belong to a single regular Service Perimeter. Service Perimeter Bridges can contain only Google Cloud projects as members, a single Google Cloud project may belong to multiple Service Perimeter Bridges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServicePerimeter
	{
		
		/// <summary>
		/// Description of the `ServicePerimeter` and its use. Does not affect behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, restricted/unrestricted service lists as well as access lists must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perimeterType")]
		public System.Nullable<ServicePerimeterPerimeterType> PerimeterType { get; set; }
		
		/// <summary>
		/// `ServicePerimeterConfig` specifies a set of Google Cloud resources that describe specific Service Perimeter configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServicePerimeterConfig Status { get; set; }
		
		/// <summary>
		/// Human readable title. Must be unique within the Policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServicePerimeterPerimeterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERIMETER_TYPE_REGULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERIMETER_TYPE_BRIDGE = 1,
	}
	
	/// <summary>
	/// `ServicePerimeterConfig` specifies a set of Google Cloud resources that describe specific Service Perimeter configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServicePerimeterConfig
	{
		
		/// <summary>
		/// A list of `AccessLevel` resource names that allow resources within the `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are listed, resources within the perimeter can only be accessed via Google Cloud calls with request origins within the perimeter. Example: `"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL"`. For Service Perimeter Bridge, must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessLevels")]
		public string[] AccessLevels { get; set; }
		
		/// <summary>
		/// A list of Google Cloud resources that are inside of the service perimeter. Currently only projects are allowed. Format: `projects/{project_number}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources { get; set; }
		
		/// <summary>
		/// Google Cloud services that are subject to the Service Perimeter restrictions. Must contain a list of services. For example, if `storage.googleapis.com` is specified, access to the storage buckets inside the perimeter must meet the perimeter's access restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedServices")]
		public string[] RestrictedServices { get; set; }
		
		/// <summary>
		/// Google Cloud services that are not subject to the Service Perimeter restrictions. Deprecated. Must be set to a single wildcard "*". The wildcard means that unless explicitly specified by "restricted_services" list, any service is treated as unrestricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unrestrictedServices")]
		public string[] UnrestrictedServices { get; set; }
		
		/// <summary>
		/// Specifies how APIs are allowed to communicate within the Service Perimeter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcAccessibleServices")]
		public VpcAccessibleServices VpcAccessibleServices { get; set; }
	}
	
	/// <summary>
	/// Specifies how APIs are allowed to communicate within the Service Perimeter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VpcAccessibleServices
	{
		
		/// <summary>
		/// The list of APIs usable within the Service Perimeter. Must be empty unless 'enable_restriction' is True. You can specify a list of individual services, as well as include the 'RESTRICTED-SERVICES' value, which automatically includes all of the services protected by the perimeter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedServices")]
		public string[] AllowedServices { get; set; }
		
		/// <summary>
		/// Whether to restrict API calls within the Service Perimeter to the list of APIs specified in 'allowed_services'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableRestriction")]
		public System.Nullable<System.Boolean> EnableRestriction { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all AccessPolicies under a container.
		/// Accesscontextmanager_accessPolicies_list v1beta/accessPolicies
		/// </summary>
		/// <param name="pageSize">Number of AccessPolicy instances to include in the list. Default 100.</param>
		/// <param name="pageToken">Next page token for the next batch of AccessPolicy instances. Defaults to the first page of results.</param>
		/// <param name="parent">Required. Resource name for the container to list AccessPolicy instances from. Format: `organizations/{org_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccessPoliciesResponse> Accesscontextmanager_accessPolicies_listAsync(int pageSize, string pageToken, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/accessPolicies?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAccessPoliciesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.
		/// Accesscontextmanager_accessPolicies_create v1beta/accessPolicies
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Accesscontextmanager_accessPolicies_createAsync(AccessPolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/accessPolicies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage.
		/// Accesscontextmanager_accessPolicies_servicePerimeters_delete v1beta/{name}
		/// </summary>
		/// <param name="name">Required. Resource name for the Service Perimeter. Format: `accessPolicies/{policy_id}/servicePerimeters/{service_perimeter_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Accesscontextmanager_accessPolicies_servicePerimeters_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Accesscontextmanager_operations_get v1beta/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <param name="accessLevelFormat">Whether to return `BasicLevels` in the Cloud Common Expression Language rather than as `BasicLevels`. Defaults to AS_DEFINED, where Access Levels are returned as `BasicLevels` or `CustomLevels` based on how they were created. If set to CEL, all Access Levels are returned as `CustomLevels`. In the CEL case, `BasicLevels` are translated to equivalent `CustomLevels`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Accesscontextmanager_operations_getAsync(string name, Accesscontextmanager_operations_getAccessLevelFormat accessLevelFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&accessLevelFormat=" + accessLevelFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered.
		/// Accesscontextmanager_accessPolicies_servicePerimeters_patch v1beta/{name}
		/// </summary>
		/// <param name="name">Resource name for the `ServicePerimeter`. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`. The `service_perimeter` component must begin with a letter, followed by alphanumeric characters or `_`. After you create a `ServicePerimeter`, you cannot change its `name`.</param>
		/// <param name="updateMask">Required. Mask to control which fields get updated. Must be non-empty.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Accesscontextmanager_accessPolicies_servicePerimeters_patchAsync(string name, string updateMask, ServicePerimeter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Access Levels for an access policy.
		/// Accesscontextmanager_accessPolicies_accessLevels_list v1beta/{parent}/accessLevels
		/// </summary>
		/// <param name="parent">Required. Resource name for the access policy to list Access Levels from. Format: `accessPolicies/{policy_id}`</param>
		/// <param name="accessLevelFormat">Whether to return `BasicLevels` in the Cloud Common Expression language, as `CustomLevels`, rather than as `BasicLevels`. Defaults to returning `AccessLevels` in the format they were defined.</param>
		/// <param name="pageSize">Number of Access Levels to include in the list. Default 100.</param>
		/// <param name="pageToken">Next page token for the next batch of Access Level instances. Defaults to the first page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccessLevelsResponse> Accesscontextmanager_accessPolicies_accessLevels_listAsync(string parent, Accesscontextmanager_operations_getAccessLevelFormat accessLevelFormat, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/accessLevels&accessLevelFormat=" + accessLevelFormat+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAccessLevelsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.
		/// Accesscontextmanager_accessPolicies_accessLevels_create v1beta/{parent}/accessLevels
		/// </summary>
		/// <param name="parent">Required. Resource name for the access policy which owns this Access Level. Format: `accessPolicies/{policy_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Accesscontextmanager_accessPolicies_accessLevels_createAsync(string parent, AccessLevel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/accessLevels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Service Perimeters for an access policy.
		/// Accesscontextmanager_accessPolicies_servicePerimeters_list v1beta/{parent}/servicePerimeters
		/// </summary>
		/// <param name="parent">Required. Resource name for the access policy to list Service Perimeters from. Format: `accessPolicies/{policy_id}`</param>
		/// <param name="pageSize">Number of Service Perimeters to include in the list. Default 100.</param>
		/// <param name="pageToken">Next page token for the next batch of Service Perimeter instances. Defaults to the first page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListServicePerimetersResponse> Accesscontextmanager_accessPolicies_servicePerimeters_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/servicePerimeters&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServicePerimetersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered.
		/// Accesscontextmanager_accessPolicies_servicePerimeters_create v1beta/{parent}/servicePerimeters
		/// </summary>
		/// <param name="parent">Required. Resource name for the access policy which owns this Service Perimeter. Format: `accessPolicies/{policy_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Accesscontextmanager_accessPolicies_servicePerimeters_createAsync(string parent, ServicePerimeter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/servicePerimeters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Accesscontextmanager_operations_getAccessLevelFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS_DEFINED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CEL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
