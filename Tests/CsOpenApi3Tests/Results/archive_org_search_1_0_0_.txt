//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// One item returned (object of fields and values)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hit
	{
	}
	
	/// <summary>
	/// The result of a organic search request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganicResult
	{
		
		/// <summary>
		/// Number of results returned
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Hit[] Items { get; set; }
		
		/// <summary>
		/// Approximate number of results meeting query
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	/// <summary>
	/// The result of a scrape request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScrapeResult
	{
		
		/// <summary>
		/// Number of results returned
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// A scroll handle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Hit[] Items { get; set; }
		
		/// <summary>
		/// A scroll handle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// Total number of results from this cursor point
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fields that can be requested
		/// SearchV1FieldsGetByCallback search/v1/fields
		/// </summary>
		/// <param name="callback">Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.</param>
		/// <returns>Fields that can be requested</returns>
		public async Task<string[]> SearchV1FieldsGetByCallbackAsync(string callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/v1/fields?callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return relevance-based results from search queries
		/// 
		/// SearchV1OrganicGetByQAndFieldAndSizeAndTotal_onlyAndCallback search/v1/organic
		/// </summary>
		/// <param name="q">Lucene-type search query</param>
		/// <param name="field">Metadata field
		/// Min length: 1
		/// Max length: 250
		// </param>
		/// <param name="size">Number of query results to return
		/// Minimum: 10
		/// Maximum: 10000
		// </param>
		/// <param name="total_only">Request total only; do not return hits</param>
		/// <param name="callback">Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.</param>
		/// <returns>Organic Search API. Returns results in descending relevance order</returns>
		public async Task<OrganicResult> SearchV1OrganicGetByQAndFieldAndSizeAndTotal_onlyAndCallbackAsync(string q, string field, int size, bool total_only, string callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/v1/organic?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&field=" + (field==null? "" : System.Uri.EscapeDataString(field))+"&size="+size+"&total_only="+total_only+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrganicResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scrape search results from Internet Archive, allowing a scrolling cursor
		/// 
		/// SearchV1ScrapeGetByQAndFieldAndSortAndSizeAndCursorAndTotal_onlyAndCallback search/v1/scrape
		/// </summary>
		/// <param name="q">Lucene-type search query</param>
		/// <param name="field">Metadata field
		/// Min length: 1
		/// Max length: 250
		// </param>
		/// <param name="sort">sort collations
		/// Min length: 5
		/// Max length: 250
		// </param>
		/// <param name="size">Number of query results to return
		/// Minimum: 10
		/// Maximum: 10000
		// </param>
		/// <param name="cursor">Cursor for scrolling (used for subsequent calls)</param>
		/// <param name="total_only">Request total only; do not return hits</param>
		/// <param name="callback">Specifies a JavaScript function func, for a JSON-P response. When provided, results are wrapped as `callback(data)`, and the returned MIME type is application/javascript. This causes the caller to automatically run the func with the JSON results as its argument.</param>
		/// <returns>Scaping API</returns>
		public async Task<ScrapeResult> SearchV1ScrapeGetByQAndFieldAndSortAndSizeAndCursorAndTotal_onlyAndCallbackAsync(string q, string field, string sort, int size, string cursor, bool total_only, string callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/v1/scrape?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&field=" + (field==null? "" : System.Uri.EscapeDataString(field))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&total_only="+total_only+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScrapeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
