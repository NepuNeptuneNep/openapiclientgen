//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateAwsAccountWithPartnerAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkAccountInfo Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Information about a Sidewalk account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkAccountInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppServerPrivateKey { get; set; }
	}
	
	/// <summary>
	/// A simple label consisting of a customer-defined key-value pair
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateMulticastGroupWithFuotaTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessDeviceWithFuotaTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessDeviceWithMulticastGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessDeviceWithThingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessGatewayWithCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IotCertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessGatewayWithThingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelMulticastGroupSessionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDestinationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeviceProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFuotaTaskResponse
	{
		
		/// <summary>
		/// The arn of a FUOTA task.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Arn { get; set; }
		
		/// <summary>
		/// The ID of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Supported RfRegions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SupportedRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMulticastGroupResponse
	{
		
		/// <summary>
		/// The arn of the multicast group.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Arn { get; set; }
		
		/// <summary>
		/// The ID of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// DlClass for LoRaWAM, valid values are ClassB and ClassC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DlClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClassB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClassC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkAnalyzerConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Name of the network analyzer configuration.
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string Name { get; set; }
	}
	
	/// <summary>
	///  <code>FrameInfo</code> of your wireless device resources for the trace content. Use FrameInfo to debug the communication between your LoRaWAN end devices and the network server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessDeviceFrameInfo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	///  <code>FrameInfo</code> of your multicast group resources for the trace content. Use FrameInfo to debug the multicast communication between your LoRaWAN end devices and the network server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MulticastFrameInfo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// OTAA device object for v1.1
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OtaaV1_1
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NwkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JoinEui { get; set; }
	}
	
	/// <summary>
	/// OTAA device object for v1.0.x
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OtaaV1_0_x
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppEui { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenAppKey { get; set; }
	}
	
	/// <summary>
	/// ABP device object for LoRaWAN specification v1.1
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AbpV1_1
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DevAddr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SessionKeysAbpV1_1 SessionKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FCntStart { get; set; }
	}
	
	/// <summary>
	/// Session keys for ABP v1.1
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SessionKeysAbpV1_1
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FNwkSIntKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SNwkSIntKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NwkSEncKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppSKey { get; set; }
	}
	
	/// <summary>
	/// ABP device object for LoRaWAN specification v1.0.x
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AbpV1_0_x
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DevAddr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SessionKeysAbpV1_0_x SessionKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FCntStart { get; set; }
	}
	
	/// <summary>
	/// Session keys for ABP v1.1
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SessionKeysAbpV1_0_x
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NwkSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppSKey { get; set; }
	}
	
	/// <summary>
	/// List of FPort assigned for different LoRaWAN application packages to use
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FPorts
	{
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> Fuota { get; set; }
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> Multicast { get; set; }
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> ClockSync { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Positioning Positioning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationConfig[] Applications { get; set; }
	}
	
	/// <summary>
	/// The FPorts for the position information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Positioning
	{
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> ClockSync { get; set; }
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> Stream { get; set; }
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> Gnss { get; set; }
	}
	
	/// <summary>
	/// LoRaWAN application configuration, which can be used to perform geolocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationConfig
	{
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> FPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationConfigType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SemtechGeolocation = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Beaconing parameters for configuring the wireless gateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Beaconing
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Frequencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessGatewayTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string WirelessGatewayTaskDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayTaskStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_RETRY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_RETRY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessGatewayTaskDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// LoRaWANUpdateGatewayTaskCreate object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANUpdateGatewayTaskCreate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SigKeyCrc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGatewayVersion CurrentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGatewayVersion UpdateVersion { get; set; }
	}
	
	/// <summary>
	/// LoRaWANGatewayVersion object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANGatewayVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PackageVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Station { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDestinationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFuotaTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteMulticastGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkAnalyzerConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteQueuedMessagesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessDeviceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessDeviceImportTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessGatewayResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessGatewayTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessGatewayTaskDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeregisterWirelessDeviceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateAwsAccountFromPartnerAccountResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateMulticastGroupFromFuotaTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessDeviceFromFuotaTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessDeviceFromMulticastGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessDeviceFromThingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessGatewayFromCertificateResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessGatewayFromThingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDestinationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpressionType ExpressionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExpressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RuleName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MqttTopic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANDeviceProfile LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkGetDeviceProfile Sidewalk { get; set; }
	}
	
	/// <summary>
	/// LoRaWANDeviceProfile object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANDeviceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsClassB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClassBTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotDr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotFreq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsClassC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClassCTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegParamsRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxDelay1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxDrOffset1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxDataRate2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxFreq2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FactoryPresetFreqsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxEirp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDutyCycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RfRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsJoin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Supports32BitFCnt { get; set; }
	}
	
	/// <summary>
	/// Gets information about a Sidewalk device profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkGetDeviceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplicationServerPublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> QualificationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DakCertificateMetadata[] DakCertificateMetadata { get; set; }
	}
	
	/// <summary>
	/// The device attestation key (DAK) information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DakCertificateMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FactorySupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceTypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEventConfigurationByResourceTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceRegistrationStateResourceTypeEventConfiguration DeviceRegistrationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProximityResourceTypeEventConfiguration Proximity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JoinResourceTypeEventConfiguration Join { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatusResourceTypeEventConfiguration ConnectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDeliveryStatusResourceTypeEventConfiguration MessageDeliveryStatus { get; set; }
	}
	
	/// <summary>
	/// Device registration state resource type event configuration object for enabling or disabling topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceRegistrationStateResourceTypeEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkResourceTypeEventConfiguration Sidewalk { get; set; }
	}
	
	/// <summary>
	/// Sidewalk resource type event configuration object for enabling or disabling topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkResourceTypeEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceEventTopic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventNotificationTopicStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Proximity resource type event configuration object for enabling or disabling topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProximityResourceTypeEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkResourceTypeEventConfiguration Sidewalk { get; set; }
	}
	
	/// <summary>
	/// Join resource type event configuration object for enabling or disabling topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JoinResourceTypeEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANJoinResourceTypeEventConfiguration LoRaWAN { get; set; }
	}
	
	/// <summary>
	/// Object for LoRaWAN join resource type event configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANJoinResourceTypeEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceEventTopic { get; set; }
	}
	
	/// <summary>
	/// Connection status resource type event configuration object for enabling or disabling topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectionStatusResourceTypeEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANConnectionStatusResourceTypeEventConfiguration LoRaWAN { get; set; }
	}
	
	/// <summary>
	/// Object for LoRaWAN connection status resource type event configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANConnectionStatusResourceTypeEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessGatewayEventTopic { get; set; }
	}
	
	/// <summary>
	/// Message delivery status resource type event configuration object for enabling or disabling relevant topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageDeliveryStatusResourceTypeEventConfiguration
	{
		
		/// <summary>
		/// Sidewalk resource type event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SidewalkResourceTypeEventConfiguration Sidewalk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFuotaTaskResponse
	{
		
		/// <summary>
		/// The arn of a FUOTA task.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Arn { get; set; }
		
		/// <summary>
		/// The ID of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// The status of a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<GetFuotaTaskResponseStatus> Status { get; set; }
		
		/// <summary>
		/// The name of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The LoRaWAN information returned from getting a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANFuotaTaskGetInfo LoRaWAN { get; set; }
		
		/// <summary>
		/// The S3 URI points to a firmware update image that is to be used with a FUOTA task.
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string FirmwareUpdateImage { get; set; }
		
		/// <summary>
		/// The firmware update role that is to be used with a FUOTA task.
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string FirmwareUpdateRole { get; set; }
		
		/// <summary>
		/// Created at timestamp for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> RedundancyPercent { get; set; }
		
		/// <summary>
		/// The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentSizeBytes { get; set; }
		
		/// <summary>
		/// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentIntervalMS { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetFuotaTaskResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FuotaSession_Waiting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		In_FuotaSession = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FuotaDone = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete_Waiting = 4,
	}
	
	/// <summary>
	/// The LoRaWAN information returned from getting a FUOTA task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANFuotaTaskGetInfo
	{
		
		/// <summary>
		/// The frequency band (RFRegion) value.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string RfRegion { get; set; }
		
		/// <summary>
		/// Start time of a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLogLevelsByResourceTypesResponse
	{
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogLevel DefaultLogLevel { get; set; }
		
		/// <summary>
		/// The list of wireless gateway log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayLogOption[] WirelessGatewayLogOptions { get; set; }
		
		/// <summary>
		/// The list of wireless device log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceLogOption[] WirelessDeviceLogOptions { get; set; }
	}
	
	/// <summary>
	/// The log options for wireless gateways and can be used to set log levels for a specific type of wireless gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessGatewayLogOption
	{
		
		/// <summary>
		/// The wireless gateway type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayLogOptionType Type { get; set; }
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		/// <summary>
		/// The list of wireless gateway event log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayEventLogOption[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayLogOptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoRaWAN = 0,
	}
	
	/// <summary>
	/// <p>The log options for a wireless gateway event and can be used to set log levels for a specific wireless gateway event.</p> <p>For a LoRaWAN gateway, possible events for a log message are <code>CUPS_Request</code> and <code>Certificate</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessGatewayEventLogOption
	{
		
		/// <summary>
		/// The event for a log message, if the log message is tied to a wireless gateway.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayEventLogOptionEvent Event { get; set; }
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayEventLogOptionEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUPS_Request = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Certificate = 1,
	}
	
	/// <summary>
	/// The log options for wireless devices and can be used to set log levels for a specific type of wireless device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessDeviceLogOption
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceType Type { get; set; }
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		/// <summary>
		/// The list of wireless device event log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceEventLogOption[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sidewalk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoRaWAN = 1,
	}
	
	/// <summary>
	/// <p>The log options for a wireless device event and can be used to set log levels for a specific wireless device event.</p> <p>For a LoRaWAN device, possible events for a log messsage are: <code>Join</code>, <code>Rejoin</code>, <code>Downlink_Data</code>, and <code>Uplink_Data</code>. For a Sidewalk device, possible events for a log message are <code>Registration</code>, <code>Downlink_Data</code>, and <code>Uplink_Data</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessDeviceEventLogOption
	{
		
		/// <summary>
		/// The event for a log message, if the log message is tied to a wireless device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceEventLogOptionEvent Event { get; set; }
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessDeviceEventLogOptionEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Join = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejoin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uplink_Data = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Downlink_Data = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registration = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMulticastGroupResponse
	{
		
		/// <summary>
		/// The arn of the multicast group.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Arn { get; set; }
		
		/// <summary>
		/// The ID of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The status of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Status { get; set; }
		
		/// <summary>
		/// The LoRaWAN information that is to be returned from getting multicast group information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANMulticastGet LoRaWAN { get; set; }
		
		/// <summary>
		/// Created at timestamp for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
	}
	
	/// <summary>
	/// The LoRaWAN information that is to be returned from getting multicast group information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANMulticastGet
	{
		
		/// <summary>
		/// Supported RfRegions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<LoRaWANMulticastGetRfRegion> RfRegion { get; set; }
		
		/// <summary>
		/// DlClass for LoRaWAM, valid values are ClassB and ClassC.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public DlClass DlClass { get; set; }
		
		/// <summary>
		/// Number of devices that are requested to be associated with the multicast group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfDevicesRequested { get; set; }
		
		/// <summary>
		/// Number of devices that are associated to the multicast group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfDevicesInGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoRaWANMulticastGetRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMulticastGroupSessionResponse
	{
		
		/// <summary>
		/// The LoRaWAN information used with the multicast session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANMulticastSession LoRaWAN { get; set; }
	}
	
	/// <summary>
	/// The LoRaWAN information used with the multicast session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANMulticastSession
	{
		
		/// <summary>
		/// Downlink data rate.
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public System.Nullable<System.Int32> DlDr { get; set; }
		
		/// <summary>
		/// Downlink frequency.
		/// Minimum: 100000000
		/// Maximum: 1000000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000000, 1000000000)]
		public System.Nullable<System.Int32> DlFreq { get; set; }
		
		/// <summary>
		/// Timestamp of when the multicast group session is to start.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SessionStartTime { get; set; }
		
		/// <summary>
		/// How long before a multicast group session is to timeout.
		/// Minimum: 60
		/// Maximum: 172800
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 172800)]
		public System.Nullable<System.Int32> SessionTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkAnalyzerConfigurationResponse
	{
		
		/// <summary>
		/// Trace content for your wireless gateway and wireless device resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TraceContent TraceContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessGateways { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Name of the network analyzer configuration.
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MulticastGroups { get; set; }
	}
	
	/// <summary>
	/// Trace content for your wireless gateway and wireless device resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TraceContent
	{
		
		/// <summary>
		///  <code>FrameInfo</code> of your wireless device resources for the trace content. Use FrameInfo to debug the communication between your LoRaWAN end devices and the network server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceFrameInfo WirelessDeviceFrameInfo { get; set; }
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		/// <summary>
		///  <code>FrameInfo</code> of your multicast group resources for the trace content. Use FrameInfo to debug the multicast communication between your LoRaWAN end devices and the network server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceFrameInfo MulticastFrameInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPartnerAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkAccountInfoWithFingerprint Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccountLinked { get; set; }
	}
	
	/// <summary>
	/// Information about a Sidewalk account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkAccountInfoWithFingerprint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fingerprint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPositionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Accuracy Accuracy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PositionSolverType SolverType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PositionSolverProvider SolverProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SolverVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// The accuracy of the estimated position in meters. An empty value indicates that no position data is available. A value of ‘0.0’ value indicates that position data is available. This data corresponds to the position information that you specified instead of the position computed by solver.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Accuracy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float HorizontalAccuracy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float VerticalAccuracy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PositionSolverType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GNSS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PositionSolverProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Semtech = 0,
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPositionConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PositionSolverDetails Solvers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
	}
	
	/// <summary>
	/// The wrapper for position solver details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionSolverDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SemtechGnssDetail SemtechGnss { get; set; }
	}
	
	/// <summary>
	/// Details of the Semtech GNSS solver object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SemtechGnssDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PositionSolverProvider Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PositionSolverType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PositionConfigurationFec Fec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PositionConfigurationFec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPositionEstimateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GeoJsonPayload { get; set; }
	}
	
	/// <summary>
	/// Wi-Fi access point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WiFiAccessPoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Rss { get; set; }
	}
	
	/// <summary>
	/// GSM object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GsmObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mnc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Lac { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int GeranCid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GsmLocalId GsmLocalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GsmTimingAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GsmNmrObj[] GsmNmr { get; set; }
	}
	
	/// <summary>
	/// GSM local ID information, which corresponds to the local identification parameters of a GSM cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GsmLocalId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Bsic { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Bcch { get; set; }
	}
	
	/// <summary>
	/// GSM object for network measurement reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GsmNmrObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Bsic { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Bcch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalIdentity GlobalIdentity { get; set; }
	}
	
	/// <summary>
	/// Global identity information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalIdentity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Lac { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int GeranCid { get; set; }
	}
	
	/// <summary>
	/// WCDMA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WcdmaObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mnc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Lac { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int UtranCid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WcdmaLocalId WcdmaLocalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rscp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PathLoss { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WcdmaNmrObj[] WcdmaNmr { get; set; }
	}
	
	/// <summary>
	/// WCDMA local identification (local ID) information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WcdmaLocalId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Uarfcndl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Psc { get; set; }
	}
	
	/// <summary>
	/// Network Measurement Reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WcdmaNmrObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Uarfcndl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Psc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int UtranCid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rscp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PathLoss { get; set; }
	}
	
	/// <summary>
	/// TD-SCDMA object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TdscdmaObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mnc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Lac { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int UtranCid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TdscdmaLocalId TdscdmaLocalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TdscdmaTimingAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rscp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PathLoss { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TdscdmaNmrObj[] TdscdmaNmr { get; set; }
	}
	
	/// <summary>
	/// TD-SCDMA local identification (local Id) information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TdscdmaLocalId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Uarfcn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CellParams { get; set; }
	}
	
	/// <summary>
	/// TD-SCDMA object for network measurement reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TdscdmaNmrObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Uarfcn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CellParams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UtranCid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rscp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PathLoss { get; set; }
	}
	
	/// <summary>
	/// LTE object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LteObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mcc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Mnc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EutranCid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Tac { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LteLocalId LteLocalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LteTimingAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rsrp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Rsrq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NrCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LteNmrObj[] LteNmr { get; set; }
	}
	
	/// <summary>
	/// LTE local identification (local ID) information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LteLocalId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Pci { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Earfcn { get; set; }
	}
	
	/// <summary>
	/// LTE object for network measurement reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LteNmrObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Pci { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Earfcn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EutranCid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rsrp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Rsrq { get; set; }
	}
	
	/// <summary>
	/// CDMA (Code-division multiple access) object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CdmaObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SystemId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NetworkId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BaseStationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RegistrationZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdmaLocalId CdmaLocalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PilotPower { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float BaseLat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float BaseLng { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdmaNmrObj[] CdmaNmr { get; set; }
	}
	
	/// <summary>
	/// CDMA local ID information, which corresponds to the local identification parameters of a CDMA cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CdmaLocalId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int PnOffset { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CdmaChannel { get; set; }
	}
	
	/// <summary>
	/// CDMA object for network measurement reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CdmaNmrObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int PnOffset { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CdmaChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PilotPower { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BaseStationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceEventConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceRegistrationStateEventConfiguration DeviceRegistrationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProximityEventConfiguration Proximity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JoinEventConfiguration Join { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatusEventConfiguration ConnectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDeliveryStatusEventConfiguration MessageDeliveryStatus { get; set; }
	}
	
	/// <summary>
	/// Device registration state event configuration object for enabling and disabling relevant topics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceRegistrationStateEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkEventNotificationConfigurations Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	/// <summary>
	///  <code>SidewalkEventNotificationConfigurations</code> object, which is the event configuration object for Sidewalk-related event topics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkEventNotificationConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus AmazonIdEventTopic { get; set; }
	}
	
	/// <summary>
	/// Proximity event configuration object for enabling and disabling relevant topics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProximityEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkEventNotificationConfigurations Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	/// <summary>
	/// Join event configuration object for enabling or disabling topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JoinEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANJoinEventNotificationConfigurations LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	/// <summary>
	/// Object for LoRaWAN join resource type event configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANJoinEventNotificationConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus DevEuiEventTopic { get; set; }
	}
	
	/// <summary>
	/// Connection status event configuration object for enabling or disabling topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectionStatusEventConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANConnectionStatusEventNotificationConfigurations LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessGatewayIdEventTopic { get; set; }
	}
	
	/// <summary>
	/// Object for LoRaWAN connection status resource type event configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANConnectionStatusEventNotificationConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus GatewayEuiEventTopic { get; set; }
	}
	
	/// <summary>
	/// Message delivery status event configuration object for enabling and disabling relevant topics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessageDeliveryStatusEventConfiguration
	{
		
		/// <summary>
		///  <code>SidewalkEventNotificationConfigurations</code> object, which is the event configuration object for Sidewalk-related event topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SidewalkEventNotificationConfigurations Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceLogLevelResponse
	{
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourcePositionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GeoJsonPayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayServiceType ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerTrust { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LNS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGetServiceProfileInfo LoRaWAN { get; set; }
	}
	
	/// <summary>
	/// LoRaWANGetServiceProfileInfo object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANGetServiceProfileInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UlRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UlBucketSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UlRatePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DlRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DlBucketSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DlRatePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AddGwMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DevStatusReqFreq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReportDevStatusBattery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReportDevStatusMargin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DrMin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DrMax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelMask { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HrAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RaAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NwkGeoLoc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetPer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinGwDiversity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANDevice LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkDevice Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus Positioning { get; set; }
	}
	
	/// <summary>
	/// LoRaWAN object for create functions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DevEui { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OtaaV1_1 OtaaV1_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OtaaV1_0_x OtaaV1_0_x { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AbpV1_1 AbpV1_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AbpV1_0_x AbpV1_0_x { get; set; }
		
		/// <summary>
		/// List of FPort assigned for different LoRaWAN application packages to use
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FPorts FPorts { get; set; }
	}
	
	/// <summary>
	/// Sidewalk device object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkDevice
	{
		
		/// <summary>
		/// The Sidewalk Amazon ID.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string AmazonId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SidewalkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SidewalkManufacturingSn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateList[] DeviceCertificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateList[] PrivateKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceSidewalkStatus Status { get; set; }
	}
	
	/// <summary>
	/// List of sidewalk certificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CertificateList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SigningAlg SigningAlg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The certificate chain algorithm provided by sidewalk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SigningAlg
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ed25519 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P256r1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessDeviceSidewalkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessDeviceImportTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkGetStartImportInfo Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InitializedImportedDeviceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PendingImportedDeviceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnboardedImportedDeviceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedImportedDeviceCount { get; set; }
	}
	
	/// <summary>
	/// Sidewalk-related information for devices in an import task that are being onboarded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkGetStartImportInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeviceCreationFileList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessDeviceStatisticsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string WirelessDeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUplinkReceivedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANDeviceMetadata LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkDeviceMetadata Sidewalk { get; set; }
	}
	
	/// <summary>
	/// LoRaWAN device metatdata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANDeviceMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DevEui { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGatewayMetadata[] Gateways { get; set; }
	}
	
	/// <summary>
	/// LoRaWAN gateway metatdata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANGatewayMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayEui { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Snr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rssi { get; set; }
	}
	
	/// <summary>
	/// MetaData for Sidewalk device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkDeviceMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Rssi { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatteryLevel BatteryLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event Event { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceState DeviceState { get; set; }
	}
	
	/// <summary>
	/// Sidewalk device battery level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatteryLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		normal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		low = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		critical = 2,
	}
	
	/// <summary>
	/// Sidewalk device status notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Event
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		discovered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lost = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nack = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passthrough = 4,
	}
	
	/// <summary>
	/// Device state defines the device status of sidewalk device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Provisioned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegisteredNotSeen = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegisteredReachable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegisteredUnreachable = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGateway LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	/// <summary>
	/// LoRaWANGateway object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayEui { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RfRegion { get; set; }
		
		/// <summary>
		/// A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string[][] JoinEuiFilters { get; set; }
		
		/// <summary>
		/// A list of NetId values that are used by LoRa gateways to filter the uplink frames.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] NetIdFilters { get; set; }
		
		/// <summary>
		/// A list of integer indicating which sub bands are supported by LoRa gateway.
		/// Minimum items: 0
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public int[] SubBands { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Beaconing Beaconing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float MaxEirp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IotCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoRaWANNetworkServerCertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayFirmwareInformationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGatewayCurrentVersion LoRaWAN { get; set; }
	}
	
	/// <summary>
	/// LoRaWANGatewayCurrentVersion object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANGatewayCurrentVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGatewayVersion CurrentVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayStatisticsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string WirelessGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUplinkReceivedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatus ConnectionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string WirelessGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WirelessGatewayTaskDefinitionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUplinkReceivedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayTaskStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayTaskDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoCreateTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateWirelessGatewayTaskCreate Update { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// UpdateWirelessGatewayTaskCreate object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessGatewayTaskCreate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateDataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateDataRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANUpdateGatewayTaskCreate LoRaWAN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDestinationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Destinations[] DestinationList { get; set; }
	}
	
	/// <summary>
	/// Describes a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Destinations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpressionType ExpressionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceProfile[] DeviceProfileList { get; set; }
	}
	
	/// <summary>
	/// Describes a device profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevicesForWirelessDeviceImportTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportedWirelessDevice[] ImportedWirelessDeviceList { get; set; }
	}
	
	/// <summary>
	/// Information about a wireless device that has been added to an import task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportedWirelessDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ImportedSidewalkDevice Sidewalk { get; set; }
	}
	
	/// <summary>
	/// Information about a Sidewalk device that has been added to an import task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportedSidewalkDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SidewalkManufacturingSn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnboardStatus OnboardingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OnboardingStatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OnboardStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventConfigurationItem[] EventConfigurationsList { get; set; }
	}
	
	/// <summary>
	/// Event configuration object for a single resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventConfigurationItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentifierType IdentifierType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationPartnerType PartnerType { get; set; }
		
		/// <summary>
		/// Object of all event configurations and the status of the event topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationItemConfigurations Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IdentifierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartnerAccountId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DevEui = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GatewayEui = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessDeviceId = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessGatewayId = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventNotificationPartnerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sidewalk = 0,
	}
	
	/// <summary>
	/// Object of all event configurations and the status of the event topics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventNotificationItemConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceRegistrationStateEventConfiguration DeviceRegistrationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProximityEventConfiguration Proximity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JoinEventConfiguration Join { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatusEventConfiguration ConnectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDeliveryStatusEventConfiguration MessageDeliveryStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFuotaTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Lists the FUOTA tasks registered to your AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FuotaTask[] FuotaTaskList { get; set; }
	}
	
	/// <summary>
	/// A FUOTA task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FuotaTask
	{
		
		/// <summary>
		/// The ID of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// The arn of a FUOTA task.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Arn { get; set; }
		
		/// <summary>
		/// The name of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMulticastGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// List of multicast groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MulticastGroup[] MulticastGroupList { get; set; }
	}
	
	/// <summary>
	/// A multicast group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MulticastGroup
	{
		
		/// <summary>
		/// The ID of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// The arn of the multicast group.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Arn { get; set; }
		
		/// <summary>
		/// The name of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMulticastGroupsByFuotaTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// List of multicast groups associated with a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MulticastGroupByFuotaTask[] MulticastGroupList { get; set; }
	}
	
	/// <summary>
	/// A multicast group that is associated with a FUOTA task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MulticastGroupByFuotaTask
	{
		
		/// <summary>
		/// The ID of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkAnalyzerConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkAnalyzerConfigurations[] NetworkAnalyzerConfigurationList { get; set; }
	}
	
	/// <summary>
	/// Network analyzer configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkAnalyzerConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Name of the network analyzer configuration.
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPartnerAccountsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkAccountInfoWithFingerprint[] Sidewalk { get; set; }
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPositionConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PositionConfigurationItem[] PositionConfigurationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The wrapper for a position configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionConfigurationItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PositionResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PositionSolverDetails Solvers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PositionResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessDevice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessGateway = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListQueuedMessagesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DownlinkQueueMessage[] DownlinkQueueMessagesList { get; set; }
	}
	
	/// <summary>
	/// The message in the downlink queue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownlinkQueueMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransmitMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReceivedAt { get; set; }
		
		/// <summary>
		/// LoRaWAN router info.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANSendDataToDevice LoRaWAN { get; set; }
	}
	
	/// <summary>
	/// LoRaWAN router info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANSendDataToDevice
	{
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> FPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParticipatingGateways ParticipatingGateways { get; set; }
	}
	
	/// <summary>
	/// Specify the list of gateways to which you want to send downlink data traffic when the wireless device is running in class B or class C mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParticipatingGateways
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DownlinkMode DownlinkMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GatewayListItem[] GatewayList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TransmissionInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DownlinkMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEQUENTIAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCURRENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USING_UPLINK_GATEWAY = 2,
	}
	
	/// <summary>
	/// Gateway list item object that specifies the frequency and list of gateways for which the downlink message should be sent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GatewayListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DownlinkFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceProfile[] ServiceProfileList { get; set; }
	}
	
	/// <summary>
	/// Information about a service profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessDeviceImportTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceImportTask[] WirelessDeviceImportTaskList { get; set; }
	}
	
	/// <summary>
	/// Information about an import task for wireless devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessDeviceImportTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkGetStartImportInfo Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InitializedImportedDeviceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PendingImportedDeviceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnboardedImportedDeviceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedImportedDeviceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceStatistics[] WirelessDeviceList { get; set; }
	}
	
	/// <summary>
	/// Information about a wireless device's operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessDeviceStatistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUplinkReceivedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANListDevice LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkListDevice Sidewalk { get; set; }
		
		/// <summary>
		/// The status of a wireless device in a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<WirelessDeviceStatisticsFuotaDeviceStatus> FuotaDeviceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MulticastDeviceStatus { get; set; }
		
		/// <summary>
		/// Id of the multicast group.
		/// Minimum: 1
		/// Maximum: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 256)]
		public System.Nullable<System.Int32> McGroupId { get; set; }
	}
	
	/// <summary>
	/// LoRaWAN object for list functions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANListDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DevEui { get; set; }
	}
	
	/// <summary>
	/// Sidewalk object used by list functions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkListDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SidewalkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SidewalkManufacturingSn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateList[] DeviceCertificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceSidewalkStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessDeviceStatisticsFuotaDeviceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package_Not_Supported = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FragAlgo_unsupported = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Not_enough_memory = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FragIndex_unsupported = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wrong_descriptor = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionCnt_replay = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissingFrag = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MemoryError = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICError = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessGatewayTaskDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateWirelessGatewayTaskEntry[] TaskDefinitions { get; set; }
	}
	
	/// <summary>
	/// UpdateWirelessGatewayTaskEntry object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessGatewayTaskEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANUpdateGatewayTaskEntry LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// LoRaWANUpdateGatewayTaskEntry object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANUpdateGatewayTaskEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGatewayVersion CurrentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGatewayVersion UpdateVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessGatewaysResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayStatistics[] WirelessGatewayList { get; set; }
	}
	
	/// <summary>
	/// Information about a wireless gateway's operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessGatewayStatistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGateway LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUplinkReceivedAt { get; set; }
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPositionConfigurationResponse
	{
	}
	
	/// <summary>
	/// Information about the Semtech GNSS solver configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SemtechGnssConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PositionConfigurationFec Fec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourceLogLevelResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetAllResourceLogLevelsResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetResourceLogLevelResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDataToMulticastGroupResponse
	{
		
		/// <summary>
		/// ID of a multicast group message.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string MessageId { get; set; }
	}
	
	/// <summary>
	/// The metadata information of the LoRaWAN multicast group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANMulticastMetadata
	{
		
		/// <summary>
		/// The Fport value.
		/// Minimum: 1
		/// Maximum: 223
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 223)]
		public System.Nullable<System.Int32> FPort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDataToWirelessDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
	}
	
	/// <summary>
	/// Information about a Sidewalk router.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkSendDataToDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Seq { get; set; }
		
		/// <summary>
		/// Sidewalk device message type. Default value is <code>CUSTOM_COMMAND_ID_NOTIFY</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SidewalkSendDataToDeviceMessageType> MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AckModeRetryDurationSecs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SidewalkSendDataToDeviceMessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_NOTIFY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_GET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_SET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_RESP = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBulkAssociateWirelessDeviceWithMulticastGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBulkDisassociateWirelessDeviceFromMulticastGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartFuotaTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMulticastGroupSessionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSingleWirelessDeviceImportTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartWirelessDeviceImportTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestWirelessDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDestinationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEventConfigurationByResourceTypesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFuotaTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLogLevelsByResourceTypesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMulticastGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkAnalyzerConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePartnerAccountResponse
	{
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePositionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourceEventConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourcePositionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessDeviceResponse
	{
	}
	
	/// <summary>
	/// ABP device object for LoRaWAN specification v1.1
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAbpV1_1
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FCntStart { get; set; }
	}
	
	/// <summary>
	/// ABP device object for LoRaWAN specification v1.0.x
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAbpV1_0_x
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FCntStart { get; set; }
	}
	
	/// <summary>
	/// Object for updating the FPorts information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFPorts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Positioning Positioning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationConfig[] Applications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessDeviceImportTaskResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessGatewayResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateAwsAccountWithPartnerAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SidewalkAccountInfo Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateMulticastGroupWithFuotaTaskRequest
	{
		
		/// <summary>
		/// The ID of the multicast group.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string MulticastGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessDeviceWithFuotaTaskRequest
	{
		
		/// <summary>
		/// The ID of the wireless device.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string WirelessDeviceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessDeviceWithMulticastGroupRequest
	{
		
		/// <summary>
		/// The ID of the wireless device.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string WirelessDeviceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessDeviceWithThingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessGatewayWithCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IotCertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateWirelessGatewayWithThingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelMulticastGroupSessionRequest
	{
	}
	
	/// <summary>
	/// The cell towers that were used to perform the measurements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CellTowers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GsmObj[] Gsm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WcdmaObj[] Wcdma { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TdscdmaObj[] Tdscdma { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LteObj[] Lte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdmaObj[] Cdma { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDestinationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExpressionType ExpressionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// Sidewalk object for creating a device profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkCreateDeviceProfile
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeviceProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANDeviceProfile LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkCreateDeviceProfile Sidewalk { get; set; }
	}
	
	/// <summary>
	/// The LoRaWAN information used with a FUOTA task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANFuotaTask
	{
		
		/// <summary>
		/// Supported RfRegions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<LoRaWANFuotaTaskRfRegion> RfRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoRaWANFuotaTaskRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFuotaTaskRequest
	{
		
		/// <summary>
		/// The name of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The LoRaWAN information used with a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANFuotaTask LoRaWAN { get; set; }
		
		/// <summary>
		/// The S3 URI points to a firmware update image that is to be used with a FUOTA task.
		/// Required
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string FirmwareUpdateImage { get; set; }
		
		/// <summary>
		/// The firmware update role that is to be used with a FUOTA task.
		/// Required
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string FirmwareUpdateRole { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> RedundancyPercent { get; set; }
		
		/// <summary>
		/// The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentSizeBytes { get; set; }
		
		/// <summary>
		/// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentIntervalMS { get; set; }
	}
	
	/// <summary>
	/// The LoRaWAN information that is to be used with the multicast group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANMulticast
	{
		
		/// <summary>
		/// Supported RfRegions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<LoRaWANMulticastRfRegion> RfRegion { get; set; }
		
		/// <summary>
		/// DlClass for LoRaWAM, valid values are ClassB and ClassC.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public DlClass DlClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoRaWANMulticastRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMulticastGroupRequest
	{
		
		/// <summary>
		/// The name of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The LoRaWAN information that is to be used with the multicast group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANMulticast LoRaWAN { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNetworkAnalyzerConfigurationRequest
	{
		
		/// <summary>
		/// Name of the network analyzer configuration.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// Trace content for your wireless gateway and wireless device resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TraceContent TraceContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessGateways { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MulticastGroups { get; set; }
	}
	
	/// <summary>
	/// LoRaWANServiceProfile object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANServiceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AddGwMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DrMin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DrMax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RaAllowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANServiceProfile LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PositioningConfigStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Sidewalk object for creating a wireless device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkCreateWirelessDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessDeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANDevice LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus Positioning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkCreateWirelessDevice Sidewalk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANGateway LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessGatewayTaskDefinitionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoCreateTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateWirelessGatewayTaskCreate Update { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWirelessGatewayTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WirelessGatewayTaskDefinitionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDestinationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFuotaTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteMulticastGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNetworkAnalyzerConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteQueuedMessagesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessDeviceImportTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessGatewayRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessGatewayTaskDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWirelessGatewayTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeregisterWirelessDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceProfileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sidewalk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoRaWAN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartnerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sidewalk = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateAwsAccountFromPartnerAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateMulticastGroupFromFuotaTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessDeviceFromFuotaTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessDeviceFromMulticastGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessDeviceFromThingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessGatewayFromCertificateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateWirelessGatewayFromThingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventNotificationResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SidewalkAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessDevice = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessGateway = 2,
	}
	
	/// <summary>
	/// The status of a wireless device in a FUOTA task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FuotaDeviceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package_Not_Supported = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FragAlgo_unsupported = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Not_enough_memory = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FragIndex_unsupported = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wrong_descriptor = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionCnt_replay = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MissingFrag = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MemoryError = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICError = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 10,
	}
	
	/// <summary>
	/// The status of a FUOTA task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FuotaTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FuotaSession_Waiting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		In_FuotaSession = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FuotaDone = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete_Waiting = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDestinationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEventConfigurationByResourceTypesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFuotaTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLogLevelsByResourceTypesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMulticastGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMulticastGroupSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNetworkAnalyzerConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPartnerAccountRequest
	{
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPositionConfigurationRequest
	{
	}
	
	/// <summary>
	/// IP address used for resolving device location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ip
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	/// <summary>
	/// Global navigation satellite system (GNSS) object used for positioning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Gnss
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Payload { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float CaptureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float CaptureTimeAccuracy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AssistPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float AssistAltitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Use2DSolver { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPositionEstimateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WiFiAccessPoint[] WiFiAccessPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CellTowers CellTowers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ip Ip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Gnss Gnss { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPositionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceEventConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceLogLevelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourcePositionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessDeviceImportTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessDeviceIdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessDeviceId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DevEui = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThingName = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SidewalkManufacturingSn = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessDeviceStatisticsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayCertificateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayFirmwareInformationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayIdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GatewayEui = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WirelessGatewayId = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThingName = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayStatisticsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayTaskDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWirelessGatewayTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDestinationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceProfilesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevicesForWirelessDeviceImportTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventConfigurationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFuotaTasksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMulticastGroupsByFuotaTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMulticastGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNetworkAnalyzerConfigurationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPartnerAccountsRequest
	{
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPositionConfigurationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListQueuedMessagesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceProfilesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessDeviceImportTasksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessDevicesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayTaskDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessGatewayTaskDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWirelessGatewaysRequest
	{
	}
	
	/// <summary>
	/// The LoRaWAN information used to start a FUOTA task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANStartFuotaTask
	{
		
		/// <summary>
		/// Start time of a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// LoRaWAN object for update functions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoRaWANUpdateDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAbpV1_1 AbpV1_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAbpV1_0_x AbpV1_0_x { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateFPorts FPorts { get; set; }
	}
	
	/// <summary>
	/// Sidewalk device message type. Default value is <code>CUSTOM_COMMAND_ID_NOTIFY</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_NOTIFY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_GET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_SET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_COMMAND_ID_RESP = 3,
	}
	
	/// <summary>
	/// Wireless metadata that is to be sent to multicast group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MulticastWirelessMetadata
	{
		
		/// <summary>
		/// The metadata information of the LoRaWAN multicast group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANMulticastMetadata LoRaWAN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PositionConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// The wrapper for position solver configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionSolverConfigurations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SemtechGnssConfiguration SemtechGnss { get; set; }
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPositionConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PositionSolverConfigurations Solvers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourceLogLevelRequest
	{
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetAllResourceLogLevelsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetResourceLogLevelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDataToMulticastGroupRequest
	{
		
		/// <summary>
		/// The binary to be sent to the end device, encoded in base64.
		/// Required
		/// Max length: 2048
		/// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
		public string PayloadData { get; set; }
		
		/// <summary>
		/// Wireless metadata that is to be sent to multicast group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MulticastWirelessMetadata WirelessMetadata { get; set; }
	}
	
	/// <summary>
	/// WirelessMetadata object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WirelessMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANSendDataToDevice LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkSendDataToDevice Sidewalk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDataToWirelessDeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TransmitMode { get; set; }
		
		/// <summary>
		/// The binary to be sent to the end device, encoded in base64.
		/// Required
		/// Max length: 2048
		/// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
		public string PayloadData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessMetadata WirelessMetadata { get; set; }
	}
	
	/// <summary>
	/// Information about an import task created for an individual Sidewalk device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkSingleStartImportInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SidewalkManufacturingSn { get; set; }
	}
	
	/// <summary>
	/// Information about an import task created for bulk provisioning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkStartImportInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceCreationFile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Sidewalk update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkUpdateAccount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppServerPrivateKey { get; set; }
	}
	
	/// <summary>
	/// Sidewalk object information for updating an import task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SidewalkUpdateImportInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceCreationFile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBulkAssociateWirelessDeviceWithMulticastGroupRequest
	{
		
		/// <summary>
		/// Query string used to search for wireless devices as part of the bulk associate and disassociate process.
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
	{
		
		/// <summary>
		/// Query string used to search for wireless devices as part of the bulk associate and disassociate process.
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartFuotaTaskRequest
	{
		
		/// <summary>
		/// The LoRaWAN information used to start a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANStartFuotaTask LoRaWAN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMulticastGroupSessionRequest
	{
		
		/// <summary>
		/// The LoRaWAN information used with the multicast session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANMulticastSession LoRaWAN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSingleWirelessDeviceImportTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SidewalkSingleStartImportInfo Sidewalk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartWirelessDeviceImportTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SidewalkStartImportInfo Sidewalk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestWirelessDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDestinationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExpressionType ExpressionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEventConfigurationByResourceTypesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceRegistrationStateResourceTypeEventConfiguration DeviceRegistrationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProximityResourceTypeEventConfiguration Proximity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JoinResourceTypeEventConfiguration Join { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatusResourceTypeEventConfiguration ConnectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDeliveryStatusResourceTypeEventConfiguration MessageDeliveryStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFuotaTaskRequest
	{
		
		/// <summary>
		/// The name of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The LoRaWAN information used with a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANFuotaTask LoRaWAN { get; set; }
		
		/// <summary>
		/// The S3 URI points to a firmware update image that is to be used with a FUOTA task.
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string FirmwareUpdateImage { get; set; }
		
		/// <summary>
		/// The firmware update role that is to be used with a FUOTA task.
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string FirmwareUpdateRole { get; set; }
		
		/// <summary>
		/// The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> RedundancyPercent { get; set; }
		
		/// <summary>
		/// The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentSizeBytes { get; set; }
		
		/// <summary>
		/// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentIntervalMS { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLogLevelsByResourceTypesRequest
	{
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogLevel DefaultLogLevel { get; set; }
		
		/// <summary>
		/// The list of wireless device log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceLogOption[] WirelessDeviceLogOptions { get; set; }
		
		/// <summary>
		/// The list of wireless gateway log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayLogOption[] WirelessGatewayLogOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMulticastGroupRequest
	{
		
		/// <summary>
		/// The name of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The LoRaWAN information that is to be used with the multicast group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANMulticast LoRaWAN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNetworkAnalyzerConfigurationRequest
	{
		
		/// <summary>
		/// Trace content for your wireless gateway and wireless device resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TraceContent TraceContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessDevicesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessDevicesToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessGatewaysToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessGatewaysToRemove { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MulticastGroupsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MulticastGroupsToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePartnerAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SidewalkUpdateAccount Sidewalk { get; set; }
	}
	
	/// <summary>
	/// This operation is no longer supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePositionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourceEventConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceRegistrationStateEventConfiguration DeviceRegistrationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProximityEventConfiguration Proximity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JoinEventConfiguration Join { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatusEventConfiguration ConnectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MessageDeliveryStatusEventConfiguration MessageDeliveryStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourcePositionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GeoJsonPayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessDeviceImportTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SidewalkUpdateImportInfo Sidewalk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANUpdateDevice LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus Positioning { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWirelessGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string[][] JoinEuiFilters { get; set; }
		
		/// <summary>
		/// A list of NetId values that are used by LoRa gateways to filter the uplink frames.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] NetIdFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float MaxEirp { get; set; }
	}
	
	/// <summary>
	/// The event for a log message, if the log message is tied to a wireless device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessDeviceEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Join = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejoin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Uplink_Data = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Downlink_Data = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registration = 4,
	}
	
	/// <summary>
	/// The event for a log message, if the log message is tied to a wireless gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUPS_Request = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Certificate = 1,
	}
	
	/// <summary>
	/// The wireless gateway type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WirelessGatewayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoRaWAN = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates a partner account with your AWS account.
		/// AssociateAwsAccountWithPartnerAccount partner-accounts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateAwsAccountWithPartnerAccountResponse> AssociateAwsAccountWithPartnerAccountAsync(AssociateAwsAccountWithPartnerAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "partner-accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociateAwsAccountWithPartnerAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the partner accounts associated with your AWS account.
		/// ListPartnerAccounts partner-accounts
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPartnerAccountsResponse> ListPartnerAccountsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "partner-accounts?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPartnerAccountsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associate a multicast group with a FUOTA task.
		/// AssociateMulticastGroupWithFuotaTask fuota-tasks/{Id}/multicast-group
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task AssociateMulticastGroupWithFuotaTaskAsync(string Id, AssociateMulticastGroupWithFuotaTaskPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/multicast-group";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associate a wireless device with a FUOTA task.
		/// AssociateWirelessDeviceWithFuotaTask fuota-tasks/{Id}/wireless-device
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task AssociateWirelessDeviceWithFuotaTaskAsync(string Id, AssociateWirelessDeviceWithFuotaTaskPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/wireless-device";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a wireless device with a multicast group.
		/// AssociateWirelessDeviceWithMulticastGroup multicast-groups/{Id}/wireless-device
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task AssociateWirelessDeviceWithMulticastGroupAsync(string Id, AssociateWirelessDeviceWithMulticastGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/wireless-device";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a wireless device with a thing.
		/// AssociateWirelessDeviceWithThing wireless-devices/{Id}/thing
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task AssociateWirelessDeviceWithThingAsync(string Id, AssociateWirelessDeviceWithThingPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/thing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a wireless device from its currently associated thing.
		/// DisassociateWirelessDeviceFromThing wireless-devices/{Id}/thing
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task DisassociateWirelessDeviceFromThingAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/thing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a wireless gateway with a certificate.
		/// AssociateWirelessGatewayWithCertificate wireless-gateways/{Id}/certificate
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateWirelessGatewayWithCertificateResponse> AssociateWirelessGatewayWithCertificateAsync(string Id, AssociateWirelessGatewayWithCertificatePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociateWirelessGatewayWithCertificateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a wireless gateway from its currently associated certificate.
		/// DisassociateWirelessGatewayFromCertificate wireless-gateways/{Id}/certificate
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task DisassociateWirelessGatewayFromCertificateAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the ID of the certificate that is currently associated with a wireless gateway.
		/// GetWirelessGatewayCertificate wireless-gateways/{Id}/certificate
		/// </summary>
		/// <param name="Id">The ID of the resource to get.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWirelessGatewayCertificateResponse> GetWirelessGatewayCertificateAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessGatewayCertificateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a wireless gateway with a thing.
		/// AssociateWirelessGatewayWithThing wireless-gateways/{Id}/thing
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task AssociateWirelessGatewayWithThingAsync(string Id, AssociateWirelessGatewayWithThingPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/thing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a wireless gateway from its currently associated thing.
		/// DisassociateWirelessGatewayFromThing wireless-gateways/{Id}/thing
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task DisassociateWirelessGatewayFromThingAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/thing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an existing multicast group session.
		/// CancelMulticastGroupSession multicast-groups/{Id}/session
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task CancelMulticastGroupSessionAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a multicast group session.
		/// GetMulticastGroupSession multicast-groups/{Id}/session
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		/// <returns>Success</returns>
		public async Task<GetMulticastGroupSessionResponse> GetMulticastGroupSessionAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetMulticastGroupSessionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a multicast group session.
		/// StartMulticastGroupSession multicast-groups/{Id}/session
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task StartMulticastGroupSessionAsync(string Id, StartMulticastGroupSessionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new destination that maps a device message to an AWS IoT rule.
		/// CreateDestination destinations
		/// </summary>
		public async Task CreateDestinationAsync(CreateDestinationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the destinations registered to your AWS account.
		/// ListDestinations destinations
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDestinationsResponse> ListDestinationsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDestinationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new device profile.
		/// CreateDeviceProfile device-profiles
		/// </summary>
		public async Task CreateDeviceProfileAsync(CreateDeviceProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "device-profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the device profiles registered to your AWS account.
		/// ListDeviceProfiles device-profiles
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="deviceProfileType">A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeviceProfilesResponse> ListDeviceProfilesAsync(string nextToken, int maxResults, WirelessDeviceType deviceProfileType, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "device-profiles?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&deviceProfileType=" + deviceProfileType+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeviceProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a FUOTA task.
		/// CreateFuotaTask fuota-tasks
		/// </summary>
		public async Task CreateFuotaTaskAsync(CreateFuotaTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the FUOTA tasks registered to your AWS account.
		/// ListFuotaTasks fuota-tasks
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFuotaTasksResponse> ListFuotaTasksAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFuotaTasksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a multicast group.
		/// CreateMulticastGroup multicast-groups
		/// </summary>
		public async Task CreateMulticastGroupAsync(CreateMulticastGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the multicast groups registered to your AWS account.
		/// ListMulticastGroups multicast-groups
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMulticastGroupsResponse> ListMulticastGroupsAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMulticastGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new network analyzer configuration.
		/// CreateNetworkAnalyzerConfiguration network-analyzer-configurations
		/// </summary>
		public async Task CreateNetworkAnalyzerConfigurationAsync(CreateNetworkAnalyzerConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "network-analyzer-configurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the network analyzer configurations.
		/// ListNetworkAnalyzerConfigurations network-analyzer-configurations
		/// </summary>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNetworkAnalyzerConfigurationsResponse> ListNetworkAnalyzerConfigurationsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "network-analyzer-configurations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNetworkAnalyzerConfigurationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new service profile.
		/// CreateServiceProfile service-profiles
		/// </summary>
		public async Task CreateServiceProfileAsync(CreateServiceProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service-profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the service profiles registered to your AWS account.
		/// ListServiceProfiles service-profiles
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListServiceProfilesResponse> ListServiceProfilesAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service-profiles?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServiceProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provisions a wireless device.
		/// CreateWirelessDevice wireless-devices
		/// </summary>
		public async Task CreateWirelessDeviceAsync(CreateWirelessDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the wireless devices registered to your AWS account.
		/// ListWirelessDevices wireless-devices
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="destinationName">A filter to list only the wireless devices that use this destination.
		/// Max length: 128
		// </param>
		/// <param name="deviceProfileId">A filter to list only the wireless devices that use this device profile.
		/// Max length: 256
		// </param>
		/// <param name="serviceProfileId">A filter to list only the wireless devices that use this service profile.
		/// Max length: 256
		// </param>
		/// <param name="wirelessDeviceType">A filter to list only the wireless devices that use this wireless device type.</param>
		/// <param name="fuotaTaskId">Max length: 256</param>
		/// <param name="multicastGroupId">Max length: 256</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWirelessDevicesResponse> ListWirelessDevicesAsync(int maxResults, string nextToken, string destinationName, string deviceProfileId, string serviceProfileId, WirelessDeviceType wirelessDeviceType, string fuotaTaskId, string multicastGroupId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&destinationName=" + (destinationName==null? "" : System.Uri.EscapeDataString(destinationName))+"&deviceProfileId=" + (deviceProfileId==null? "" : System.Uri.EscapeDataString(deviceProfileId))+"&serviceProfileId=" + (serviceProfileId==null? "" : System.Uri.EscapeDataString(serviceProfileId))+"&wirelessDeviceType=" + wirelessDeviceType+"&fuotaTaskId=" + (fuotaTaskId==null? "" : System.Uri.EscapeDataString(fuotaTaskId))+"&multicastGroupId=" + (multicastGroupId==null? "" : System.Uri.EscapeDataString(multicastGroupId))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWirelessDevicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provisions a wireless gateway.
		/// CreateWirelessGateway wireless-gateways
		/// </summary>
		public async Task CreateWirelessGatewayAsync(CreateWirelessGatewayPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the wireless gateways registered to your AWS account.
		/// ListWirelessGateways wireless-gateways
		/// </summary>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWirelessGatewaysResponse> ListWirelessGatewaysAsync(string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWirelessGatewaysResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a task for a wireless gateway.
		/// CreateWirelessGatewayTask wireless-gateways/{Id}/tasks
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task CreateWirelessGatewayTaskAsync(string Id, CreateWirelessGatewayTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a wireless gateway task.
		/// DeleteWirelessGatewayTask wireless-gateways/{Id}/tasks
		/// </summary>
		/// <param name="Id">The ID of the resource to delete.
		/// Max length: 256
		// </param>
		public async Task DeleteWirelessGatewayTaskAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a wireless gateway task.
		/// GetWirelessGatewayTask wireless-gateways/{Id}/tasks
		/// </summary>
		/// <param name="Id">The ID of the resource to get.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWirelessGatewayTaskResponse> GetWirelessGatewayTaskAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessGatewayTaskResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a gateway task definition.
		/// CreateWirelessGatewayTaskDefinition wireless-gateway-task-definitions
		/// </summary>
		public async Task CreateWirelessGatewayTaskDefinitionAsync(CreateWirelessGatewayTaskDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateway-task-definitions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the wireless gateway tasks definitions registered to your AWS account.
		/// ListWirelessGatewayTaskDefinitions wireless-gateway-task-definitions
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="taskDefinitionType">A filter to list only the wireless gateway task definitions that use this task definition type.</param>
		/// <returns>Success</returns>
		public async Task<ListWirelessGatewayTaskDefinitionsResponse> ListWirelessGatewayTaskDefinitionsAsync(int maxResults, string nextToken, WirelessGatewayTaskDefinitionType taskDefinitionType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateway-task-definitions?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&taskDefinitionType=" + taskDefinitionType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWirelessGatewayTaskDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a destination.
		/// DeleteDestination destinations/{Name}
		/// </summary>
		/// <param name="Name">The name of the resource to delete.
		/// Max length: 128
		// </param>
		public async Task DeleteDestinationAsync(string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a destination.
		/// GetDestination destinations/{Name}
		/// </summary>
		/// <param name="Name">The name of the resource to get.
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDestinationResponse> GetDestinationAsync(string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDestinationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates properties of a destination.
		/// UpdateDestination destinations/{Name}
		/// </summary>
		/// <param name="Name">The new name of the resource.
		/// Max length: 128
		// </param>
		public async Task UpdateDestinationAsync(string Name, UpdateDestinationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "destinations/"+ (Name==null? "" : System.Uri.EscapeDataString(Name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a device profile.
		/// DeleteDeviceProfile device-profiles/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to delete.
		/// Max length: 256
		// </param>
		public async Task DeleteDeviceProfileAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "device-profiles/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a device profile.
		/// GetDeviceProfile device-profiles/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to get.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDeviceProfileResponse> GetDeviceProfileAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "device-profiles/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDeviceProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a FUOTA task.
		/// DeleteFuotaTask fuota-tasks/{Id}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task DeleteFuotaTaskAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a FUOTA task.
		/// GetFuotaTask fuota-tasks/{Id}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		/// <returns>Success</returns>
		public async Task<GetFuotaTaskResponse> GetFuotaTaskAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetFuotaTaskResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a FUOTA task.
		/// StartFuotaTask fuota-tasks/{Id}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task StartFuotaTaskAsync(string Id, StartFuotaTaskPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates properties of a FUOTA task.
		/// UpdateFuotaTask fuota-tasks/{Id}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task UpdateFuotaTaskAsync(string Id, UpdateFuotaTaskPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a multicast group if it is not in use by a fuota task.
		/// DeleteMulticastGroup multicast-groups/{Id}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task DeleteMulticastGroupAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a multicast group.
		/// GetMulticastGroup multicast-groups/{Id}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		/// <returns>Success</returns>
		public async Task<GetMulticastGroupResponse> GetMulticastGroupAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetMulticastGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates properties of a multicast group session.
		/// UpdateMulticastGroup multicast-groups/{Id}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task UpdateMulticastGroupAsync(string Id, UpdateMulticastGroupPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a network analyzer configuration.
		/// DeleteNetworkAnalyzerConfiguration network-analyzer-configurations/{ConfigurationName}
		/// </summary>
		/// <param name="ConfigurationName">Min length: 1
		/// Max length: 1024
		// </param>
		public async Task DeleteNetworkAnalyzerConfigurationAsync(string ConfigurationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "network-analyzer-configurations/"+ (ConfigurationName==null? "" : System.Uri.EscapeDataString(ConfigurationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get network analyzer configuration.
		/// GetNetworkAnalyzerConfiguration network-analyzer-configurations/{ConfigurationName}
		/// </summary>
		/// <param name="ConfigurationName">Min length: 1
		/// Max length: 1024
		// </param>
		/// <returns>Success</returns>
		public async Task<GetNetworkAnalyzerConfigurationResponse> GetNetworkAnalyzerConfigurationAsync(string ConfigurationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "network-analyzer-configurations/"+ (ConfigurationName==null? "" : System.Uri.EscapeDataString(ConfigurationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetNetworkAnalyzerConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update network analyzer configuration.
		/// UpdateNetworkAnalyzerConfiguration network-analyzer-configurations/{ConfigurationName}
		/// </summary>
		/// <param name="ConfigurationName">Min length: 1
		/// Max length: 1024
		// </param>
		public async Task UpdateNetworkAnalyzerConfigurationAsync(string ConfigurationName, UpdateNetworkAnalyzerConfigurationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "network-analyzer-configurations/"+ (ConfigurationName==null? "" : System.Uri.EscapeDataString(ConfigurationName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove queued messages from the downlink queue.
		/// DeleteQueuedMessages wireless-devices/{Id}/data#messageId
		/// </summary>
		/// <param name="Id">The ID of a given wireless device for which downlink messages will be deleted.
		/// Max length: 256
		// </param>
		/// <param name="messageId">If message ID is <code>"*"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted.</param>
		/// <param name="WirelessDeviceType">The wireless device type, which can be either Sidewalk or LoRaWAN.</param>
		public async Task DeleteQueuedMessagesAsync(string Id, string messageId, WirelessDeviceType WirelessDeviceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/data#messageId&messageId=" + (messageId==null? "" : System.Uri.EscapeDataString(messageId))+"&WirelessDeviceType=" + WirelessDeviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a service profile.
		/// DeleteServiceProfile service-profiles/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to delete.
		/// Max length: 256
		// </param>
		public async Task DeleteServiceProfileAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service-profiles/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a service profile.
		/// GetServiceProfile service-profiles/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to get.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetServiceProfileResponse> GetServiceProfileAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service-profiles/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetServiceProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a wireless device.
		/// DeleteWirelessDevice wireless-devices/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to delete.
		/// Max length: 256
		// </param>
		public async Task DeleteWirelessDeviceAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates properties of a wireless device.
		/// UpdateWirelessDevice wireless-devices/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task UpdateWirelessDeviceAsync(string Id, UpdateWirelessDevicePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an import task.
		/// DeleteWirelessDeviceImportTask wireless_device_import_task/{Id}
		/// </summary>
		/// <param name="Id">The unique identifier of the import task to be deleted.
		/// Max length: 256
		// </param>
		public async Task DeleteWirelessDeviceImportTaskAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless_device_import_task/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about an import task and count of device onboarding summary information for the import task.
		/// GetWirelessDeviceImportTask wireless_device_import_task/{Id}
		/// </summary>
		/// <param name="Id">The identifier of the import task for which information is requested.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWirelessDeviceImportTaskResponse> GetWirelessDeviceImportTaskAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless_device_import_task/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessDeviceImportTaskResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an import task to add more devices to the task.
		/// UpdateWirelessDeviceImportTask wireless_device_import_task/{Id}
		/// </summary>
		/// <param name="Id">The identifier of the import task to be updated.
		/// Max length: 256
		// </param>
		public async Task UpdateWirelessDeviceImportTaskAsync(string Id, UpdateWirelessDeviceImportTaskPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless_device_import_task/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a wireless gateway.
		/// DeleteWirelessGateway wireless-gateways/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to delete.
		/// Max length: 256
		// </param>
		public async Task DeleteWirelessGatewayAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates properties of a wireless gateway.
		/// UpdateWirelessGateway wireless-gateways/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to update.
		/// Max length: 256
		// </param>
		public async Task UpdateWirelessGatewayAsync(string Id, UpdateWirelessGatewayPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.
		/// DeleteWirelessGatewayTaskDefinition wireless-gateway-task-definitions/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to delete.
		/// Max length: 36
		// </param>
		public async Task DeleteWirelessGatewayTaskDefinitionAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateway-task-definitions/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a wireless gateway task definition.
		/// GetWirelessGatewayTaskDefinition wireless-gateway-task-definitions/{Id}
		/// </summary>
		/// <param name="Id">The ID of the resource to get.
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWirelessGatewayTaskDefinitionResponse> GetWirelessGatewayTaskDefinitionAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateway-task-definitions/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessGatewayTaskDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregister a wireless device from AWS IoT Wireless.
		/// DeregisterWirelessDevice wireless-devices/{Identifier}/deregister
		/// </summary>
		/// <param name="Identifier">The identifier of the wireless device to deregister from AWS IoT Wireless.
		/// Max length: 256
		// </param>
		/// <param name="WirelessDeviceType">The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeregisterWirelessDeviceResponse> DeregisterWirelessDeviceAsync(string Identifier, WirelessDeviceType WirelessDeviceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Identifier==null? "" : System.Uri.EscapeDataString(Identifier))+"/deregister&WirelessDeviceType=" + WirelessDeviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeregisterWirelessDeviceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.
		/// DisassociateAwsAccountFromPartnerAccount partner-accounts/{PartnerAccountId}#partnerType
		/// </summary>
		/// <param name="PartnerAccountId">The partner account ID to disassociate from the AWS account.
		/// Max length: 256
		// </param>
		/// <param name="partnerType">The partner type.</param>
		public async Task DisassociateAwsAccountFromPartnerAccountAsync(string PartnerAccountId, EventNotificationPartnerType partnerType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "partner-accounts/"+ (PartnerAccountId==null? "" : System.Uri.EscapeDataString(PartnerAccountId))+"#partnerType&partnerType=" + partnerType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.
		/// GetPartnerAccount partner-accounts/{PartnerAccountId}#partnerType
		/// </summary>
		/// <param name="PartnerAccountId">The partner account ID to disassociate from the AWS account.
		/// Max length: 256
		// </param>
		/// <param name="partnerType">The partner type.</param>
		/// <returns>Success</returns>
		public async Task<GetPartnerAccountResponse> GetPartnerAccountAsync(string PartnerAccountId, EventNotificationPartnerType partnerType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "partner-accounts/"+ (PartnerAccountId==null? "" : System.Uri.EscapeDataString(PartnerAccountId))+"#partnerType&partnerType=" + partnerType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPartnerAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates properties of a partner account.
		/// UpdatePartnerAccount partner-accounts/{PartnerAccountId}#partnerType
		/// </summary>
		/// <param name="PartnerAccountId">The ID of the partner account to update.
		/// Max length: 256
		// </param>
		/// <param name="partnerType">The partner type.</param>
		public async Task UpdatePartnerAccountAsync(string PartnerAccountId, EventNotificationPartnerType partnerType, UpdatePartnerAccountPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "partner-accounts/"+ (PartnerAccountId==null? "" : System.Uri.EscapeDataString(PartnerAccountId))+"#partnerType&partnerType=" + partnerType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a multicast group from a fuota task.
		/// DisassociateMulticastGroupFromFuotaTask fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		/// <param name="MulticastGroupId">Max length: 256</param>
		public async Task DisassociateMulticastGroupFromFuotaTaskAsync(string Id, string MulticastGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/multicast-groups/"+ (MulticastGroupId==null? "" : System.Uri.EscapeDataString(MulticastGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a wireless device from a FUOTA task.
		/// DisassociateWirelessDeviceFromFuotaTask fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		/// <param name="WirelessDeviceId">Max length: 256</param>
		public async Task DisassociateWirelessDeviceFromFuotaTaskAsync(string Id, string WirelessDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/wireless-devices/"+ (WirelessDeviceId==null? "" : System.Uri.EscapeDataString(WirelessDeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a wireless device from a multicast group.
		/// DisassociateWirelessDeviceFromMulticastGroup multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		/// <param name="WirelessDeviceId">Max length: 256</param>
		public async Task DisassociateWirelessDeviceFromMulticastGroupAsync(string Id, string WirelessDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/wireless-devices/"+ (WirelessDeviceId==null? "" : System.Uri.EscapeDataString(WirelessDeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the event configuration based on resource types.
		/// GetEventConfigurationByResourceTypes event-configurations-resource-types
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetEventConfigurationByResourceTypesResponse> GetEventConfigurationByResourceTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-configurations-resource-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetEventConfigurationByResourceTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the event configuration based on resource types.
		/// UpdateEventConfigurationByResourceTypes event-configurations-resource-types
		/// </summary>
		public async Task UpdateEventConfigurationByResourceTypesAsync(UpdateEventConfigurationByResourceTypesPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-configurations-resource-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.
		/// GetLogLevelsByResourceTypes log-levels
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLogLevelsByResourceTypesResponse> GetLogLevelsByResourceTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "log-levels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetLogLevelsByResourceTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the log-level overrides for all resources; both wireless devices and wireless gateways.
		/// ResetAllResourceLogLevels log-levels
		/// </summary>
		public async Task ResetAllResourceLogLevelsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "log-levels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.
		/// UpdateLogLevelsByResourceTypes log-levels
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateLogLevelsByResourceTypesResponse> UpdateLogLevelsByResourceTypesAsync(UpdateLogLevelsByResourceTypesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "log-levels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateLogLevelsByResourceTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Get the position information for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position information should use the <a href="https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html">GetResourcePosition</a> API operation instead.</p> </important>
		/// GetPosition positions/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">Resource identifier used to retrieve the position information.</param>
		/// <param name="resourceType">Resource type of the resource for which position information is retrieved.</param>
		/// <returns>Success</returns>
		public async Task<GetPositionResponse> GetPositionAsync(string ResourceIdentifier, PositionResourceType resourceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "positions/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + resourceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPositionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Update the position information of a resource.</p> <important> <p>This action is no longer supported. Calls to update the position information should use the <a href="https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html">UpdateResourcePosition</a> API operation instead.</p> </important>
		/// UpdatePosition positions/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">Resource identifier of the resource for which position is updated.</param>
		/// <param name="resourceType">Resource type of the resource for which position is updated.</param>
		public async Task UpdatePositionAsync(string ResourceIdentifier, PositionResourceType resourceType, UpdatePositionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "positions/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + resourceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Get position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position configuration should use the <a href="https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html">GetResourcePosition</a> API operation instead.</p> </important>
		/// GetPositionConfiguration position-configurations/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">Resource identifier used in a position configuration.</param>
		/// <param name="resourceType">Resource type of the resource for which position configuration is retrieved.</param>
		/// <returns>Success</returns>
		public async Task<GetPositionConfigurationResponse> GetPositionConfigurationAsync(string ResourceIdentifier, PositionResourceType resourceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "position-configurations/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + resourceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPositionConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Put position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to update the position configuration should use the <a href="https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html">UpdateResourcePosition</a> API operation instead.</p> </important>
		/// PutPositionConfiguration position-configurations/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">Resource identifier used to update the position configuration.</param>
		/// <param name="resourceType">Resource type of the resource for which you want to update the position configuration.</param>
		/// <returns>Success</returns>
		public async Task<PutPositionConfigurationResponse> PutPositionConfigurationAsync(string ResourceIdentifier, PositionResourceType resourceType, PutPositionConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "position-configurations/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + resourceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutPositionConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get estimated position information as a payload in GeoJSON format. The payload measurement data is resolved using solvers that are provided by third-party vendors.
		/// GetPositionEstimate position-estimate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPositionEstimateResponse> GetPositionEstimateAsync(GetPositionEstimatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "position-estimate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPositionEstimateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the event configuration for a particular resource identifier.
		/// GetResourceEventConfiguration event-configurations/{Identifier}#identifierType
		/// </summary>
		/// <param name="Identifier">Resource identifier to opt in for event messaging.
		/// Max length: 256
		// </param>
		/// <param name="identifierType">Identifier type of the particular resource identifier for event configuration.</param>
		/// <param name="partnerType">Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetResourceEventConfigurationResponse> GetResourceEventConfigurationAsync(string Identifier, IdentifierType identifierType, EventNotificationPartnerType partnerType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-configurations/"+ (Identifier==null? "" : System.Uri.EscapeDataString(Identifier))+"#identifierType&identifierType=" + identifierType+"&partnerType=" + partnerType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetResourceEventConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the event configuration for a particular resource identifier.
		/// UpdateResourceEventConfiguration event-configurations/{Identifier}#identifierType
		/// </summary>
		/// <param name="Identifier">Resource identifier to opt in for event messaging.
		/// Max length: 256
		// </param>
		/// <param name="identifierType">Identifier type of the particular resource identifier for event configuration.</param>
		/// <param name="partnerType">Partner type of the resource if the identifier type is <code>PartnerAccountId</code> </param>
		public async Task UpdateResourceEventConfigurationAsync(string Identifier, IdentifierType identifierType, EventNotificationPartnerType partnerType, UpdateResourceEventConfigurationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-configurations/"+ (Identifier==null? "" : System.Uri.EscapeDataString(Identifier))+"#identifierType&identifierType=" + identifierType+"&partnerType=" + partnerType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
		/// GetResourceLogLevel log-levels/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">Max length: 256</param>
		/// <param name="resourceType">The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetResourceLogLevelResponse> GetResourceLogLevelAsync(string ResourceIdentifier, string resourceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "log-levels/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetResourceLogLevelResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.
		/// PutResourceLogLevel log-levels/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">Max length: 256</param>
		/// <param name="resourceType">The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.</param>
		/// <returns>Success</returns>
		public async Task<PutResourceLogLevelResponse> PutResourceLogLevelAsync(string ResourceIdentifier, string resourceType, PutResourceLogLevelPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "log-levels/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutResourceLogLevelResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
		/// ResetResourceLogLevel log-levels/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">Max length: 256</param>
		/// <param name="resourceType">The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.</param>
		public async Task ResetResourceLogLevelAsync(string ResourceIdentifier, string resourceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "log-levels/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the position information for a given wireless device or a wireless gateway resource. The position information uses the <a href="https://gisgeography.com/wgs84-world-geodetic-system/"> World Geodetic System (WGS84)</a>.
		/// GetResourcePosition resource-positions/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.</param>
		/// <param name="resourceType">The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway.</param>
		/// <returns>Success</returns>
		public async Task<GetResourcePositionResponse> GetResourcePositionAsync(string ResourceIdentifier, PositionResourceType resourceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resource-positions/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + resourceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetResourcePositionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the position information of a given wireless device or a wireless gateway resource. The position coordinates are based on the <a href="https://gisgeography.com/wgs84-world-geodetic-system/"> World Geodetic System (WGS84)</a>.
		/// UpdateResourcePosition resource-positions/{ResourceIdentifier}#resourceType
		/// </summary>
		/// <param name="ResourceIdentifier">The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.</param>
		/// <param name="resourceType">The type of resource for which position information is updated, which can be a wireless device or a wireless gateway.</param>
		public async Task UpdateResourcePositionAsync(string ResourceIdentifier, PositionResourceType resourceType, UpdateResourcePositionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resource-positions/"+ (ResourceIdentifier==null? "" : System.Uri.EscapeDataString(ResourceIdentifier))+"#resourceType&resourceType=" + resourceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.
		/// GetServiceEndpoint service-endpoint
		/// </summary>
		/// <param name="serviceType">The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.</param>
		/// <returns>Success</returns>
		public async Task<GetServiceEndpointResponse> GetServiceEndpointAsync(WirelessGatewayServiceType serviceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "service-endpoint?serviceType=" + serviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetServiceEndpointResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a wireless device.
		/// GetWirelessDevice wireless-devices/{Identifier}#identifierType
		/// </summary>
		/// <param name="Identifier">The identifier of the wireless device to get.
		/// Max length: 256
		// </param>
		/// <param name="identifierType">The type of identifier used in <code>identifier</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetWirelessDeviceResponse> GetWirelessDeviceAsync(string Identifier, WirelessDeviceIdType identifierType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Identifier==null? "" : System.Uri.EscapeDataString(Identifier))+"#identifierType&identifierType=" + identifierType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessDeviceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets operating information about a wireless device.
		/// GetWirelessDeviceStatistics wireless-devices/{Id}/statistics
		/// </summary>
		/// <param name="Id">The ID of the wireless device for which to get the data.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWirelessDeviceStatisticsResponse> GetWirelessDeviceStatisticsAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessDeviceStatisticsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a wireless gateway.
		/// GetWirelessGateway wireless-gateways/{Identifier}#identifierType
		/// </summary>
		/// <param name="Identifier">The identifier of the wireless gateway to get.
		/// Max length: 256
		// </param>
		/// <param name="identifierType">The type of identifier used in <code>identifier</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetWirelessGatewayResponse> GetWirelessGatewayAsync(string Identifier, WirelessGatewayIdType identifierType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Identifier==null? "" : System.Uri.EscapeDataString(Identifier))+"#identifierType&identifierType=" + identifierType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessGatewayResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the firmware version and other information about a wireless gateway.
		/// GetWirelessGatewayFirmwareInformation wireless-gateways/{Id}/firmware-information
		/// </summary>
		/// <param name="Id">The ID of the resource to get.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWirelessGatewayFirmwareInformationResponse> GetWirelessGatewayFirmwareInformationAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/firmware-information";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessGatewayFirmwareInformationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets operating information about a wireless gateway.
		/// GetWirelessGatewayStatistics wireless-gateways/{Id}/statistics
		/// </summary>
		/// <param name="Id">The ID of the wireless gateway for which to get the data.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWirelessGatewayStatisticsResponse> GetWirelessGatewayStatisticsAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-gateways/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWirelessGatewayStatisticsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the Sidewalk devices in an import task and their onboarding status.
		/// ListDevicesForWirelessDeviceImportTask wireless_device_import_task#id
		/// </summary>
		/// <param name="id">The identifier of the import task for which wireless devices are listed.
		/// Max length: 256
		// </param>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="status">The status of the devices in the import task.</param>
		/// <returns>Success</returns>
		public async Task<ListDevicesForWirelessDeviceImportTaskResponse> ListDevicesForWirelessDeviceImportTaskAsync(string id, int maxResults, string nextToken, OnboardStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless_device_import_task#id?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDevicesForWirelessDeviceImportTaskResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List event configurations where at least one event topic has been enabled.
		/// ListEventConfigurations event-configurations#resourceType
		/// </summary>
		/// <param name="resourceType">Resource type to filter event configurations.</param>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <returns>Success</returns>
		public async Task<ListEventConfigurationsResponse> ListEventConfigurationsAsync(EventNotificationResourceType resourceType, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event-configurations#resourceType?resourceType=" + resourceType+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEventConfigurationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all multicast groups associated with a fuota task.
		/// ListMulticastGroupsByFuotaTask fuota-tasks/{Id}/multicast-groups
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMulticastGroupsByFuotaTaskResponse> ListMulticastGroupsByFuotaTaskAsync(string Id, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fuota-tasks/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/multicast-groups&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMulticastGroupsByFuotaTaskResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List position configurations for a given resource, such as positioning solvers.</p> <important> <p>This action is no longer supported. Calls to retrieve position information should use the <a href="https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html">GetResourcePosition</a> API operation instead.</p> </important>
		/// ListPositionConfigurations position-configurations
		/// </summary>
		/// <param name="resourceType">Resource type for which position configurations are listed.</param>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPositionConfigurationsResponse> ListPositionConfigurationsAsync(PositionResourceType resourceType, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "position-configurations?resourceType=" + resourceType+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPositionConfigurationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List queued messages in the downlink queue.
		/// ListQueuedMessages wireless-devices/{Id}/data
		/// </summary>
		/// <param name="Id">The ID of a given wireless device which the downlink message packets are being sent.
		/// Max length: 256
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <param name="maxResults">The maximum number of results to return in this operation.
		/// Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="WirelessDeviceType">The wireless device type, whic can be either Sidewalk or LoRaWAN.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListQueuedMessagesResponse> ListQueuedMessagesAsync(string Id, string nextToken, int maxResults, WirelessDeviceType WirelessDeviceType, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/data&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&WirelessDeviceType=" + WirelessDeviceType+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListQueuedMessagesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends a decrypted application data frame to a device.
		/// SendDataToWirelessDevice wireless-devices/{Id}/data
		/// </summary>
		/// <param name="Id">The ID of the wireless device to receive the data.
		/// Max length: 256
		// </param>
		public async Task SendDataToWirelessDeviceAsync(string Id, SendDataToWirelessDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/data";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags (metadata) you have assigned to the resource.
		/// ListTagsForResource tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource for which you want to list tags.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a tag to a resource.
		/// TagResource tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource to add tags to.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List wireless devices that have been added to an import task.
		/// ListWirelessDeviceImportTasks wireless_device_import_tasks
		/// </summary>
		/// <param name="maxResults">Minimum: 0
		/// Maximum: 250
		// </param>
		/// <param name="nextToken">To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
		/// Max length: 4096
		// </param>
		/// <returns>Success</returns>
		public async Task<ListWirelessDeviceImportTasksResponse> ListWirelessDeviceImportTasksAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless_device_import_tasks?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWirelessDeviceImportTasksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends the specified data to a multicast group.
		/// SendDataToMulticastGroup multicast-groups/{Id}/data
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task SendDataToMulticastGroupAsync(string Id, SendDataToMulticastGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/data";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a bulk association of all qualifying wireless devices with a multicast group.
		/// StartBulkAssociateWirelessDeviceWithMulticastGroup multicast-groups/{Id}/bulk
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task StartBulkAssociateWirelessDeviceWithMulticastGroupAsync(string Id, StartBulkAssociateWirelessDeviceWithMulticastGroupPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/bulk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.
		/// StartBulkDisassociateWirelessDeviceFromMulticastGroup multicast-groups/{Id}/bulk
		/// </summary>
		/// <param name="Id">Max length: 256</param>
		public async Task StartBulkDisassociateWirelessDeviceFromMulticastGroupAsync(string Id, StartBulkDisassociateWirelessDeviceFromMulticastGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "multicast-groups/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/bulk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start import task for a single wireless device.
		/// StartSingleWirelessDeviceImportTask wireless_single_device_import_task
		/// </summary>
		public async Task StartSingleWirelessDeviceImportTaskAsync(StartSingleWirelessDeviceImportTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless_single_device_import_task";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start import task for provisioning Sidewalk devices in bulk using an S3 CSV file.
		/// StartWirelessDeviceImportTask wireless_device_import_task
		/// </summary>
		public async Task StartWirelessDeviceImportTaskAsync(StartWirelessDeviceImportTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless_device_import_task";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.
		/// TestWirelessDevice wireless-devices/{Id}/test
		/// </summary>
		/// <param name="Id">The ID of the wireless device to test.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<TestWirelessDeviceResponse> TestWirelessDeviceAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wireless-devices/"+ (Id==null? "" : System.Uri.EscapeDataString(Id))+"/test";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TestWirelessDeviceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from a resource.
		/// UntagResource tags#resourceArn&tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource to remove tags from.
		/// Min length: 1
		/// Max length: 1011
		// </param>
		/// <param name="tagKeys">A list of the keys of the tags to remove from the resource.
		/// Minimum items: 0
		/// Maximum items: 200
		// </param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceArn&tagKeys?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AssociateAwsAccountWithPartnerAccountPostBody
	{
		
		/// <summary>
		/// Information about a Sidewalk account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssociateAwsAccountWithPartnerAccountPostBodySidewalk Sidewalk { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class AssociateAwsAccountWithPartnerAccountPostBodySidewalk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppServerPrivateKey { get; set; }
	}
	
	public class AssociateMulticastGroupWithFuotaTaskPutBody
	{
		
		/// <summary>
		/// The ID of the multicast group.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string MulticastGroupId { get; set; }
	}
	
	public class AssociateWirelessDeviceWithFuotaTaskPutBody
	{
		
		/// <summary>
		/// The ID of the wireless device.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string WirelessDeviceId { get; set; }
	}
	
	public class AssociateWirelessDeviceWithMulticastGroupPutBody
	{
		
		/// <summary>
		/// The ID of the wireless device.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string WirelessDeviceId { get; set; }
	}
	
	public class AssociateWirelessDeviceWithThingPutBody
	{
		
		/// <summary>
		/// The ARN of the thing to associate with the wireless device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	public class AssociateWirelessGatewayWithCertificatePutBody
	{
		
		/// <summary>
		/// The ID of the certificate to associate with the wireless gateway.
		/// Required
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string IotCertificateId { get; set; }
	}
	
	public class AssociateWirelessGatewayWithThingPutBody
	{
		
		/// <summary>
		/// The ARN of the thing to associate with the wireless gateway.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	public class StartMulticastGroupSessionPutBody
	{
		
		/// <summary>
		/// The LoRaWAN information used with the multicast session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartMulticastGroupSessionPutBodyLoRaWAN LoRaWAN { get; set; }
	}
	
	public class StartMulticastGroupSessionPutBodyLoRaWAN
	{
		
		/// <summary>
		/// Downlink data rate.
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public System.Nullable<System.Int32> DlDr { get; set; }
		
		/// <summary>
		/// Downlink frequency.
		/// Minimum: 100000000
		/// Maximum: 1000000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000000, 1000000000)]
		public System.Nullable<System.Int32> DlFreq { get; set; }
		
		/// <summary>
		/// Timestamp of when the multicast group session is to start.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SessionStartTime { get; set; }
		
		/// <summary>
		/// How long before a multicast group session is to timeout.
		/// Minimum: 60
		/// Maximum: 172800
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 172800)]
		public System.Nullable<System.Int32> SessionTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotPeriod { get; set; }
	}
	
	public class CreateDestinationPostBody
	{
		
		/// <summary>
		/// The name of the new resource.
		/// Required
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of value in <code>Expression</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExpressionType ExpressionType { get; set; }
		
		/// <summary>
		/// The rule name or topic rule to send messages to.
		/// Required
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Expression { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The ARN of the IAM Role that authorizes the destination.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateDeviceProfilePostBody
	{
		
		/// <summary>
		/// The name of the new resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// LoRaWANDeviceProfile object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDeviceProfilePostBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Sidewalk object for creating a device profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sidewalk { get; set; }
	}
	
	public class CreateDeviceProfilePostBodyLoRaWAN
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsClassB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClassBTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotDr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PingSlotFreq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsClassC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClassCTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegParamsRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxDelay1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxDrOffset1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxDataRate2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RxFreq2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FactoryPresetFreqsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxEirp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDutyCycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RfRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsJoin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Supports32BitFCnt { get; set; }
	}
	
	public class CreateFuotaTaskPostBody
	{
		
		/// <summary>
		/// The name of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The LoRaWAN information used with a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateFuotaTaskPostBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// The S3 URI points to a firmware update image that is to be used with a FUOTA task.
		/// Required
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string FirmwareUpdateImage { get; set; }
		
		/// <summary>
		/// The firmware update role that is to be used with a FUOTA task.
		/// Required
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string FirmwareUpdateRole { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> RedundancyPercent { get; set; }
		
		/// <summary>
		/// The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentSizeBytes { get; set; }
		
		/// <summary>
		/// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentIntervalMS { get; set; }
	}
	
	public class CreateFuotaTaskPostBodyLoRaWAN
	{
		
		/// <summary>
		/// Supported RfRegions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CreateFuotaTaskPostBodyLoRaWANRfRegion> RfRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateFuotaTaskPostBodyLoRaWANRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	public class CreateMulticastGroupPostBody
	{
		
		/// <summary>
		/// The name of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The LoRaWAN information that is to be used with the multicast group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateMulticastGroupPostBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateMulticastGroupPostBodyLoRaWAN
	{
		
		/// <summary>
		/// Supported RfRegions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CreateMulticastGroupPostBodyLoRaWANRfRegion> RfRegion { get; set; }
		
		/// <summary>
		/// DlClass for LoRaWAM, valid values are ClassB and ClassC.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public DlClass DlClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateMulticastGroupPostBodyLoRaWANRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	public class CreateNetworkAnalyzerConfigurationPostBody
	{
		
		/// <summary>
		/// Name of the network analyzer configuration.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// Trace content for your wireless gateway and wireless device resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateNetworkAnalyzerConfigurationPostBodyTraceContent TraceContent { get; set; }
		
		/// <summary>
		/// Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.
		/// Minimum items: 0
		/// Maximum items: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string[] WirelessDevices { get; set; }
		
		/// <summary>
		/// Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessGateways { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Multicast Group resources to add to the network analyzer configruation. Provide the <code>MulticastGroupId</code> of the resource to add in the input array.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] MulticastGroups { get; set; }
	}
	
	public class CreateNetworkAnalyzerConfigurationPostBodyTraceContent
	{
		
		/// <summary>
		///  <code>FrameInfo</code> of your wireless device resources for the trace content. Use FrameInfo to debug the communication between your LoRaWAN end devices and the network server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceFrameInfo WirelessDeviceFrameInfo { get; set; }
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		/// <summary>
		///  <code>FrameInfo</code> of your multicast group resources for the trace content. Use FrameInfo to debug the multicast communication between your LoRaWAN end devices and the network server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceFrameInfo MulticastFrameInfo { get; set; }
	}
	
	public class CreateServiceProfilePostBody
	{
		
		/// <summary>
		/// The name of the new resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// LoRaWANServiceProfile object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateServiceProfilePostBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateServiceProfilePostBodyLoRaWAN
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AddGwMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DrMin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DrMax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RaAllowed { get; set; }
	}
	
	public class CreateWirelessDevicePostBody
	{
		
		/// <summary>
		/// The wireless device type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceType Type { get; set; }
		
		/// <summary>
		/// The name of the new resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the destination to assign to the new wireless device.
		/// Required
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// LoRaWAN object for create functions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateWirelessDevicePostBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// FPort values for the GNSS, stream, and ClockSync functions of the positioning information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus Positioning { get; set; }
		
		/// <summary>
		/// Sidewalk object for creating a wireless device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateWirelessDevicePostBodySidewalk Sidewalk { get; set; }
	}
	
	public class CreateWirelessDevicePostBodyLoRaWAN
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DevEui { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OtaaV1_1 OtaaV1_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OtaaV1_0_x OtaaV1_0_x { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AbpV1_1 AbpV1_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AbpV1_0_x AbpV1_0_x { get; set; }
		
		/// <summary>
		/// List of FPort assigned for different LoRaWAN application packages to use
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FPorts FPorts { get; set; }
	}
	
	public class CreateWirelessDevicePostBodySidewalk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
	}
	
	public class CreateWirelessGatewayPostBody
	{
		
		/// <summary>
		/// The name of the new resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// LoRaWANGateway object.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateWirelessGatewayPostBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateWirelessGatewayPostBodyLoRaWAN
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayEui { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RfRegion { get; set; }
		
		/// <summary>
		/// A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string[][] JoinEuiFilters { get; set; }
		
		/// <summary>
		/// A list of NetId values that are used by LoRa gateways to filter the uplink frames.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] NetIdFilters { get; set; }
		
		/// <summary>
		/// A list of integer indicating which sub bands are supported by LoRa gateway.
		/// Minimum items: 0
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public int[] SubBands { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Beaconing Beaconing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float MaxEirp { get; set; }
	}
	
	public class CreateWirelessGatewayTaskPostBody
	{
		
		/// <summary>
		/// The ID of the WirelessGatewayTaskDefinition.
		/// Required
		/// Max length: 36
		/// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
		public string WirelessGatewayTaskDefinitionId { get; set; }
	}
	
	public class CreateWirelessGatewayTaskDefinitionPostBody
	{
		
		/// <summary>
		/// Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoCreateTasks { get; set; }
		
		/// <summary>
		/// The name of the new resource.
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Name { get; set; }
		
		/// <summary>
		/// UpdateWirelessGatewayTaskCreate object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateWirelessGatewayTaskDefinitionPostBodyUpdate Update { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateWirelessGatewayTaskDefinitionPostBodyUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateDataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateDataRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANUpdateGatewayTaskCreate LoRaWAN { get; set; }
	}
	
	public class UpdateDestinationPatchBody
	{
		
		/// <summary>
		/// The type of value in <code>Expression</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExpressionType ExpressionType { get; set; }
		
		/// <summary>
		/// The new rule name or topic rule to send messages to.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Expression { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The ARN of the IAM Role that authorizes the destination.
		/// Min length: 20
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RoleArn { get; set; }
	}
	
	public class StartFuotaTaskPutBody
	{
		
		/// <summary>
		/// The LoRaWAN information used to start a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartFuotaTaskPutBodyLoRaWAN LoRaWAN { get; set; }
	}
	
	public class StartFuotaTaskPutBodyLoRaWAN
	{
		
		/// <summary>
		/// Start time of a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	public class UpdateFuotaTaskPatchBody
	{
		
		/// <summary>
		/// The name of a FUOTA task.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The LoRaWAN information used with a FUOTA task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateFuotaTaskPatchBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// The S3 URI points to a firmware update image that is to be used with a FUOTA task.
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string FirmwareUpdateImage { get; set; }
		
		/// <summary>
		/// The firmware update role that is to be used with a FUOTA task.
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string FirmwareUpdateRole { get; set; }
		
		/// <summary>
		/// The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> RedundancyPercent { get; set; }
		
		/// <summary>
		/// The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentSizeBytes { get; set; }
		
		/// <summary>
		/// <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentIntervalMS { get; set; }
	}
	
	public class UpdateFuotaTaskPatchBodyLoRaWAN
	{
		
		/// <summary>
		/// Supported RfRegions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<UpdateFuotaTaskPatchBodyLoRaWANRfRegion> RfRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateFuotaTaskPatchBodyLoRaWANRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	public class UpdateMulticastGroupPatchBody
	{
		
		/// <summary>
		/// The name of the multicast group.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// The LoRaWAN information that is to be used with the multicast group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateMulticastGroupPatchBodyLoRaWAN LoRaWAN { get; set; }
	}
	
	public class UpdateMulticastGroupPatchBodyLoRaWAN
	{
		
		/// <summary>
		/// Supported RfRegions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<UpdateMulticastGroupPatchBodyLoRaWANRfRegion> RfRegion { get; set; }
		
		/// <summary>
		/// DlClass for LoRaWAM, valid values are ClassB and ClassC.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public DlClass DlClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateMulticastGroupPatchBodyLoRaWANRfRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU868 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US915 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU915 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-1")]
		AS923Minus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-2")]
		AS923Minus2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-3")]
		AS923Minus3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AS923-4")]
		AS923Minus4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU433 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN470 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN779 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU864 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR920 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN865 = 12,
	}
	
	public class UpdateNetworkAnalyzerConfigurationPatchBody
	{
		
		/// <summary>
		/// Trace content for your wireless gateway and wireless device resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateNetworkAnalyzerConfigurationPatchBodyTraceContent TraceContent { get; set; }
		
		/// <summary>
		/// Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.
		/// Minimum items: 0
		/// Maximum items: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string[] WirelessDevicesToAdd { get; set; }
		
		/// <summary>
		/// Wireless device resources to remove from the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resources to remove in the input array.
		/// Minimum items: 0
		/// Maximum items: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string[] WirelessDevicesToRemove { get; set; }
		
		/// <summary>
		/// Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessGatewaysToAdd { get; set; }
		
		/// <summary>
		/// Wireless gateway resources to remove from the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resources to remove in the input array.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] WirelessGatewaysToRemove { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// Multicast group resources to add to the network analyzer configuration. Provide the <code>MulticastGroupId</code> of the resource to add in the input array.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] MulticastGroupsToAdd { get; set; }
		
		/// <summary>
		/// Multicast group resources to remove from the network analyzer configuration. Provide the <code>MulticastGroupId</code> of the resource to remove in the input array.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] MulticastGroupsToRemove { get; set; }
	}
	
	public class UpdateNetworkAnalyzerConfigurationPatchBodyTraceContent
	{
		
		/// <summary>
		///  <code>FrameInfo</code> of your wireless device resources for the trace content. Use FrameInfo to debug the communication between your LoRaWAN end devices and the network server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceFrameInfo WirelessDeviceFrameInfo { get; set; }
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
		
		/// <summary>
		///  <code>FrameInfo</code> of your multicast group resources for the trace content. Use FrameInfo to debug the multicast communication between your LoRaWAN end devices and the network server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceFrameInfo MulticastFrameInfo { get; set; }
	}
	
	public class UpdateWirelessDevicePatchBody
	{
		
		/// <summary>
		/// The name of the new destination for the device.
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// The new name of the resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// LoRaWAN object for update functions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateWirelessDevicePatchBodyLoRaWAN LoRaWAN { get; set; }
		
		/// <summary>
		/// FPort values for the GNSS, stream, and ClockSync functions of the positioning information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus Positioning { get; set; }
	}
	
	public class UpdateWirelessDevicePatchBodyLoRaWAN
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAbpV1_1 AbpV1_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAbpV1_0_x AbpV1_0_x { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateFPorts FPorts { get; set; }
	}
	
	public class UpdateWirelessDeviceImportTaskPatchBody
	{
		
		/// <summary>
		/// Sidewalk object information for updating an import task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateWirelessDeviceImportTaskPatchBodySidewalk Sidewalk { get; set; }
	}
	
	public class UpdateWirelessDeviceImportTaskPatchBodySidewalk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceCreationFile { get; set; }
	}
	
	public class UpdateWirelessGatewayPatchBody
	{
		
		/// <summary>
		/// The new name of the resource.
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the new resource.
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string[][] JoinEuiFilters { get; set; }
		
		/// <summary>
		/// A list of NetId values that are used by LoRa gateways to filter the uplink frames.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] NetIdFilters { get; set; }
		
		/// <summary>
		/// The MaxEIRP value.
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Single> MaxEirp { get; set; }
	}
	
	public class UpdatePartnerAccountPatchBody
	{
		
		/// <summary>
		/// Sidewalk update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdatePartnerAccountPatchBodySidewalk Sidewalk { get; set; }
	}
	
	public class UpdatePartnerAccountPatchBodySidewalk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppServerPrivateKey { get; set; }
	}
	
	public class UpdateEventConfigurationByResourceTypesPatchBody
	{
		
		/// <summary>
		/// Device registration state resource type event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateEventConfigurationByResourceTypesPatchBodyDeviceRegistrationState DeviceRegistrationState { get; set; }
		
		/// <summary>
		/// Proximity resource type event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateEventConfigurationByResourceTypesPatchBodyProximity Proximity { get; set; }
		
		/// <summary>
		/// Join resource type event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateEventConfigurationByResourceTypesPatchBodyJoin Join { get; set; }
		
		/// <summary>
		/// Connection status resource type event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateEventConfigurationByResourceTypesPatchBodyConnectionStatus ConnectionStatus { get; set; }
		
		/// <summary>
		/// Message delivery status resource type event configuration object for enabling or disabling relevant topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateEventConfigurationByResourceTypesPatchBodyMessageDeliveryStatus MessageDeliveryStatus { get; set; }
	}
	
	public class UpdateEventConfigurationByResourceTypesPatchBodyDeviceRegistrationState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkResourceTypeEventConfiguration Sidewalk { get; set; }
	}
	
	public class UpdateEventConfigurationByResourceTypesPatchBodyProximity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkResourceTypeEventConfiguration Sidewalk { get; set; }
	}
	
	public class UpdateEventConfigurationByResourceTypesPatchBodyJoin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANJoinResourceTypeEventConfiguration LoRaWAN { get; set; }
	}
	
	public class UpdateEventConfigurationByResourceTypesPatchBodyConnectionStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANConnectionStatusResourceTypeEventConfiguration LoRaWAN { get; set; }
	}
	
	public class UpdateEventConfigurationByResourceTypesPatchBodyMessageDeliveryStatus
	{
		
		/// <summary>
		/// Sidewalk resource type event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SidewalkResourceTypeEventConfiguration Sidewalk { get; set; }
	}
	
	public class UpdateLogLevelsByResourceTypesPostBody
	{
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogLevel DefaultLogLevel { get; set; }
		
		/// <summary>
		/// The list of wireless device log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessDeviceLogOption[] WirelessDeviceLogOptions { get; set; }
		
		/// <summary>
		/// The list of wireless gateway log options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WirelessGatewayLogOption[] WirelessGatewayLogOptions { get; set; }
	}
	
	public class UpdatePositionPatchBody
	{
		
		/// <summary>
		/// The position information of the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] Position { get; set; }
	}
	
	public class PutPositionConfigurationPutBody
	{
		
		/// <summary>
		/// The wrapper for position solver configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutPositionConfigurationPutBodySolvers Solvers { get; set; }
		
		/// <summary>
		/// The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string Destination { get; set; }
	}
	
	public class PutPositionConfigurationPutBodySolvers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SemtechGnssConfiguration SemtechGnss { get; set; }
	}
	
	public class GetPositionEstimatePostBody
	{
		
		/// <summary>
		/// Retrieves an estimated device position by resolving WLAN measurement data. The position is resolved using HERE's Wi-Fi based solver.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WiFiAccessPoint[] WiFiAccessPoints { get; set; }
		
		/// <summary>
		/// The cell towers that were used to perform the measurements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetPositionEstimatePostBodyCellTowers CellTowers { get; set; }
		
		/// <summary>
		/// IP address used for resolving device location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetPositionEstimatePostBodyIp Ip { get; set; }
		
		/// <summary>
		/// Global navigation satellite system (GNSS) object used for positioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetPositionEstimatePostBodyGnss Gnss { get; set; }
		
		/// <summary>
		/// Optional information that specifies the time when the position information will be resolved. It uses the Unix timestamp format. If not specified, the time at which the request was received will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	public class GetPositionEstimatePostBodyCellTowers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GsmObj[] Gsm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WcdmaObj[] Wcdma { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TdscdmaObj[] Tdscdma { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LteObj[] Lte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CdmaObj[] Cdma { get; set; }
	}
	
	public class GetPositionEstimatePostBodyIp
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	public class GetPositionEstimatePostBodyGnss
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Payload { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float CaptureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float CaptureTimeAccuracy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AssistPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float AssistAltitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Use2DSolver { get; set; }
	}
	
	public class UpdateResourceEventConfigurationPatchBody
	{
		
		/// <summary>
		/// Device registration state event configuration object for enabling and disabling relevant topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateResourceEventConfigurationPatchBodyDeviceRegistrationState DeviceRegistrationState { get; set; }
		
		/// <summary>
		/// Proximity event configuration object for enabling and disabling relevant topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateResourceEventConfigurationPatchBodyProximity Proximity { get; set; }
		
		/// <summary>
		/// Join event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateResourceEventConfigurationPatchBodyJoin Join { get; set; }
		
		/// <summary>
		/// Connection status event configuration object for enabling or disabling topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateResourceEventConfigurationPatchBodyConnectionStatus ConnectionStatus { get; set; }
		
		/// <summary>
		/// Message delivery status event configuration object for enabling and disabling relevant topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateResourceEventConfigurationPatchBodyMessageDeliveryStatus MessageDeliveryStatus { get; set; }
	}
	
	public class UpdateResourceEventConfigurationPatchBodyDeviceRegistrationState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkEventNotificationConfigurations Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	public class UpdateResourceEventConfigurationPatchBodyProximity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkEventNotificationConfigurations Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	public class UpdateResourceEventConfigurationPatchBodyJoin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANJoinEventNotificationConfigurations LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	public class UpdateResourceEventConfigurationPatchBodyConnectionStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANConnectionStatusEventNotificationConfigurations LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessGatewayIdEventTopic { get; set; }
	}
	
	public class UpdateResourceEventConfigurationPatchBodyMessageDeliveryStatus
	{
		
		/// <summary>
		///  <code>SidewalkEventNotificationConfigurations</code> object, which is the event configuration object for Sidewalk-related event topics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SidewalkEventNotificationConfigurations Sidewalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventNotificationTopicStatus WirelessDeviceIdEventTopic { get; set; }
	}
	
	public class PutResourceLogLevelPutBody
	{
		
		/// <summary>
		/// The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogLevel LogLevel { get; set; }
	}
	
	public class UpdateResourcePositionPatchBody
	{
		
		/// <summary>
		/// The position information of the resource, displayed as a JSON payload. The payload uses the GeoJSON format, which a format that's used to encode geographic data structures. For more information, see <a href="https://geojson.org/">GeoJSON</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GeoJsonPayload { get; set; }
	}
	
	public class SendDataToWirelessDevicePostBody
	{
		
		/// <summary>
		/// The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public int TransmitMode { get; set; }
		
		/// <summary>
		/// The binary to be sent to the end device, encoded in base64.
		/// Required
		/// Max length: 2048
		/// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
		public string PayloadData { get; set; }
		
		/// <summary>
		/// WirelessMetadata object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SendDataToWirelessDevicePostBodyWirelessMetadata WirelessMetadata { get; set; }
	}
	
	public class SendDataToWirelessDevicePostBodyWirelessMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANSendDataToDevice LoRaWAN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SidewalkSendDataToDevice Sidewalk { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class SendDataToMulticastGroupPostBody
	{
		
		/// <summary>
		/// The binary to be sent to the end device, encoded in base64.
		/// Required
		/// Max length: 2048
		/// Pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")]
		public string PayloadData { get; set; }
		
		/// <summary>
		/// Wireless metadata that is to be sent to multicast group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SendDataToMulticastGroupPostBodyWirelessMetadata WirelessMetadata { get; set; }
	}
	
	public class SendDataToMulticastGroupPostBodyWirelessMetadata
	{
		
		/// <summary>
		/// The metadata information of the LoRaWAN multicast group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoRaWANMulticastMetadata LoRaWAN { get; set; }
	}
	
	public class StartBulkAssociateWirelessDeviceWithMulticastGroupPatchBody
	{
		
		/// <summary>
		/// Query string used to search for wireless devices as part of the bulk associate and disassociate process.
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class StartBulkDisassociateWirelessDeviceFromMulticastGroupPostBody
	{
		
		/// <summary>
		/// Query string used to search for wireless devices as part of the bulk associate and disassociate process.
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	public class StartSingleWirelessDeviceImportTaskPostBody
	{
		
		/// <summary>
		/// The name of the Sidewalk destination that describes the IoT rule to route messages from the device in the import task that will be onboarded to AWS IoT Wireless.
		/// Required
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The name of the wireless device for which an import task is being started.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Information about an import task created for an individual Sidewalk device.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartSingleWirelessDeviceImportTaskPostBodySidewalk Sidewalk { get; set; }
	}
	
	public class StartSingleWirelessDeviceImportTaskPostBodySidewalk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SidewalkManufacturingSn { get; set; }
	}
	
	public class StartWirelessDeviceImportTaskPostBody
	{
		
		/// <summary>
		/// The name of the Sidewalk destination that describes the IoT rule to route messages from the devices in the import task that are onboarded to AWS IoT Wireless.
		/// Required
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9-_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9-_]+")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]+$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Information about an import task created for bulk provisioning.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartWirelessDeviceImportTaskPostBodySidewalk Sidewalk { get; set; }
	}
	
	public class StartWirelessDeviceImportTaskPostBodySidewalk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceCreationFile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
