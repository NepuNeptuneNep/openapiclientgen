//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Country_read
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Int32> Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChange")]
		public System.Nullable<System.DateTimeOffset> LastChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DailyReport_read
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// getLatestCountryDataByName
		/// Get latest data for specific country. Country name and format are in parametars.
		/// GetLatestCountryDataByName country
		/// </summary>
		/// <param name="name">Name of the country</param>
		/// <param name="format">Format of the response</param>
		/// <returns>Latest data about COVID-19 for selected country</returns>
		public async Task<GetLatestCountryDataByNameReturn[]> GetLatestCountryDataByNameAsync(string name, GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "country?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLatestCountryDataByNameReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getLatestAllCountries
		/// Get latest data from all countries.
		/// GetLatestAllCountries country/all
		/// </summary>
		/// <param name="format">Format of the response</param>
		/// <returns>Returns all countries with latest data about COVID-19</returns>
		public async Task<GetLatestAllCountriesReturn[]> GetLatestAllCountriesAsync(GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "country/all?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLatestAllCountriesReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getLatestCountryDataByCode
		/// Get latest data for specific country. Country code and format are in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.
		/// GetLatestCountryDataByCode country/code
		/// </summary>
		/// <param name="code">Country code</param>
		/// <param name="format">Format of the response</param>
		/// <returns>Latest data about COVID-19 for selected country</returns>
		public async Task<GetLatestCountryDataByCodeReturn[]> GetLatestCountryDataByCodeAsync(string code, GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "country/code?code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLatestCountryDataByCodeReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getListOfCountries
		/// Get name name, alpha-2, alpha-3 code, latitude and longitude for every country.
		/// GetListOfCountries help/countries
		/// </summary>
		/// <param name="format">Format of the response</param>
		/// <returns>Get name name, alpha-2, alpha-3 code, latitude and longitude for every country</returns>
		public async Task<GetListOfCountriesReturn[]> GetListOfCountriesAsync(GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "help/countries?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetListOfCountriesReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getDailyReportAllCountries
		/// Get daily report for all countries. Date is mandatory parametar. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter.
		/// GetDailyReportAllCountries report/country/all
		/// </summary>
		/// <param name="date">Date of the report.</param>
		/// <param name="date_format">Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format.</param>
		/// <param name="format">Format of the response</param>
		/// <returns>Daily report for COVID-19 for selected country.</returns>
		public async Task<GetDailyReportAllCountriesReturn[]> GetDailyReportAllCountriesAsync(string date, GetDailyReportAllCountriesDate_format date_format, GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/country/all?date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&date-format=" + date_format+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDailyReportAllCountriesReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getDailyReportByCountryCode
		/// Get daily report for specific country. Country code and date are mandatory in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
		/// GetDailyReportByCountryCode report/country/code
		/// </summary>
		/// <param name="code">Country code. Country code is by ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type.</param>
		/// <param name="date">Date of the report.</param>
		/// <param name="date_format">Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format.</param>
		/// <param name="format">Format of the response</param>
		/// <returns>Daily report for COVID-19 for selected country.</returns>
		public async Task<GetDailyReportByCountryCodeReturn[]> GetDailyReportByCountryCodeAsync(string code, string date, GetDailyReportByCountryCodeDate_format date_format, GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/country/code?code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&date-format=" + date_format+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDailyReportByCountryCodeReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getDailyReportByCountryName
		/// Get daily report for specific country. Country name and date are mandatory in parametars. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter
		/// GetDailyReportByCountryName report/country/name
		/// </summary>
		/// <param name="name">Country name.</param>
		/// <param name="date">Date of the report.</param>
		/// <param name="date_format">Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format.</param>
		/// <param name="format">Format of the response</param>
		/// <returns>Daily report for COVID-19 for selected country.</returns>
		public async Task<GetDailyReportByCountryNameReturn[]> GetDailyReportByCountryNameAsync(string name, string date, GetDailyReportByCountryNameDate_format date_format, GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/country/name?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&date-format=" + date_format+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDailyReportByCountryNameReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getDailyReportTotals
		/// Get daily report data for whole world.
		/// GetDailyReportTotals report/totals
		/// </summary>
		/// <param name="date">Date of the report. If you don't put this field all dates will be returned.</param>
		/// <param name="date_format">Date format. If you dont want to use ISO 8601 standard (YYYY-MM-DD), you can provide different format.</param>
		/// <param name="format">Format of the response. If you don't put this field JSON will be response format.</param>
		/// <returns>Data about COVID-19 for whole world</returns>
		public async Task<GetDailyReportTotalsReturn[]> GetDailyReportTotalsAsync(string date, GetDailyReportTotalsDate_format date_format, GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "report/totals?date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&date-format=" + date_format+"&format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDailyReportTotalsReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// getLatestTotals
		/// Get latest data for whole world.
		/// GetLatestTotals totals
		/// </summary>
		/// <param name="format">Format of the response</param>
		/// <returns>Latest data about COVID-19 for whole world</returns>
		public async Task<GetLatestTotalsReturn[]> GetLatestTotalsAsync(GetLatestCountryDataByNameFormat format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "totals?format=" + format;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLatestTotalsReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetLatestCountryDataByNameFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="xml")]
		xml = 1,
	}
	
	public class GetLatestCountryDataByNameReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Int32> Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChange")]
		public System.Nullable<System.DateTimeOffset> LastChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	public class GetLatestAllCountriesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Int32> Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChange")]
		public System.Nullable<System.DateTimeOffset> LastChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	public class GetLatestCountryDataByCodeReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Int32> Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChange")]
		public System.Nullable<System.DateTimeOffset> LastChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	public class GetListOfCountriesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="alpha-2-code")]
		public string Alpha_2_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alpha-3-code")]
		public string Alpha_3_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum GetDailyReportAllCountriesDate_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-MM-DD")]
		YYYYMinusMMMinusDD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-DD-MM")]
		YYYYMinusDDMinusMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DD-MM-YYYY")]
		DDMinusMMMinusYYYY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MM-DD-YYYY")]
		MMMinusDDMinusYYYY = 3,
	}
	
	public class GetDailyReportAllCountriesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="province")]
		public GetDailyReportAllCountriesReturnProvince[] GetDailyReportAllCountriesReturnProvince { get; set; }
	}
	
	public class GetDailyReportAllCountriesReturnProvince
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Int32> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	public enum GetDailyReportByCountryCodeDate_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-MM-DD")]
		YYYYMinusMMMinusDD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-DD-MM")]
		YYYYMinusDDMinusMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DD-MM-YYYY")]
		DDMinusMMMinusYYYY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MM-DD-YYYY")]
		MMMinusDDMinusYYYY = 3,
	}
	
	public class GetDailyReportByCountryCodeReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="province")]
		public GetDailyReportByCountryCodeReturnProvince[] GetDailyReportByCountryCodeReturnProvince { get; set; }
	}
	
	public class GetDailyReportByCountryCodeReturnProvince
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Int32> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	public enum GetDailyReportByCountryNameDate_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-MM-DD")]
		YYYYMinusMMMinusDD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-DD-MM")]
		YYYYMinusDDMinusMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DD-MM-YYYY")]
		DDMinusMMMinusYYYY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MM-DD-YYYY")]
		MMMinusDDMinusYYYY = 3,
	}
	
	public class GetDailyReportByCountryNameReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="province")]
		public GetDailyReportByCountryNameReturnProvince[] GetDailyReportByCountryNameReturnProvince { get; set; }
	}
	
	public class GetDailyReportByCountryNameReturnProvince
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Int32> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	public enum GetDailyReportTotalsDate_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-MM-DD")]
		YYYYMinusMMMinusDD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YYYY-DD-MM")]
		YYYYMinusDDMinusMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DD-MM-YYYY")]
		DDMinusMMMinusYYYY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MM-DD-YYYY")]
		MMMinusDDMinusYYYY = 3,
	}
	
	public class GetDailyReportTotalsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Int32> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Int32> Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
	
	public class GetLatestTotalsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Int32> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Int32> Critical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deaths")]
		public System.Nullable<System.Int32> Deaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChange")]
		public System.Nullable<System.DateTimeOffset> LastChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovered")]
		public System.Nullable<System.Int32> Recovered { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
