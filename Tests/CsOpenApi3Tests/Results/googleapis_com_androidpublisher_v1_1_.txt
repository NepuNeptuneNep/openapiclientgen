//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An InappPurchase resource indicates the status of a user's inapp product purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappPurchase
	{
		
		/// <summary>
		/// The consumption state of the inapp product. Possible values are:  
		///- Yet to be consumed 
		///- Consumed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumptionState")]
		public System.Nullable<System.Int32> ConsumptionState { get; set; }
		
		/// <summary>
		/// A developer-specified string that contains supplemental information about an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerPayload")]
		public string DeveloperPayload { get; set; }
		
		/// <summary>
		/// This kind represents an inappPurchase object in the androidpublisher service.
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#inappPurchase")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#inappPurchase";
		
		/// <summary>
		/// The order id associated with the purchase of the inapp product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The purchase state of the order. Possible values are:  
		///- Purchased 
		///- Canceled 
		///- Pending
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseState")]
		public System.Nullable<System.Int32> PurchaseState { get; set; }
		
		/// <summary>
		/// The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseTime")]
		public string PurchaseTime { get; set; }
		
		/// <summary>
		/// The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:  
		///- Test (i.e. purchased from a license testing account) 
		///- Promo (i.e. purchased using a promo code) 
		///- Rewarded (i.e. from watching a video ad instead of paying)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseType")]
		public System.Nullable<System.Int32> PurchaseType { get; set; }
	}
	
	/// <summary>
	/// A SubscriptionPurchase resource indicates the status of a user's subscription purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchase
	{
		
		/// <summary>
		/// Whether the subscription will automatically be renewed when it reaches its current expiry time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenewing")]
		public System.Nullable<System.Boolean> AutoRenewing { get; set; }
		
		/// <summary>
		/// Time at which the subscription was granted, in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initiationTimestampMsec")]
		public string InitiationTimestampMsec { get; set; }
		
		/// <summary>
		/// This kind represents a subscriptionPurchase object in the androidpublisher service.
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#subscriptionPurchase")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#subscriptionPurchase";
		
		/// <summary>
		/// Time at which the subscription will expire, in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validUntilTimestampMsec")]
		public string ValidUntilTimestampMsec { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Checks the purchase and consumption status of an inapp item.
		/// Androidpublisher_inapppurchases_get {packageName}/inapp/{productId}/purchases/{token}
		/// </summary>
		/// <param name="packageName">The package name of the application the inapp product was sold in (for example, 'com.some.thing').</param>
		/// <param name="productId">The inapp product SKU (for example, 'com.some.thing.inapp1').</param>
		/// <param name="token">The token provided to the user's device when the inapp product was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inapppurchases_getAsync(string packageName, string productId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inapp/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/purchases/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether a user's subscription purchase is valid and returns its expiry time.
		/// Androidpublisher_purchases_get {packageName}/subscriptions/{subscriptionId}/purchases/{token}
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_getAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/purchases/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a user's subscription purchase. The subscription remains valid until its expiration time.
		/// Androidpublisher_purchases_cancel {packageName}/subscriptions/{subscriptionId}/purchases/{token}/cancel
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_cancelAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/purchases/"+ (token==null? "" : System.Uri.EscapeDataString(token))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
