//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Account defender risk assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment
	{
		
		/// <summary>
		/// Output only. Labels for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
	}
	
	/// <summary>
	/// Information about account verification, used for identity verification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo
	{
		
		/// <summary>
		/// Optional. Endpoints that can be used for identity verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo[] Endpoints { get; set; }
		
		/// <summary>
		/// Optional. Language code preference for the verification message, set as a IETF BCP 47 language code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Output only. Result of the latest account verification challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestVerificationResult")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1AccountVerificationInfoLatestVerificationResult> LatestVerificationResult { get; set; }
		
		/// <summary>
		/// Username of the account that is being verified. Deprecated. Customers should now provide the `account_id` field in `event.user_info`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Information about a verification endpoint that can be used for 2FA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo
	{
		
		/// <summary>
		/// Email address for which to trigger a verification request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of the last successful verification for the endpoint, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastVerificationTime")]
		public string LastVerificationTime { get; set; }
		
		/// <summary>
		/// Phone number for which to trigger a verification request. Should be given in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Output only. Token to provide to the client to trigger endpoint verification. It must be used within 15 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestToken")]
		public string RequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1AccountVerificationInfoLatestVerificationResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS_USER_VERIFIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_USER_NOT_VERIFIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_SITE_ONBOARDING_INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_RECIPIENT_NOT_ALLOWED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CRITICAL_INTERNAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CUSTOMER_QUOTA_EXHAUSTED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_VERIFICATION_BYPASSED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_VERDICT_MISMATCH = 9,
	}
	
	/// <summary>
	/// Settings specific to keys that can be used by Android apps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1AndroidKeySettings
	{
		
		/// <summary>
		/// Optional. If set to true, allowed_package_names are not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowAllPackageNames")]
		public System.Nullable<System.Boolean> AllowAllPackageNames { get; set; }
		
		/// <summary>
		/// Optional. Android package names of apps allowed to use the key. Example: 'com.companyname.appname'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedPackageNames")]
		public string[] AllowedPackageNames { get; set; }
		
		/// <summary>
		/// Optional. Set to true for keys that are used in an Android application that is available for download in app stores in addition to the Google Play Store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportNonGoogleAppStoreDistribution")]
		public System.Nullable<System.Boolean> SupportNonGoogleAppStoreDistribution { get; set; }
	}
	
	/// <summary>
	/// The request message to annotate an Assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest
	{
		
		/// <summary>
		/// Optional. A stable account identifier to apply to the assessment. This is an alternative to setting `account_id` in `CreateAssessment`, for example when a stable account identifier is not yet known in the initial request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotation")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotation> Annotation { get; set; }
		
		/// <summary>
		/// Optional. A stable hashed account identifier to apply to the assessment. This is an alternative to setting `hashed_account_id` in `CreateAssessment`, for example when a stable account identifier is not yet known in the initial request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedAccountId")]
		public string HashedAccountId { get; set; }
		
		/// <summary>
		/// Optional. Reasons for the annotation that are assigned to the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public string[] Reasons { get; set; }
		
		/// <summary>
		/// Describes an event in the lifecycle of a payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionEvent")]
		public GoogleCloudRecaptchaenterpriseV1TransactionEvent TransactionEvent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequestAnnotation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNOTATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGITIMATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAUDULENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_CORRECT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_INCORRECT = 4,
	}
	
	/// <summary>
	/// Describes an event in the lifecycle of a payment transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TransactionEvent
	{
		
		/// <summary>
		/// Optional. Timestamp when this transaction event occurred; otherwise assumed to be the time of the API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public string EventTime { get; set; }
		
		/// <summary>
		/// Optional. The type of this transaction event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1TransactionEventEventType> EventType { get; set; }
		
		/// <summary>
		/// Optional. The reason or standardized code that corresponds with this transaction event, if one exists. For example, a CHARGEBACK event with code 6005.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Optional. The value that corresponds with this transaction event, if one exists. For example, a refund event where $5.00 was refunded. Currency is obtained from the original transaction data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1TransactionEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTION_EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERCHANT_APPROVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERCHANT_DENY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL_REVIEW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZATION_DECLINE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_CAPTURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_CAPTURE_DECLINE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGEBACK_INQUIRY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGEBACK_ALERT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAUD_NOTIFICATION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGEBACK = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGEBACK_REPRESENTMENT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGEBACK_REVERSE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_REQUEST = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_DECLINE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND_REVERSE = 18,
	}
	
	/// <summary>
	/// Empty response for AnnotateAssessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse
	{
	}
	
	/// <summary>
	/// Contains fields that are required to perform Apple-specific integrity checks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1AppleDeveloperId
	{
		
		/// <summary>
		/// Required. The Apple developer key ID (10-character string).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyId")]
		public string KeyId { get; set; }
		
		/// <summary>
		/// Required. Input only. A private key (downloaded as a text file with a .p8 file extension) generated for your Apple Developer account. Ensure that Apple DeviceCheck is enabled for the private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// Required. The Apple team ID (10-character string) owning the provisioning profile used to build your application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	/// <summary>
	/// A reCAPTCHA Enterprise assessment resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1Assessment
	{
		
		/// <summary>
		/// Account defender risk assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountDefenderAssessment")]
		public GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment AccountDefenderAssessment { get; set; }
		
		/// <summary>
		/// Information about account verification, used for identity verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountVerification")]
		public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo AccountVerification { get; set; }
		
		/// <summary>
		/// The event being assessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public GoogleCloudRecaptchaenterpriseV1Event Event { get; set; }
		
		/// <summary>
		/// Policy config assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallPolicyAssessment")]
		public GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment FirewallPolicyAssessment { get; set; }
		
		/// <summary>
		/// Assessment for Fraud Prevention.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fraudPreventionAssessment")]
		public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment FraudPreventionAssessment { get; set; }
		
		/// <summary>
		/// Fraud signals describing users and cards involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fraudSignals")]
		public GoogleCloudRecaptchaenterpriseV1FraudSignals FraudSignals { get; set; }
		
		/// <summary>
		/// Output only. Identifier. The resource name for the Assessment in the format `projects/{project}/assessments/{assessment}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Private password leak verification info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privatePasswordLeakVerification")]
		public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification PrivatePasswordLeakVerification { get; set; }
		
		/// <summary>
		/// Risk analysis result for an event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="riskAnalysis")]
		public GoogleCloudRecaptchaenterpriseV1RiskAnalysis RiskAnalysis { get; set; }
		
		/// <summary>
		/// Properties of the provided event token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenProperties")]
		public GoogleCloudRecaptchaenterpriseV1TokenProperties TokenProperties { get; set; }
	}
	
	/// <summary>
	/// The event being assessed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1Event
	{
		
		/// <summary>
		/// Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedAction")]
		public string ExpectedAction { get; set; }
		
		/// <summary>
		/// Optional. Flag for a reCAPTCHA express request for an assessment without a token. If enabled, `site_key` must reference a SCORE key with WAF feature set to EXPRESS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="express")]
		public System.Nullable<System.Boolean> Express { get; set; }
		
		/// <summary>
		/// Optional. Flag for enabling firewall policy config assessment. If this flag is enabled, the firewall policy will be evaluated and a suggested firewall action will be returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallPolicyEvaluation")]
		public System.Nullable<System.Boolean> FirewallPolicyEvaluation { get; set; }
		
		/// <summary>
		/// Optional. Deprecated: use `user_info.account_id` instead. Unique stable hashed user identifier for the request. The identifier must be hashed using hmac-sha256 with stable secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedAccountId")]
		public string HashedAccountId { get; set; }
		
		/// <summary>
		/// Optional. HTTP header information about the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string[] Headers { get; set; }
		
		/// <summary>
		/// Optional. JA3 fingerprint for SSL clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ja3")]
		public string Ja3 { get; set; }
		
		/// <summary>
		/// Optional. The URI resource the user requested that triggered an assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedUri")]
		public string RequestedUri { get; set; }
		
		/// <summary>
		/// Optional. The site key that was used to invoke reCAPTCHA Enterprise on your site and generate the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteKey")]
		public string SiteKey { get; set; }
		
		/// <summary>
		/// Optional. The user response token provided by the reCAPTCHA Enterprise client-side integration on your site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Transaction data associated with a payment protected by reCAPTCHA Enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionData")]
		public GoogleCloudRecaptchaenterpriseV1TransactionData TransactionData { get; set; }
		
		/// <summary>
		/// Optional. The user agent present in the request from the user's device related to this event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
		
		/// <summary>
		/// User information associated with a request protected by reCAPTCHA Enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public GoogleCloudRecaptchaenterpriseV1UserInfo UserInfo { get; set; }
		
		/// <summary>
		/// Optional. The IP address in the request from the user's device related to this event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIpAddress")]
		public string UserIpAddress { get; set; }
		
		/// <summary>
		/// Optional. Flag for running WAF token assessment. If enabled, the token must be specified, and have been created by a WAF-enabled key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wafTokenAssessment")]
		public System.Nullable<System.Boolean> WafTokenAssessment { get; set; }
	}
	
	/// <summary>
	/// Transaction data associated with a payment protected by reCAPTCHA Enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TransactionData
	{
		
		/// <summary>
		/// Structured address format for billing and shipping addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingAddress")]
		public GoogleCloudRecaptchaenterpriseV1TransactionDataAddress BillingAddress { get; set; }
		
		/// <summary>
		/// Optional. The Bank Identification Number - generally the first 6 or 8 digits of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardBin")]
		public string CardBin { get; set; }
		
		/// <summary>
		/// Optional. The last four digits of the card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardLastFour")]
		public string CardLastFour { get; set; }
		
		/// <summary>
		/// Optional. The currency code in ISO-4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Details about the transaction from the gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayInfo")]
		public GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo GatewayInfo { get; set; }
		
		/// <summary>
		/// Optional. Items purchased in this transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GoogleCloudRecaptchaenterpriseV1TransactionDataItem[] Items { get; set; }
		
		/// <summary>
		/// Optional. Information about the user or users fulfilling the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchants")]
		public GoogleCloudRecaptchaenterpriseV1TransactionDataUser[] Merchants { get; set; }
		
		/// <summary>
		/// Optional. The payment method for the transaction. The allowed values are: * credit-card * debit-card * gift-card * processor-{name} (If a third-party is used, for example, processor-paypal) * custom-{name} (If an alternative method is used, for example, custom-crypto)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMethod")]
		public string PaymentMethod { get; set; }
		
		/// <summary>
		/// Structured address format for billing and shipping addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingAddress")]
		public GoogleCloudRecaptchaenterpriseV1TransactionDataAddress ShippingAddress { get; set; }
		
		/// <summary>
		/// Optional. The value of shipping in the specified currency. 0 for free or no shipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shippingValue")]
		public System.Nullable<System.Double> ShippingValue { get; set; }
		
		/// <summary>
		/// Unique identifier for the transaction. This custom identifier can be used to reference this transaction in the future, for example, labeling a refund or chargeback event. Two attempts at the same transaction should use the same transaction id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Details about a user's account involved in the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public GoogleCloudRecaptchaenterpriseV1TransactionDataUser User { get; set; }
		
		/// <summary>
		/// Optional. The decimal value of the transaction in the specified currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Structured address format for billing and shipping addresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TransactionDataAddress
	{
		
		/// <summary>
		/// Optional. The first lines of the address. The first line generally contains the street name and number, and further lines may include information such as an apartment number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string[] Address { get; set; }
		
		/// <summary>
		/// Optional. The state, province, or otherwise administrative area of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Optional. The town/city of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional. The postal or ZIP code of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Optional. The recipient name, potentially including information such as "care of".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public string Recipient { get; set; }
		
		/// <summary>
		/// Optional. The CLDR country/region of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// Details about the transaction from the gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TransactionDataGatewayInfo
	{
		
		/// <summary>
		/// Optional. AVS response code from the gateway (available only when reCAPTCHA Enterprise is called after authorization).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avsResponseCode")]
		public string AvsResponseCode { get; set; }
		
		/// <summary>
		/// Optional. CVV response code from the gateway (available only when reCAPTCHA Enterprise is called after authorization).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvvResponseCode")]
		public string CvvResponseCode { get; set; }
		
		/// <summary>
		/// Optional. Gateway response code describing the state of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayResponseCode")]
		public string GatewayResponseCode { get; set; }
		
		/// <summary>
		/// Optional. Name of the gateway service (for example, stripe, square, paypal).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Line items being purchased in this transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TransactionDataItem
	{
		
		/// <summary>
		/// Optional. When a merchant is specified, its corresponding account_id. Necessary to populate marketplace-style transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantAccountId")]
		public string MerchantAccountId { get; set; }
		
		/// <summary>
		/// Optional. The full name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The quantity of this item that is being purchased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Optional. The value per item that the user is paying, in the transaction currency, after discounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Details about a user's account involved in the transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TransactionDataUser
	{
		
		/// <summary>
		/// Optional. Unique account identifier for this user. If using account defender, this should match the hashed_account_id field. Otherwise, a unique and persistent identifier for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Optional. The epoch milliseconds of the user's account creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationMs")]
		public string CreationMs { get; set; }
		
		/// <summary>
		/// Optional. The email address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Optional. Whether the email has been verified to be accessible by the user (OTP or similar).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailVerified")]
		public System.Nullable<System.Boolean> EmailVerified { get; set; }
		
		/// <summary>
		/// Optional. The phone number of the user, with country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Optional. Whether the phone number has been verified to be accessible by the user (OTP or similar).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneVerified")]
		public System.Nullable<System.Boolean> PhoneVerified { get; set; }
	}
	
	/// <summary>
	/// User information associated with a request protected by reCAPTCHA Enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1UserInfo
	{
		
		/// <summary>
		/// Optional. For logged-in requests or login/registration requests, the unique account identifier associated with this user. You can use the username if it is stable (meaning it is the same for every request associated with the same user), or any stable user ID of your choice. Leave blank for non logged-in actions or guest checkout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Optional. Creation time for this account associated with this user. Leave blank for non logged-in actions, guest checkout, or when there is no account associated with the current user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createAccountTime")]
		public string CreateAccountTime { get; set; }
		
		/// <summary>
		/// Optional. Identifiers associated with this user or request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIds")]
		public GoogleCloudRecaptchaenterpriseV1UserId[] UserIds { get; set; }
	}
	
	/// <summary>
	/// An identifier associated with a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1UserId
	{
		
		/// <summary>
		/// Optional. An email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Optional. A phone number. Should use the E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Optional. A unique username, if different from all the other identifiers and `account_id` that are provided. Can be a unique login handle or display name for a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Policy config assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public GoogleRpcStatus Error { get; set; }
		
		/// <summary>
		/// A FirewallPolicy represents a single matching pattern and resulting actions to take.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallPolicy")]
		public GoogleCloudRecaptchaenterpriseV1FirewallPolicy FirewallPolicy { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleRpcStatus
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A FirewallPolicy represents a single matching pattern and resulting actions to take.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallPolicy
	{
		
		/// <summary>
		/// Optional. The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as `AllowAction`, `BlockAction` or `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader` might be specified. A single policy can contain up to 16 actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public GoogleCloudRecaptchaenterpriseV1FirewallAction[] Actions { get; set; }
		
		/// <summary>
		/// Optional. A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Optional. A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// An individual action. Each action represents what to do if a policy matches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallAction
	{
		
		/// <summary>
		/// An allow action continues processing a request unimpeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow")]
		public GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction Allow { get; set; }
		
		/// <summary>
		/// A block action serves an HTTP error code a prevents the request from hitting the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="block")]
		public GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction Block { get; set; }
		
		/// <summary>
		/// A redirect action returns a 307 (temporary redirect) response, pointing the user to a ReCaptcha interstitial page to attach a token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		public GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction Redirect { get; set; }
		
		/// <summary>
		/// A set header action sets a header and forwards the request to the backend. This can be used to trigger custom protection implemented on the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setHeader")]
		public GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction SetHeader { get; set; }
		
		/// <summary>
		/// A substitute action transparently serves a different page than the one requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitute")]
		public GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction Substitute { get; set; }
	}
	
	/// <summary>
	/// An allow action continues processing a request unimpeded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction
	{
	}
	
	/// <summary>
	/// A block action serves an HTTP error code a prevents the request from hitting the backend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction
	{
	}
	
	/// <summary>
	/// A redirect action returns a 307 (temporary redirect) response, pointing the user to a ReCaptcha interstitial page to attach a token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction
	{
	}
	
	/// <summary>
	/// A set header action sets a header and forwards the request to the backend. This can be used to trigger custom protection implemented on the backend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction
	{
		
		/// <summary>
		/// Optional. The header key to set in the request to the backend server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Optional. The header value to set in the request to the backend server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A substitute action transparently serves a different page than the one requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction
	{
		
		/// <summary>
		/// Optional. The address to redirect to. The target is a relative path in the current host. Example: "/blog/404.html".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Assessment for Fraud Prevention.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment
	{
		
		/// <summary>
		/// Information about behavioral trust of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="behavioralTrustVerdict")]
		public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict BehavioralTrustVerdict { get; set; }
		
		/// <summary>
		/// Information about card testing fraud, where an adversary is testing fraudulently obtained cards or brute forcing their details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardTestingVerdict")]
		public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict CardTestingVerdict { get; set; }
		
		/// <summary>
		/// Information about stolen instrument fraud, where the user is not the legitimate owner of the instrument being used for the purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stolenInstrumentVerdict")]
		public GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict StolenInstrumentVerdict { get; set; }
		
		/// <summary>
		/// Output only. Probability of this transaction being fraudulent. Summarizes the combined risk of attack vectors below. Values are from 0.0 (lowest) to 1.0 (highest).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionRisk")]
		public System.Nullable<System.Single> TransactionRisk { get; set; }
	}
	
	/// <summary>
	/// Information about behavioral trust of the transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentBehavioralTrustVerdict
	{
		
		/// <summary>
		/// Output only. Probability of this transaction attempt being executed in a behaviorally trustworthy way. Values are from 0.0 (lowest) to 1.0 (highest).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trust")]
		public System.Nullable<System.Single> Trust { get; set; }
	}
	
	/// <summary>
	/// Information about card testing fraud, where an adversary is testing fraudulently obtained cards or brute forcing their details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentCardTestingVerdict
	{
		
		/// <summary>
		/// Output only. Probability of this transaction attempt being part of a card testing attack. Values are from 0.0 (lowest) to 1.0 (highest).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="risk")]
		public System.Nullable<System.Single> Risk { get; set; }
	}
	
	/// <summary>
	/// Information about stolen instrument fraud, where the user is not the legitimate owner of the instrument being used for the purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessmentStolenInstrumentVerdict
	{
		
		/// <summary>
		/// Output only. Probability of this transaction being executed with a stolen instrument. Values are from 0.0 (lowest) to 1.0 (highest).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="risk")]
		public System.Nullable<System.Single> Risk { get; set; }
	}
	
	/// <summary>
	/// Fraud signals describing users and cards involved in the transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FraudSignals
	{
		
		/// <summary>
		/// Signals describing the payment card used in this transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardSignals")]
		public GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals CardSignals { get; set; }
		
		/// <summary>
		/// Signals describing the user involved in this transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userSignals")]
		public GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals UserSignals { get; set; }
	}
	
	/// <summary>
	/// Signals describing the payment card used in this transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FraudSignalsCardSignals
	{
		
		/// <summary>
		/// Output only. The labels for the payment card in this transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardLabels")]
		public string[] CardLabels { get; set; }
	}
	
	/// <summary>
	/// Signals describing the user involved in this transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1FraudSignalsUserSignals
	{
		
		/// <summary>
		/// Output only. This user (based on email, phone, and other identifiers) has been seen on the internet for at least this number of days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeDaysLowerBound")]
		public System.Nullable<System.Int32> ActiveDaysLowerBound { get; set; }
		
		/// <summary>
		/// Output only. Likelihood (from 0.0 to 1.0) this user includes synthetic components in their identity, such as a randomly generated email address, temporary phone number, or fake shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntheticRisk")]
		public System.Nullable<System.Single> SyntheticRisk { get; set; }
	}
	
	/// <summary>
	/// Private password leak verification info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification
	{
		
		/// <summary>
		/// Output only. List of prefixes of the encrypted potential password leaks that matched the given parameters. They must be compared with the client-side decryption prefix of `reencrypted_user_credentials_hash`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedLeakMatchPrefixes")]
		public string[] EncryptedLeakMatchPrefixes { get; set; }
		
		/// <summary>
		/// Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by the server and returned through `reencrypted_user_credentials_hash`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedUserCredentialsHash")]
		public string EncryptedUserCredentialsHash { get; set; }
		
		/// <summary>
		/// Required. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used to look up password leaks associated with that hash prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookupHashPrefix")]
		public string LookupHashPrefix { get; set; }
		
		/// <summary>
		/// Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field. It is used to match potential password leaks within `encrypted_leak_match_prefixes`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reencryptedUserCredentialsHash")]
		public string ReencryptedUserCredentialsHash { get; set; }
	}
	
	/// <summary>
	/// Risk analysis result for an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1RiskAnalysis
	{
		
		/// <summary>
		/// Output only. Extended verdict reasons to be used for experimentation only. The set of possible reasons is subject to change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedVerdictReasons")]
		public string[] ExtendedVerdictReasons { get; set; }
		
		/// <summary>
		/// Output only. Reasons contributing to the risk analysis verdict.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public string[] Reasons { get; set; }
		
		/// <summary>
		/// Output only. Legitimate event score from 0.0 to 1.0. (1.0 means very likely legitimate traffic while 0.0 means very likely non-legitimate traffic).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	/// <summary>
	/// Properties of the provided event token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TokenProperties
	{
		
		/// <summary>
		/// Output only. Action name provided at token generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Output only. The name of the Android package with which the token was generated (Android keys only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidPackageName")]
		public string AndroidPackageName { get; set; }
		
		/// <summary>
		/// Output only. The timestamp corresponding to the generation of the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The hostname of the page on which the token was generated (Web keys only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// Output only. Reason associated with the response when valid = false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidReason")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReason> InvalidReason { get; set; }
		
		/// <summary>
		/// Output only. The ID of the iOS bundle with which the token was generated (iOS keys only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosBundleId")]
		public string IosBundleId { get; set; }
		
		/// <summary>
		/// Output only. Whether the provided user response token is valid. When valid = false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1TokenPropertiesInvalidReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_INVALID_REASON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALFORMED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROWSER_ERROR = 6,
	}
	
	/// <summary>
	/// Metrics related to challenges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1ChallengeMetrics
	{
		
		/// <summary>
		/// Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such that a subsequent challenge was triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedCount")]
		public string FailedCount { get; set; }
		
		/// <summary>
		/// Count of nocaptchas (successful verification without a challenge) issued.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nocaptchaCount")]
		public string NocaptchaCount { get; set; }
		
		/// <summary>
		/// Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of pageloads for pages that include reCAPTCHA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageloadCount")]
		public string PageloadCount { get; set; }
		
		/// <summary>
		/// Count of nocaptchas (successful verification without a challenge) plus submitted challenge solutions that were correct and resulted in verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passedCount")]
		public string PassedCount { get; set; }
	}
	
	/// <summary>
	/// Settings specific to keys that can be used by iOS apps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1IOSKeySettings
	{
		
		/// <summary>
		/// Optional. If set to true, allowed_bundle_ids are not enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowAllBundleIds")]
		public System.Nullable<System.Boolean> AllowAllBundleIds { get; set; }
		
		/// <summary>
		/// Optional. iOS bundle ids of apps allowed to use the key. Example: 'com.companyname.productname.appname'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedBundleIds")]
		public string[] AllowedBundleIds { get; set; }
		
		/// <summary>
		/// Contains fields that are required to perform Apple-specific integrity checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appleDeveloperId")]
		public GoogleCloudRecaptchaenterpriseV1AppleDeveloperId AppleDeveloperId { get; set; }
	}
	
	/// <summary>
	/// A key used to identify and configure applications (web and/or mobile) that use reCAPTCHA Enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1Key
	{
		
		/// <summary>
		/// Settings specific to keys that can be used by Android apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidSettings")]
		public GoogleCloudRecaptchaenterpriseV1AndroidKeySettings AndroidSettings { get; set; }
		
		/// <summary>
		/// Output only. The timestamp corresponding to the creation of this key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Required. Human-readable display name of this key. Modifiable by user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Settings specific to keys that can be used by iOS apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosSettings")]
		public GoogleCloudRecaptchaenterpriseV1IOSKeySettings IosSettings { get; set; }
		
		/// <summary>
		/// Optional. See [Creating and managing labels] (https://cloud.google.com/recaptcha-enterprise/docs/labels).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Identifier. The resource name for the Key in the format `projects/{project}/keys/{key}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Options for user acceptance testing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingOptions")]
		public GoogleCloudRecaptchaenterpriseV1TestingOptions TestingOptions { get; set; }
		
		/// <summary>
		/// Settings specific to keys that can be used for WAF (Web Application Firewall).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wafSettings")]
		public GoogleCloudRecaptchaenterpriseV1WafSettings WafSettings { get; set; }
		
		/// <summary>
		/// Settings specific to keys that can be used by websites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webSettings")]
		public GoogleCloudRecaptchaenterpriseV1WebKeySettings WebSettings { get; set; }
	}
	
	/// <summary>
	/// Options for user acceptance testing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1TestingOptions
	{
		
		/// <summary>
		/// Optional. For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingChallenge")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallenge> TestingChallenge { get; set; }
		
		/// <summary>
		/// Optional. All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingScore")]
		public System.Nullable<System.Single> TestingScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1TestingOptionsTestingChallenge
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESTING_CHALLENGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOCAPTCHA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSOLVABLE_CHALLENGE = 2,
	}
	
	/// <summary>
	/// Settings specific to keys that can be used for WAF (Web Application Firewall).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1WafSettings
	{
		
		/// <summary>
		/// Required. The WAF feature for which this key is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wafFeature")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1WafSettingsWafFeature> WafFeature { get; set; }
		
		/// <summary>
		/// Required. The WAF service that uses this key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wafService")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1WafSettingsWafService> WafService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1WafSettingsWafFeature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAF_FEATURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHALLENGE_PAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SESSION_TOKEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_TOKEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1WafSettingsWafService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAF_SERVICE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FASTLY = 2,
	}
	
	/// <summary>
	/// Settings specific to keys that can be used by websites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1WebKeySettings
	{
		
		/// <summary>
		/// Optional. If set to true, it means allowed_domains will not be enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowAllDomains")]
		public System.Nullable<System.Boolean> AllowAllDomains { get; set; }
		
		/// <summary>
		/// Optional. If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowAmpTraffic")]
		public System.Nullable<System.Boolean> AllowAmpTraffic { get; set; }
		
		/// <summary>
		/// Optional. Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedDomains")]
		public string[] AllowedDomains { get; set; }
		
		/// <summary>
		/// Optional. Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeSecurityPreference")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference> ChallengeSecurityPreference { get; set; }
		
		/// <summary>
		/// Required. Describes how this key is integrated with the website.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationType")]
		public System.Nullable<GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType> IntegrationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USABILITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKBOX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVISIBLE = 3,
	}
	
	/// <summary>
	/// Response to request to list firewall policies belonging to a key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse
	{
		
		/// <summary>
		/// Policy details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firewallPolicies")]
		public GoogleCloudRecaptchaenterpriseV1FirewallPolicy[] FirewallPolicies { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results. It is set to empty if no policies remain in results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response to request to list keys in a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1ListKeysResponse
	{
		
		/// <summary>
		/// Key details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public GoogleCloudRecaptchaenterpriseV1Key[] Keys { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results. It is set to empty if no keys remain in results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response to a `ListRelatedAccountGroupMemberships` call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The memberships listed by the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedAccountGroupMemberships")]
		public GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership[] RelatedAccountGroupMemberships { get; set; }
	}
	
	/// <summary>
	/// A membership in a group of related accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership
	{
		
		/// <summary>
		/// The unique stable account identifier of the member. The identifier corresponds to an `account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Deprecated: use `account_id` instead. The unique stable hashed account identifier of the member. The identifier corresponds to a `hashed_account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedAccountId")]
		public string HashedAccountId { get; set; }
		
		/// <summary>
		/// Required. Identifier. The resource name for this membership in the format `projects/{project}/relatedaccountgroups/{relatedaccountgroup}/memberships/{membership}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response to a `ListRelatedAccountGroups` call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The groups of related accounts listed by the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedAccountGroups")]
		public GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup[] RelatedAccountGroups { get; set; }
	}
	
	/// <summary>
	/// A group of related accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1RelatedAccountGroup
	{
		
		/// <summary>
		/// Required. Identifier. The resource name for the related account group in the format `projects/{project}/relatedaccountgroups/{related_account_group}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Metrics for a single Key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1Metrics
	{
		
		/// <summary>
		/// Metrics will be continuous and in order by dates, and in the granularity of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have challenge-based data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeMetrics")]
		public GoogleCloudRecaptchaenterpriseV1ChallengeMetrics[] ChallengeMetrics { get; set; }
		
		/// <summary>
		/// Output only. Identifier. The name of the metrics, in the format `projects/{project}/keys/{key}/metrics`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Metrics will be continuous and in order by dates, and in the granularity of day. All Key types should have score-based data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreMetrics")]
		public GoogleCloudRecaptchaenterpriseV1ScoreMetrics[] ScoreMetrics { get; set; }
		
		/// <summary>
		/// Inclusive start time aligned to a day (UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Metrics related to scoring.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1ScoreMetrics
	{
		
		/// <summary>
		/// Action-based metrics. The map key is the action name which specified by the site owners at time of the "execute" client-side call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionMetrics")]
		public System.Collections.Generic.Dictionary<string, GoogleCloudRecaptchaenterpriseV1ScoreDistribution> ActionMetrics { get; set; }
		
		/// <summary>
		/// Score distribution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overallMetrics")]
		public GoogleCloudRecaptchaenterpriseV1ScoreDistribution OverallMetrics { get; set; }
	}
	
	/// <summary>
	/// Score distribution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1ScoreDistribution
	{
		
		/// <summary>
		/// Map key is score value multiplied by 100. The scores are discrete values between [0, 1]. The maximum number of buckets is on order of a few dozen, but typically much lower (ie. 10).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreBuckets")]
		public System.Collections.Generic.Dictionary<string, string> ScoreBuckets { get; set; }
	}
	
	/// <summary>
	/// The migrate key request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest
	{
		
		/// <summary>
		/// Optional. If true, skips the billing check. A reCAPTCHA Enterprise key or migrated key behaves differently than a reCAPTCHA (non-Enterprise version) key when you reach a quota limit (see https://cloud.google.com/recaptcha-enterprise/quotas#quota_limit). To avoid any disruption of your usage, we check that a billing account is present. If your usage of reCAPTCHA is under the free quota, you can safely skip the billing check and proceed with the migration. See https://cloud.google.com/recaptcha-enterprise/docs/billing-information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipBillingCheck")]
		public System.Nullable<System.Boolean> SkipBillingCheck { get; set; }
	}
	
	/// <summary>
	/// Secret key is used only in legacy reCAPTCHA. It must be used in a 3rd party integration with legacy reCAPTCHA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse
	{
		
		/// <summary>
		/// The secret key (also known as shared secret) authorizes communication between your application backend and the reCAPTCHA Enterprise server to create an assessment. The secret key needs to be kept safe for security purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacySecretKey")]
		public string LegacySecretKey { get; set; }
	}
	
	/// <summary>
	/// The request message to search related account group memberships.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest
	{
		
		/// <summary>
		/// Optional. The unique stable account identifier used to search connections. The identifier should correspond to an `account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id or account_id must be set, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Optional. Deprecated: use `account_id` instead. The unique stable hashed account identifier used to search connections. The identifier should correspond to a `hashed_account_id` provided in a previous `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id or account_id must be set, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedAccountId")]
		public string HashedAccountId { get; set; }
		
		/// <summary>
		/// Optional. The maximum number of groups to return. The service might return fewer than this value. If unspecified, at most 50 groups are returned. The maximum value is 1000; values above 1000 are coerced to 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Optional. A page token, received from a previous `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchRelatedAccountGroupMemberships` must match the call that provided the page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	/// <summary>
	/// The response to a `SearchRelatedAccountGroupMemberships` call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The queried memberships.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedAccountGroupMemberships")]
		public GoogleCloudRecaptchaenterpriseV1RelatedAccountGroupMembership[] RelatedAccountGroupMemberships { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA.
		/// Recaptchaenterprise_projects_keys_retrieveLegacySecretKey v1/{key}:retrieveLegacySecretKey
		/// </summary>
		/// <param name="key">Required. The public key name linked to the requested secret key in the format `projects/{project}/keys/{key}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse> Recaptchaenterprise_projects_keys_retrieveLegacySecretKeyAsync(string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (key==null? "" : System.Uri.EscapeDataString(key))+":retrieveLegacySecretKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified key.
		/// Recaptchaenterprise_projects_keys_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the key to be deleted, in the format `projects/{project}/keys/{key}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Recaptchaenterprise_projects_keys_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get some aggregated metrics for a Key. This data can be used to build dashboards.
		/// Recaptchaenterprise_projects_keys_getMetrics v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the requested metrics, in the format `projects/{project}/keys/{key}/metrics`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1Metrics> Recaptchaenterprise_projects_keys_getMetricsAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1Metrics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified key.
		/// Recaptchaenterprise_projects_keys_patch v1/{name}
		/// </summary>
		/// <param name="name">Identifier. The resource name for the Key in the format `projects/{project}/keys/{key}`.</param>
		/// <param name="updateMask">Optional. The mask to control which fields of the key get updated. If the mask is not present, all fields will be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1Key> Recaptchaenterprise_projects_keys_patchAsync(string name, string updateMask, GoogleCloudRecaptchaenterpriseV1Key requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1Key>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.
		/// Recaptchaenterprise_projects_assessments_annotate v1/{name}:annotate
		/// </summary>
		/// <param name="name">Required. The resource name of the Assessment, in the format `projects/{project}/assessments/{assessment}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse> Recaptchaenterprise_projects_assessments_annotateAsync(string name, GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":annotate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.
		/// Recaptchaenterprise_projects_keys_migrate v1/{name}:migrate
		/// </summary>
		/// <param name="name">Required. The name of the key to be migrated, in the format `projects/{project}/keys/{key}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1Key> Recaptchaenterprise_projects_keys_migrateAsync(string name, GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":migrate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1Key>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Assessment of the likelihood an event is legitimate.
		/// Recaptchaenterprise_projects_assessments_create v1/{parent}/assessments
		/// </summary>
		/// <param name="parent">Required. The name of the project in which the assessment will be created, in the format `projects/{project}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1Assessment> Recaptchaenterprise_projects_assessments_createAsync(string parent, GoogleCloudRecaptchaenterpriseV1Assessment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/assessments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1Assessment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of all firewall policies that belong to a project.
		/// Recaptchaenterprise_projects_firewallpolicies_list v1/{parent}/firewallpolicies
		/// </summary>
		/// <param name="parent">Required. The name of the project to list the policies for, in the format `projects/{project}`.</param>
		/// <param name="pageSize">Optional. The maximum number of policies to return. Default is 10. Max limit is 1000.</param>
		/// <param name="pageToken">Optional. The next_page_token value returned from a previous. ListFirewallPoliciesRequest, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse> Recaptchaenterprise_projects_firewallpolicies_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/firewallpolicies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.
		/// Recaptchaenterprise_projects_firewallpolicies_create v1/{parent}/firewallpolicies
		/// </summary>
		/// <param name="parent">Required. The name of the project this policy will apply to, in the format `projects/{project}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1FirewallPolicy> Recaptchaenterprise_projects_firewallpolicies_createAsync(string parent, GoogleCloudRecaptchaenterpriseV1FirewallPolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/firewallpolicies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1FirewallPolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of all keys that belong to a project.
		/// Recaptchaenterprise_projects_keys_list v1/{parent}/keys
		/// </summary>
		/// <param name="parent">Required. The name of the project that contains the keys that will be listed, in the format `projects/{project}`.</param>
		/// <param name="pageSize">Optional. The maximum number of keys to return. Default is 10. Max limit is 1000.</param>
		/// <param name="pageToken">Optional. The next_page_token value returned from a previous. ListKeysRequest, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1ListKeysResponse> Recaptchaenterprise_projects_keys_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/keys&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1ListKeysResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new reCAPTCHA Enterprise key.
		/// Recaptchaenterprise_projects_keys_create v1/{parent}/keys
		/// </summary>
		/// <param name="parent">Required. The name of the project in which the key will be created, in the format `projects/{project}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1Key> Recaptchaenterprise_projects_keys_createAsync(string parent, GoogleCloudRecaptchaenterpriseV1Key requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1Key>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get memberships in a group of related accounts.
		/// Recaptchaenterprise_projects_relatedaccountgroups_memberships_list v1/{parent}/memberships
		/// </summary>
		/// <param name="parent">Required. The resource name for the related account group in the format `projects/{project}/relatedaccountgroups/{relatedaccountgroup}`.</param>
		/// <param name="pageSize">Optional. The maximum number of accounts to return. The service might return fewer than this value. If unspecified, at most 50 accounts are returned. The maximum value is 1000; values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListRelatedAccountGroupMemberships` call. When paginating, all other parameters provided to `ListRelatedAccountGroupMemberships` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse> Recaptchaenterprise_projects_relatedaccountgroups_memberships_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/memberships&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List groups of related accounts.
		/// Recaptchaenterprise_projects_relatedaccountgroups_list v1/{parent}/relatedaccountgroups
		/// </summary>
		/// <param name="parent">Required. The name of the project to list related account groups from, in the format `projects/{project}`.</param>
		/// <param name="pageSize">Optional. The maximum number of groups to return. The service might return fewer than this value. If unspecified, at most 50 groups are returned. The maximum value is 1000; values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListRelatedAccountGroups` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRelatedAccountGroups` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse> Recaptchaenterprise_projects_relatedaccountgroups_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/relatedaccountgroups&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search group memberships related to a given account.
		/// Recaptchaenterprise_projects_relatedaccountgroupmemberships_search v1/{project}/relatedaccountgroupmemberships:search
		/// </summary>
		/// <param name="project">Required. The name of the project to search related account group memberships from. Specify the project name in the following format: `projects/{project}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse> Recaptchaenterprise_projects_relatedaccountgroupmemberships_searchAsync(string project, GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/relatedaccountgroupmemberships:search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
