//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// AuthorizedNetwork contains metadata for an authorized network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizedNetwork
	{
		
		/// <summary>
		/// CIDR range for one authorzied network of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidrRange")]
		public string CidrRange { get; set; }
	}
	
	/// <summary>
	/// Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutomatedBackupPolicy
	{
		
		/// <summary>
		/// The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupWindow")]
		public string BackupWindow { get; set; }
		
		/// <summary>
		/// Whether automated automated backups are enabled. If not set, defaults to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// Labels to apply to backups created using this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// A quantity based policy specifies that a certain number of the most recent successful backups should be retained.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityBasedRetention")]
		public QuantityBasedRetention QuantityBasedRetention { get; set; }
		
		/// <summary>
		/// A time based retention policy specifies that all backups within a certain time period should be retained.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeBasedRetention")]
		public TimeBasedRetention TimeBasedRetention { get; set; }
		
		/// <summary>
		/// A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the `start_times` field to have one element "22:00" and the `days_of_week` field to have all seven days of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklySchedule")]
		public WeeklySchedule WeeklySchedule { get; set; }
	}
	
	/// <summary>
	/// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// A quantity based policy specifies that a certain number of the most recent successful backups should be retained.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuantityBasedRetention
	{
		
		/// <summary>
		/// The number of backups to retain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// A time based retention policy specifies that all backups within a certain time period should be retained.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeBasedRetention
	{
		
		/// <summary>
		/// The retention period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public string RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the `start_times` field to have one element "22:00" and the `days_of_week` field to have all seven days of the week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeeklySchedule
	{
		
		/// <summary>
		/// The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysOfWeek")]
		public string[] DaysOfWeek { get; set; }
		
		/// <summary>
		/// The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimes")]
		public GoogleTypeTimeOfDay[] StartTimes { get; set; }
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleTypeTimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// Message describing Backup object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Backup
	{
		
		/// <summary>
		/// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Required. The full resource name of the backup source cluster (e.g., projects/{project}/locations/{region}/clusters/{cluster_id}).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Output only. The system-generated UID of the cluster which was used to create this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterUid")]
		public string ClusterUid { get; set; }
		
		/// <summary>
		/// Output only. Create time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The database engine major version of the cluster this backup was created from. Any restored cluster created from this backup will have the same database version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseVersion")]
		public System.Nullable<BackupDatabaseVersion> DatabaseVersion { get; set; }
		
		/// <summary>
		/// Output only. Delete time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// User-provided description of the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// User-settable and human-readable display name for the Backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// EncryptionInfo describes the encryption information of a cluster or a backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionInfo")]
		public EncryptionInfo EncryptionInfo { get; set; }
		
		/// <summary>
		/// For Resource freshness validation (https://google.aip.dev/154)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A backup's position in a quantity-based retention queue, of backups with the same source cluster and type, with length, retention, specified by the backup's retention policy. Once the position is greater than the retention, the backup is eligible to be garbage collected. Example: 5 backups from the same source cluster and type with a quantity-based retention of 3 and denoted by backup_id (position, retention). Safe: backup_5 (1, 3), backup_4, (2, 3), backup_3 (3, 3). Awaiting garbage collection: backup_2 (4, 3), backup_1 (5, 3)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryQuantity")]
		public QuantityBasedExpiry ExpiryQuantity { get; set; }
		
		/// <summary>
		/// Output only. The time at which after the backup is eligible to be garbage collected. It is the duration specified by the backup's retention policy, added to the backup's create_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public string ExpiryTime { get; set; }
		
		/// <summary>
		/// Labels as key value pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id} where the cluster and backup ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the backup resource name is the name of the parent resource: * projects/{project}/locations/{region}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Reconciling (https://google.aip.dev/128#reconciliation), if true, indicates that the service is actively updating the resource. This can happen due to user-triggered updates or system actions like failover or maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzs")]
		public System.Nullable<System.Boolean> SatisfiesPzs { get; set; }
		
		/// <summary>
		/// Output only. The size of the backup in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeBytes")]
		public string SizeBytes { get; set; }
		
		/// <summary>
		/// Output only. The current state of the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<BackupState> State { get; set; }
		
		/// <summary>
		/// The backup type, which suggests the trigger for the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BackupType> Type { get; set; }
		
		/// <summary>
		/// Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. Update time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupDatabaseVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_13 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_14 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_15 = 3,
	}
	
	/// <summary>
	/// EncryptionInfo describes the encryption information of a cluster or a backup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionInfo
	{
		
		/// <summary>
		/// Output only. Type of encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionType")]
		public System.Nullable<EncryptionInfoEncryptionType> EncryptionType { get; set; }
		
		/// <summary>
		/// Output only. Cloud KMS key versions that are being used to protect the database or the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyVersions")]
		public string[] KmsKeyVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionInfoEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_DEFAULT_ENCRYPTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED_ENCRYPTION = 2,
	}
	
	/// <summary>
	/// A backup's position in a quantity-based retention queue, of backups with the same source cluster and type, with length, retention, specified by the backup's retention policy. Once the position is greater than the retention, the backup is eligible to be garbage collected. Example: 5 backups from the same source cluster and type with a quantity-based retention of 3 and denoted by backup_id (position, retention). Safe: backup_5 (1, 3), backup_4, (2, 3), backup_3 (3, 3). Awaiting garbage collection: backup_2 (4, 3), backup_1 (5, 3)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuantityBasedExpiry
	{
		
		/// <summary>
		/// Output only. The backup's position among its backups with the same source cluster and type, by descending chronological order create time(i.e. newest first).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionCount")]
		public System.Nullable<System.Int32> RetentionCount { get; set; }
		
		/// <summary>
		/// Output only. The length of the quantity-based queue, specified by the backup's retention policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRetentionCount")]
		public System.Nullable<System.Int32> TotalRetentionCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 3,
	}
	
	/// <summary>
	/// Message describing a BackupSource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupSource
	{
		
		/// <summary>
		/// Required. The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupName")]
		public string BackupName { get; set; }
		
		/// <summary>
		/// Output only. The system-generated UID of the backup which was used to create this resource. The UID is generated when the backup is created, and it is retained until the backup is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupUid")]
		public string BackupUid { get; set; }
	}
	
	/// <summary>
	/// Client connection configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientConnectionConfig
	{
		
		/// <summary>
		/// Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireConnectors")]
		public System.Nullable<System.Boolean> RequireConnectors { get; set; }
		
		/// <summary>
		/// SSL configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslConfig")]
		public SslConfig SslConfig { get; set; }
	}
	
	/// <summary>
	/// SSL configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslConfig
	{
		
		/// <summary>
		/// Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caSource")]
		public System.Nullable<SslConfigCaSource> CaSource { get; set; }
		
		/// <summary>
		/// Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslMode")]
		public System.Nullable<SslConfigSslMode> SslMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslConfigCaSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_SOURCE_MANAGED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslConfigSslMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_MODE_ALLOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_MODE_REQUIRE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_MODE_VERIFY_CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_UNENCRYPTED_AND_ENCRYPTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTED_ONLY = 5,
	}
	
	/// <summary>
	/// Operation metadata returned by the CLH during resource state reconciliation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudControl2SharedOperationsReconciliationOperationMetadata
	{
		
		/// <summary>
		/// DEPRECATED. Use exclusive_action instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteResource")]
		public System.Nullable<System.Boolean> DeleteResource { get; set; }
		
		/// <summary>
		/// Excluisive action returned by the CLH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusiveAction")]
		public System.Nullable<CloudControl2SharedOperationsReconciliationOperationMetadataExclusiveAction> ExclusiveAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloudControl2SharedOperationsReconciliationOperationMetadataExclusiveAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_REPAIR_ACTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 2,
	}
	
	/// <summary>
	/// A cluster is a collection of regional AlloyDB resources. It can include a primary instance and one or more read pool instances. All cluster resources share a storage layer, which scales as needed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cluster
	{
		
		/// <summary>
		/// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automatedBackupPolicy")]
		public AutomatedBackupPolicy AutomatedBackupPolicy { get; set; }
		
		/// <summary>
		/// Message describing a BackupSource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupSource")]
		public BackupSource BackupSource { get; set; }
		
		/// <summary>
		/// Output only. The type of the cluster. This is an output-only field and it's populated at the Cluster creation time or the Cluster promotion time. The cluster type is determined by which RPC was used to create the cluster (i.e. `CreateCluster` vs. `CreateSecondaryCluster`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterType")]
		public System.Nullable<ClusterClusterType> ClusterType { get; set; }
		
		/// <summary>
		/// ContinuousBackupConfig describes the continuous backups recovery configurations of a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuousBackupConfig")]
		public ContinuousBackupConfig ContinuousBackupConfig { get; set; }
		
		/// <summary>
		/// ContinuousBackupInfo describes the continuous backup properties of a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuousBackupInfo")]
		public ContinuousBackupInfo ContinuousBackupInfo { get; set; }
		
		/// <summary>
		/// Output only. Create time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. The database engine major version. This is an optional field and it is populated at the Cluster creation time. If a database version is not supplied at cluster creation time, then a default database version will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseVersion")]
		public BackupDatabaseVersion DatabaseVersion { get; set; }
		
		/// <summary>
		/// Output only. Delete time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// User-settable and human-readable display name for the Cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// EncryptionInfo describes the encryption information of a cluster or a backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionInfo")]
		public EncryptionInfo EncryptionInfo { get; set; }
		
		/// <summary>
		/// For Resource freshness validation (https://google.aip.dev/154)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The username/password for a database user. Used for specifying initial users at cluster creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialUser")]
		public UserPassword InitialUser { get; set; }
		
		/// <summary>
		/// Labels as key value pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Subset of the source instance configuration that is available when reading the cluster resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationSource")]
		public MigrationSource MigrationSource { get; set; }
		
		/// <summary>
		/// Output only. The name of the cluster resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id} where the cluster ID segment should satisfy the regex expression `[a-z0-9-]+`. For more details see https://google.aip.dev/122. The prefix of the cluster resource name is the name of the parent resource: * projects/{project}/locations/{region}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project}/global/networks/{network_id}". This is required to create a cluster. Deprecated, use network_config.network instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Metadata related to network configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public NetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Configuration for the primary cluster. It has the list of clusters that are replicating from this cluster. This should be set if and only if the cluster is of type PRIMARY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryConfig")]
		public PrimaryConfig PrimaryConfig { get; set; }
		
		/// <summary>
		/// Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Cluster does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzs")]
		public System.Nullable<System.Boolean> SatisfiesPzs { get; set; }
		
		/// <summary>
		/// Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryConfig")]
		public SecondaryConfig SecondaryConfig { get; set; }
		
		/// <summary>
		/// SSL configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslConfig")]
		public SslConfig SslConfig { get; set; }
		
		/// <summary>
		/// Output only. The current serving state of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ClusterState> State { get; set; }
		
		/// <summary>
		/// Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. Update time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClusterClusterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDARY = 2,
	}
	
	/// <summary>
	/// ContinuousBackupConfig describes the continuous backups recovery configurations of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContinuousBackupConfig
	{
		
		/// <summary>
		/// Whether ContinuousBackup is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryWindowDays")]
		public System.Nullable<System.Int32> RecoveryWindowDays { get; set; }
	}
	
	/// <summary>
	/// ContinuousBackupInfo describes the continuous backup properties of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContinuousBackupInfo
	{
		
		/// <summary>
		/// Output only. The earliest restorable time that can be restored to. Output only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earliestRestorableTime")]
		public string EarliestRestorableTime { get; set; }
		
		/// <summary>
		/// Output only. When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledTime")]
		public string EnabledTime { get; set; }
		
		/// <summary>
		/// EncryptionInfo describes the encryption information of a cluster or a backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionInfo")]
		public EncryptionInfo EncryptionInfo { get; set; }
		
		/// <summary>
		/// Output only. Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public string[] Schedule { get; set; }
	}
	
	/// <summary>
	/// The username/password for a database user. Used for specifying initial users at cluster creation time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserPassword
	{
		
		/// <summary>
		/// The initial password for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The database username.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Subset of the source instance configuration that is available when reading the cluster resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrationSource
	{
		
		/// <summary>
		/// Output only. The host and port of the on-premises instance in host:port format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostPort")]
		public string HostPort { get; set; }
		
		/// <summary>
		/// Output only. Place holder for the external source identifier(e.g DMS job name) that created the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public string ReferenceId { get; set; }
		
		/// <summary>
		/// Output only. Type of migration source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public System.Nullable<MigrationSourceSourceType> SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationSourceSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATION_SOURCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DMS = 1,
	}
	
	/// <summary>
	/// Metadata related to network configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfig
	{
		
		/// <summary>
		/// Optional. Name of the allocated IP range for the private IP AlloyDB cluster, for example: "google-managed-services-default". If set, the instance IPs for this cluster will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. Field name is intended to be consistent with Cloud SQL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocatedIpRange")]
		public string AllocatedIpRange { get; set; }
		
		/// <summary>
		/// Optional. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
	}
	
	/// <summary>
	/// Configuration for the primary cluster. It has the list of clusters that are replicating from this cluster. This should be set if and only if the cluster is of type PRIMARY.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrimaryConfig
	{
		
		/// <summary>
		/// Output only. Names of the clusters that are replicating from this cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryClusterNames")]
		public string[] SecondaryClusterNames { get; set; }
	}
	
	/// <summary>
	/// Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecondaryConfig
	{
		
		/// <summary>
		/// The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryClusterName")]
		public string PrimaryClusterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClusterState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPTY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROMOTING = 9,
	}
	
	/// <summary>
	/// ConnectionInfo singleton resource. https://google.aip.dev/156
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectionInfo
	{
		
		/// <summary>
		/// Output only. The unique ID of the Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceUid")]
		public string InstanceUid { get; set; }
		
		/// <summary>
		/// Output only. The private network IP address for the Instance. This is the default IP for the instance and is always created (even if enable_public_ip is set). This is the connection endpoint for an end-user application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The name of the ConnectionInfo singleton resource, e.g.: projects/{project}/locations/{location}/clusters/*/instances/*/connectionInfo This field currently has no semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The pem-encoded chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCertificateChain")]
		public string[] PemCertificateChain { get; set; }
		
		/// <summary>
		/// Output only. The public IP addresses for the Instance. This is available ONLY when enable_public_ip is set. This is the connection endpoint for an end-user application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIpAddress")]
		public string PublicIpAddress { get; set; }
	}
	
	/// <summary>
	/// Message describing a ContinuousBackupSource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContinuousBackupSource
	{
		
		/// <summary>
		/// Required. The source cluster from which to restore. This cluster must have continuous backup enabled for this operation to succeed. For the required format, see the comment on the Cluster.name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public string Cluster { get; set; }
		
		/// <summary>
		/// Required. The point in time to restore to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointInTime")]
		public string PointInTime { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Message for triggering failover on an Instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailoverInstanceRequest
	{
		
		/// <summary>
		/// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the failover.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	/// <summary>
	/// Message for requests to generate a client certificate signed by the Cluster CA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateClientCertificateRequest
	{
		
		/// <summary>
		/// Optional. An optional hint to the endpoint to generate the client certificate with the requested duration. The duration can be from 1 hour to 24 hours. The endpoint may or may not honor the hint. If the hint is left unspecified or is not honored, then the endpoint will pick an appropriate default duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certDuration")]
		public string CertDuration { get; set; }
		
		/// <summary>
		/// Optional. A pem-encoded X.509 certificate signing request (CSR). It is recommended to use public_key instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCsr")]
		public string PemCsr { get; set; }
		
		/// <summary>
		/// Optional. The public key from the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		/// <summary>
		/// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. An optional hint to the endpoint to generate a client ceritificate that can be used by AlloyDB connectors to exchange additional metadata with the server after TLS handshake.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useMetadataExchange")]
		public System.Nullable<System.Boolean> UseMetadataExchange { get; set; }
	}
	
	/// <summary>
	/// Message returned by a GenerateClientCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateClientCertificateResponse
	{
		
		/// <summary>
		/// Optional. The pem-encoded cluster ca X.509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCert")]
		public string CaCert { get; set; }
		
		/// <summary>
		/// Output only. The pem-encoded, signed X.509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCertificate")]
		public string PemCertificate { get; set; }
		
		/// <summary>
		/// Output only. The pem-encoded chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCertificateChain")]
		public string[] PemCertificateChain { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudLocationListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public GoogleCloudLocationLocation[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudLocationLocation
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Message for triggering fault injection on an instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InjectFaultRequest
	{
		
		/// <summary>
		/// Required. The type of fault to be injected in an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faultType")]
		public System.Nullable<InjectFaultRequestFaultType> FaultType { get; set; }
		
		/// <summary>
		/// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the fault injection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InjectFaultRequestFaultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAULT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_VM = 1,
	}
	
	/// <summary>
	/// An Instance is a computing unit that an end customer can connect to. It's the main unit of computing resources in AlloyDB.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instance
	{
		
		/// <summary>
		/// Annotations to allow client tools to store small amount of arbitrary data. This is distinct from labels. https://google.aip.dev/128
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Availability type of an Instance. If empty, defaults to REGIONAL for primary instances. For read pools, availability_type is always UNSPECIFIED. Instances in the read pools are evenly distributed across available zones within the region (i.e. read pools with more than one node will have a node in at least two zones).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityType")]
		public System.Nullable<InstanceAvailabilityType> AvailabilityType { get; set; }
		
		/// <summary>
		/// Client connection configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientConnectionConfig")]
		public ClientConnectionConfig ClientConnectionConfig { get; set; }
		
		/// <summary>
		/// Output only. Create time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Database flags. Set at instance level. * They are copied from primary instance on read instance creation. * Read instances can set new or override existing flags that are relevant for reads, e.g. for enabling columnar cache on a read instance. Flags set on read instance may or may not be present on primary. This is a list of "key": "value" pairs. "key": The name of the flag. These flags are passed at instance setup time, so include both server options and system variables for Postgres. Flags are specified with underscores, not hyphens. "value": The value of the flag. Booleans are set to **on** for true and **off** for false. This field must be omitted if the flag doesn't take a value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseFlags")]
		public System.Collections.Generic.Dictionary<string, string> DatabaseFlags { get; set; }
		
		/// <summary>
		/// Output only. Delete time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// User-settable and human-readable display name for the Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// For Resource freshness validation (https://google.aip.dev/154)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The Compute Engine zone that the instance should serve from, per https://cloud.google.com/compute/docs/regions-zones This can ONLY be specified for ZONAL instances. If present for a REGIONAL instance, an error will be thrown. If this is absent for a ZONAL instance, instance is created in a random zone with available capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gceZone")]
		public string GceZone { get; set; }
		
		/// <summary>
		/// Required. The type of the instance. Specified at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public System.Nullable<InstanceInstanceType> InstanceType { get; set; }
		
		/// <summary>
		/// Output only. The IP address for the Instance. This is the connection endpoint for an end-user application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Labels as key value pairs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// MachineConfig describes the configuration of a machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineConfig")]
		public MachineConfig MachineConfig { get; set; }
		
		/// <summary>
		/// Output only. The name of the instance resource with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}/instances/{instance_id} where the cluster and instance ID segments should satisfy the regex expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`, e.g. 1-63 characters of lowercase letters, numbers, and dashes, starting with a letter, and ending with a letter or number. For more details see https://google.aip.dev/122. The prefix of the instance resource name is the name of the parent resource: * projects/{project}/locations/{region}/clusters/{cluster_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Metadata related to instance level network configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public InstanceNetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Output only. List of available read-only VMs in this instance, including the standby for a PRIMARY instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public Node[] Nodes { get; set; }
		
		/// <summary>
		/// QueryInsights Instance specific configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryInsightsConfig")]
		public QueryInsightsInstanceConfig QueryInsightsConfig { get; set; }
		
		/// <summary>
		/// Configuration for a read pool instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readPoolConfig")]
		public ReadPoolConfig ReadPoolConfig { get; set; }
		
		/// <summary>
		/// Output only. Reconciling (https://google.aip.dev/128#reconciliation). Set to true if the current state of Instance does not match the user's intended state, and the service is actively updating the resource to reconcile them. This can happen due to user-triggered updates or system actions like failover or maintenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reconciling")]
		public System.Nullable<System.Boolean> Reconciling { get; set; }
		
		/// <summary>
		/// Output only. Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzs")]
		public System.Nullable<System.Boolean> SatisfiesPzs { get; set; }
		
		/// <summary>
		/// Output only. The current serving state of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<InstanceState> State { get; set; }
		
		/// <summary>
		/// Output only. The system-generated UID of the resource. The UID is assigned when the resource is created, and it is retained until it is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Policy to be used while updating the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatePolicy")]
		public UpdatePolicy UpdatePolicy { get; set; }
		
		/// <summary>
		/// Output only. Update time stamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Details of a single node in the instance. Nodes in an AlloyDB instance are ephemereal, they can change during update, failover, autohealing and resize operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writableNode")]
		public Node WritableNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceAvailabilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_POOL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDARY = 3,
	}
	
	/// <summary>
	/// MachineConfig describes the configuration of a machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MachineConfig
	{
		
		/// <summary>
		/// The number of CPU's in the VM instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuCount")]
		public System.Nullable<System.Int32> CpuCount { get; set; }
	}
	
	/// <summary>
	/// Metadata related to instance level network configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceNetworkConfig
	{
		
		/// <summary>
		/// Optional. A list of external network authorized to access this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedExternalNetworks")]
		public AuthorizedNetwork[] AuthorizedExternalNetworks { get; set; }
		
		/// <summary>
		/// Optional. Enabling public ip for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePublicIp")]
		public System.Nullable<System.Boolean> EnablePublicIp { get; set; }
	}
	
	/// <summary>
	/// Details of a single node in the instance. Nodes in an AlloyDB instance are ephemereal, they can change during update, failover, autohealing and resize operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Node
	{
		
		/// <summary>
		/// The identifier of the VM e.g. "test-read-0601-407e52be-ms3l".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The private IP address of the VM e.g. "10.57.0.34".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// Determined by state of the compute VM and postgres-service health. Compute VM state can have values listed in https://cloud.google.com/compute/docs/instances/instance-life-cycle and postgres-service health can have values: HEALTHY and UNHEALTHY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The Compute Engine zone of the VM e.g. "us-central1-b".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneId")]
		public string ZoneId { get; set; }
	}
	
	/// <summary>
	/// QueryInsights Instance specific configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryInsightsInstanceConfig
	{
		
		/// <summary>
		/// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryPlansPerMinute")]
		public System.Nullable<System.UInt32> QueryPlansPerMinute { get; set; }
		
		/// <summary>
		/// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryStringLength")]
		public System.Nullable<System.UInt32> QueryStringLength { get; set; }
		
		/// <summary>
		/// Record application tags for an instance. This flag is turned "on" by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordApplicationTags")]
		public System.Nullable<System.Boolean> RecordApplicationTags { get; set; }
		
		/// <summary>
		/// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordClientAddress")]
		public System.Nullable<System.Boolean> RecordClientAddress { get; set; }
	}
	
	/// <summary>
	/// Configuration for a read pool instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadPoolConfig
	{
		
		/// <summary>
		/// Read capacity, i.e. number of nodes in a read pool instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROMOTING = 8,
	}
	
	/// <summary>
	/// Policy to be used while updating the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePolicy
	{
		
		/// <summary>
		/// Mode for updating the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<UpdatePolicyMode> Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdatePolicyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_APPLY = 2,
	}
	
	/// <summary>
	/// Restrictions on INTEGER type values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegerRestrictions
	{
		
		/// <summary>
		/// The maximum value that can be specified, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public string MaxValue { get; set; }
		
		/// <summary>
		/// The minimum value that can be specified, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public string MinValue { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing Backups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBackupsResponse
	{
		
		/// <summary>
		/// The list of Backup
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backups")]
		public Backup[] Backups { get; set; }
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing Clusters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClustersResponse
	{
		
		/// <summary>
		/// The list of Cluster
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusters")]
		public Cluster[] Clusters { get; set; }
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing Instances
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInstancesResponse
	{
		
		/// <summary>
		/// The list of Instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public Instance[] Instances { get; set; }
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing SupportedDatabaseFlags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSupportedDatabaseFlagsResponse
	{
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of SupportedDatabaseFlags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedDatabaseFlags")]
		public SupportedDatabaseFlag[] SupportedDatabaseFlags { get; set; }
	}
	
	/// <summary>
	/// SupportedDatabaseFlag gives general information about a database flag, like type and allowed values. This is a static value that is defined on the server side, and it cannot be modified by callers. To set the Database flags on a particular Instance, a caller should modify the Instance.database_flags field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SupportedDatabaseFlag
	{
		
		/// <summary>
		/// Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptsMultipleValues")]
		public System.Nullable<System.Boolean> AcceptsMultipleValues { get; set; }
		
		/// <summary>
		/// The name of the database flag, e.g. "max_allowed_packets". The is a possibly key for the Instance.database_flags map field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flagName")]
		public string FlagName { get; set; }
		
		/// <summary>
		/// Restrictions on INTEGER type values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerRestrictions")]
		public IntegerRestrictions IntegerRestrictions { get; set; }
		
		/// <summary>
		/// The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO's).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresDbRestart")]
		public System.Nullable<System.Boolean> RequiresDbRestart { get; set; }
		
		/// <summary>
		/// Restrictions on STRING type values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringRestrictions")]
		public StringRestrictions StringRestrictions { get; set; }
		
		/// <summary>
		/// Major database engine versions for which this flag is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedDbVersions")]
		public BackupDatabaseVersion[] SupportedDbVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public System.Nullable<SupportedDatabaseFlagValueType> ValueType { get; set; }
	}
	
	/// <summary>
	/// Restrictions on STRING type values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringRestrictions
	{
		
		/// <summary>
		/// The list of allowed values, if bounded. This field will be empty if there is a unbounded number of allowed values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public string[] AllowedValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SupportedDatabaseFlagValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOAT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 4,
	}
	
	/// <summary>
	/// Message for response to listing Users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUsersResponse
	{
		
		/// <summary>
		/// A token identifying a page of results the server should return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
		
		/// <summary>
		/// The list of User
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
	}
	
	/// <summary>
	/// Message describing User object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Optional. List of database roles this user has. The database role strings are subject to the PostgreSQL naming conventions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseRoles")]
		public string[] DatabaseRoles { get; set; }
		
		/// <summary>
		/// Output only. Name of the resource in the form of projects/{project}/locations/{location}/cluster/{cluster}/users/{user}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Input only. Password for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Optional. Type of this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public System.Nullable<UserUserType> UserType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOYDB_BUILT_IN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOYDB_IAM_USER = 2,
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Message for promoting a Cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromoteClusterRequest
	{
		
		/// <summary>
		/// Optional. The current etag of the Cluster. If an etag is provided and does not match the current etag of the Cluster, deletion will be blocked and an ABORTED error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestartInstanceRequest
	{
		
		/// <summary>
		/// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the restart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	/// <summary>
	/// Message for restoring a Cluster from a backup or another cluster at a given point in time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestoreClusterRequest
	{
		
		/// <summary>
		/// Message describing a BackupSource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupSource")]
		public BackupSource BackupSource { get; set; }
		
		/// <summary>
		/// A cluster is a collection of regional AlloyDB resources. It can include a primary instance and one or more read pool instances. All cluster resources share a storage layer, which scales as needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public Cluster Cluster { get; set; }
		
		/// <summary>
		/// Required. ID of the requesting object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Message describing a ContinuousBackupSource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuousBackupSource")]
		public ContinuousBackupSource ContinuousBackupSource { get; set; }
		
		/// <summary>
		/// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the import request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateOnly")]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	/// <summary>
	/// Configuration for availability of database instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration
	{
		
		/// <summary>
		/// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityType")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainAvailabilityConfigurationAvailabilityType> AvailabilityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalReplicaConfigured")]
		public System.Nullable<System.Boolean> ExternalReplicaConfigured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promotableReplicaConfigured")]
		public System.Nullable<System.Boolean> PromotableReplicaConfigured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainAvailabilityConfigurationAvailabilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_REGIONAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY_TYPE_OTHER = 4,
	}
	
	/// <summary>
	/// Configuration for automatic backups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainBackupConfiguration
	{
		
		/// <summary>
		/// Whether customer visible automated backups are enabled on the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automatedBackupEnabled")]
		public System.Nullable<System.Boolean> AutomatedBackupEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backupRetentionSettings")]
		public StorageDatabasecenterPartnerapiV1mainRetentionSettings BackupRetentionSettings { get; set; }
		
		/// <summary>
		/// Whether point-in-time recovery is enabled. This is optional field, if the database service does not have this feature or metadata is not available in control plane, this can be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointInTimeRecoveryEnabled")]
		public System.Nullable<System.Boolean> PointInTimeRecoveryEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainRetentionSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="quantityBasedRetention")]
		public System.Nullable<System.Int32> QuantityBasedRetention { get; set; }
		
		/// <summary>
		/// The unit that 'retained_backups' represents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionUnit")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainRetentionSettingsRetentionUnit> RetentionUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeBasedRetention")]
		public string TimeBasedRetention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainRetentionSettingsRetentionUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETENTION_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETENTION_UNIT_OTHER = 3,
	}
	
	/// <summary>
	/// A backup run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainBackupRun
	{
		
		/// <summary>
		/// The time the backup operation completed. REQUIRED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// An error that occurred during a backup creation operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public StorageDatabasecenterPartnerapiV1mainOperationError Error { get; set; }
		
		/// <summary>
		/// The time the backup operation started. REQUIRED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The status of this run. REQUIRED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainBackupRunStatus> Status { get; set; }
	}
	
	/// <summary>
	/// An error that occurred during a backup creation operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainOperationError
	{
		
		/// <summary>
		/// Identifies the specific error that occurred. REQUIRED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Additional information about the error encountered. REQUIRED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainBackupRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Contains compliance information about a security standard indicating unmet recommendations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainCompliance
	{
		
		/// <summary>
		/// Industry-wide compliance standards or benchmarks, such as CIS, PCI, and OWASP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
		
		/// <summary>
		/// Version of the standard or benchmark, for example, 1.1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// DatabaseResourceFeed is the top level proto to be used to ingest different database resource level events into Condor platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeed
	{
		
		/// <summary>
		/// Required. Timestamp when feed is generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedTimestamp")]
		public string FeedTimestamp { get; set; }
		
		/// <summary>
		/// Required. Type feed to be ingested into condor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedType")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeedFeedType> FeedType { get; set; }
		
		/// <summary>
		/// Common model for database resource health signal data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceHealthSignalData")]
		public StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData ResourceHealthSignalData { get; set; }
		
		/// <summary>
		/// DatabaseResourceId will serve as primary key for any resource ingestion event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public StorageDatabasecenterPartnerapiV1mainDatabaseResourceId ResourceId { get; set; }
		
		/// <summary>
		/// Common model for database resource instance metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceMetadata")]
		public StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata ResourceMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainDatabaseResourceFeedFeedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEEDTYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_METADATA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBSERVABILITY_DATA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_FINDING_DATA = 3,
	}
	
	/// <summary>
	/// Common model for database resource health signal data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalData
	{
		
		/// <summary>
		/// Any other additional metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalMetadata")]
		public System.Collections.Generic.Dictionary<string, object> AdditionalMetadata { get; set; }
		
		/// <summary>
		/// Industry standards associated with this signal; if this signal is an issue, that could be a violation of the associated industry standard(s). For example, AUTO_BACKUP_DISABLED signal is associated with CIS GCP 1.1, CIS GCP 1.2, CIS GCP 1.3, NIST 800-53 and ISO-27001 compliance standards. If a database resource does not have automated backup enable, it will violate these following industry standards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compliance")]
		public StorageDatabasecenterPartnerapiV1mainCompliance[] Compliance { get; set; }
		
		/// <summary>
		/// Description associated with signal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The last time at which the event described by this signal took place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public string EventTime { get; set; }
		
		/// <summary>
		/// The external-uri of the signal, using which more information about this signal can be obtained. In GCP, this will take user to SCC page to get more details about signals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalUri")]
		public string ExternalUri { get; set; }
		
		/// <summary>
		/// Required. The name of the signal, ex: PUBLIC_SQL_INSTANCE, SQL_LOG_ERROR_VERBOSITY etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataProvider> Provider { get; set; }
		
		/// <summary>
		/// Closest parent container of this resource. In GCP, 'container' refers to a Cloud Resource Manager project. It must be resource name of a Cloud Resource Manager project with the format of "provider//", such as "projects/123". For GCP provided resources, number should be project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceContainer")]
		public string ResourceContainer { get; set; }
		
		/// <summary>
		/// Required. Database resource name associated with the signal. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required. The class of the signal, such as if it's a THREAT or VULNERABILITY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalClass")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataSignalClass> SignalClass { get; set; }
		
		/// <summary>
		/// Required. Unique identifier for the signal. This is an unique id which would be mainatined by partner to identify a signal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalId")]
		public string SignalId { get; set; }
		
		/// <summary>
		/// Required. Type of signal, for example, `AVAILABLE_IN_MULTIPLE_ZONES`, `LOGGING_MOST_ERRORS`, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalType")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataSignalType> SignalType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONPREM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELFMANAGED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDER_OTHER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataSignalClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREAT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABILITY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISCONFIGURATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBSERVATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataSignalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NOT_PROTECTED_BY_AUTOMATIC_FAILOVER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_GROUP_NOT_REPLICATING_ACROSS_REGIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_ZONES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NOT_AVAILABLE_IN_MULTIPLE_REGIONS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NO_PROMOTABLE_REPLICA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NO_AUTOMATED_BACKUP_POLICY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_SHORT_BACKUP_RETENTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_LAST_BACKUP_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_LAST_BACKUP_OLD = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_2_0 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_3 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_1 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_CIS_GCP_FOUNDATION_1_0 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_NIST_800_53 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_ISO_27001 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VIOLATES_PCI_DSS_V3_2_1 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_LOGS_NOT_OPTIMIZED_FOR_TROUBLESHOOTING = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_QUERY_DURATIONS_NOT_LOGGED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_VERBOSE_ERROR_LOGGING = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_QUERY_LOCK_WAITS_NOT_LOGGED = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_LOGGING_MOST_ERRORS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_LOGGING_ONLY_CRITICAL_ERRORS = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_MINIMAL_ERROR_LOGGING = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_QUERY_STATISTICS_LOGGED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_CLIENT_HOSTNAME = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PARSER_STATISTICS = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXCESSIVE_LOGGING_OF_PLANNER_STATISTICS = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NOT_LOGGING_ONLY_DDL_STATEMENTS = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_LOGGING_QUERY_STATISTICS = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NOT_LOGGING_TEMPORARY_FILES = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_CONNECTION_MAX_NOT_CONFIGURED = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_USER_OPTIONS_CONFIGURED = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXPOSED_TO_PUBLIC_ACCESS = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_UNENCRYPTED_CONNECTIONS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_NO_ROOT_PASSWORD = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_WEAK_ROOT_PASSWORD = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_ENCRYPTION_KEY_NOT_CUSTOMER_MANAGED = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_SERVER_AUTHENTICATION_NOT_REQUIRED = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXPOSED_BY_OWNERSHIP_CHAINING = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXPOSED_TO_EXTERNAL_SCRIPTS = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXPOSED_TO_LOCAL_DATA_LOADS = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_CONNECTION_ATTEMPTS_NOT_LOGGED = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_DISCONNECTIONS_NOT_LOGGED = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_LOGGING_EXCESSIVE_STATEMENT_INFO = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_EXPOSED_TO_REMOTE_ACCESS = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_DATABASE_NAMES_EXPOSED = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_SENSITIVE_TRACE_INFO_NOT_MASKED = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_TYPE_PUBLIC_IP_ENABLED = 49,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOLVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUTED = 3,
	}
	
	/// <summary>
	/// DatabaseResourceId will serve as primary key for any resource ingestion event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainDatabaseResourceId
	{
		
		/// <summary>
		/// Required. Cloud provider name. Ex: GCP/AWS/Azure/OnPrem/SelfManaged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public StorageDatabasecenterPartnerapiV1mainDatabaseResourceHealthSignalDataProvider Provider { get; set; }
		
		/// <summary>
		/// Optional. Needs to be used only when the provider is PROVIDER_OTHER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerDescription")]
		public string ProviderDescription { get; set; }
		
		/// <summary>
		/// Required. The type of resource this ID is identifying. Ex alloydb.googleapis.com/Cluster, alloydb.googleapis.com/Instance, spanner.googleapis.com/Instance REQUIRED Please refer go/condor-common-datamodel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Required. A service-local token that distinguishes this resource from other resources within the same service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	/// <summary>
	/// Common model for database resource instance metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadata
	{
		
		/// <summary>
		/// Configuration for availability of database instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityConfiguration")]
		public StorageDatabasecenterPartnerapiV1mainAvailabilityConfiguration AvailabilityConfiguration { get; set; }
		
		/// <summary>
		/// Configuration for automatic backups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupConfiguration")]
		public StorageDatabasecenterPartnerapiV1mainBackupConfiguration BackupConfiguration { get; set; }
		
		/// <summary>
		/// A backup run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupRun")]
		public StorageDatabasecenterPartnerapiV1mainBackupRun BackupRun { get; set; }
		
		/// <summary>
		/// The creation time of the resource, i.e. the time when resource is created and recorded in partner service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Current state of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentState")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadataCurrentState> CurrentState { get; set; }
		
		/// <summary>
		/// Any custom metadata associated with the resource (a JSON field)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetadata")]
		public System.Collections.Generic.Dictionary<string, object> CustomMetadata { get; set; }
		
		/// <summary>
		/// The state that the instance is expected to be in. For example, an instance state can transition to UNHEALTHY due to wrong patch update, while the expected state will remain at the HEALTHY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedState")]
		public StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadataCurrentState ExpectedState { get; set; }
		
		/// <summary>
		/// DatabaseResourceId will serve as primary key for any resource ingestion event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public StorageDatabasecenterPartnerapiV1mainDatabaseResourceId Id { get; set; }
		
		/// <summary>
		/// The type of the instance. Specified at creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public System.Nullable<StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadataInstanceType> InstanceType { get; set; }
		
		/// <summary>
		/// The resource location. REQUIRED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// DatabaseResourceId will serve as primary key for any resource ingestion event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryResourceId")]
		public StorageDatabasecenterPartnerapiV1mainDatabaseResourceId PrimaryResourceId { get; set; }
		
		/// <summary>
		/// Product specification for Condor resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public StorageDatabasecenterProtoCommonProduct Product { get; set; }
		
		/// <summary>
		/// Closest parent Cloud Resource Manager container of this resource. It must be resource name of a Cloud Resource Manager project with the format of "/", such as "projects/123". For GCP provided resources, number should be project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceContainer")]
		public string ResourceContainer { get; set; }
		
		/// <summary>
		/// Required. Different from DatabaseResourceId.unique_id, a resource name can be reused over time. That is, after a resource named "ABC" is deleted, the name "ABC" can be used to to create a new resource within the same source. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The time at which the resource was updated and recorded at partner service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updationTime")]
		public string UpdationTime { get; set; }
		
		/// <summary>
		/// User-provided labels, represented as a dictionary where each label is a single key value pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLabels")]
		public System.Collections.Generic.Dictionary<string, string> UserLabels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadataCurrentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_OTHER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterPartnerapiV1mainDatabaseResourceMetadataInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_RESOURCE_TYPE_UNSPECIFIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDARY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_REPLICA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_RESOURCE_TYPE_PRIMARY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_RESOURCE_TYPE_SECONDARY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_RESOURCE_TYPE_READ_REPLICA = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_RESOURCE_TYPE_OTHER = 9,
	}
	
	/// <summary>
	/// Product specification for Condor resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageDatabasecenterProtoCommonProduct
	{
		
		/// <summary>
		/// The specific engine that the underlying database is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public System.Nullable<StorageDatabasecenterProtoCommonProductEngine> Engine { get; set; }
		
		/// <summary>
		/// Type of specific database product. It could be CloudSQL, AlloyDB etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<StorageDatabasecenterProtoCommonProductType> Type { get; set; }
		
		/// <summary>
		/// Version of the underlying database engine. Example values: For MySQL, it could be "8.0", "5.7" etc.. For Postgres, it could be "14", "15" etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterProtoCommonProductEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_MYSQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_POSTGRES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_SQL_SERVER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_SERVER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_NATIVE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_CLOUD_SPANNER_WITH_POSTGRES_DIALECT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPANGRES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_OTHER = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageDatabasecenterProtoCommonProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_TYPE_CLOUD_SQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_SQL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_TYPE_ALLOYDB = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOYDB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_TYPE_SPANNER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPANNER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_TYPE_ON_PREM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_PREM = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_TYPE_OTHER = 9,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
		/// Alloydb_projects_locations_operations_delete v1beta/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource to be deleted.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="validateOnly">Optional. If set, the backend validates the request, but doesn't actually execute it.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Alloydb_projects_locations_operations_deleteAsync(string name, string requestId, bool validateOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Alloydb_projects_locations_operations_get v1beta/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <param name="view">The view of the instance to return.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_operations_getAsync(string name, Alloydb_projects_locations_operations_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the parameters of a single User.
		/// Alloydb_projects_locations_clusters_users_patch v1beta/{name}
		/// </summary>
		/// <param name="name">Output only. Name of the resource in the form of projects/{project}/locations/{location}/cluster/{cluster}/users/{user}.</param>
		/// <param name="allowMissing">Optional. Allow missing fields in the update mask.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="updateMask">Optional. Field mask is used to specify the fields to be overwritten in the User resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.</param>
		/// <param name="validateOnly">Optional. If set, the backend validates the request, but doesn't actually execute it.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Alloydb_projects_locations_clusters_users_patchAsync(string name, bool allowMissing, string requestId, string updateMask, bool validateOnly, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Alloydb_projects_locations_list v1beta/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudLocationListLocationsResponse> Alloydb_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudLocationListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Alloydb_projects_locations_operations_list v1beta/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Alloydb_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Alloydb_projects_locations_operations_cancel v1beta/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Alloydb_projects_locations_operations_cancelAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Forces a Failover for a highly available instance. Failover promotes the HA standby instance as the new primary. Imperative only.
		/// Alloydb_projects_locations_clusters_instances_failover v1beta/{name}:failover
		/// </summary>
		/// <param name="name">Required. The name of the resource. For the required format, see the comment on the Instance.name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_instances_failoverAsync(string name, FailoverInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":failover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Injects fault in an instance. Imperative only.
		/// Alloydb_projects_locations_clusters_instances_injectFault v1beta/{name}:injectFault
		/// </summary>
		/// <param name="name">Required. The name of the resource. For the required format, see the comment on the Instance.name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_instances_injectFaultAsync(string name, InjectFaultRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":injectFault";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Promotes a SECONDARY cluster. This turns down replication from the PRIMARY cluster and promotes a secondary cluster into its own standalone cluster. Imperative only.
		/// Alloydb_projects_locations_clusters_promote v1beta/{name}:promote
		/// </summary>
		/// <param name="name">Required. The name of the resource. For the required format, see the comment on the Cluster.name field</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_promoteAsync(string name, PromoteClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":promote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Restart an Instance in a cluster. Imperative only.
		/// Alloydb_projects_locations_clusters_instances_restart v1beta/{name}:restart
		/// </summary>
		/// <param name="name">Required. The name of the resource. For the required format, see the comment on the Instance.name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_instances_restartAsync(string name, RestartInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":restart";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Backups in a given project and location.
		/// Alloydb_projects_locations_backups_list v1beta/{parent}/backups
		/// </summary>
		/// <param name="parent">Required. Parent value for ListBackupsRequest</param>
		/// <param name="filter">Filtering results</param>
		/// <param name="orderBy">Hint for how to order the results</param>
		/// <param name="pageSize">Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBackupsResponse> Alloydb_projects_locations_backups_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/backups&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBackupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Backup in a given project and location.
		/// Alloydb_projects_locations_backups_create v1beta/{parent}/backups
		/// </summary>
		/// <param name="parent">Required. Value for parent.</param>
		/// <param name="backupId">Required. ID of the requesting object.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="validateOnly">Optional. If set, the backend validates the request, but doesn't actually execute it.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_backups_createAsync(string parent, string backupId, string requestId, bool validateOnly, Backup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/backups&backupId=" + (backupId==null? "" : System.Uri.EscapeDataString(backupId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Clusters in a given project and location.
		/// Alloydb_projects_locations_clusters_list v1beta/{parent}/clusters
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. For the required format, see the comment on the Cluster.name field. Additionally, you can perform an aggregated list operation by specifying a value with the following format: * projects/{project}/locations/-</param>
		/// <param name="filter">Optional. Filtering results</param>
		/// <param name="orderBy">Optional. Hint for how to order the results</param>
		/// <param name="pageSize">Optional. Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <returns>Successful response</returns>
		public async Task<ListClustersResponse> Alloydb_projects_locations_clusters_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clusters&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Cluster in a given project and location.
		/// Alloydb_projects_locations_clusters_create v1beta/{parent}/clusters
		/// </summary>
		/// <param name="parent">Required. The location of the new cluster. For the required format, see the comment on the Cluster.name field.</param>
		/// <param name="clusterId">Required. ID of the requesting object.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="validateOnly">Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the create request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_createAsync(string parent, string clusterId, string requestId, bool validateOnly, Cluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clusters&clusterId=" + (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a cluster of type SECONDARY in the given location using the primary cluster as the source.
		/// Alloydb_projects_locations_clusters_createsecondary v1beta/{parent}/clusters:createsecondary
		/// </summary>
		/// <param name="parent">Required. The location of the new cluster. For the required format, see the comment on the Cluster.name field.</param>
		/// <param name="clusterId">Required. ID of the requesting object (the secondary cluster).</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="validateOnly">Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the create request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_createsecondaryAsync(string parent, string clusterId, string requestId, bool validateOnly, Cluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clusters:createsecondary&clusterId=" + (clusterId==null? "" : System.Uri.EscapeDataString(clusterId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new Cluster in a given project and location, with a volume restored from the provided source, either a backup ID or a point-in-time and a source cluster.
		/// Alloydb_projects_locations_clusters_restore v1beta/{parent}/clusters:restore
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. For the required format, see the comment on the Cluster.name field.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_restoreAsync(string parent, RestoreClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clusters:restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get instance metadata used for a connection.
		/// Alloydb_projects_locations_clusters_instances_getConnectionInfo v1beta/{parent}/connectionInfo
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. The required format is: projects/{project}/locations/{location}/clusters/{cluster}/instances/{instance}</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<ConnectionInfo> Alloydb_projects_locations_clusters_instances_getConnectionInfoAsync(string parent, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/connectionInfo&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConnectionInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Instances in a given project and location.
		/// Alloydb_projects_locations_clusters_instances_list v1beta/{parent}/instances
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. For the required format, see the comment on the Instance.name field. Additionally, you can perform an aggregated list operation by specifying a value with one of the following formats: * projects/{project}/locations/-/clusters/- * projects/{project}/locations/{region}/clusters/-</param>
		/// <param name="filter">Optional. Filtering results</param>
		/// <param name="orderBy">Optional. Hint for how to order the results</param>
		/// <param name="pageSize">Optional. Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInstancesResponse> Alloydb_projects_locations_clusters_instances_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instances&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInstancesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Instance in a given project and location.
		/// Alloydb_projects_locations_clusters_instances_create v1beta/{parent}/instances
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. For the required format, see the comment on the Instance.name field.</param>
		/// <param name="instanceId">Required. ID of the requesting object.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="validateOnly">Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the create request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_instances_createAsync(string parent, string instanceId, string requestId, bool validateOnly, Instance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instances&instanceId=" + (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new SECONDARY Instance in a given project and location.
		/// Alloydb_projects_locations_clusters_instances_createsecondary v1beta/{parent}/instances:createsecondary
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. For the required format, see the comment on the Instance.name field.</param>
		/// <param name="instanceId">Required. ID of the requesting object.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="validateOnly">Optional. If set, performs request validation (e.g. permission checks and any other type of validation), but do not actually execute the create request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Alloydb_projects_locations_clusters_instances_createsecondaryAsync(string parent, string instanceId, string requestId, bool validateOnly, Instance requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/instances:createsecondary&instanceId=" + (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists SupportedDatabaseFlags for a given project and location.
		/// Alloydb_projects_locations_supportedDatabaseFlags_list v1beta/{parent}/supportedDatabaseFlags
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. The required format is: * projects/{project}/locations/{location} Regardless of the parent specified here, as long it is contains a valid project and location, the service will return a static list of supported flags resources. Note that we do not yet support region-specific flags.</param>
		/// <param name="pageSize">Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSupportedDatabaseFlagsResponse> Alloydb_projects_locations_supportedDatabaseFlags_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/supportedDatabaseFlags&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSupportedDatabaseFlagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Users in a given project and location.
		/// Alloydb_projects_locations_clusters_users_list v1beta/{parent}/users
		/// </summary>
		/// <param name="parent">Required. Parent value for ListUsersRequest</param>
		/// <param name="filter">Optional. Filtering results</param>
		/// <param name="orderBy">Optional. Hint for how to order the results</param>
		/// <param name="pageSize">Optional. Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results the server should return.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUsersResponse> Alloydb_projects_locations_clusters_users_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/users&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new User in a given project, location, and cluster.
		/// Alloydb_projects_locations_clusters_users_create v1beta/{parent}/users
		/// </summary>
		/// <param name="parent">Required. Value for parent.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="userId">Required. ID of the requesting object.</param>
		/// <param name="validateOnly">Optional. If set, the backend validates the request, but doesn't actually execute it.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Alloydb_projects_locations_clusters_users_createAsync(string parent, string requestId, string userId, bool validateOnly, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/users&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate a client certificate signed by a Cluster CA. The sole purpose of this endpoint is to support AlloyDB connectors and the Auth Proxy client. The endpoint's behavior is subject to change without notice, so do not rely on its behavior remaining constant. Future changes will not break AlloyDB connectors or the Auth Proxy client.
		/// Alloydb_projects_locations_clusters_generateClientCertificate v1beta/{parent}:generateClientCertificate
		/// </summary>
		/// <param name="parent">Required. The name of the parent resource. The required format is: * projects/{project}/locations/{location}/clusters/{cluster}</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateClientCertificateResponse> Alloydb_projects_locations_clusters_generateClientCertificateAsync(string parent, GenerateClientCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":generateClientCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenerateClientCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Alloydb_projects_locations_operations_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_VIEW_BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_VIEW_FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
