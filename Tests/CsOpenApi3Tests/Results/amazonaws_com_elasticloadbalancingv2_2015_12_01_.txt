//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddListenerCertificatesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
	}
	
	/// <summary>
	/// Information about an SSL server certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListenerNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyCertificatesException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTagsOutput
	{
	}
	
	/// <summary>
	/// Information about a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateTagKeysException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetGroupNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateListenerOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
	}
	
	/// <summary>
	/// Information about a listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Listener
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SslPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] DefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlpnPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProtocolEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENEVE = 6,
	}
	
	/// <summary>
	/// <p>Information about an action.</p> <p>Each rule must include exactly one of the following types of actions: <code>forward</code>, <code>fixed-response</code>, or <code>redirect</code>, and it must be the last action to be performed.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Action
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTypeEnum Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateOidcActionConfig AuthenticateOidcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateCognitoActionConfig AuthenticateCognitoConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedirectActionConfig RedirectConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FixedResponseActionConfig FixedResponseConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ForwardActionConfig ForwardConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ActionTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forward = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authenticate-oidc")]
		authenticateMinusoidc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="authenticate-cognito")]
		authenticateMinuscognito = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redirect = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed-response")]
		fixedMinusresponse = 4,
	}
	
	/// <summary>
	/// Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticateOidcActionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TokenEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserInfoEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SessionCookieName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateOidcActionAuthenticationRequestExtraParams AuthenticationRequestExtraParams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateOidcActionConditionalBehaviorEnum OnUnauthenticatedRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseExistingClientSecret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticateOidcActionAuthenticationRequestExtraParams
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthenticateOidcActionConditionalBehaviorEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate = 2,
	}
	
	/// <summary>
	/// Request parameters to use when integrating with Amazon Cognito to authenticate users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticateCognitoActionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SessionCookieName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateCognitoActionAuthenticationRequestExtraParams AuthenticationRequestExtraParams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateOidcActionConditionalBehaviorEnum OnUnauthenticatedRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticateCognitoActionAuthenticationRequestExtraParams
	{
	}
	
	/// <summary>
	/// <p>Information about a redirect action.</p> <p>A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.</p> <p>You can reuse URI components using the following reserved keywords:</p> <ul> <li> <p>#{protocol}</p> </li> <li> <p>#{host}</p> </li> <li> <p>#{port}</p> </li> <li> <p>#{path} (the leading "/" is removed)</p> </li> <li> <p>#{query}</p> </li> </ul> <p>For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&amp;value=xyz".</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedirectActionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Query { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RedirectActionStatusCodeEnum StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RedirectActionStatusCodeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_301 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_302 = 1,
	}
	
	/// <summary>
	/// Information about an action that returns a custom HTTP response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FixedResponseActionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageBody { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
	}
	
	/// <summary>
	/// Information about a forward action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForwardActionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupTuple[] TargetGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupStickinessConfig TargetGroupStickinessConfig { get; set; }
	}
	
	/// <summary>
	/// Information about how traffic will be distributed between multiple target groups in a forward rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetGroupTuple
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// Information about the target group stickiness for a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetGroupStickinessConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateListenerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyListenersException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetGroupAssociationLimitException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidConfigurationRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncompatibleProtocolsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SSLPolicyNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsupportedProtocolException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRegistrationsForTargetIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTargetsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyActionsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidLoadBalancerActionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyUniqueTargetGroupsPerLoadBalancerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ALPNPolicyNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoadBalancerOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancer[] LoadBalancers { get; set; }
	}
	
	/// <summary>
	/// Information about a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DNSName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CanonicalHostedZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerSchemeEnum Scheme { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTypeEnum Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIpv4Pool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LoadBalancerSchemeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internet-facing")]
		internetMinusfacing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal")]
		_internal = 1,
	}
	
	/// <summary>
	/// Information about the state of the load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerStateEnum Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LoadBalancerStateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active_impaired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LoadBalancerTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gateway = 2,
	}
	
	/// <summary>
	/// Information about an Availability Zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ZoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAddress[] LoadBalancerAddresses { get; set; }
	}
	
	/// <summary>
	/// Information about a static IP address for a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIPv4Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IPv6Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dualstack = 1,
	}
	
	/// <summary>
	/// Information about a subnet mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubnetMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIPv4Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IPv6Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateLoadBalancerNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyLoadBalancersException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubnetNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSubnetException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSecurityGroupException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSchemeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllocationIdNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityZoneNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationNotPermittedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRuleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Information about a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleCondition[] Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
	}
	
	/// <summary>
	/// <p>Information about a condition for a rule.</p> <p>Each rule can optionally include up to one of each of the following conditions: <code>http-request-method</code>, <code>host-header</code>, <code>path-pattern</code>, and <code>source-ip</code>. Each rule can also optionally include one or more of each of the following conditions: <code>http-header</code> and <code>query-string</code>. Note that the value for a condition cannot be empty.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleCondition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostHeaderConditionConfig HostHeaderConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathPatternConditionConfig PathPatternConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HttpHeaderConditionConfig HttpHeaderConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryStringConditionConfig QueryStringConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HttpRequestMethodConditionConfig HttpRequestMethodConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceIpConditionConfig SourceIpConfig { get; set; }
	}
	
	/// <summary>
	/// Information about a host header condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HostHeaderConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Information about a path pattern condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PathPatternConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Information about an HTTP header condition.</p> <p>There is a set of standard HTTP header fields. You can also define custom HTTP header fields.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpHeaderConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpHeaderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Information about a query string condition.</p> <p>The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&amp;' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryStringConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public QueryStringKeyValuePair[] Values { get; set; }
	}
	
	/// <summary>
	/// Information about a key/value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryStringKeyValuePair
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>Information about an HTTP method condition.</p> <p>HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the <a href="https://www.iana.org/assignments/http-methods/http-methods.xhtml">HTTP Method Registry</a>. You can also define custom HTTP methods.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpRequestMethodConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Information about a source IP condition.</p> <p>You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceIpConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriorityInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTargetGroupsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRulesException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTargetGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroup[] TargetGroups { get; set; }
	}
	
	/// <summary>
	/// Information about a target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum HealthCheckProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HealthCheckEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Matcher Matcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LoadBalancerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTypeEnum TargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProtocolVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupIpAddressTypeEnum IpAddressType { get; set; }
	}
	
	/// <summary>
	/// The codes to use when checking for a successful response from a target. If the protocol version is gRPC, these are gRPC codes. Otherwise, these are HTTP codes. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Matcher
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GrpcCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lambda = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alb = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetGroupIpAddressTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateTargetGroupNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteListenerOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoadBalancerOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRuleOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTargetGroupOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterTargetsOutput
	{
	}
	
	/// <summary>
	/// Information about a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetDescription
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTargetException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountLimitsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Limit[] Limits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// Information about an Elastic Load Balancing resource limit for your Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Limit
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Max { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeListenerCertificatesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeListenersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancerAttributesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAttribute[] Attributes { get; set; }
	}
	
	/// <summary>
	/// Information about a load balancer attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancer[] LoadBalancers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSSLPoliciesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SslPolicy[] SslPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// Information about a policy used for SSL negotiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SslPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SslProtocols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cipher[] Ciphers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedLoadBalancerTypes { get; set; }
	}
	
	/// <summary>
	/// Information about a cipher used in a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cipher
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTagsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagDescription[] TagDescriptions { get; set; }
	}
	
	/// <summary>
	/// The tags associated with a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTargetGroupAttributesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupAttribute[] Attributes { get; set; }
	}
	
	/// <summary>
	/// Information about a target group attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetGroupAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTargetGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroup[] TargetGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTargetHealthOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetHealthDescription[] TargetHealthDescriptions { get; set; }
	}
	
	/// <summary>
	/// Information about the health of a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetHealthDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetHealth TargetHealth { get; set; }
	}
	
	/// <summary>
	/// Information about the current health of a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetHealth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetHealthStateEnum State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetHealthReasonEnum Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetHealthStateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draining = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TargetHealthReasonEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Elb.RegistrationInProgress")]
		Elb_RegistrationInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Elb.InitialHealthChecking")]
		Elb_InitialHealthChecking = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.ResponseCodeMismatch")]
		Target_ResponseCodeMismatch = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.Timeout")]
		Target_Timeout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.FailedHealthChecks")]
		Target_FailedHealthChecks = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.NotRegistered")]
		Target_NotRegistered = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.NotInUse")]
		Target_NotInUse = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.DeregistrationInProgress")]
		Target_DeregistrationInProgress = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.InvalidState")]
		Target_InvalidState = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.IpUnusable")]
		Target_IpUnusable = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Target.HealthCheckDisabled")]
		Target_HealthCheckDisabled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Elb.InternalError")]
		Elb_InternalError = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyListenerOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyLoadBalancerAttributesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyRuleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyTargetGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroup[] TargetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyTargetGroupAttributesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterTargetsOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveListenerCertificatesOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTagsOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIpAddressTypeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetRulePrioritiesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Information about the priorities for the rules for a listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RulePriorityPair
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSecurityGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSubnetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddListenerCertificatesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceArns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthenticateCognitoActionConditionalBehaviorEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateListenerInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SslPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Action[] DefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlpnPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoadBalancerInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetMapping[] SubnetMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerSchemeEnum Scheme { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTypeEnum Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIpv4Pool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRuleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RuleCondition[] Conditions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Priority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTargetGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProtocolVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum HealthCheckProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HealthCheckEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Matcher Matcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetTypeEnum TargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupIpAddressTypeEnum IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteListenerInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoadBalancerInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRuleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTargetGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterTargetsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAccountLimitsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeListenerCertificatesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeListenersInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ListenerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancerAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeLoadBalancersInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LoadBalancerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRulesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RuleArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeSSLPoliciesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTypeEnum LoadBalancerType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTargetGroupAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTargetGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetGroupArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTargetHealthInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyListenerInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SslPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] DefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlpnPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyLoadBalancerAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyRuleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleCondition[] Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyTargetGroupAttributesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ModifyTargetGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolEnum HealthCheckProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HealthCheckEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Matcher Matcher { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterTargetsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveListenerCertificatesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceArns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIpAddressTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetRulePrioritiesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RulePriorityPair[] RulePriorities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSecurityGroupsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSubnetsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetMapping[] SubnetMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpAddressType IpAddressType { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.</p> <p>If the certificate in already in the certificate list, the call is successful but the certificate is not added again.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html">HTTPS listeners</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html">TLS listeners</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_AddListenerCertificates #Action=AddListenerCertificates
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Certificates">The certificate to add. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AddListenerCertificatesAsync(string ListenerArn, Certificate[] Certificates, GET_AddListenerCertificatesAction Action, GET_AddListenerCertificatesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddListenerCertificates?ListenerArn=" + (ListenerArn==null? "" : System.Uri.EscapeDataString(ListenerArn))+"&"+string.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, and rules.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, <code>AddTags</code> updates its value.</p>
		/// GET_AddTags #Action=AddTags
		/// </summary>
		/// <param name="ResourceArns">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="Tags">The tags.</param>
		/// <returns>Success</returns>
		public async Task GET_AddTagsAsync(string[] ResourceArns, Tag[] Tags, GET_AddTagsAction Action, GET_AddTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddTags?"+string.Join("&", ResourceArns.Select(z => $"ResourceArns={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.</p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html">Listeners for your Application Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html">Listeners for your Network Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html">Listeners for your Gateway Load Balancers</a> </p> </li> </ul> <p>This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.</p>
		/// GET_CreateListener #Action=CreateListener
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="Protocol">The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You can’t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.</param>
		/// <param name="Port">The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.</param>
		/// <param name="SslPolicy"><p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> and <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <param name="Certificates">[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</param>
		/// <param name="DefaultActions">The actions for the default rule.</param>
		/// <param name="AlpnPolicy"><p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p> <ul> <li> <p> <code>HTTP1Only</code> </p> </li> <li> <p> <code>HTTP2Only</code> </p> </li> <li> <p> <code>HTTP2Optional</code> </p> </li> <li> <p> <code>HTTP2Preferred</code> </p> </li> <li> <p> <code>None</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <param name="Tags">The tags to assign to the listener.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateListenerAsync(string LoadBalancerArn, ProtocolEnum Protocol, int Port, string SslPolicy, Certificate[] Certificates, Action[] DefaultActions, string[] AlpnPolicy, Tag[] Tags, GET_CreateListenerAction Action, GET_CreateListenerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateListener?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&Protocol=" + Protocol+"&Port="+Port+"&SslPolicy=" + (SslPolicy==null? "" : System.Uri.EscapeDataString(SslPolicy))+"&"+string.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&"+string.Join("&", DefaultActions.Select(z => $"DefaultActions={z}"))+"&"+string.Join("&", AlpnPolicy.Select(z => $"AlpnPolicy={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.</p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html">Application Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html">Network Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html">Gateway Load Balancers</a> </p> </li> </ul> <p>This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.</p>
		/// GET_CreateLoadBalancer #Action=CreateLoadBalancer
		/// </summary>
		/// <param name="Name"><p>The name of the load balancer.</p> <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".</p></param>
		/// <param name="Subnets"><p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones.</p> <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p> <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p> <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones.</p> <p>[Gateway Load Balancers] You can specify subnets from one or more Availability Zones.</p></param>
		/// <param name="SubnetMappings"><p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p> <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p> <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p> <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.</p> <p>[Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p></param>
		/// <param name="SecurityGroups">[Application Load Balancers] The IDs of the security groups for the load balancer.</param>
		/// <param name="Scheme"><p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.</p> <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.</p> <p>The default is an Internet-facing load balancer.</p> <p>You cannot specify a scheme for a Gateway Load Balancer.</p></param>
		/// <param name="Tags">The tags to assign to the load balancer.</param>
		/// <param name="Type">The type of load balancer. The default is <code>application</code>.</param>
		/// <param name="IpAddressType">The type of IP addresses used by the subnets for your load balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). </param>
		/// <param name="CustomerOwnedIpv4Pool">[Application Load Balancers on Outposts] The ID of the customer-owned address pool (CoIP pool).</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLoadBalancerAsync(string Name, string[] Subnets, SubnetMapping[] SubnetMappings, string[] SecurityGroups, GET_CreateLoadBalancerScheme Scheme, Tag[] Tags, LoadBalancerTypeEnum Type, IpAddressType IpAddressType, string CustomerOwnedIpv4Pool, GET_CreateLoadBalancerAction Action, GET_CreateLoadBalancerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLoadBalancer?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&"+string.Join("&", Subnets.Select(z => $"Subnets={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SubnetMappings.Select(z => $"SubnetMappings={z}"))+"&"+string.Join("&", SecurityGroups.Select(z => $"SecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&Scheme=" + Scheme+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Type=" + Type+"&IpAddressType=" + IpAddressType+"&CustomerOwnedIpv4Pool=" + (CustomerOwnedIpv4Pool==null? "" : System.Uri.EscapeDataString(CustomerOwnedIpv4Pool))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.</p> <p>Each rule consists of a priority, one or more actions, and one or more conditions. Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules">Listener rules</a> in the <i>Application Load Balancers Guide</i>.</p>
		/// GET_CreateRule #Action=CreateRule
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Conditions">The conditions.</param>
		/// <param name="Priority">The rule priority. A listener can't have multiple rules with the same priority.</param>
		/// <param name="Actions">The actions.</param>
		/// <param name="Tags">The tags to assign to the rule.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateRuleAsync(string ListenerArn, RuleCondition[] Conditions, int Priority, Action[] Actions, Tag[] Tags, GET_CreateRuleAction Action, GET_CreateRuleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateRule?ListenerArn=" + (ListenerArn==null? "" : System.Uri.EscapeDataString(ListenerArn))+"&"+string.Join("&", Conditions.Select(z => $"Conditions={z}"))+"&Priority="+Priority+"&"+string.Join("&", Actions.Select(z => $"Actions={z}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a target group.</p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html">Target groups for your Application Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html">Target groups for your Network Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html">Target groups for your Gateway Load Balancers</a> </p> </li> </ul> <p>This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.</p>
		/// GET_CreateTargetGroup #Action=CreateTargetGroup
		/// </summary>
		/// <param name="Name"><p>The name of the target group.</p> <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.</p></param>
		/// <param name="Protocol">The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the supported protocol is GENEVE. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.</param>
		/// <param name="ProtocolVersion">[HTTP/HTTPS protocol] The protocol version. Specify <code>GRPC</code> to send requests to targets using gRPC. Specify <code>HTTP2</code> to send requests to targets using HTTP/2. The default is <code>HTTP1</code>, which sends requests to targets using HTTP/1.1.</param>
		/// <param name="Port">The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.</param>
		/// <param name="VpcId">The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.</param>
		/// <param name="HealthCheckProtocol">The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</param>
		/// <param name="HealthCheckPort">The port the load balancer uses when performing health checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS, UDP, or TCP_UDP, the default is <code>traffic-port</code>, which is the port on which each target receives traffic from the load balancer. If the protocol is GENEVE, the default is port 80.</param>
		/// <param name="HealthCheckEnabled">Indicates whether health checks are enabled. If the target type is <code>lambda</code>, health checks are disabled by default but can be enabled. If the target type is <code>instance</code>, <code>ip</code>, or <code>alb</code>, health checks are always enabled and cannot be disabled.</param>
		/// <param name="HealthCheckPath"><p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p> <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p> <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p></param>
		/// <param name="HealthCheckIntervalSeconds">The approximate amount of time, in seconds, between health checks of an individual target. The range is 5-300. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is 30 seconds. If the target group protocol is GENEVE, the default is 10 seconds. If the target type is <code>lambda</code>, the default is 35 seconds.</param>
		/// <param name="HealthCheckTimeoutSeconds">The amount of time, in seconds, during which no response from a target means a failed health check. The range is 2–120 seconds. For target groups with a protocol of HTTP, the default is 6 seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is 10 seconds. For target groups with a protocol of GENEVE, the default is 5 seconds. If the target type is <code>lambda</code>, the default is 30 seconds.</param>
		/// <param name="HealthyThresholdCount">The number of consecutive health check successes required before considering a target healthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 5. For target groups with a protocol of GENEVE, the default is 5. If the target type is <code>lambda</code>, the default is 5.</param>
		/// <param name="UnhealthyThresholdCount">The number of consecutive health check failures required before considering a target unhealthy. The range is 2-10. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is 2. For target groups with a protocol of GENEVE, the default is 2. If the target type is <code>lambda</code>, the default is 5.</param>
		/// <param name="Matcher">[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</param>
		/// <param name="TargetType"><p>The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.</p> <ul> <li> <p> <code>instance</code> - Register targets by instance ID. This is the default value.</p> </li> <li> <p> <code>ip</code> - Register targets by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.</p> </li> <li> <p> <code>lambda</code> - Register a single Lambda function as a target.</p> </li> <li> <p> <code>alb</code> - Register a single Application Load Balancer as a target.</p> </li> </ul></param>
		/// <param name="Tags">The tags to assign to the target group.</param>
		/// <param name="IpAddressType">The type of IP address used for this target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTargetGroupAsync(
					string Name, 
					ProtocolEnum Protocol, 
					string ProtocolVersion, 
					int Port, 
					string VpcId, 
					ProtocolEnum HealthCheckProtocol, 
					string HealthCheckPort, 
					bool HealthCheckEnabled, 
					string HealthCheckPath, 
					int HealthCheckIntervalSeconds, 
					int HealthCheckTimeoutSeconds, 
					int HealthyThresholdCount, 
					int UnhealthyThresholdCount, 
					GET_CreateTargetGroupMatcher Matcher, 
					TargetTypeEnum TargetType, 
					Tag[] Tags, 
					TargetGroupIpAddressTypeEnum IpAddressType, 
					GET_CreateTargetGroupAction Action, 
					GET_CreateTargetGroupVersion Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTargetGroup?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&Protocol=" + Protocol+"&ProtocolVersion=" + (ProtocolVersion==null? "" : System.Uri.EscapeDataString(ProtocolVersion))+"&Port="+Port+"&VpcId=" + (VpcId==null? "" : System.Uri.EscapeDataString(VpcId))+"&HealthCheckProtocol=" + HealthCheckProtocol+"&HealthCheckPort=" + (HealthCheckPort==null? "" : System.Uri.EscapeDataString(HealthCheckPort))+"&HealthCheckEnabled="+HealthCheckEnabled+"&HealthCheckPath=" + (HealthCheckPath==null? "" : System.Uri.EscapeDataString(HealthCheckPath))+"&HealthCheckIntervalSeconds="+HealthCheckIntervalSeconds+"&HealthCheckTimeoutSeconds="+HealthCheckTimeoutSeconds+"&HealthyThresholdCount="+HealthyThresholdCount+"&UnhealthyThresholdCount="+UnhealthyThresholdCount+"&Matcher=" + Matcher+"&TargetType=" + TargetType+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&IpAddressType=" + IpAddressType+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified listener.</p> <p>Alternatively, your listener is deleted when you delete the load balancer to which it is attached.</p>
		/// GET_DeleteListener #Action=DeleteListener
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteListenerAsync(string ListenerArn, GET_DeleteListenerAction Action, GET_DeleteListenerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteListener?ListenerArn=" + (ListenerArn==null? "" : System.Uri.EscapeDataString(ListenerArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. Deleting a load balancer also deletes its listeners.</p> <p>You can't delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.</p> <p>Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.</p>
		/// GET_DeleteLoadBalancer #Action=DeleteLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLoadBalancerAsync(string LoadBalancerArn, GET_DeleteLoadBalancerAction Action, GET_DeleteLoadBalancerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLoadBalancer?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified rule.</p> <p>You can't delete the default rule.</p>
		/// GET_DeleteRule #Action=DeleteRule
		/// </summary>
		/// <param name="RuleArn">The Amazon Resource Name (ARN) of the rule.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRuleAsync(string RuleArn, GET_DeleteRuleAction Action, GET_DeleteRuleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRule?RuleArn=" + (RuleArn==null? "" : System.Uri.EscapeDataString(RuleArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified target group.</p> <p>You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks. Deleting a target group does not affect its registered targets. For example, any EC2 instances continue to run until you stop or terminate them.</p>
		/// GET_DeleteTargetGroup #Action=DeleteTargetGroup
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTargetGroupAsync(string TargetGroupArn, GET_DeleteTargetGroupAction Action, GET_DeleteTargetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTargetGroup?TargetGroupArn=" + (TargetGroupArn==null? "" : System.Uri.EscapeDataString(TargetGroupArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
		/// GET_DeregisterTargets #Action=DeregisterTargets
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Targets">The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.</param>
		/// <returns>Success</returns>
		public async Task GET_DeregisterTargetsAsync(string TargetGroupArn, TargetDescription[] Targets, GET_DeregisterTargetsAction Action, GET_DeregisterTargetsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterTargets?TargetGroupArn=" + (TargetGroupArn==null? "" : System.Uri.EscapeDataString(TargetGroupArn))+"&"+string.Join("&", Targets.Select(z => $"Targets={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the current Elastic Load Balancing resource limits for your Amazon Web Services account.</p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Quotas for your Application Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Quotas for your Network Load Balancers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/quotas-limits.html">Quotas for your Gateway Load Balancers</a> </p> </li> </ul>
		/// GET_DescribeAccountLimits #Action=DescribeAccountLimits
		/// </summary>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountLimitsAsync(string Marker, int PageSize, GET_DescribeAccountLimitsAction Action, GET_DescribeAccountLimitsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAccountLimits?Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.</p> <p>If the default certificate is also in the certificate list, it appears twice in the results (once with <code>IsDefault</code> set to true and once with <code>IsDefault</code> set to false).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates">SSL certificates</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#tls-listener-certificate">Server certificates</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_DescribeListenerCertificates #Action=DescribeListenerCertificates
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Names (ARN) of the listener.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeListenerCertificatesAsync(string ListenerArn, string Marker, int PageSize, GET_DescribeListenerCertificatesAction Action, GET_DescribeListenerCertificatesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeListenerCertificates?ListenerArn=" + (ListenerArn==null? "" : System.Uri.EscapeDataString(ListenerArn))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified listeners or the listeners for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer. You must specify either a load balancer or one or more listeners.
		/// GET_DescribeListeners #Action=DescribeListeners
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="ListenerArns">The Amazon Resource Names (ARN) of the listeners.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeListenersAsync(string LoadBalancerArn, string[] ListenerArns, string Marker, int PageSize, GET_DescribeListenersAction Action, GET_DescribeListenersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeListeners?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&"+string.Join("&", ListenerArns.Select(z => $"ListenerArns={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the attributes for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.</p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Application Load Balancers Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Network Load Balancers Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-load-balancers.html#load-balancer-attributes">Load balancer attributes</a> in the <i>Gateway Load Balancers Guide</i> </p> </li> </ul>
		/// GET_DescribeLoadBalancerAttributes #Action=DescribeLoadBalancerAttributes
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancerAttributesAsync(string LoadBalancerArn, GET_DescribeLoadBalancerAttributesAction Action, GET_DescribeLoadBalancerAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLoadBalancerAttributes?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified load balancers or all of your load balancers.
		/// GET_DescribeLoadBalancers #Action=DescribeLoadBalancers
		/// </summary>
		/// <param name="LoadBalancerArns">The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.</param>
		/// <param name="Names">The names of the load balancers.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancersAsync(string[] LoadBalancerArns, string[] Names, string Marker, int PageSize, GET_DescribeLoadBalancersAction Action, GET_DescribeLoadBalancersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLoadBalancers?"+string.Join("&", LoadBalancerArns.Select(z => $"LoadBalancerArns={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Names.Select(z => $"Names={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
		/// GET_DescribeRules #Action=DescribeRules
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="RuleArns">The Amazon Resource Names (ARN) of the rules.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeRulesAsync(string ListenerArn, string[] RuleArns, string Marker, int PageSize, GET_DescribeRulesAction Action, GET_DescribeRulesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeRules?ListenerArn=" + (ListenerArn==null? "" : System.Uri.EscapeDataString(ListenerArn))+"&"+string.Join("&", RuleArns.Select(z => $"RuleArns={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified policies or all policies used for SSL negotiation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_DescribeSSLPolicies #Action=DescribeSSLPolicies
		/// </summary>
		/// <param name="Names">The names of the policies.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <param name="LoadBalancerType"> The type of load balancer. The default lists the SSL policies for all load balancers.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSSLPoliciesAsync(string[] Names, string Marker, int PageSize, LoadBalancerTypeEnum LoadBalancerType, GET_DescribeSSLPoliciesAction Action, GET_DescribeSSLPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSSLPolicies?"+string.Join("&", Names.Select(z => $"Names={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&LoadBalancerType=" + LoadBalancerType+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the tags for the specified Elastic Load Balancing resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
		/// GET_DescribeTags #Action=DescribeTags
		/// </summary>
		/// <param name="ResourceArns">The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTagsAsync(string[] ResourceArns, GET_DescribeTagsAction Action, GET_DescribeTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTags?"+string.Join("&", ResourceArns.Select(z => $"ResourceArns={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the attributes for the specified target group.</p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Application Load Balancers Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Network Load Balancers Guide</i> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/target-groups.html#target-group-attributes">Target group attributes</a> in the <i>Gateway Load Balancers Guide</i> </p> </li> </ul>
		/// GET_DescribeTargetGroupAttributes #Action=DescribeTargetGroupAttributes
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTargetGroupAttributesAsync(string TargetGroupArn, GET_DescribeTargetGroupAttributesAction Action, GET_DescribeTargetGroupAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTargetGroupAttributes?TargetGroupArn=" + (TargetGroupArn==null? "" : System.Uri.EscapeDataString(TargetGroupArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.
		/// GET_DescribeTargetGroups #Action=DescribeTargetGroups
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="TargetGroupArns">The Amazon Resource Names (ARN) of the target groups.</param>
		/// <param name="Names">The names of the target groups.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTargetGroupsAsync(string LoadBalancerArn, string[] TargetGroupArns, string[] Names, string Marker, int PageSize, GET_DescribeTargetGroupsAction Action, GET_DescribeTargetGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTargetGroups?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&"+string.Join("&", TargetGroupArns.Select(z => $"TargetGroupArns={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Names.Select(z => $"Names={System.Uri.EscapeDataString(z.ToString())}"))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the health of the specified targets or all of your targets.
		/// GET_DescribeTargetHealth #Action=DescribeTargetHealth
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Targets">The targets.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTargetHealthAsync(string TargetGroupArn, TargetDescription[] Targets, GET_DescribeTargetHealthAction Action, GET_DescribeTargetHealthVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTargetHealth?TargetGroupArn=" + (TargetGroupArn==null? "" : System.Uri.EscapeDataString(TargetGroupArn))+"&"+string.Join("&", Targets.Select(z => $"Targets={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.</p> <p>Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.</p> <p>To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.</p>
		/// GET_ModifyListener #Action=ModifyListener
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Port">The port for connections from clients to the load balancer. You cannot specify a port for a Gateway Load Balancer.</param>
		/// <param name="Protocol">The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols. You can’t change the protocol to UDP or TCP_UDP if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.</param>
		/// <param name="SslPolicy"><p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security policies</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <param name="Certificates">[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</param>
		/// <param name="DefaultActions">The actions for the default rule.</param>
		/// <param name="AlpnPolicy"><p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p> <ul> <li> <p> <code>HTTP1Only</code> </p> </li> <li> <p> <code>HTTP2Only</code> </p> </li> <li> <p> <code>HTTP2Optional</code> </p> </li> <li> <p> <code>HTTP2Preferred</code> </p> </li> <li> <p> <code>None</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyListenerAsync(string ListenerArn, int Port, ProtocolEnum Protocol, string SslPolicy, Certificate[] Certificates, Action[] DefaultActions, string[] AlpnPolicy, GET_ModifyListenerAction Action, GET_ModifyListenerVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyListener?ListenerArn=" + (ListenerArn==null? "" : System.Uri.EscapeDataString(ListenerArn))+"&Port="+Port+"&Protocol=" + Protocol+"&SslPolicy=" + (SslPolicy==null? "" : System.Uri.EscapeDataString(SslPolicy))+"&"+string.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&"+string.Join("&", DefaultActions.Select(z => $"DefaultActions={z}"))+"&"+string.Join("&", AlpnPolicy.Select(z => $"AlpnPolicy={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified attributes of the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.</p> <p>If any of the specified attributes can't be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.</p>
		/// GET_ModifyLoadBalancerAttributes #Action=ModifyLoadBalancerAttributes
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="Attributes">The load balancer attributes.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyLoadBalancerAttributesAsync(string LoadBalancerArn, LoadBalancerAttribute[] Attributes, GET_ModifyLoadBalancerAttributesAction Action, GET_ModifyLoadBalancerAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyLoadBalancerAttributes?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&"+string.Join("&", Attributes.Select(z => $"Attributes={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.</p> <p>To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.</p>
		/// GET_ModifyRule #Action=ModifyRule
		/// </summary>
		/// <param name="RuleArn">The Amazon Resource Name (ARN) of the rule.</param>
		/// <param name="Conditions">The conditions.</param>
		/// <param name="Actions">The actions.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyRuleAsync(string RuleArn, RuleCondition[] Conditions, Action[] Actions, GET_ModifyRuleAction Action, GET_ModifyRuleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyRule?RuleArn=" + (RuleArn==null? "" : System.Uri.EscapeDataString(RuleArn))+"&"+string.Join("&", Conditions.Select(z => $"Conditions={z}"))+"&"+string.Join("&", Actions.Select(z => $"Actions={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the health checks used when evaluating the health state of the targets in the specified target group.
		/// GET_ModifyTargetGroup #Action=ModifyTargetGroup
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="HealthCheckProtocol">The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers and Gateway Load Balancers, the default is TCP. The TCP protocol is not supported for health checks if the protocol of the target group is HTTP or HTTPS. It is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The GENEVE, TLS, UDP, and TCP_UDP protocols are not supported for health checks.</param>
		/// <param name="HealthCheckPort">The port the load balancer uses when performing health checks on targets.</param>
		/// <param name="HealthCheckPath"><p>[HTTP/HTTPS health checks] The destination for health checks on the targets.</p> <p>[HTTP1 or HTTP2 protocol version] The ping path. The default is /.</p> <p>[GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /Amazon Web Services.ALB/healthcheck.</p></param>
		/// <param name="HealthCheckEnabled">Indicates whether health checks are enabled.</param>
		/// <param name="HealthCheckIntervalSeconds">The approximate amount of time, in seconds, between health checks of an individual target.</param>
		/// <param name="HealthCheckTimeoutSeconds">[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</param>
		/// <param name="HealthyThresholdCount">The number of consecutive health checks successes required before considering an unhealthy target healthy.</param>
		/// <param name="UnhealthyThresholdCount">The number of consecutive health check failures required before considering the target unhealthy.</param>
		/// <param name="Matcher">[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target. For target groups with a protocol of TCP, TCP_UDP, UDP or TLS the range is 200-599. For target groups with a protocol of HTTP or HTTPS, the range is 200-499. For target groups with a protocol of GENEVE, the range is 200-399.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTargetGroupAsync(string TargetGroupArn, ProtocolEnum HealthCheckProtocol, string HealthCheckPort, string HealthCheckPath, bool HealthCheckEnabled, int HealthCheckIntervalSeconds, int HealthCheckTimeoutSeconds, int HealthyThresholdCount, int UnhealthyThresholdCount, GET_ModifyTargetGroupMatcher Matcher, GET_ModifyTargetGroupAction Action, GET_ModifyTargetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTargetGroup?TargetGroupArn=" + (TargetGroupArn==null? "" : System.Uri.EscapeDataString(TargetGroupArn))+"&HealthCheckProtocol=" + HealthCheckProtocol+"&HealthCheckPort=" + (HealthCheckPort==null? "" : System.Uri.EscapeDataString(HealthCheckPort))+"&HealthCheckPath=" + (HealthCheckPath==null? "" : System.Uri.EscapeDataString(HealthCheckPath))+"&HealthCheckEnabled="+HealthCheckEnabled+"&HealthCheckIntervalSeconds="+HealthCheckIntervalSeconds+"&HealthCheckTimeoutSeconds="+HealthCheckTimeoutSeconds+"&HealthyThresholdCount="+HealthyThresholdCount+"&UnhealthyThresholdCount="+UnhealthyThresholdCount+"&Matcher=" + Matcher+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified attributes of the specified target group.
		/// GET_ModifyTargetGroupAttributes #Action=ModifyTargetGroupAttributes
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Attributes">The attributes.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTargetGroupAttributesAsync(string TargetGroupArn, TargetGroupAttribute[] Attributes, GET_ModifyTargetGroupAttributesAction Action, GET_ModifyTargetGroupAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTargetGroupAttributes?TargetGroupArn=" + (TargetGroupArn==null? "" : System.Uri.EscapeDataString(TargetGroupArn))+"&"+string.Join("&", Attributes.Select(z => $"Attributes={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers the specified targets with the specified target group.</p> <p>If the target is an EC2 instance, it must be in the <code>running</code> state when you register it.</p> <p>By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.</p> <p>With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.</p>
		/// GET_RegisterTargets #Action=RegisterTargets
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Targets">The targets.</param>
		/// <returns>Success</returns>
		public async Task GET_RegisterTargetsAsync(string TargetGroupArn, TargetDescription[] Targets, GET_RegisterTargetsAction Action, GET_RegisterTargetsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterTargets?TargetGroupArn=" + (TargetGroupArn==null? "" : System.Uri.EscapeDataString(TargetGroupArn))+"&"+string.Join("&", Targets.Select(z => $"Targets={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.
		/// GET_RemoveListenerCertificates #Action=RemoveListenerCertificates
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Certificates">The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveListenerCertificatesAsync(string ListenerArn, Certificate[] Certificates, GET_RemoveListenerCertificatesAction Action, GET_RemoveListenerCertificatesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveListenerCertificates?ListenerArn=" + (ListenerArn==null? "" : System.Uri.EscapeDataString(ListenerArn))+"&"+string.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified Elastic Load Balancing resources. You can remove the tags for one or more Application Load Balancers, Network Load Balancers, Gateway Load Balancers, target groups, listeners, or rules.
		/// GET_RemoveTags #Action=RemoveTags
		/// </summary>
		/// <param name="ResourceArns">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="TagKeys">The tag keys for the tags to remove.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveTagsAsync(string[] ResourceArns, string[] TagKeys, GET_RemoveTagsAction Action, GET_RemoveTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveTags?"+string.Join("&", ResourceArns.Select(z => $"ResourceArns={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the type of IP addresses used by the subnets of the specified load balancer.
		/// GET_SetIpAddressType #Action=SetIpAddressType
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="IpAddressType">The IP address type. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). You can’t specify <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener.</param>
		/// <returns>Success</returns>
		public async Task GET_SetIpAddressTypeAsync(string LoadBalancerArn, IpAddressType IpAddressType, GET_SetIpAddressTypeAction Action, GET_SetIpAddressTypeVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetIpAddressType?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&IpAddressType=" + IpAddressType+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the priorities of the specified rules.</p> <p>You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.</p>
		/// GET_SetRulePriorities #Action=SetRulePriorities
		/// </summary>
		/// <param name="RulePriorities">The rule priorities.</param>
		/// <returns>Success</returns>
		public async Task GET_SetRulePrioritiesAsync(RulePriorityPair[] RulePriorities, GET_SetRulePrioritiesAction Action, GET_SetRulePrioritiesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetRulePriorities?"+string.Join("&", RulePriorities.Select(z => $"RulePriorities={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.</p> <p>You can't specify a security group for a Network Load Balancer or Gateway Load Balancer.</p>
		/// GET_SetSecurityGroups #Action=SetSecurityGroups
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="SecurityGroups">The IDs of the security groups.</param>
		/// <returns>Success</returns>
		public async Task GET_SetSecurityGroupsAsync(string LoadBalancerArn, string[] SecurityGroups, GET_SetSecurityGroupsAction Action, GET_SetSecurityGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetSecurityGroups?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&"+string.Join("&", SecurityGroups.Select(z => $"SecurityGroups={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables the Availability Zones for the specified public subnets for the specified Application Load Balancer or Network Load Balancer. The specified subnets replace the previously enabled subnets.</p> <p>When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.</p>
		/// GET_SetSubnets #Action=SetSubnets
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="Subnets"><p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones.</p> <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p> <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p> <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones.</p></param>
		/// <param name="SubnetMappings"><p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p> <p>[Application Load Balancers on Outposts] You must specify one Outpost subnet.</p> <p>[Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.</p> <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.</p></param>
		/// <param name="IpAddressType">[Network Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). You can’t specify <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener. .</param>
		/// <returns>Success</returns>
		public async Task GET_SetSubnetsAsync(string LoadBalancerArn, string[] Subnets, SubnetMapping[] SubnetMappings, IpAddressType IpAddressType, GET_SetSubnetsAction Action, GET_SetSubnetsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetSubnets?LoadBalancerArn=" + (LoadBalancerArn==null? "" : System.Uri.EscapeDataString(LoadBalancerArn))+"&"+string.Join("&", Subnets.Select(z => $"Subnets={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", SubnetMappings.Select(z => $"SubnetMappings={z}"))+"&IpAddressType=" + IpAddressType+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_AddListenerCertificatesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AddListenerCertificates = 0,
	}
	
	public enum GET_AddListenerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_AddListenerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_AddTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AddTags = 0,
	}
	
	public enum GET_AddTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_AddTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_CreateListenerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateListener = 0,
	}
	
	public enum GET_CreateListenerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_CreateListenerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_CreateLoadBalancerScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internet-facing")]
		internetMinusfacing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal")]
		_internal = 1,
	}
	
	public enum GET_CreateLoadBalancerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateLoadBalancer = 0,
	}
	
	public enum GET_CreateLoadBalancerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_CreateLoadBalancerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_CreateRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRule = 0,
	}
	
	public enum GET_CreateRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_CreateRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public class GET_CreateTargetGroupMatcher
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GrpcCode { get; set; }
	}
	
	public enum GET_CreateTargetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateTargetGroup = 0,
	}
	
	public enum GET_CreateTargetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_CreateTargetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteListenerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteListener = 0,
	}
	
	public enum GET_DeleteListenerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteListenerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteLoadBalancerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLoadBalancer = 0,
	}
	
	public enum GET_DeleteLoadBalancerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteLoadBalancerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRule = 0,
	}
	
	public enum GET_DeleteRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DeleteTargetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteTargetGroup = 0,
	}
	
	public enum GET_DeleteTargetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DeleteTargetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DeregisterTargetsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeregisterTargets = 0,
	}
	
	public enum GET_DeregisterTargetsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DeregisterTargetsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeAccountLimitsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeAccountLimits = 0,
	}
	
	public enum GET_DescribeAccountLimitsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeAccountLimitsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeListenerCertificatesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeListenerCertificates = 0,
	}
	
	public enum GET_DescribeListenerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeListenerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeListenersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeListeners = 0,
	}
	
	public enum GET_DescribeListenersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeListenersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeLoadBalancerAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeLoadBalancerAttributes = 0,
	}
	
	public enum GET_DescribeLoadBalancerAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeLoadBalancerAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeLoadBalancersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeLoadBalancers = 0,
	}
	
	public enum GET_DescribeLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeLoadBalancersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeRulesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeRules = 0,
	}
	
	public enum GET_DescribeRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeRulesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeSSLPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeSSLPolicies = 0,
	}
	
	public enum GET_DescribeSSLPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeSSLPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeTags = 0,
	}
	
	public enum GET_DescribeTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeTargetGroupAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeTargetGroupAttributes = 0,
	}
	
	public enum GET_DescribeTargetGroupAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeTargetGroupAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeTargetGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeTargetGroups = 0,
	}
	
	public enum GET_DescribeTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeTargetGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_DescribeTargetHealthAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DescribeTargetHealth = 0,
	}
	
	public enum GET_DescribeTargetHealthVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_DescribeTargetHealthVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyListenerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModifyListener = 0,
	}
	
	public enum GET_ModifyListenerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyListenerVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyLoadBalancerAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModifyLoadBalancerAttributes = 0,
	}
	
	public enum GET_ModifyLoadBalancerAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyLoadBalancerAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModifyRule = 0,
	}
	
	public enum GET_ModifyRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public class GET_ModifyTargetGroupMatcher
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GrpcCode { get; set; }
	}
	
	public enum GET_ModifyTargetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModifyTargetGroup = 0,
	}
	
	public enum GET_ModifyTargetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyTargetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_ModifyTargetGroupAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ModifyTargetGroupAttributes = 0,
	}
	
	public enum GET_ModifyTargetGroupAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_ModifyTargetGroupAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_RegisterTargetsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RegisterTargets = 0,
	}
	
	public enum GET_RegisterTargetsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_RegisterTargetsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_RemoveListenerCertificatesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoveListenerCertificates = 0,
	}
	
	public enum GET_RemoveListenerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_RemoveListenerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_RemoveTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoveTags = 0,
	}
	
	public enum GET_RemoveTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_RemoveTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_SetIpAddressTypeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetIpAddressType = 0,
	}
	
	public enum GET_SetIpAddressTypeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_SetIpAddressTypeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_SetRulePrioritiesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetRulePriorities = 0,
	}
	
	public enum GET_SetRulePrioritiesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_SetRulePrioritiesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_SetSecurityGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetSecurityGroups = 0,
	}
	
	public enum GET_SetSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_SetSecurityGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum GET_SetSubnetsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetSubnets = 0,
	}
	
	public enum GET_SetSubnetsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
	
	public enum POST_SetSubnetsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015-12-01")]
		_2015Minus12Minus01 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
