//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="successful")]
		public RuleUpdateSuccess[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unsuccessful")]
		public RuleUpdateFailure[] Unsuccessful { get; set; }
	}
	
	/// <summary>
	/// Describes a successful rule update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleUpdateSuccess
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public RuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="match")]
		public RuleMatch Match { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	/// <summary>
	/// Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="fixedResponse")]
		public FixedResponseAction FixedResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forward")]
		public ForwardAction Forward { get; set; }
	}
	
	/// <summary>
	/// Information about an action that returns a custom HTTP response. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FixedResponseAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public int StatusCode { get; set; }
	}
	
	/// <summary>
	/// Describes a forward action. You can use forward actions to route requests to one or more target groups. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ForwardAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetGroups")]
		public WeightedTargetGroup[] TargetGroups { get; set; }
	}
	
	/// <summary>
	/// Describes the weight of a target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeightedTargetGroup
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetGroupIdentifier")]
		public string TargetGroupIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// Describes a rule match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpMatch")]
		public HttpMatch HttpMatch { get; set; }
	}
	
	/// <summary>
	/// Describes criteria that can be applied to incoming requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="headerMatches")]
		public HeaderMatch[] HeaderMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathMatch")]
		public PathMatch PathMatch { get; set; }
	}
	
	/// <summary>
	/// Describes the constraints for a header match. Matches incoming requests with rule based on request header value before applying rule action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HeaderMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public HeaderMatchType Match { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes a header match type. Only one can be provided.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HeaderMatchType
	{
		
		[System.Runtime.Serialization.DataMember(Name="contains")]
		public string Contains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exact")]
		public string Exact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Describes the conditions that can be applied when matching a path for incoming requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public PathMatchType Match { get; set; }
	}
	
	/// <summary>
	/// Describes a path match type. Each rule can include only one of the following types of paths.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathMatchType
	{
		
		[System.Runtime.Serialization.DataMember(Name="exact")]
		public string Exact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Describes a rule update that failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleUpdateFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleIdentifier")]
		public string RuleIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents an object when updating a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public RuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="match")]
		public RuleMatch Match { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleIdentifier")]
		public string RuleIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAccessLogSubscriptionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateListenerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public RuleAction DefaultAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceArn")]
		public string ServiceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ListenerProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public RuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="match")]
		public RuleMatch Match { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsEntry")]
		public DnsEntry DnsEntry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_IAM = 1,
	}
	
	/// <summary>
	/// Describes the DNS information of a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostedZoneId")]
		public string HostedZoneId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceNetworkServiceAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsEntry")]
		public DnsEntry DnsEntry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceNetworkServiceAssociationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceNetworkVpcAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkVpcAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceNetworkVpcAssociationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTargetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public TargetGroupConfig Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TargetGroupType Type { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration of a target group. Lambda functions don't support target group configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetGroupConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public HealthCheckConfig HealthCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public int Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolVersion")]
		public TargetGroupProtocolVersion ProtocolVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcIdentifier")]
		public string VpcIdentifier { get; set; }
	}
	
	/// <summary>
	/// The health check configuration of a target group. Health check configurations aren't used for <code>LAMBDA</code> and <code>ALB</code> target groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HealthCheckConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheckIntervalSeconds")]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheckTimeoutSeconds")]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthyThresholdCount")]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matcher")]
		public Matcher Matcher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolVersion")]
		public HealthCheckProtocolVersion ProtocolVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unhealthyThresholdCount")]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
	}
	
	/// <summary>
	/// The codes to use when checking for a successful response from a target for health checks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Matcher
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpCode")]
		public string HttpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HealthCheckProtocolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPV4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPV6 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetGroupProtocolVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRPC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALB = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetGroupProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAccessLogSubscriptionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAuthPolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteListenerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRuleResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceNetworkResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceNetworkServiceAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceNetworkVpcAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkVpcAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTargetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeregisterTargetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="successful")]
		public Target[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unsuccessful")]
		public TargetFailure[] Unsuccessful { get; set; }
	}
	
	/// <summary>
	/// Describes a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Target
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	/// <summary>
	/// Describes a target failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAccessLogSubscriptionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAuthPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AuthPolicyState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthPolicyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetListenerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public RuleAction DefaultAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceArn")]
		public string ServiceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public RuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="match")]
		public RuleMatch Match { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsEntry")]
		public DnsEntry DnsEntry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfAssociatedServices")]
		public System.Nullable<System.Int32> NumberOfAssociatedServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfAssociatedVPCs")]
		public System.Nullable<System.Int32> NumberOfAssociatedVPCs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceNetworkServiceAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsEntry")]
		public DnsEntry DnsEntry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceArn")]
		public string ServiceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkArn")]
		public string ServiceNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkId")]
		public string ServiceNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkName")]
		public string ServiceNetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceNetworkVpcAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkArn")]
		public string ServiceNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkId")]
		public string ServiceNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkName")]
		public string ServiceNetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkVpcAssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTargetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public TargetGroupConfig Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceArns")]
		public string[] ServiceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TargetGroupType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccessLogSubscriptionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AccessLogSubscriptionSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about an access log subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessLogSubscriptionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListListenersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ListenerSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListenerSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRulesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RuleSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about the listener rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceNetworkServiceAssociationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ServiceNetworkServiceAssociationSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about the association between a service network and a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceNetworkServiceAssociationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsEntry")]
		public DnsEntry DnsEntry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceArn")]
		public string ServiceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkArn")]
		public string ServiceNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkId")]
		public string ServiceNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkName")]
		public string ServiceNetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceNetworkVpcAssociationsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ServiceNetworkVpcAssociationSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about an association between a service network and a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceNetworkVpcAssociationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkArn")]
		public string ServiceNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkId")]
		public string ServiceNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkName")]
		public string ServiceNetworkName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkVpcAssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceNetworksResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ServiceNetworkSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a service network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceNetworkSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfAssociatedServices")]
		public System.Nullable<System.Int32> NumberOfAssociatedServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfAssociatedVPCs")]
		public System.Nullable<System.Int32> NumberOfAssociatedVPCs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServicesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ServiceSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsEntry")]
		public DnsEntry DnsEntry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TargetGroupSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetGroupSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceArns")]
		public string[] ServiceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TargetGroupType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcIdentifier")]
		public string VpcIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TargetSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TargetStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAINING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNUSED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutAuthPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AuthPolicyState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourcePolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterTargetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="successful")]
		public Target[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unsuccessful")]
		public TargetFailure[] Unsuccessful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAccessLogSubscriptionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateListenerResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public RuleAction DefaultAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceArn")]
		public string ServiceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public RuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="match")]
		public RuleMatch Match { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceNetworkVpcAssociationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkVpcAssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTargetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public TargetGroupConfig Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ServiceNetworkServiceAssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TargetGroupType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public RuleUpdate[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAccessLogSubscriptionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		public string ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateListenerRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public RuleAction DefaultAction { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public RuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public RuleMatch Match { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public int Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceNetworkServiceAssociationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceIdentifier")]
		public string ServiceIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkIdentifier")]
		public string ServiceNetworkIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceNetworkVpcAssociationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkIdentifier")]
		public string ServiceNetworkIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcIdentifier")]
		public string VpcIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateServiceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		public string CustomDomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateTargetGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public TargetGroupConfig Config { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TargetGroupType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAccessLogSubscriptionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAuthPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteListenerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRuleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceNetworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceNetworkServiceAssociationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceNetworkVpcAssociationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteServiceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTargetGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeregisterTargetsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public Target[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAccessLogSubscriptionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAuthPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetListenerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourcePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRuleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceNetworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceNetworkServiceAssociationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceNetworkVpcAssociationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTargetGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccessLogSubscriptionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListListenersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRulesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceNetworkServiceAssociationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceNetworkVpcAssociationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceNetworksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServicesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public Target[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutAuthPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourcePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterTargetsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public Target[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAccessLogSubscriptionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateListenerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public RuleAction DefaultAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRuleRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public RuleAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="match")]
		public RuleMatch Match { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceNetworkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceNetworkVpcAssociationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateServiceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTargetGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public HealthCheckConfig HealthCheck { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Updates the listener rules in a batch. You can use this operation to change the priority of listener rules. This can be useful when bulk updating or swapping rule priority.
		/// BatchUpdateRule services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchUpdateRuleResponse> BatchUpdateRuleAsync(string listenerIdentifier, string serviceIdentifier, BatchUpdateRulePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier))+"/rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules">Listener rules</a> in the <i>Amazon VPC Lattice User Guide</i>.
		/// CreateRule services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		public async Task CreateRuleAsync(string listenerIdentifier, string serviceIdentifier, CreateRulePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier))+"/rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the rules for the listener.
		/// ListRules services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListRulesResponse> ListRulesAsync(string listenerIdentifier, int maxResults, string nextToken, string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier))+"/rules&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables access logs to be sent to Amazon CloudWatch, Amazon S3, and Amazon Kinesis Data Firehose. The service network owner can use the access logs to audit the services in the network. The service network owner will only see access logs from clients and services that are associated with their service network. Access log entries represent traffic originated from VPCs associated with that network. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/monitoring-access-logs.html">Access logs</a> in the <i>Amazon VPC Lattice User Guide</i>.
		/// CreateAccessLogSubscription accesslogsubscriptions
		/// </summary>
		public async Task CreateAccessLogSubscriptionAsync(CreateAccessLogSubscriptionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accesslogsubscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a listener for a service. Before you start using your Amazon VPC Lattice service, you must add one or more listeners. A listener is a process that checks for connection requests to your services. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html">Listeners</a> in the <i>Amazon VPC Lattice User Guide</i>.
		/// CreateListener services/{serviceIdentifier}/listeners
		/// </summary>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		public async Task CreateListenerAsync(string serviceIdentifier, CreateListenerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the listeners for the specified service.
		/// ListListeners services/{serviceIdentifier}/listeners
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListListenersResponse> ListListenersAsync(int maxResults, string nextToken, string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListListenersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a service. A service is any software application that can run on instances containers, or serverless functions within an account or virtual private cloud (VPC).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html">Services</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
		/// CreateService services
		/// </summary>
		public async Task CreateServiceAsync(CreateServicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the services owned by the caller account or shared with the caller account.
		/// ListServices services
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListServicesResponse> ListServicesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a service network. A service network is a logical boundary for a collection of services. You can associate services and VPCs with a service network.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html">Service networks</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
		/// CreateServiceNetwork servicenetworks
		/// </summary>
		public async Task CreateServiceNetworkAsync(CreateServiceNetworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the service networks owned by the caller account or shared with the caller account. Also includes the account ID in the ARN to show which account owns the service network.
		/// ListServiceNetworks servicenetworks
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListServiceNetworksResponse> ListServiceNetworksAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworks?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceNetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a service with a service network.</p> <p>You can't use this operation if the service and service network are already associated or if there is a disassociation or deletion in progress. If the association fails, you can retry the operation by deleting the association and recreating it.</p> <p>You cannot associate a service and service network that are shared with a caller. The caller must own either the service or the service network.</p> <p>As a result of this operation, the association is created in the service network account and the association owner account.</p>
		/// CreateServiceNetworkServiceAssociation servicenetworkserviceassociations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateServiceNetworkServiceAssociationResponse> CreateServiceNetworkServiceAssociationAsync(CreateServiceNetworkServiceAssociationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkserviceassociations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateServiceNetworkServiceAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the associations between the service network and the service. You can filter the list either by service or service network. You must provide either the service network identifier or the service identifier.</p> <p>Every association in Amazon VPC Lattice is given a unique Amazon Resource Name (ARN), such as when a service network is associated with a VPC or when a service is associated with a service network. If the association is for a resource that is shared with another account, the association will include the local account ID as the prefix in the ARN for each account the resource is shared with.</p>
		/// ListServiceNetworkServiceAssociations servicenetworkserviceassociations
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <param name="serviceNetworkIdentifier">The ID or Amazon Resource Name (ARN) of the service network.
		/// Min length: 3
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListServiceNetworkServiceAssociationsResponse> ListServiceNetworkServiceAssociationsAsync(int maxResults, string nextToken, string serviceIdentifier, string serviceNetworkIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkserviceassociations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&serviceIdentifier=" + (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"&serviceNetworkIdentifier=" + (serviceNetworkIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceNetworkServiceAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a VPC with a service network. When you associate a VPC with the service network, it enables all the resources within that VPC to be clients and communicate with other services in the service network. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-network-associations.html#service-network-vpc-associations">Manage VPC associations</a> in the <i>Amazon VPC Lattice User Guide</i>.</p> <p>You can't use this operation if there is a disassociation in progress. If the association fails, retry by deleting the association and recreating it.</p> <p>As a result of this operation, the association gets created in the service network account and the VPC owner account.</p> <p>If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.</p>
		/// CreateServiceNetworkVpcAssociation servicenetworkvpcassociations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateServiceNetworkVpcAssociationResponse> CreateServiceNetworkVpcAssociationAsync(CreateServiceNetworkVpcAssociationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkvpcassociations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateServiceNetworkVpcAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the service network and VPC associations. You can filter the list either by VPC or service network. You must provide either the service network identifier or the VPC identifier.
		/// ListServiceNetworkVpcAssociations servicenetworkvpcassociations
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="serviceNetworkIdentifier">The ID or Amazon Resource Name (ARN) of the service network.
		/// Min length: 3
		/// Max length: 2048
		// </param>
		/// <param name="vpcIdentifier">The ID or Amazon Resource Name (ARN) of the VPC.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListServiceNetworkVpcAssociationsResponse> ListServiceNetworkVpcAssociationsAsync(int maxResults, string nextToken, string serviceNetworkIdentifier, string vpcIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkvpcassociations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&serviceNetworkIdentifier=" + (serviceNetworkIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkIdentifier))+"&vpcIdentifier=" + (vpcIdentifier==null? "" : System.Uri.EscapeDataString(vpcIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceNetworkVpcAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a target group. A target group is a collection of targets, or compute resources, that run your application or service. A target group can only be used by a single service.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html">Target groups</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
		/// CreateTargetGroup targetgroups
		/// </summary>
		public async Task CreateTargetGroupAsync(CreateTargetGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists your target groups. You can narrow your search by using the filters below in your request.
		/// ListTargetGroups targetgroups
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="targetGroupType">The target group type.</param>
		/// <param name="vpcIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 5
		/// Max length: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTargetGroupsResponse> ListTargetGroupsAsync(int maxResults, string nextToken, TargetGroupType targetGroupType, string vpcIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&targetGroupType=" + targetGroupType+"&vpcIdentifier=" + (vpcIdentifier==null? "" : System.Uri.EscapeDataString(vpcIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTargetGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified access log subscription.
		/// DeleteAccessLogSubscription accesslogsubscriptions/{accessLogSubscriptionIdentifier}
		/// </summary>
		/// <param name="accessLogSubscriptionIdentifier">The ID or Amazon Resource Name (ARN) of the access log subscription.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		public async Task DeleteAccessLogSubscriptionAsync(string accessLogSubscriptionIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accesslogsubscriptions/"+ (accessLogSubscriptionIdentifier==null? "" : System.Uri.EscapeDataString(accessLogSubscriptionIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified access log subscription.
		/// GetAccessLogSubscription accesslogsubscriptions/{accessLogSubscriptionIdentifier}
		/// </summary>
		/// <param name="accessLogSubscriptionIdentifier">The ID or Amazon Resource Name (ARN) of the access log subscription.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAccessLogSubscriptionResponse> GetAccessLogSubscriptionAsync(string accessLogSubscriptionIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accesslogsubscriptions/"+ (accessLogSubscriptionIdentifier==null? "" : System.Uri.EscapeDataString(accessLogSubscriptionIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAccessLogSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified access log subscription.
		/// UpdateAccessLogSubscription accesslogsubscriptions/{accessLogSubscriptionIdentifier}
		/// </summary>
		/// <param name="accessLogSubscriptionIdentifier">The ID or Amazon Resource Name (ARN) of the access log subscription.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAccessLogSubscriptionResponse> UpdateAccessLogSubscriptionAsync(string accessLogSubscriptionIdentifier, UpdateAccessLogSubscriptionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accesslogsubscriptions/"+ (accessLogSubscriptionIdentifier==null? "" : System.Uri.EscapeDataString(accessLogSubscriptionIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAccessLogSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified auth policy. If an auth is set to <code>AWS_IAM</code> and the auth policy is deleted, all requests will be denied by default. If you are trying to remove the auth policy completely, you must set the auth_type to <code>NONE</code>. If auth is enabled on the resource, but no auth policy is set, all requests will be denied.
		/// DeleteAuthPolicy authpolicy/{resourceIdentifier}
		/// </summary>
		/// <param name="resourceIdentifier">The ID or Amazon Resource Name (ARN) of the resource.
		/// Min length: 17
		/// Max length: 200
		// </param>
		public async Task DeleteAuthPolicyAsync(string resourceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authpolicy/"+ (resourceIdentifier==null? "" : System.Uri.EscapeDataString(resourceIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the auth policy for the specified service or service network.
		/// GetAuthPolicy authpolicy/{resourceIdentifier}
		/// </summary>
		/// <param name="resourceIdentifier">The ID or Amazon Resource Name (ARN) of the service network or service.
		/// Min length: 17
		/// Max length: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAuthPolicyResponse> GetAuthPolicyAsync(string resourceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authpolicy/"+ (resourceIdentifier==null? "" : System.Uri.EscapeDataString(resourceIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAuthPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the auth policy. The policy string in JSON must not contain newlines or blank lines.
		/// PutAuthPolicy authpolicy/{resourceIdentifier}
		/// </summary>
		/// <param name="resourceIdentifier">The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
		/// Min length: 17
		/// Max length: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<PutAuthPolicyResponse> PutAuthPolicyAsync(string resourceIdentifier, PutAuthPolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authpolicy/"+ (resourceIdentifier==null? "" : System.Uri.EscapeDataString(resourceIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAuthPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified listener.
		/// DeleteListener services/{serviceIdentifier}/listeners/{listenerIdentifier}
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		public async Task DeleteListenerAsync(string listenerIdentifier, string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified listener for the specified service.
		/// GetListener services/{serviceIdentifier}/listeners/{listenerIdentifier}
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetListenerResponse> GetListenerAsync(string listenerIdentifier, string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetListenerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified listener for the specified service.
		/// UpdateListener services/{serviceIdentifier}/listeners/{listenerIdentifier}
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateListenerResponse> UpdateListenerAsync(string listenerIdentifier, string serviceIdentifier, UpdateListenerPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateListenerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified resource policy.
		/// DeleteResourcePolicy resourcepolicy/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Min length: 20
		/// Max length: 200
		// </param>
		public async Task DeleteResourcePolicyAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resourcepolicy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the resource policy. The resource policy is an IAM policy created on behalf of the resource owner when they share a resource.
		/// GetResourcePolicy resourcepolicy/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the service network or service.
		/// Min length: 20
		/// Max length: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<GetResourcePolicyResponse> GetResourcePolicyAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resourcepolicy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attaches a resource-based permission policy to a service or service network. The policy must contain the same actions and condition statements as the Amazon Web Services Resource Access Manager permission for sharing services and service networks.
		/// PutResourcePolicy resourcepolicy/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
		/// Min length: 20
		/// Max length: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<PutResourcePolicyResponse> PutResourcePolicyAsync(string resourceArn, PutResourcePolicyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resourcepolicy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a listener rule. Each listener has a default rule for checking connection requests, but you can define additional rules. Each rule consists of a priority, one or more actions, and one or more conditions. You can delete additional listener rules, but you cannot delete the default rule.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules">Listener rules</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>
		/// DeleteRule services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="ruleIdentifier">The ID or Amazon Resource Name (ARN) of the rule.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		public async Task DeleteRuleAsync(string listenerIdentifier, string ruleIdentifier, string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier))+"/rules/"+ (ruleIdentifier==null? "" : System.Uri.EscapeDataString(ruleIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about listener rules. You can also retrieve information about the default listener rule. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules">Listener rules</a> in the <i>Amazon VPC Lattice User Guide</i>.
		/// GetRule services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="ruleIdentifier">The ID or Amazon Resource Name (ARN) of the listener rule.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetRuleResponse> GetRuleAsync(string listenerIdentifier, string ruleIdentifier, string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier))+"/rules/"+ (ruleIdentifier==null? "" : System.Uri.EscapeDataString(ruleIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a rule for the listener. You can't modify a default listener rule. To modify a default listener rule, use <code>UpdateListener</code>.
		/// UpdateRule services/{serviceIdentifier}/listeners/{listenerIdentifier}/rules/{ruleIdentifier}
		/// </summary>
		/// <param name="listenerIdentifier">The ID or Amazon Resource Name (ARN) of the listener.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="ruleIdentifier">The ID or Amazon Resource Name (ARN) of the rule.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateRuleResponse> UpdateRuleAsync(string listenerIdentifier, string ruleIdentifier, string serviceIdentifier, UpdateRulePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier))+"/listeners/"+ (listenerIdentifier==null? "" : System.Uri.EscapeDataString(listenerIdentifier))+"/rules/"+ (ruleIdentifier==null? "" : System.Uri.EscapeDataString(ruleIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a service. A service can't be deleted if it's associated with a service network. If you delete a service, all resources related to the service, such as the resource policy, auth policy, listeners, listener rules, and access log subscriptions, are also deleted. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/services.html#delete-service">Delete a service</a> in the <i>Amazon VPC Lattice User Guide</i>.
		/// DeleteService services/{serviceIdentifier}
		/// </summary>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteServiceResponse> DeleteServiceAsync(string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteServiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified service.
		/// GetService services/{serviceIdentifier}
		/// </summary>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetServiceResponse> GetServiceAsync(string serviceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified service.
		/// UpdateService services/{serviceIdentifier}
		/// </summary>
		/// <param name="serviceIdentifier">The ID or Amazon Resource Name (ARN) of the service.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateServiceResponse> UpdateServiceAsync(string serviceIdentifier, UpdateServicePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/"+ (serviceIdentifier==null? "" : System.Uri.EscapeDataString(serviceIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateServiceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a service network. You can only delete the service network if there is no service or VPC associated with it. If you delete a service network, all resources related to the service network, such as the resource policy, auth policy, and access log subscriptions, are also deleted. For more information, see <a href="https://docs.aws.amazon.com/vpc-lattice/latest/ug/service-networks.html#delete-service-network">Delete a service network</a> in the <i>Amazon VPC Lattice User Guide</i>.
		/// DeleteServiceNetwork servicenetworks/{serviceNetworkIdentifier}
		/// </summary>
		/// <param name="serviceNetworkIdentifier">The Amazon Resource Name (ARN) or ID of the service network.
		/// Min length: 3
		/// Max length: 2048
		// </param>
		public async Task DeleteServiceNetworkAsync(string serviceNetworkIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworks/"+ (serviceNetworkIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified service network.
		/// GetServiceNetwork servicenetworks/{serviceNetworkIdentifier}
		/// </summary>
		/// <param name="serviceNetworkIdentifier">The ID or Amazon Resource Name (ARN) of the service network.
		/// Min length: 3
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetServiceNetworkResponse> GetServiceNetworkAsync(string serviceNetworkIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworks/"+ (serviceNetworkIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServiceNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified service network.
		/// UpdateServiceNetwork servicenetworks/{serviceNetworkIdentifier}
		/// </summary>
		/// <param name="serviceNetworkIdentifier">The ID or Amazon Resource Name (ARN) of the service network.
		/// Min length: 3
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateServiceNetworkResponse> UpdateServiceNetworkAsync(string serviceNetworkIdentifier, UpdateServiceNetworkPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworks/"+ (serviceNetworkIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateServiceNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the association between a specified service and the specific service network. This request will fail if an association is still in progress.
		/// DeleteServiceNetworkServiceAssociation servicenetworkserviceassociations/{serviceNetworkServiceAssociationIdentifier}
		/// </summary>
		/// <param name="serviceNetworkServiceAssociationIdentifier">The ID or Amazon Resource Name (ARN) of the association.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteServiceNetworkServiceAssociationResponse> DeleteServiceNetworkServiceAssociationAsync(string serviceNetworkServiceAssociationIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkserviceassociations/"+ (serviceNetworkServiceAssociationIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkServiceAssociationIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteServiceNetworkServiceAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified association between a service network and a service.
		/// GetServiceNetworkServiceAssociation servicenetworkserviceassociations/{serviceNetworkServiceAssociationIdentifier}
		/// </summary>
		/// <param name="serviceNetworkServiceAssociationIdentifier">The ID or Amazon Resource Name (ARN) of the association.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetServiceNetworkServiceAssociationResponse> GetServiceNetworkServiceAssociationAsync(string serviceNetworkServiceAssociationIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkserviceassociations/"+ (serviceNetworkServiceAssociationIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkServiceAssociationIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServiceNetworkServiceAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the VPC from the service network. You can't disassociate the VPC if there is a create or update association in progress.
		/// DeleteServiceNetworkVpcAssociation servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}
		/// </summary>
		/// <param name="serviceNetworkVpcAssociationIdentifier">The ID or Amazon Resource Name (ARN) of the association.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteServiceNetworkVpcAssociationResponse> DeleteServiceNetworkVpcAssociationAsync(string serviceNetworkVpcAssociationIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkvpcassociations/"+ (serviceNetworkVpcAssociationIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkVpcAssociationIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteServiceNetworkVpcAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the association between a service network and a VPC.
		/// GetServiceNetworkVpcAssociation servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}
		/// </summary>
		/// <param name="serviceNetworkVpcAssociationIdentifier">The ID or Amazon Resource Name (ARN) of the association.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetServiceNetworkVpcAssociationResponse> GetServiceNetworkVpcAssociationAsync(string serviceNetworkVpcAssociationIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkvpcassociations/"+ (serviceNetworkVpcAssociationIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkVpcAssociationIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServiceNetworkVpcAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the service network and VPC association. If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.
		/// UpdateServiceNetworkVpcAssociation servicenetworkvpcassociations/{serviceNetworkVpcAssociationIdentifier}
		/// </summary>
		/// <param name="serviceNetworkVpcAssociationIdentifier">The ID or Amazon Resource Name (ARN) of the association.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateServiceNetworkVpcAssociationResponse> UpdateServiceNetworkVpcAssociationAsync(string serviceNetworkVpcAssociationIdentifier, UpdateServiceNetworkVpcAssociationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "servicenetworkvpcassociations/"+ (serviceNetworkVpcAssociationIdentifier==null? "" : System.Uri.EscapeDataString(serviceNetworkVpcAssociationIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateServiceNetworkVpcAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a target group. You can't delete a target group if it is used in a listener rule or if the target group creation is in progress.
		/// DeleteTargetGroup targetgroups/{targetGroupIdentifier}
		/// </summary>
		/// <param name="targetGroupIdentifier">The ID or Amazon Resource Name (ARN) of the target group.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteTargetGroupResponse> DeleteTargetGroupAsync(string targetGroupIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups/"+ (targetGroupIdentifier==null? "" : System.Uri.EscapeDataString(targetGroupIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTargetGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified target group.
		/// GetTargetGroup targetgroups/{targetGroupIdentifier}
		/// </summary>
		/// <param name="targetGroupIdentifier">The ID or Amazon Resource Name (ARN) of the target group.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTargetGroupResponse> GetTargetGroupAsync(string targetGroupIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups/"+ (targetGroupIdentifier==null? "" : System.Uri.EscapeDataString(targetGroupIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTargetGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified target group.
		/// UpdateTargetGroup targetgroups/{targetGroupIdentifier}
		/// </summary>
		/// <param name="targetGroupIdentifier">The ID or Amazon Resource Name (ARN) of the target group.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateTargetGroupResponse> UpdateTargetGroupAsync(string targetGroupIdentifier, UpdateTargetGroupPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups/"+ (targetGroupIdentifier==null? "" : System.Uri.EscapeDataString(targetGroupIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTargetGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified targets from the specified target group.
		/// DeregisterTargets targetgroups/{targetGroupIdentifier}/deregistertargets
		/// </summary>
		/// <param name="targetGroupIdentifier">The ID or Amazon Resource Name (ARN) of the target group.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<DeregisterTargetsResponse> DeregisterTargetsAsync(string targetGroupIdentifier, DeregisterTargetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups/"+ (targetGroupIdentifier==null? "" : System.Uri.EscapeDataString(targetGroupIdentifier))+"/deregistertargets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeregisterTargetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all access log subscriptions for the specified service network or service.
		/// ListAccessLogSubscriptions accesslogsubscriptions#resourceIdentifier
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="resourceIdentifier">The ID or Amazon Resource Name (ARN) of the service network or service.
		/// Min length: 17
		/// Max length: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAccessLogSubscriptionsResponse> ListAccessLogSubscriptionsAsync(int maxResults, string nextToken, string resourceIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accesslogsubscriptions#resourceIdentifier?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&resourceIdentifier=" + (resourceIdentifier==null? "" : System.Uri.EscapeDataString(resourceIdentifier));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAccessLogSubscriptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Min length: 0
		/// Max length: 1224
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds the specified tags to the specified resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Min length: 0
		/// Max length: 1224
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the targets for the target group. By default, all targets are included. You can use this API to check the health status of targets. You can also ﬁlter the results by target.
		/// ListTargets targetgroups/{targetGroupIdentifier}/listtargets
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A pagination token for the next page of results.
		/// Min length: 1
		/// Max length: 2048
		// </param>
		/// <param name="targetGroupIdentifier">The ID or Amazon Resource Name (ARN) of the target group.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTargetsResponse> ListTargetsAsync(int maxResults, string nextToken, string targetGroupIdentifier, ListTargetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups/"+ (targetGroupIdentifier==null? "" : System.Uri.EscapeDataString(targetGroupIdentifier))+"/listtargets?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTargetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers the targets with the target group. If it's a Lambda target, you can only have one target in a target group.
		/// RegisterTargets targetgroups/{targetGroupIdentifier}/registertargets
		/// </summary>
		/// <param name="targetGroupIdentifier">The ID or Amazon Resource Name (ARN) of the target group.
		/// Min length: 17
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<RegisterTargetsResponse> RegisterTargetsAsync(string targetGroupIdentifier, RegisterTargetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetgroups/"+ (targetGroupIdentifier==null? "" : System.Uri.EscapeDataString(targetGroupIdentifier))+"/registertargets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterTargetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Min length: 0
		/// Max length: 1224
		// </param>
		/// <param name="tagKeys">The tag keys of the tags to remove.
		/// Minimum items: 0
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchUpdateRulePatchBody
	{
		
		/// <summary>
		/// The rules for the specified listener.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public RuleUpdate[] Rules { get; set; }
	}
	
	public class CreateRulePostBody
	{
		
		/// <summary>
		/// Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public CreateRulePostBodyAction Action { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Describes a rule match.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match")]
		public CreateRulePostBodyMatch Match { get; set; }
		
		/// <summary>
		/// The name of the rule. The name must be unique within the listener. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
		/// Required
		/// Min length: 3
		/// Max length: 63
		/// Pattern: ^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!rule-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The priority assigned to the rule. Each rule for a specific listener must have a unique priority. The lower the priority number the higher the priority.
		/// Required
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public int Priority { get; set; }
		
		/// <summary>
		/// The tags for the rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateRulePostBodyAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="fixedResponse")]
		public FixedResponseAction FixedResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forward")]
		public ForwardAction Forward { get; set; }
	}
	
	public class CreateRulePostBodyMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpMatch")]
		public HttpMatch HttpMatch { get; set; }
	}
	
	public class CreateAccessLogSubscriptionPostBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the destination. The supported destination types are CloudWatch Log groups, Kinesis Data Firehose delivery streams, and Amazon S3 buckets.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$")]
		public string DestinationArn { get; set; }
		
		/// <summary>
		/// The ID or Amazon Resource Name (ARN) of the service network or service.
		/// Required
		/// Min length: 17
		/// Max length: 200
		/// Pattern: ^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceIdentifier")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((((sn)|(svc))-[0-9a-z]{17})|(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:((servicenetwork/sn)|(service/svc))-[0-9a-z]{17}))$")]
		public string ResourceIdentifier { get; set; }
		
		/// <summary>
		/// The tags for the access log subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateListenerPostBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public CreateListenerPostBodyDefaultAction DefaultAction { get; set; }
		
		/// <summary>
		/// The name of the listener. A listener name must be unique within a service. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
		/// Required
		/// Min length: 3
		/// Max length: 63
		/// Pattern: ^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!listener-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The listener port. You can specify a value from <code>1</code> to <code>65535</code>. For HTTP, the default is <code>80</code>. For HTTPS, the default is <code>443</code>.
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// The listener protocol HTTP or HTTPS.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		/// <summary>
		/// The tags for the listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateListenerPostBodyDefaultAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="fixedResponse")]
		public FixedResponseAction FixedResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forward")]
		public ForwardAction Forward { get; set; }
	}
	
	public class CreateServicePostBody
	{
		
		/// <summary>
		/// <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the certificate.
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: ^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$")]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The custom domain name of the service.
		/// Min length: 3
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDomainName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CustomDomainName { get; set; }
		
		/// <summary>
		/// The name of the service. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
		/// Required
		/// Min length: 3
		/// Max length: 40
		/// Pattern: ^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!svc-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags for the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateServiceNetworkPostBody
	{
		
		/// <summary>
		/// <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The name of the service network. The name must be unique to the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
		/// Required
		/// Min length: 3
		/// Max length: 63
		/// Pattern: ^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!servicenetwork-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags for the service network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateServiceNetworkServiceAssociationPostBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The ID or Amazon Resource Name (ARN) of the service.
		/// Required
		/// Min length: 17
		/// Max length: 2048
		/// Pattern: ^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceIdentifier")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((svc-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:service/svc-[0-9a-z]{17}))$")]
		public string ServiceIdentifier { get; set; }
		
		/// <summary>
		/// The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN if the resources specified in the operation are in different accounts.
		/// Required
		/// Min length: 3
		/// Max length: 2048
		/// Pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkIdentifier")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$")]
		public string ServiceNetworkIdentifier { get; set; }
		
		/// <summary>
		/// The tags for the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateServiceNetworkVpcAssociationPostBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The IDs of the security groups. Security groups aren't added by default. You can add a security group to apply network level controls to control which resources in a VPC are allowed to access the service network and its services. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html">Control traffic to resources using security groups</a> in the <i>Amazon VPC User Guide</i>.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// The ID or Amazon Resource Name (ARN) of the service network. You must use the ARN when the resources specified in the operation are in different accounts.
		/// Required
		/// Min length: 3
		/// Max length: 2048
		/// Pattern: ^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceNetworkIdentifier")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^((sn-[0-9a-z]{17})|(arn:[a-z0-9\-]+:vpc-lattice:[a-zA-Z0-9\-]+:\d{12}:servicenetwork/sn-[0-9a-z]{17}))$")]
		public string ServiceNetworkIdentifier { get; set; }
		
		/// <summary>
		/// The tags for the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The ID of the VPC.
		/// Required
		/// Min length: 5
		/// Max length: 50
		/// Pattern: ^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcIdentifier")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$")]
		public string VpcIdentifier { get; set; }
	}
	
	public class CreateTargetGroupPostBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [!-~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[!-~]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Describes the configuration of a target group. Lambda functions don't support target group configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public CreateTargetGroupPostBodyConfig Config { get; set; }
		
		/// <summary>
		/// The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
		/// Required
		/// Min length: 3
		/// Max length: 128
		/// Pattern: ^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags for the target group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of target group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TargetGroupType Type { get; set; }
	}
	
	public class CreateTargetGroupPostBodyConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public HealthCheckConfig HealthCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolVersion")]
		public TargetGroupProtocolVersion ProtocolVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcIdentifier")]
		public string VpcIdentifier { get; set; }
	}
	
	public class UpdateAccessLogSubscriptionPatchBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the access log destination.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$")]
		public string DestinationArn { get; set; }
	}
	
	public class PutAuthPolicyPutBody
	{
		
		/// <summary>
		/// The auth policy. The policy string in JSON must not contain newlines or blank lines.
		/// Required
		/// Min length: 0
		/// Max length: 10000
		/// Pattern: ^.*\S.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.*\S.*$")]
		public string Policy { get; set; }
	}
	
	public class UpdateListenerPatchBody
	{
		
		/// <summary>
		/// Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public UpdateListenerPatchBodyDefaultAction DefaultAction { get; set; }
	}
	
	public class UpdateListenerPatchBodyDefaultAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="fixedResponse")]
		public FixedResponseAction FixedResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forward")]
		public ForwardAction Forward { get; set; }
	}
	
	public class PutResourcePolicyPutBody
	{
		
		/// <summary>
		/// An IAM policy. The policy string in JSON must not contain newlines or blank lines.
		/// Required
		/// Min length: 1
		/// Max length: 10000
		/// Pattern: ^.*\S.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="policy")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.*\S.*$")]
		public string Policy { get; set; }
	}
	
	public class UpdateRulePatchBody
	{
		
		/// <summary>
		/// Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public UpdateRulePatchBodyAction Action { get; set; }
		
		/// <summary>
		/// Describes a rule match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match")]
		public UpdateRulePatchBodyMatch Match { get; set; }
		
		/// <summary>
		/// The rule priority. A listener can't have multiple rules with the same priority.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	public class UpdateRulePatchBodyAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="fixedResponse")]
		public FixedResponseAction FixedResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forward")]
		public ForwardAction Forward { get; set; }
	}
	
	public class UpdateRulePatchBodyMatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpMatch")]
		public HttpMatch HttpMatch { get; set; }
	}
	
	public class UpdateServicePatchBody
	{
		
		/// <summary>
		/// <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the certificate. 
		/// Min length: 0
		/// Max length: 2048
		/// Pattern: ^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:certificate/[0-9a-z-]+)?$")]
		public string CertificateArn { get; set; }
	}
	
	public class UpdateServiceNetworkPatchBody
	{
		
		/// <summary>
		/// <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
	}
	
	public class UpdateServiceNetworkVpcAssociationPatchBody
	{
		
		/// <summary>
		/// The IDs of the security groups. 
		/// Required
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] SecurityGroupIds { get; set; }
	}
	
	public class UpdateTargetGroupPatchBody
	{
		
		/// <summary>
		/// The health check configuration of a target group. Health check configurations aren't used for <code>LAMBDA</code> and <code>ALB</code> target groups.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public UpdateTargetGroupPatchBodyHealthCheck HealthCheck { get; set; }
	}
	
	public class UpdateTargetGroupPatchBodyHealthCheck
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheckIntervalSeconds")]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheckTimeoutSeconds")]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthyThresholdCount")]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matcher")]
		public Matcher Matcher { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolVersion")]
		public HealthCheckProtocolVersion ProtocolVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unhealthyThresholdCount")]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
	}
	
	public class DeregisterTargetsPostBody
	{
		
		/// <summary>
		/// The targets to deregister.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Target[] Targets { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags for the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListTargetsPostBody
	{
		
		/// <summary>
		/// The targets to list.
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targets")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public Target[] Targets { get; set; }
	}
	
	public class RegisterTargetsPostBody
	{
		
		/// <summary>
		/// The targets.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Target[] Targets { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
