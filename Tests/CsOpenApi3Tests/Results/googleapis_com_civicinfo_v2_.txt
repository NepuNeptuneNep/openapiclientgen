//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Describes information about a regional election administrative area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdministrationRegion
	{
		
		/// <summary>
		/// Information about an election administrative body (e.g. County Board of Elections).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionAdministrationBody")]
		public AdministrativeBody ElectionAdministrationBody { get; set; }
		
		/// <summary>
		/// Describes information about a regional election administrative area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="local_jurisdiction")]
		public AdministrationRegion Local_jurisdiction { get; set; }
		
		/// <summary>
		/// The name of the jurisdiction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of sources for this area. If multiple sources are listed the data has been aggregated from those sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources { get; set; }
	}
	
	/// <summary>
	/// Information about an election administrative body (e.g. County Board of Elections).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdministrativeBody
	{
		
		/// <summary>
		/// A URL provided by this administrative body for information on absentee voting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absenteeVotingInfoUrl")]
		public string AbsenteeVotingInfoUrl { get; set; }
		
		/// <summary>
		/// A URL provided by this administrative body to give contest information to the voter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ballotInfoUrl")]
		public string BallotInfoUrl { get; set; }
		
		/// <summary>
		/// A simple representation of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correspondenceAddress")]
		public SimpleAddressType CorrespondenceAddress { get; set; }
		
		/// <summary>
		/// A URL provided by this administrative body for looking up general election information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionInfoUrl")]
		public string ElectionInfoUrl { get; set; }
		
		/// <summary>
		/// A last minute or emergency notification text provided by this administrative body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionNoticeText")]
		public string ElectionNoticeText { get; set; }
		
		/// <summary>
		/// A URL provided by this administrative body for additional information related to the last minute or emergency notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionNoticeUrl")]
		public string ElectionNoticeUrl { get; set; }
		
		/// <summary>
		/// The election officials for this election administrative body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionOfficials")]
		public ElectionOfficial[] ElectionOfficials { get; set; }
		
		/// <summary>
		/// A URL provided by this administrative body for confirming that the voter is registered to vote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionRegistrationConfirmationUrl")]
		public string ElectionRegistrationConfirmationUrl { get; set; }
		
		/// <summary>
		/// A URL provided by this administrative body for looking up how to register to vote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionRegistrationUrl")]
		public string ElectionRegistrationUrl { get; set; }
		
		/// <summary>
		/// A URL provided by this administrative body describing election rules to the voter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionRulesUrl")]
		public string ElectionRulesUrl { get; set; }
		
		/// <summary>
		/// A description of the hours of operation for this administrative body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursOfOperation")]
		public string HoursOfOperation { get; set; }
		
		/// <summary>
		/// The name of this election administrative body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A simple representation of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalAddress")]
		public SimpleAddressType PhysicalAddress { get; set; }
		
		/// <summary>
		/// A description of the services this administrative body may provide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voter_services")]
		public string[] Voter_services { get; set; }
		
		/// <summary>
		/// A URL provided by this administrative body for looking up where to vote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="votingLocationFinderUrl")]
		public string VotingLocationFinderUrl { get; set; }
	}
	
	/// <summary>
	/// A simple representation of an address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimpleAddressType
	{
		
		/// <summary>
		/// The city or town for the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The street name and number of this address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The second line the address, if needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The third line of the address, if needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		public string Line3 { get; set; }
		
		/// <summary>
		/// The name of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
		
		/// <summary>
		/// The US two letter state abbreviation of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The US Postal Zip Code of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	/// <summary>
	/// Information about individual election officials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionOfficial
	{
		
		/// <summary>
		/// The email address of the election official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The fax number of the election official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faxNumber")]
		public string FaxNumber { get; set; }
		
		/// <summary>
		/// The full name of the election official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The office phone number of the election official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="officePhoneNumber")]
		public string OfficePhoneNumber { get; set; }
		
		/// <summary>
		/// The title of the election official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Contains information about the data source for the element containing it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		/// <summary>
		/// The name of the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether this data comes from an official government source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="official")]
		public System.Nullable<System.Boolean> Official { get; set; }
	}
	
	/// <summary>
	/// Information about a candidate running for elected office.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Candidate
	{
		
		/// <summary>
		/// The URL for the candidate's campaign web site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidateUrl")]
		public string CandidateUrl { get; set; }
		
		/// <summary>
		/// A list of known (social) media channels for this candidate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Channel[] Channels { get; set; }
		
		/// <summary>
		/// The email address for the candidate's campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The candidate's name. If this is a joint ticket it will indicate the name of the candidate at the top of a ticket followed by a / and that name of candidate at the bottom of the ticket. e.g. "Mitt Romney / Paul Ryan"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The order the candidate appears on the ballot for this contest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderOnBallot")]
		public string OrderOnBallot { get; set; }
		
		/// <summary>
		/// The full name of the party the candidate is a member of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		/// <summary>
		/// The voice phone number for the candidate's campaign office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// A URL for a photo of the candidate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
	}
	
	/// <summary>
	/// A social media or web channel for a candidate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		/// <summary>
		/// The unique public identifier for the candidate's channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of channel. The following is a list of types of channels, but is not exhaustive. More channel types may be added at a later time. One of: GooglePlus, YouTube, Facebook, Twitter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Information about a contest that appears on a voter's ballot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contest
	{
		
		/// <summary>
		/// A number specifying the position of this contest on the voter's ballot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ballotPlacement")]
		public string BallotPlacement { get; set; }
		
		/// <summary>
		/// The official title on the ballot for this contest, only where available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ballotTitle")]
		public string BallotTitle { get; set; }
		
		/// <summary>
		/// The candidate choices for this contest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidates")]
		public Candidate[] Candidates { get; set; }
		
		/// <summary>
		/// Describes the geographic scope of a contest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		public ElectoralDistrict District { get; set; }
		
		/// <summary>
		/// A description of any additional eligibility requirements for voting in this contest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electorateSpecifications")]
		public string ElectorateSpecifications { get; set; }
		
		/// <summary>
		/// The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at "locality" level, but also effectively at both "administrative-area-2" and "administrative-area-1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string[] Level { get; set; }
		
		/// <summary>
		/// The number of candidates that will be elected to office in this contest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberElected")]
		public string NumberElected { get; set; }
		
		/// <summary>
		/// The number of candidates that a voter may vote for in this contest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberVotingFor")]
		public string NumberVotingFor { get; set; }
		
		/// <summary>
		/// The name of the office for this contest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		public string Office { get; set; }
		
		/// <summary>
		/// If this is a partisan election, the name of the party/parties it is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryParties")]
		public string[] PrimaryParties { get; set; }
		
		/// <summary>
		/// The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include "yes" or "no" for referenda. This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumBallotResponses")]
		public string[] ReferendumBallotResponses { get; set; }
		
		/// <summary>
		/// Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumBrief")]
		public string ReferendumBrief { get; set; }
		
		/// <summary>
		/// A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumConStatement")]
		public string ReferendumConStatement { get; set; }
		
		/// <summary>
		/// Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumEffectOfAbstain")]
		public string ReferendumEffectOfAbstain { get; set; }
		
		/// <summary>
		/// The threshold of votes that the referendum needs in order to pass, e.g. "two-thirds". This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumPassageThreshold")]
		public string ReferendumPassageThreshold { get; set; }
		
		/// <summary>
		/// A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumProStatement")]
		public string ReferendumProStatement { get; set; }
		
		/// <summary>
		/// A brief description of the referendum. This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumSubtitle")]
		public string ReferendumSubtitle { get; set; }
		
		/// <summary>
		/// The full text of the referendum. This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumText")]
		public string ReferendumText { get; set; }
		
		/// <summary>
		/// The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumTitle")]
		public string ReferendumTitle { get; set; }
		
		/// <summary>
		/// A link to the referendum. This field is only populated for contests of type 'Referendum'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referendumUrl")]
		public string ReferendumUrl { get; set; }
		
		/// <summary>
		/// The roles which this office fulfills.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		/// <summary>
		/// A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources { get; set; }
		
		/// <summary>
		/// "Yes" or "No" depending on whether this a contest being held outside the normal election cycle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="special")]
		public string Special { get; set; }
		
		/// <summary>
		/// The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes the geographic scope of a contest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectoralDistrict
	{
		
		/// <summary>
		/// An identifier for this district, relative to its scope. For example, the 34th State Senate district would have id "34" and a scope of stateUpper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the district.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The geographic scope of this district. If unspecified the district's geography is not known. One of: national, statewide, congressional, stateUpper, stateLower, countywide, judicial, schoolBoard, cityWide, township, countyCouncil, cityCouncil, ward, special
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<ElectoralDistrictScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ElectoralDistrictScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		statewide = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		congressional = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stateUpper = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stateLower = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		countywide = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		judicial = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		schoolBoard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		citywide = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		special = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		countyCouncil = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		township = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ward = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cityCouncil = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		national = 13,
	}
	
	/// <summary>
	/// The result of a division search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DivisionSearchResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "civicinfo#divisionSearchResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("civicinfo#divisionSearchResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "civicinfo#divisionSearchResponse";
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public DivisionSearchResult[] Results { get; set; }
	}
	
	/// <summary>
	/// Represents a political geographic division that matches the requested query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DivisionSearchResult
	{
		
		/// <summary>
		/// Other Open Civic Data identifiers that refer to the same division -- for example, those that refer to other political divisions whose boundaries are defined to be coterminous with this one. For example, ocd-division/country:us/state:wy will include an alias of ocd-division/country:us/state:wy/cd:1, since Wyoming has only one Congressional district.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		/// <summary>
		/// The name of the division.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique Open Civic Data identifier for this division
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ocdId")]
		public string OcdId { get; set; }
	}
	
	/// <summary>
	/// Information about the election that was queried.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Election
	{
		
		/// <summary>
		/// Day of the election in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electionDay")]
		public string ElectionDay { get; set; }
		
		/// <summary>
		/// The unique ID of this election.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A displayable name for the election.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The political division of the election. Represented as an OCD Division ID. Voters within these political jurisdictions are covered by this election. This is typically a state such as ocd-division/country:us/state:ca or for the midterms or general election the entire US (i.e. ocd-division/country:us).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ocdDivisionId")]
		public string OcdDivisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeLookupBehavior")]
		public System.Nullable<ElectionShapeLookupBehavior> ShapeLookupBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ElectionShapeLookupBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shapeLookupDefault = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shapeLookupDisabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shapeLookupEnabled = 2,
	}
	
	/// <summary>
	/// The list of elections available for this version of the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionsQueryResponse
	{
		
		/// <summary>
		/// A list of available elections
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elections")]
		public Election[] Elections { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "civicinfo#electionsQueryResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("civicinfo#electionsQueryResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "civicinfo#electionsQueryResponse";
	}
	
	/// <summary>
	/// Describes a political geography.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeographicDivision
	{
		
		/// <summary>
		/// Any other valid OCD IDs that refer to the same division.\n\nBecause OCD IDs are meant to be human-readable and at least somewhat predictable, there are occasionally several identifiers for a single division. These identifiers are defined to be equivalent to one another, and one is always indicated as the primary identifier. The primary identifier will be returned in ocd_id above, and any other equivalent valid identifiers will be returned in this list.\n\nFor example, if this division's OCD ID is ocd-division/country:us/district:dc, this will contain ocd-division/country:us/state:dc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alsoKnownAs")]
		public string[] AlsoKnownAs { get; set; }
		
		/// <summary>
		/// The name of the division.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of indices in the offices array, one for each office elected from this division. Will only be present if includeOffices was true (or absent) in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="officeIndices")]
		public int[] OfficeIndices { get; set; }
	}
	
	/// <summary>
	/// Information about an Office held by one or more Officials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Office
	{
		
		/// <summary>
		/// The OCD ID of the division with which this office is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="divisionId")]
		public string DivisionId { get; set; }
		
		/// <summary>
		/// The levels of government of which this office is part. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at "locality" level, but also effectively at both "administrative-area-2" and "administrative-area-1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="levels")]
		public string[] Levels { get; set; }
		
		/// <summary>
		/// The human-readable name of the office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of indices in the officials array of people who presently hold this office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="officialIndices")]
		public int[] OfficialIndices { get; set; }
		
		/// <summary>
		/// The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly specify the entire set of responsibilities of a given office, but are meant to be rough categories that are useful for general selection from or sorting of a list of offices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		/// <summary>
		/// A list of sources for this office. If multiple sources are listed, the data has been aggregated from those sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources { get; set; }
	}
	
	/// <summary>
	/// Information about a person holding an elected office.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Official
	{
		
		/// <summary>
		/// Addresses at which to contact the official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public SimpleAddressType[] Address { get; set; }
		
		/// <summary>
		/// A list of known (social) media channels for this official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Channel[] Channels { get; set; }
		
		/// <summary>
		/// The direct email addresses for the official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		/// <summary>
		/// The official's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The full name of the party the official belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		/// <summary>
		/// The official's public contact phone numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phones")]
		public string[] Phones { get; set; }
		
		/// <summary>
		/// A URL for a photo of the official.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The official's public website URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public string[] Urls { get; set; }
	}
	
	/// <summary>
	/// A location where a voter can vote. This may be an early vote site, an election day voting location, or a drop off location for a completed ballot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PollingLocation
	{
		
		/// <summary>
		/// A simple representation of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public SimpleAddressType Address { get; set; }
		
		/// <summary>
		/// The last date that this early vote site or drop off location may be used. This field is not populated for polling locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Latitude of the location, in degrees north of the equator. Note this field may not be available for some locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude of the location, in degrees east of the Prime Meridian. Note this field may not be available for some locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// The name of the early vote site or drop off location. This field is not populated for polling locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Notes about this location (e.g. accessibility ramp or entrance to use).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// A description of when this location is open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pollingHours")]
		public string PollingHours { get; set; }
		
		/// <summary>
		/// A list of sources for this location. If multiple sources are listed the data has been aggregated from those sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources { get; set; }
		
		/// <summary>
		/// The first date that this early vote site or drop off location may be used. This field is not populated for polling locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// The services provided by this early vote site or drop off location. This field is not populated for polling locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voterServices")]
		public string VoterServices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Precinct
	{
		
		/// <summary>
		/// ID of the AdministrationRegion message for this precinct. Corresponds to LocalityId xml tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrationRegionId")]
		public string AdministrationRegionId { get; set; }
		
		/// <summary>
		/// ID(s) of the Contest message(s) for this precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contestId")]
		public string[] ContestId { get; set; }
		
		/// <summary>
		/// Required. Dataset ID. What datasets our Precincts come from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// ID(s) of the PollingLocation message(s) for this precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earlyVoteSiteId")]
		public string[] EarlyVoteSiteId { get; set; }
		
		/// <summary>
		/// ID(s) of the ElectoralDistrict message(s) for this precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electoralDistrictId")]
		public string[] ElectoralDistrictId { get; set; }
		
		/// <summary>
		/// Required. A unique identifier for this precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies if the precinct runs mail-only elections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailOnly")]
		public System.Nullable<System.Boolean> MailOnly { get; set; }
		
		/// <summary>
		/// Required. The name of the precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of the precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Encouraged. The OCD ID of the precinct
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ocdId")]
		public string[] OcdId { get; set; }
		
		/// <summary>
		/// ID(s) of the PollingLocation message(s) for this precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pollingLocationId")]
		public string[] PollingLocationId { get; set; }
		
		/// <summary>
		/// ID(s) of the SpatialBoundary message(s) for this precinct. Used to specify a geometrical boundary of the precinct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spatialBoundaryId")]
		public string[] SpatialBoundaryId { get; set; }
		
		/// <summary>
		/// If present, this proto corresponds to one portion of split precinct. Other portions of this precinct are guaranteed to have the same `name`. If not present, this proto represents a full precicnt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="splitName")]
		public string SplitName { get; set; }
		
		/// <summary>
		/// Specifies the ward the precinct is contained within.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ward")]
		public string Ward { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepresentativeInfoData
	{
		
		/// <summary>
		/// A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="divisions")]
		public System.Collections.Generic.Dictionary<string, GeographicDivision> Divisions { get; set; }
		
		/// <summary>
		/// Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offices")]
		public Office[] Offices { get; set; }
		
		/// <summary>
		/// Officials holding the offices listed above. Will only be present if includeOffices was true in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="officials")]
		public Official[] Officials { get; set; }
	}
	
	/// <summary>
	/// The result of a representative info lookup query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepresentativeInfoResponse
	{
		
		/// <summary>
		/// A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="divisions")]
		public System.Collections.Generic.Dictionary<string, GeographicDivision> Divisions { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "civicinfo#representativeInfoResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("civicinfo#representativeInfoResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "civicinfo#representativeInfoResponse";
		
		/// <summary>
		/// A simple representation of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="normalizedInput")]
		public SimpleAddressType NormalizedInput { get; set; }
		
		/// <summary>
		/// Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offices")]
		public Office[] Offices { get; set; }
		
		/// <summary>
		/// Officials holding the offices listed above. Will only be present if includeOffices was true in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="officials")]
		public Official[] Officials { get; set; }
	}
	
	/// <summary>
	/// The result of a voter info lookup query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoterInfoResponse
	{
		
		/// <summary>
		/// Contests that will appear on the voter's ballot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contests")]
		public Contest[] Contests { get; set; }
		
		/// <summary>
		/// Locations where a voter is eligible to drop off a completed ballot. The voter must have received and completed a ballot prior to arriving at the location. The location may not have ballots available on the premises. These locations could be open on or before election day as indicated in the pollingHours field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dropOffLocations")]
		public PollingLocation[] DropOffLocations { get; set; }
		
		/// <summary>
		/// Locations where the voter is eligible to vote early, prior to election day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earlyVoteSites")]
		public PollingLocation[] EarlyVoteSites { get; set; }
		
		/// <summary>
		/// Information about the election that was queried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election")]
		public Election Election { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "civicinfo#voterInfoResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("civicinfo#voterInfoResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "civicinfo#voterInfoResponse";
		
		/// <summary>
		/// Specifies whether voters in the precinct vote only by mailing their ballots (with the possible option of dropping off their ballots as well).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailOnly")]
		public System.Nullable<System.Boolean> MailOnly { get; set; }
		
		/// <summary>
		/// A simple representation of an address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="normalizedInput")]
		public SimpleAddressType NormalizedInput { get; set; }
		
		/// <summary>
		/// When there are multiple elections for a voter address, the otherElections field is populated in the API response and there are two possibilities: 1. If the earliest election is not the intended election, specify the election ID of the desired election in a second API request using the electionId field. 2. If these elections occur on the same day, the API doesn?t return any polling location, contest, or election official information to ensure that an additional query is made. For user-facing applications, we recommend displaying these elections to the user to disambiguate. A second API request using the electionId field should be made for the election that is relevant to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherElections")]
		public Election[] OtherElections { get; set; }
		
		/// <summary>
		/// Locations where the voter is eligible to vote on election day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pollingLocations")]
		public PollingLocation[] PollingLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="precinctId")]
		public string PrecinctId { get; set; }
		
		/// <summary>
		/// The precincts that match this voter's address. Will only be returned for project IDs which have been allowlisted as "partner projects".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precincts")]
		public Precinct[] Precincts { get; set; }
		
		/// <summary>
		/// Local Election Information for the state that the voter votes in. For the US, there will only be one element in this array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AdministrationRegion[] State { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Searches for political divisions by their natural name or OCD ID.
		/// Civicinfo_divisions_search civicinfo/v2/divisions
		/// </summary>
		/// <param name="query">The search query. Queries can cover any parts of a OCD ID or a human readable division name. All words given in the query are treated as required patterns. In addition to that, most query operators of the Apache Lucene library are supported. See http://lucene.apache.org/core/2_9_4/queryparsersyntax.html</param>
		/// <returns>Successful response</returns>
		public async Task<DivisionSearchResponse> Civicinfo_divisions_searchAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "civicinfo/v2/divisions?query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DivisionSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of available elections to query.
		/// Civicinfo_elections_electionQuery civicinfo/v2/elections
		/// </summary>
		/// <param name="productionDataOnly">Whether to include data that has not been allowlisted yet</param>
		/// <returns>Successful response</returns>
		public async Task<ElectionsQueryResponse> Civicinfo_elections_electionQueryAsync(bool productionDataOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "civicinfo/v2/elections?productionDataOnly="+productionDataOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ElectionsQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Looks up political geography and representative information for a single address.
		/// Civicinfo_representatives_representativeInfoByAddress civicinfo/v2/representatives
		/// </summary>
		/// <param name="address">The address to look up. May only be specified if the field ocdId is not given in the URL</param>
		/// <param name="includeOffices">Whether to return information about offices and officials. If false, only the top-level district information will be returned.</param>
		/// <param name="levels">A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned.</param>
		/// <param name="roles">A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<RepresentativeInfoResponse> Civicinfo_representatives_representativeInfoByAddressAsync(string address, bool includeOffices, string[] levels, string[] roles, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "civicinfo/v2/representatives?address=" + (address==null? "" : System.Uri.EscapeDataString(address))+"&includeOffices="+includeOffices+"&"+string.Join("&", levels.Select(z => $"levels={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", roles.Select(z => $"roles={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepresentativeInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Looks up representative information for a single geographic division.
		/// Civicinfo_representatives_representativeInfoByDivision civicinfo/v2/representatives/{ocdId}
		/// </summary>
		/// <param name="ocdId">The Open Civic Data division identifier of the division to look up.</param>
		/// <param name="levels">A list of office levels to filter by. Only offices that serve at least one of these levels will be returned. Divisions that don't contain a matching office will not be returned.</param>
		/// <param name="recursive">If true, information about all divisions contained in the division requested will be included as well. For example, if querying ocd-division/country:us/district:dc, this would also return all DC's wards and ANCs.</param>
		/// <param name="roles">A list of office roles to filter by. Only offices fulfilling one of these roles will be returned. Divisions that don't contain a matching office will not be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<RepresentativeInfoData> Civicinfo_representatives_representativeInfoByDivisionAsync(string ocdId, string[] levels, bool recursive, string[] roles, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "civicinfo/v2/representatives/"+ (ocdId==null? "" : System.Uri.EscapeDataString(ocdId))+"&"+string.Join("&", levels.Select(z => $"levels={System.Uri.EscapeDataString(z.ToString())}"))+"&recursive="+recursive+"&"+string.Join("&", roles.Select(z => $"roles={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RepresentativeInfoData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Looks up information relevant to a voter based on the voter's registered address.
		/// Civicinfo_elections_voterInfoQuery civicinfo/v2/voterinfo
		/// </summary>
		/// <param name="address">The registered address of the voter to look up.</param>
		/// <param name="electionId">The unique ID of the election to look up. A list of election IDs can be obtained at https://www.googleapis.com/civicinfo/{version}/elections. If no election ID is specified in the query and there is more than one election with data for the given voter, the additional elections are provided in the otherElections response field.</param>
		/// <param name="officialOnly">If set to true, only data from official state sources will be returned.</param>
		/// <param name="productionDataOnly">Whether to include data that has not been vetted yet. Should only be made available to internal IPs or trusted partners. This is a non-discoverable parameter in the One Platform API config.</param>
		/// <param name="returnAllAvailableData">If set to true, the query will return the success code and include any partial information when it is unable to determine a matching address or unable to determine the election for electionId=0 queries.</param>
		/// <returns>Successful response</returns>
		public async Task<VoterInfoResponse> Civicinfo_elections_voterInfoQueryAsync(string address, string electionId, bool officialOnly, bool productionDataOnly, bool returnAllAvailableData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "civicinfo/v2/voterinfo?address=" + (address==null? "" : System.Uri.EscapeDataString(address))+"&electionId=" + (electionId==null? "" : System.Uri.EscapeDataString(electionId))+"&officialOnly="+officialOnly+"&productionDataOnly="+productionDataOnly+"&returnAllAvailableData="+returnAllAvailableData;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VoterInfoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
