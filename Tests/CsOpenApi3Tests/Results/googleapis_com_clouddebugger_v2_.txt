//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An alias to a repo revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AliasContext
	{
		
		/// <summary>
		/// The alias kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<AliasContextKind> Kind { get; set; }
		
		/// <summary>
		/// The alias name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AliasContextKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOVABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 3,
	}
	
	/// <summary>
	/// ------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Breakpoint
	{
		
		/// <summary>
		/// Action that the agent should perform when the code at the breakpoint location is hit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<BreakpointAction> Action { get; set; }
		
		/// <summary>
		/// The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canaryExpireTime")]
		public string CanaryExpireTime { get; set; }
		
		/// <summary>
		/// Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
		
		/// <summary>
		/// Time this breakpoint was created by the server in seconds resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the `expressions` field. The `name` field holds the original expression text, the `value` or `members` field holds the result of the evaluated expression. If the expression cannot be evaluated, the `status` inside the `Variable` will indicate an error and contain the error text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evaluatedExpressions")]
		public Variable[] EvaluatedExpressions { get; set; }
		
		/// <summary>
		/// List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is `LOG`, the evaluated expressions are included in log statements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressions")]
		public string[] Expressions { get; set; }
		
		/// <summary>
		/// Time this breakpoint was finalized as seen by the server in seconds resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalTime")]
		public string FinalTime { get; set; }
		
		/// <summary>
		/// Breakpoint identifier, unique in the scope of the debuggee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// When true, indicates that this is a final result and the breakpoint state will not change from here on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFinalState")]
		public System.Nullable<System.Boolean> IsFinalState { get; set; }
		
		/// <summary>
		/// A set of custom breakpoint properties, populated by the agent, to be displayed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Represents a location in the source code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public SourceLocation Location { get; set; }
		
		/// <summary>
		/// Indicates the severity of the log. Only relevant when action is `LOG`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public System.Nullable<BreakpointLogLevel> LogLevel { get; set; }
		
		/// <summary>
		/// Only relevant when action is `LOG`. Defines the message to log when the breakpoint hits. The message may include parameter placeholders `$0`, `$1`, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in `log_message_format` are not logged. Example: `Message received, id = $0, count = $1` with `expressions` = `[ message.id, message.count ]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logMessageFormat")]
		public string LogMessageFormat { get; set; }
		
		/// <summary>
		/// The stack at breakpoint time, where stack_frames[0] represents the most recently entered function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackFrames")]
		public StackFrame[] StackFrames { get; set; }
		
		/// <summary>
		/// The current state of the breakpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<BreakpointState> State { get; set; }
		
		/// <summary>
		/// Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusMessage Status { get; set; }
		
		/// <summary>
		/// E-mail address of the user that created this breakpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// The `variable_table` exists to aid with computation, memory and network traffic optimization. It enables storing a variable once and reference it from multiple variables, including variables stored in the `variable_table` itself. For example, the same `this` object, which may appear at many levels of the stack, can have all of its data stored once in this table. The stack frame variables then would hold only a reference to it. The variable `var_table_index` field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableTable")]
		public Variable[] VariableTable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BreakpointAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAPTURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 1,
	}
	
	/// <summary>
	/// Represents a variable or an argument possibly of a compound object type. Note how the following variables are represented: 1) A simple variable: int x = 5 { name: "x", value: "5", type: "int" } // Captured variable 2) A compound object: struct T { int m1; int m2; }; T x = { 3, 7 }; { // Captured variable name: "x", type: "T", members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } 3) A pointer where the pointee was captured: T x = { 3, 7 }; T* p = &x; { // Captured variable name: "p", type: "T*", value: "0x00500500", members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } 4) A pointer where the pointee was not captured: T* p = new T; { // Captured variable name: "p", type: "T*", value: "0x00400400" status { is_error: true, description { format: "unavailable" } } } The status should describe the reason for the missing value, such as ``, ``, ``. Note that a null pointer should not have members. 5) An unnamed value: int* p = new int(7); { // Captured variable name: "p", value: "0x00500500", type: "int*", members { value: "7", type: "int" } } 6) An unnamed pointer where the pointee was not captured: int* p = new int(7); int** pp = &p; { // Captured variable name: "pp", value: "0x00500500", type: "int**", members { value: "0x00400400", type: "int*" status { is_error: true, description: { format: "unavailable" } } } } } To optimize computation, memory and network traffic, variables that repeat in the output multiple times can be stored once in a shared variable table and be referenced using the `var_table_index` field. The variables stored in the shared table are nameless and are essentially a partition of the complete variable. To reconstruct the complete variable, merge the referencing variable with the referenced variable. When using the shared variable table, the following variables: T x = { 3, 7 }; T* p = &x; T& r = x; { name: "x", var_table_index: 3, type: "T" } // Captured variables { name: "p", value "0x00500500", type="T*", var_table_index: 3 } { name: "r", type="T&", var_table_index: 3 } { // Shared variable table entry #3: members { name: "m1", value: "3", type: "int" }, members { name: "m2", value: "7", type: "int" } } Note that the pointer address is stored with the referencing variable and not with the referenced variable. This allows the referenced variable to be shared between pointers and references. The type field is optional. The debugger agent may or may not support it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Variable
	{
		
		/// <summary>
		/// Members contained or pointed to by the variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public Variable[] Members { get; set; }
		
		/// <summary>
		/// Name of the variable, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusMessage Status { get; set; }
		
		/// <summary>
		/// Variable type (e.g. `MyClass`). If the variable is split with `var_table_index`, `type` goes next to `value`. The interpretation of a type is agent specific. It is recommended to include the dynamic type rather than a static type of an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Simple value of the variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Reference to a variable in the shared variable table. More than one variable can reference the same variable in the table. The `var_table_index` field is an index into `variable_table` in Breakpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="varTableIndex")]
		public System.Nullable<System.Int32> VarTableIndex { get; set; }
	}
	
	/// <summary>
	/// Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatusMessage
	{
		
		/// <summary>
		/// Represents a message with parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public FormatMessage Description { get; set; }
		
		/// <summary>
		/// Distinguishes errors from informational messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isError")]
		public System.Nullable<System.Boolean> IsError { get; set; }
		
		/// <summary>
		/// Reference to which the message applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refersTo")]
		public System.Nullable<StatusMessageRefersTo> RefersTo { get; set; }
	}
	
	/// <summary>
	/// Represents a message with parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FormatMessage
	{
		
		/// <summary>
		/// Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// Optional parameters to be embedded into the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StatusMessageRefersTo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKPOINT_SOURCE_LOCATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKPOINT_CONDITION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKPOINT_EXPRESSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKPOINT_AGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKPOINT_CANARY_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_NAME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_VALUE = 7,
	}
	
	/// <summary>
	/// Represents a location in the source code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceLocation
	{
		
		/// <summary>
		/// Column within a line. The first column in a line as the value `1`. Agents that do not support setting breakpoints on specific columns ignore this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public System.Nullable<System.Int32> Column { get; set; }
		
		/// <summary>
		/// Line inside the file. The first line in the file has the value `1`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public System.Nullable<System.Int32> Line { get; set; }
		
		/// <summary>
		/// Path to the source file within the source context of the target binary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BreakpointLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	/// <summary>
	/// Represents a stack frame context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StackFrame
	{
		
		/// <summary>
		/// Set of arguments passed to this function. Note that this might not be populated for all stack frames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public Variable[] Arguments { get; set; }
		
		/// <summary>
		/// Demangled function name at the call site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// Set of local variables at the stack frame location. Note that this might not be populated for all stack frames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locals")]
		public Variable[] Locals { get; set; }
		
		/// <summary>
		/// Represents a location in the source code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public SourceLocation Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BreakpointState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_CANARY_PENDING_AGENTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_CANARY_ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_ROLLING_TO_ALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_IS_FINAL = 4,
	}
	
	/// <summary>
	/// A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudRepoSourceContext
	{
		
		/// <summary>
		/// An alias to a repo revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasContext")]
		public AliasContext AliasContext { get; set; }
		
		/// <summary>
		/// The name of an alias (branch, tag, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasName")]
		public string AliasName { get; set; }
		
		/// <summary>
		/// A unique identifier for a cloud repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public RepoId RepoId { get; set; }
		
		/// <summary>
		/// A revision ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// A unique identifier for a cloud repo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepoId
	{
		
		/// <summary>
		/// Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectRepoId")]
		public ProjectRepoId ProjectRepoId { get; set; }
		
		/// <summary>
		/// A server-assigned, globally unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectRepoId
	{
		
		/// <summary>
		/// The ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The name of the repo. Leave empty for the default repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoName")]
		public string RepoName { get; set; }
	}
	
	/// <summary>
	/// A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudWorkspaceId
	{
		
		/// <summary>
		/// The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique identifier for a cloud repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public RepoId RepoId { get; set; }
	}
	
	/// <summary>
	/// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudWorkspaceSourceContext
	{
		
		/// <summary>
		/// The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotId")]
		public string SnapshotId { get; set; }
		
		/// <summary>
		/// A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspaceId")]
		public CloudWorkspaceId WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Debuggee
	{
		
		/// <summary>
		/// Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentVersion")]
		public string AgentVersion { get; set; }
		
		/// <summary>
		/// Used when setting breakpoint canary for this debuggee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canaryMode")]
		public System.Nullable<DebuggeeCanaryMode> CanaryMode { get; set; }
		
		/// <summary>
		/// Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// References to the locations and revisions of the source code used in the deployed application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extSourceContexts")]
		public ExtendedSourceContext[] ExtSourceContexts { get; set; }
		
		/// <summary>
		/// Unique identifier for the debuggee generated by the controller service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisabled")]
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInactive")]
		public System.Nullable<System.Boolean> IsInactive { get; set; }
		
		/// <summary>
		/// A set of custom debuggee properties, populated by the agent, to be displayed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// References to the locations and revisions of the source code used in the deployed application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceContexts")]
		public SourceContext[] SourceContexts { get; set; }
		
		/// <summary>
		/// Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusMessage Status { get; set; }
		
		/// <summary>
		/// Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniquifier")]
		public string Uniquifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DebuggeeCanaryMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_MODE_ALWAYS_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_MODE_ALWAYS_DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_MODE_DEFAULT_ENABLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_MODE_DEFAULT_DISABLED = 4,
	}
	
	/// <summary>
	/// An ExtendedSourceContext is a SourceContext combined with additional details describing the context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtendedSourceContext
	{
		
		/// <summary>
		/// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public SourceContext Context { get; set; }
		
		/// <summary>
		/// Labels with user defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceContext
	{
		
		/// <summary>
		/// A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudRepo")]
		public CloudRepoSourceContext CloudRepo { get; set; }
		
		/// <summary>
		/// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudWorkspace")]
		public CloudWorkspaceSourceContext CloudWorkspace { get; set; }
		
		/// <summary>
		/// A SourceContext referring to a Gerrit project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gerrit")]
		public GerritSourceContext Gerrit { get; set; }
		
		/// <summary>
		/// A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="git")]
		public GitSourceContext Git { get; set; }
	}
	
	/// <summary>
	/// A SourceContext referring to a Gerrit project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GerritSourceContext
	{
		
		/// <summary>
		/// An alias to a repo revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasContext")]
		public AliasContext AliasContext { get; set; }
		
		/// <summary>
		/// The name of an alias (branch, tag, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasName")]
		public string AliasName { get; set; }
		
		/// <summary>
		/// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gerritProject")]
		public string GerritProject { get; set; }
		
		/// <summary>
		/// The URI of a running Gerrit instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUri")]
		public string HostUri { get; set; }
		
		/// <summary>
		/// A revision (commit) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitSourceContext
	{
		
		/// <summary>
		/// Git commit hash. required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Git repository URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Response for getting breakpoint information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBreakpointResponse
	{
		
		/// <summary>
		/// ------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakpoint")]
		public Breakpoint Breakpoint { get; set; }
	}
	
	/// <summary>
	/// Response for listing active breakpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListActiveBreakpointsResponse
	{
		
		/// <summary>
		/// List of all active breakpoints. The fields `id` and `location` are guaranteed to be set on each breakpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakpoints")]
		public Breakpoint[] Breakpoints { get; set; }
		
		/// <summary>
		/// A token that can be used in the next method call to block until the list of breakpoints changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextWaitToken")]
		public string NextWaitToken { get; set; }
		
		/// <summary>
		/// If set to `true`, indicates that there is no change to the list of active breakpoints and the server-selected timeout has expired. The `breakpoints` field would be empty and should be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitExpired")]
		public System.Nullable<System.Boolean> WaitExpired { get; set; }
	}
	
	/// <summary>
	/// Response for listing breakpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBreakpointsResponse
	{
		
		/// <summary>
		/// List of breakpoints matching the request. The fields `id` and `location` are guaranteed to be set on each breakpoint. The fields: `stack_frames`, `evaluated_expressions` and `variable_table` are cleared on each breakpoint regardless of its status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakpoints")]
		public Breakpoint[] Breakpoints { get; set; }
		
		/// <summary>
		/// A wait token that can be used in the next call to `list` (REST) or `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextWaitToken")]
		public string NextWaitToken { get; set; }
	}
	
	/// <summary>
	/// Response for listing debuggees.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDebuggeesResponse
	{
		
		/// <summary>
		/// List of debuggees accessible to the calling user. The fields `debuggee.id` and `description` are guaranteed to be set. The `description` field is a human readable field provided by agents and can be displayed to users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debuggees")]
		public Debuggee[] Debuggees { get; set; }
	}
	
	/// <summary>
	/// Request to register a debuggee.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterDebuggeeRequest
	{
		
		/// <summary>
		/// Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debuggee")]
		public Debuggee Debuggee { get; set; }
	}
	
	/// <summary>
	/// Response for registering a debuggee.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterDebuggeeResponse
	{
		
		/// <summary>
		/// A unique ID generated for the agent. Each RegisterDebuggee request will generate a new agent ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentId")]
		public string AgentId { get; set; }
		
		/// <summary>
		/// Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debuggee")]
		public Debuggee Debuggee { get; set; }
	}
	
	/// <summary>
	/// Response for setting a breakpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetBreakpointResponse
	{
		
		/// <summary>
		/// ------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakpoint")]
		public Breakpoint Breakpoint { get; set; }
	}
	
	/// <summary>
	/// Request to update an active breakpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateActiveBreakpointRequest
	{
		
		/// <summary>
		/// ------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakpoint")]
		public Breakpoint Breakpoint { get; set; }
	}
	
	/// <summary>
	/// Response for updating an active breakpoint. The message is defined to allow future extensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateActiveBreakpointResponse
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Registers the debuggee with the controller service. All agents attached to the same application must call this method with exactly the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This protocol allows the controller service to disable debuggees, recover from data loss, or change the `debuggee_id` format. Agents must handle `debuggee_id` value changing upon re-registration.
		/// Clouddebugger_controller_debuggees_register v2/controller/debuggees/register
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<RegisterDebuggeeResponse> Clouddebugger_controller_debuggees_registerAsync(RegisterDebuggeeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/controller/debuggees/register";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RegisterDebuggeeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of all active breakpoints for the debuggee. The breakpoint specification (`location`, `condition`, and `expressions` fields) is semantically immutable, although the field values may change. For example, an agent may update the location line number to reflect the actual line where the breakpoint was set, but this doesn't change the breakpoint semantics. This means that an agent does not need to check if a breakpoint has changed when it encounters the same breakpoint on a successive call. Moreover, an agent should remember the breakpoints that are completed until the controller removes them from the active list to avoid setting those breakpoints again.
		/// Clouddebugger_controller_debuggees_breakpoints_list v2/controller/debuggees/{debuggeeId}/breakpoints
		/// </summary>
		/// <param name="debuggeeId">Required. Identifies the debuggee.</param>
		/// <param name="agentId">Identifies the agent. This is the ID returned in the RegisterDebuggee response.</param>
		/// <param name="successOnTimeout">If set to `true` (recommended), returns `google.rpc.Code.OK` status and sets the `wait_expired` response field to `true` when the server-selected timeout has expired. If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status when the server-selected timeout has expired.</param>
		/// <param name="waitToken">A token that, if specified, blocks the method call until the list of active breakpoints has changed, or a server-selected timeout has expired. The value should be set from the `next_wait_token` field in the last response. The initial value should be set to `"init"`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListActiveBreakpointsResponse> Clouddebugger_controller_debuggees_breakpoints_listAsync(string debuggeeId, string agentId, bool successOnTimeout, string waitToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/controller/debuggees/"+ (debuggeeId==null? "" : System.Uri.EscapeDataString(debuggeeId))+"/breakpoints&agentId=" + (agentId==null? "" : System.Uri.EscapeDataString(agentId))+"&successOnTimeout="+successOnTimeout+"&waitToken=" + (waitToken==null? "" : System.Uri.EscapeDataString(waitToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListActiveBreakpointsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service. Updates to active breakpoint fields are only allowed if the new value does not change the breakpoint specification. Updates to the `location`, `condition` and `expressions` fields should not alter the breakpoint semantics. These may only make changes such as canonicalizing a value or snapping the location to the correct line of code.
		/// Clouddebugger_controller_debuggees_breakpoints_update v2/controller/debuggees/{debuggeeId}/breakpoints/{id}
		/// </summary>
		/// <param name="debuggeeId">Required. Identifies the debuggee being debugged.</param>
		/// <param name="id">Breakpoint identifier, unique in the scope of the debuggee.</param>
		/// <returns>Successful response</returns>
		public async Task<UpdateActiveBreakpointResponse> Clouddebugger_controller_debuggees_breakpoints_updateAsync(string debuggeeId, string id, UpdateActiveBreakpointRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/controller/debuggees/"+ (debuggeeId==null? "" : System.Uri.EscapeDataString(debuggeeId))+"/breakpoints/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateActiveBreakpointResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the debuggees that the user has access to.
		/// Clouddebugger_debugger_debuggees_list v2/debugger/debuggees
		/// </summary>
		/// <param name="clientVersion">Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).</param>
		/// <param name="includeInactive">When set to `true`, the result includes all debuggees. Otherwise, the result includes only debuggees that are active.</param>
		/// <param name="project">Required. Project number of a Google Cloud project whose debuggees to list.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDebuggeesResponse> Clouddebugger_debugger_debuggees_listAsync(string clientVersion, bool includeInactive, string project, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/debugger/debuggees?clientVersion=" + (clientVersion==null? "" : System.Uri.EscapeDataString(clientVersion))+"&includeInactive="+includeInactive+"&project=" + (project==null? "" : System.Uri.EscapeDataString(project));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDebuggeesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all breakpoints for the debuggee.
		/// Clouddebugger_debugger_debuggees_breakpoints_list v2/debugger/debuggees/{debuggeeId}/breakpoints
		/// </summary>
		/// <param name="debuggeeId">Required. ID of the debuggee whose breakpoints to list.</param>
		/// <param name="action_value">Only breakpoints with the specified action will pass the filter.</param>
		/// <param name="clientVersion">Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).</param>
		/// <param name="includeAllUsers">When set to `true`, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller.</param>
		/// <param name="includeInactive">When set to `true`, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints.</param>
		/// <param name="stripResults">This field is deprecated. The following fields are always stripped out of the result: `stack_frames`, `evaluated_expressions` and `variable_table`.</param>
		/// <param name="waitToken">A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which should be called again with the same `wait_token`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBreakpointsResponse> Clouddebugger_debugger_debuggees_breakpoints_listAsync(string debuggeeId, BreakpointAction action_value, string clientVersion, bool includeAllUsers, bool includeInactive, bool stripResults, string waitToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/debugger/debuggees/"+ (debuggeeId==null? "" : System.Uri.EscapeDataString(debuggeeId))+"/breakpoints&action.value=" + action_value+"&clientVersion=" + (clientVersion==null? "" : System.Uri.EscapeDataString(clientVersion))+"&includeAllUsers="+includeAllUsers+"&includeInactive="+includeInactive+"&stripResults="+stripResults+"&waitToken=" + (waitToken==null? "" : System.Uri.EscapeDataString(waitToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBreakpointsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the breakpoint to the debuggee.
		/// Clouddebugger_debugger_debuggees_breakpoints_set v2/debugger/debuggees/{debuggeeId}/breakpoints/set
		/// </summary>
		/// <param name="debuggeeId">Required. ID of the debuggee where the breakpoint is to be set.</param>
		/// <param name="canaryOption">The canary option set by the user upon setting breakpoint.</param>
		/// <param name="clientVersion">Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).</param>
		/// <returns>Successful response</returns>
		public async Task<SetBreakpointResponse> Clouddebugger_debugger_debuggees_breakpoints_setAsync(string debuggeeId, Clouddebugger_debugger_debuggees_breakpoints_setCanaryOption canaryOption, string clientVersion, Breakpoint requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/debugger/debuggees/"+ (debuggeeId==null? "" : System.Uri.EscapeDataString(debuggeeId))+"/breakpoints/set&canaryOption=" + canaryOption+"&clientVersion=" + (clientVersion==null? "" : System.Uri.EscapeDataString(clientVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SetBreakpointResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the breakpoint from the debuggee.
		/// Clouddebugger_debugger_debuggees_breakpoints_delete v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}
		/// </summary>
		/// <param name="debuggeeId">Required. ID of the debuggee whose breakpoint to delete.</param>
		/// <param name="breakpointId">Required. ID of the breakpoint to delete.</param>
		/// <param name="clientVersion">Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Clouddebugger_debugger_debuggees_breakpoints_deleteAsync(string debuggeeId, string breakpointId, string clientVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/debugger/debuggees/"+ (debuggeeId==null? "" : System.Uri.EscapeDataString(debuggeeId))+"/breakpoints/"+ (breakpointId==null? "" : System.Uri.EscapeDataString(breakpointId))+"&clientVersion=" + (clientVersion==null? "" : System.Uri.EscapeDataString(clientVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets breakpoint information.
		/// Clouddebugger_debugger_debuggees_breakpoints_get v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}
		/// </summary>
		/// <param name="debuggeeId">Required. ID of the debuggee whose breakpoint to get.</param>
		/// <param name="breakpointId">Required. ID of the breakpoint to get.</param>
		/// <param name="clientVersion">Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).</param>
		/// <returns>Successful response</returns>
		public async Task<GetBreakpointResponse> Clouddebugger_debugger_debuggees_breakpoints_getAsync(string debuggeeId, string breakpointId, string clientVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/debugger/debuggees/"+ (debuggeeId==null? "" : System.Uri.EscapeDataString(debuggeeId))+"/breakpoints/"+ (breakpointId==null? "" : System.Uri.EscapeDataString(breakpointId))+"&clientVersion=" + (clientVersion==null? "" : System.Uri.EscapeDataString(clientVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBreakpointResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Clouddebugger_debugger_debuggees_breakpoints_setCanaryOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_OPTION_TRY_ENABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY_OPTION_TRY_DISABLE = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
