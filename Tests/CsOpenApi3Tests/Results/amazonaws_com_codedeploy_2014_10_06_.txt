//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the input of, and adds tags to, an on-premises instance operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddTagsToOnPremisesInstancesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
	}
	
	/// <summary>
	/// Information about a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidInstanceNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTagException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceNotRegisteredException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetApplicationRevisions</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetApplicationRevisionsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisions")]
		public RevisionInfo[] Revisions { get; set; }
	}
	
	/// <summary>
	/// Information about an application revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisionLocation")]
		public RevisionLocation RevisionLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genericRevisionInfo")]
		public GenericRevisionInfo GenericRevisionInfo { get; set; }
	}
	
	/// <summary>
	/// Information about the location of an application revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisionType")]
		public RevisionLocationType RevisionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitHubLocation")]
		public GitHubLocation GitHubLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="string")]
		public RawString String { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appSpecContent")]
		public AppSpecContent AppSpecContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RevisionLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AppSpecContent = 3,
	}
	
	/// <summary>
	/// Information about the location of application artifacts stored in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleType")]
		public BundleType BundleType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eTag")]
		public string ETag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BundleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tgz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zip = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 4,
	}
	
	/// <summary>
	/// Information about the location of application artifacts stored in GitHub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitHubLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
	}
	
	/// <summary>
	/// A revision for an Lambda deployment that is a YAML-formatted or JSON-formatted string. For Lambda deployments, the revision is the same as the AppSpec file.RawString and String revision type are deprecated, use AppSpecContent type instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RawString
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	/// <summary>
	///  A revision for an Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated <code>RawString</code> data type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppSpecContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	/// <summary>
	/// Information about an application revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenericRevisionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroups")]
		public string[] DeploymentGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstUsedTime")]
		public System.DateTimeOffset FirstUsedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUsedTime")]
		public System.DateTimeOffset LastUsedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registerTime")]
		public System.DateTimeOffset RegisterTime { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetApplicationRevisions</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetApplicationRevisionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisions")]
		public RevisionLocation[] Revisions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidApplicationNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRevisionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchLimitExceededException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetApplications</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetApplicationsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationsInfo")]
		public ApplicationInfo[] ApplicationsInfo { get; set; }
	}
	
	/// <summary>
	/// Information about an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedToGitHub")]
		public System.Nullable<System.Boolean> LinkedToGitHub { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gitHubAccountName")]
		public string GitHubAccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computePlatform")]
		public ComputePlatform ComputePlatform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetApplications</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetApplicationsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationNames")]
		public string[] ApplicationNames { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupsInfo")]
		public DeploymentGroupInfo[] DeploymentGroupsInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentGroupInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupId")]
		public string DeploymentGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupName")]
		public string DeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagFilters")]
		public EC2TagFilter[] Ec2TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onPremisesInstanceTagFilters")]
		public TagFilter[] OnPremisesInstanceTagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingGroups")]
		public AutoScalingGroup[] AutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRoleArn")]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetRevision")]
		public RevisionLocation TargetRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerConfigurations")]
		public TriggerConfig[] TriggerConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alarmConfiguration")]
		public AlarmConfiguration AlarmConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRollbackConfiguration")]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStyle")]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outdatedInstancesStrategy")]
		public OutdatedInstancesStrategy OutdatedInstancesStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blueGreenDeploymentConfiguration")]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancerInfo")]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSuccessfulDeployment")]
		public LastDeploymentInfo LastSuccessfulDeployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAttemptedDeployment")]
		public LastDeploymentInfo LastAttemptedDeployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagSet")]
		public EC2TagSet Ec2TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onPremisesTagSet")]
		public OnPremisesTagSet OnPremisesTagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computePlatform")]
		public ComputePlatform ComputePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecsServices")]
		public ECSService[] EcsServices { get; set; }
	}
	
	/// <summary>
	/// Information about an EC2 tag filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2TagFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EC2TagFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AND_VALUE = 2,
	}
	
	/// <summary>
	/// Information about an on-premises instance tag filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilterType Type { get; set; }
	}
	
	/// <summary>
	/// Information about an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoScalingGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hook")]
		public string Hook { get; set; }
	}
	
	/// <summary>
	/// Information about notification triggers for the deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="triggerName")]
		public string TriggerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerTargetArn")]
		public string TriggerTargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerEvents")]
		public TriggerEventType[] TriggerEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TriggerEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStart = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentSuccess = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentFailure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStop = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentRollback = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentReady = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceStart = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSuccess = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceFailure = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceReady = 9,
	}
	
	/// <summary>
	/// Information about alarms associated with a deployment or deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlarmConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignorePollAlarmFailure")]
		public System.Nullable<System.Boolean> IgnorePollAlarmFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alarms")]
		public Alarm[] Alarms { get; set; }
	}
	
	/// <summary>
	/// Information about an alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Alarm
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoRollbackConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public AutoRollbackEvent[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoRollbackEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_FAILURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_STOP_ON_ALARM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_STOP_ON_REQUEST = 2,
	}
	
	/// <summary>
	/// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentStyle
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentType")]
		public DeploymentType DeploymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentOption")]
		public DeploymentOption DeploymentOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PLACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE_GREEN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITH_TRAFFIC_CONTROL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHOUT_TRAFFIC_CONTROL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutdatedInstancesStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Information about blue/green deployment options for a deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlueGreenDeploymentConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="terminateBlueInstancesOnDeploymentSuccess")]
		public BlueInstanceTerminationOption TerminateBlueInstancesOnDeploymentSuccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentReadyOption")]
		public DeploymentReadyOption DeploymentReadyOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="greenFleetProvisioningOption")]
		public GreenFleetProvisioningOption GreenFleetProvisioningOption { get; set; }
	}
	
	/// <summary>
	/// Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlueInstanceTerminationOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public InstanceAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terminationWaitTimeInMinutes")]
		public System.Nullable<System.Int32> TerminationWaitTimeInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEEP_ALIVE = 1,
	}
	
	/// <summary>
	/// Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentReadyOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionOnTimeout")]
		public DeploymentReadyAction ActionOnTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waitTimeInMinutes")]
		public System.Nullable<System.Int32> WaitTimeInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentReadyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE_DEPLOYMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_DEPLOYMENT = 1,
	}
	
	/// <summary>
	/// Information about the instances that belong to the replacement environment in a blue/green deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GreenFleetProvisioningOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public GreenFleetProvisioningAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GreenFleetProvisioningAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER_EXISTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_AUTO_SCALING_GROUP = 1,
	}
	
	/// <summary>
	/// Information about the Elastic Load Balancing load balancer or target group used in a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoadBalancerInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="elbInfoList")]
		public ELBInfo[] ElbInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetGroupInfoList")]
		public TargetGroupInfo[] TargetGroupInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetGroupPairInfoList")]
		public TargetGroupPairInfo[] TargetGroupPairInfoList { get; set; }
	}
	
	/// <summary>
	/// Information about a load balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ELBInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetGroupInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	///  Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetGroupPairInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetGroups")]
		public TargetGroupInfo[] TargetGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prodTrafficRoute")]
		public TrafficRoute ProdTrafficRoute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testTrafficRoute")]
		public TrafficRoute TestTrafficRoute { get; set; }
	}
	
	/// <summary>
	///  Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrafficRoute
	{
		
		[System.Runtime.Serialization.DataMember(Name="listenerArns")]
		public string[] ListenerArns { get; set; }
	}
	
	/// <summary>
	/// Information about the most recent attempted or successful deployment to a deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LastDeploymentInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DeploymentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Baking = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 7,
	}
	
	/// <summary>
	/// Information about groups of Amazon EC2 instance tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2TagSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagSetList")]
		public EC2TagFilter[][] Ec2TagSetList { get; set; }
	}
	
	/// <summary>
	/// Information about groups of on-premises instance tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnPremisesTagSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="onPremisesTagSetList")]
		public TagFilter[][] OnPremisesTagSetList { get; set; }
	}
	
	/// <summary>
	///  Contains the service and cluster names used to identify an Amazon ECS deployment's target. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ECSService
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterName")]
		public string ClusterName { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentGroupsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupNames")]
		public string[] DeploymentGroupNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentGroupNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentGroupNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfigDoesNotExistException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetDeploymentInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="instancesSummary")]
		public InstanceSummary[] InstancesSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Information about an instance in a deployment.InstanceSummary is deprecated, use DeploymentTarget instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEvents")]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public InstanceType InstanceType { get; set; }
	}
	
	/// <summary>
	/// InstanceStatus is deprecated, use TargetStatus instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	/// <summary>
	/// Information about a deployment lifecycle event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecycleEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEventName")]
		public string LifecycleEventName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diagnostics")]
		public Diagnostics Diagnostics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LifecycleEventStatus Status { get; set; }
	}
	
	/// <summary>
	/// Diagnostic information about executable scripts that are part of a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Diagnostics
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public LifecycleErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptName")]
		public string ScriptName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logTail")]
		public string LogTail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LifecycleErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptMissing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptNotExecutable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptTimedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnknownError = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LifecycleEventStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 1,
	}
	
	/// <summary>
	///  Represents the input of a <code>BatchGetDeploymentInstances</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentInstancesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceIds")]
		public string[] InstanceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidComputePlatformException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentTargetsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentTargets")]
		public DeploymentTarget[] DeploymentTargets { get; set; }
	}
	
	/// <summary>
	///  Information about the deployment target. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentTargetType")]
		public DeploymentTargetType DeploymentTargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceTarget")]
		public InstanceTarget InstanceTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaTarget")]
		public LambdaTarget LambdaTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecsTarget")]
		public ECSTarget EcsTarget { get; set; }
		
		/// <summary>
		///  Information about the target to be updated by an CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudFormationTarget")]
		public CloudFormationTarget CloudFormationTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceTarget = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaTarget = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECSTarget = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationTarget = 3,
	}
	
	/// <summary>
	///  A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEvents")]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceLabel")]
		public InstanceType InstanceLabel { get; set; }
	}
	
	/// <summary>
	///  Information about the target Lambda function during an Lambda deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEvents")]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaFunctionInfo")]
		public LambdaFunctionInfo LambdaFunctionInfo { get; set; }
	}
	
	/// <summary>
	///  Information about a Lambda function specified in a deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunctionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="functionName")]
		public string FunctionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="functionAlias")]
		public string FunctionAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentVersion")]
		public string CurrentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetVersion")]
		public string TargetVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetVersionWeight")]
		public System.Nullable<System.Double> TargetVersionWeight { get; set; }
	}
	
	/// <summary>
	///  Information about the target of an Amazon ECS deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ECSTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetArn")]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEvents")]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskSetsInfo")]
		public ECSTaskSet[] TaskSetsInfo { get; set; }
	}
	
	/// <summary>
	///  Information about a set of Amazon ECS tasks in an CodeDeploy deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic. An CodeDeploy application that uses the Amazon ECS compute platform deploys a containerized application in an Amazon ECS service as a task set. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ECSTaskSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="identifer")]
		public string Identifer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="desiredCount")]
		public System.Nullable<System.Int32> DesiredCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingCount")]
		public System.Nullable<System.Int32> PendingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runningCount")]
		public System.Nullable<System.Int32> RunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trafficWeight")]
		public System.Nullable<System.Double> TrafficWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetGroup")]
		public TargetGroupInfo TargetGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskSetLabel")]
		public InstanceType TaskSetLabel { get; set; }
	}
	
	/// <summary>
	///  Information about the target to be updated by an CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudFormationTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEvents")]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetVersionWeight")]
		public System.Nullable<System.Double> TargetVersionWeight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentTargetsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetIds")]
		public string[] TargetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentNotStartedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentTargetIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentTargetIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentTargetDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentTargetListSizeExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceDoesNotExistException
	{
	}
	
	/// <summary>
	///  Represents the output of a <code>BatchGetDeployments</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentsInfo")]
		public DeploymentInfo[] DeploymentsInfo { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupName")]
		public string DeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousRevision")]
		public RevisionLocation PreviousRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public RevisionLocation Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DeploymentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInformation")]
		public ErrorInformation ErrorInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public System.DateTimeOffset CompleteTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentOverview")]
		public DeploymentOverview DeploymentOverview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public DeploymentCreator Creator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreApplicationStopFailures")]
		public System.Nullable<System.Boolean> IgnoreApplicationStopFailures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRollbackConfiguration")]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateOutdatedInstancesOnly")]
		public System.Nullable<System.Boolean> UpdateOutdatedInstancesOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rollbackInfo")]
		public RollbackInfo RollbackInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStyle")]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstances")]
		public TargetInstances TargetInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceTerminationWaitTimeStarted")]
		public System.Nullable<System.Boolean> InstanceTerminationWaitTimeStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blueGreenDeploymentConfiguration")]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancerInfo")]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalDeploymentStatusInfo")]
		public string AdditionalDeploymentStatusInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileExistsBehavior")]
		public FileExistsBehavior FileExistsBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStatusMessages")]
		public string[] DeploymentStatusMessages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computePlatform")]
		public ComputePlatform ComputePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Information about deployments related to the specified deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedDeployments")]
		public RelatedDeployments RelatedDeployments { get; set; }
		
		/// <summary>
		/// Information about alarms associated with a deployment or deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideAlarmConfiguration")]
		public AlarmConfiguration OverrideAlarmConfiguration { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_ISSUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_MISSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOSCALING_VALIDATION_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_SCALING_CONFIGURATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_SCALING_IAM_ROLE_PERMISSIONS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_APPLICATION_UNHEALTHY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_GROUP_MISSING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS_UPDATE_ERROR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELASTIC_LOAD_BALANCING_INVALID = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELB_INVALID_INSTANCE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_CONSTRAINTS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_CONSTRAINTS_INVALID = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOOK_EXECUTION_FAILURE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_MISSING = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_PERMISSIONS = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ECS_SERVICE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LAMBDA_CONFIGURATION = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LAMBDA_FUNCTION = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REVISION = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL_STOP = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_ELB_INFORMATION = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_GITHUB_TOKEN = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EC2_SUBSCRIPTION = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_INSTANCES = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVER_MAX_INSTANCES = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_LIMIT_EXCEEDED = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVISION_MISSING = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THROTTLED = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUDFORMATION_STACK_FAILURE = 33,
	}
	
	/// <summary>
	/// Information about the deployment status of the instances in the deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentOverview
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Succeeded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Skipped { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ready { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentCreator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		codeDeployRollback = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeDeploy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeDeployAutoUpdate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormation = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationRollback = 6,
	}
	
	/// <summary>
	/// Information about a deployment rollback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="rollbackDeploymentId")]
		public string RollbackDeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rollbackTriggeringDeploymentId")]
		public string RollbackTriggeringDeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rollbackMessage")]
		public string RollbackMessage { get; set; }
	}
	
	/// <summary>
	/// Information about the instances to be used in the replacement environment in a blue/green deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetInstances
	{
		
		[System.Runtime.Serialization.DataMember(Name="tagFilters")]
		public EC2TagFilter[] TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingGroups")]
		public string[] AutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagSet")]
		public EC2TagSet Ec2TagSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileExistsBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIN = 2,
	}
	
	/// <summary>
	/// Information about deployments related to the specified deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelatedDeployments
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdateOutdatedInstancesRootDeploymentId")]
		public string AutoUpdateOutdatedInstancesRootDeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdateOutdatedInstancesDeploymentIds")]
		public string[] AutoUpdateOutdatedInstancesDeploymentIds { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>BatchGetDeployments</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDeploymentsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentIds")]
		public string[] DeploymentIds { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetOnPremisesInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceInfos")]
		public InstanceInfo[] InstanceInfos { get; set; }
	}
	
	/// <summary>
	/// Information about an on-premises instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamSessionArn")]
		public string IamSessionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamUserArn")]
		public string IamUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceArn")]
		public string InstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registerTime")]
		public System.DateTimeOffset RegisterTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deregisterTime")]
		public System.DateTimeOffset DeregisterTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetOnPremisesInstancesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContinueDeploymentInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentWaitType")]
		public DeploymentWaitType DeploymentWaitType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentWaitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_WAIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATION_WAIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentAlreadyCompletedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentIsNotInReadyStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedActionForDeploymentTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentWaitTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentStatusException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateApplicationOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateApplicationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computePlatform")]
		public ComputePlatform ComputePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTagsToAddException
	{
	}
	
	/// <summary>
	///  Represents the output of a <code>CreateDeployment</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateDeployment</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupName")]
		public string DeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public RevisionLocation Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreApplicationStopFailures")]
		public System.Nullable<System.Boolean> IgnoreApplicationStopFailures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetInstances")]
		public TargetInstances TargetInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRollbackConfiguration")]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateOutdatedInstancesOnly")]
		public System.Nullable<System.Boolean> UpdateOutdatedInstancesOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileExistsBehavior")]
		public FileExistsBehavior FileExistsBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrideAlarmConfiguration")]
		public AlarmConfiguration OverrideAlarmConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentGroupDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentConfigNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescriptionTooLongException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTargetInstancesException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidAlarmConfigException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlarmsLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidAutoRollbackConfigException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidLoadBalancerInfoException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidFileExistsBehaviorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRoleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidAutoScalingGroupException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidUpdateOutdatedInstancesOnlyValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidIgnoreApplicationStopFailuresValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidGitHubAccountTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTrafficRoutingConfigurationException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentConfigOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigId")]
		public string DeploymentConfigId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumHealthyHosts")]
		public MinimumHealthyHosts MinimumHealthyHosts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trafficRoutingConfig")]
		public TrafficRoutingConfig TrafficRoutingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computePlatform")]
		public ComputePlatform ComputePlatform { get; set; }
	}
	
	/// <summary>
	/// Information about minimum healthy instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MinimumHealthyHosts
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MinimumHealthyHostsType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MinimumHealthyHostsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_PERCENT = 1,
	}
	
	/// <summary>
	/// The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrafficRoutingConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TrafficRoutingType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeBasedCanary")]
		public TimeBasedCanary TimeBasedCanary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeBasedLinear")]
		public TimeBasedLinear TimeBasedLinear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrafficRoutingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeBasedCanary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeBasedLinear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllAtOnce = 2,
	}
	
	/// <summary>
	/// A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeBasedCanary
	{
		
		[System.Runtime.Serialization.DataMember(Name="canaryPercentage")]
		public System.Nullable<System.Int32> CanaryPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canaryInterval")]
		public System.Nullable<System.Int32> CanaryInterval { get; set; }
	}
	
	/// <summary>
	/// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeBasedLinear
	{
		
		[System.Runtime.Serialization.DataMember(Name="linearPercentage")]
		public System.Nullable<System.Int32> LinearPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linearInterval")]
		public System.Nullable<System.Int32> LinearInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfigNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfigAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidMinimumHealthyHostValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfigLimitExceededException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupId")]
		public string DeploymentGroupId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupName")]
		public string DeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagFilters")]
		public EC2TagFilter[] Ec2TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onPremisesInstanceTagFilters")]
		public TagFilter[] OnPremisesInstanceTagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingGroups")]
		public string[] AutoScalingGroups { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceRoleArn")]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerConfigurations")]
		public TriggerConfig[] TriggerConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alarmConfiguration")]
		public AlarmConfiguration AlarmConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRollbackConfiguration")]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outdatedInstancesStrategy")]
		public OutdatedInstancesStrategy OutdatedInstancesStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStyle")]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blueGreenDeploymentConfiguration")]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancerInfo")]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagSet")]
		public EC2TagSet Ec2TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecsServices")]
		public ECSService[] EcsServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onPremisesTagSet")]
		public OnPremisesTagSet OnPremisesTagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentGroupAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidEC2TagException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoleRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentGroupLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecycleHookLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTriggerConfigException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerTargetsLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentStyleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidBlueGreenDeploymentConfigurationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidEC2TagCombinationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidOnPremisesTagCombinationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagSetListLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidInputException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidECSServiceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTargetGroupPairException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ECSServiceMappingLimitExceededException
	{
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteApplicationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeploymentConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfigInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidOperationException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>DeleteDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeploymentGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="hooksNotCleanedUp")]
		public AutoScalingGroup[] HooksNotCleanedUp { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeploymentGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupName")]
		public string DeploymentGroupName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DeleteGitHubAccountToken</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGitHubAccountTokenOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="tokenName")]
		public string TokenName { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteGitHubAccount</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGitHubAccountTokenInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="tokenName")]
		public string TokenName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitHubAccountTokenNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitHubAccountTokenDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidGitHubAccountTokenNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcesByExternalIdOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcesByExternalIdInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeregisterOnPremisesInstance</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeregisterOnPremisesInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="application")]
		public ApplicationInfo Application { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetApplicationRevision</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationRevisionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public RevisionLocation Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionInfo")]
		public GenericRevisionInfo RevisionInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetApplicationRevision</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetApplicationRevisionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public RevisionLocation Revision { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetDeployment</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentInfo")]
		public DeploymentInfo DeploymentInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetDeployment</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentConfigOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigInfo")]
		public DeploymentConfigInfo DeploymentConfigInfo { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfigInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigId")]
		public string DeploymentConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumHealthyHosts")]
		public MinimumHealthyHosts MinimumHealthyHosts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computePlatform")]
		public ComputePlatform ComputePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trafficRoutingConfig")]
		public TrafficRoutingConfig TrafficRoutingConfig { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentConfigInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupInfo")]
		public DeploymentGroupInfo DeploymentGroupInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupName")]
		public string DeploymentGroupName { get; set; }
	}
	
	/// <summary>
	///  Represents the output of a <code>GetDeploymentInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentInstanceOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceSummary")]
		public InstanceSummary InstanceSummary { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>GetDeploymentInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentTargetOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentTarget")]
		public DeploymentTarget DeploymentTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentTargetInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
	}
	
	/// <summary>
	///  Represents the output of a <code>GetOnPremisesInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetOnPremisesInstanceOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceInfo")]
		public InstanceInfo InstanceInfo { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>GetOnPremisesInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetOnPremisesInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListApplicationRevisions</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationRevisionsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisions")]
		public RevisionLocation[] Revisions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>ListApplicationRevisions</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationRevisionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ApplicationRevisionSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3KeyPrefix")]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deployed")]
		public ListStateFilterAction Deployed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationRevisionSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		registerTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		firstUsedTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastUsedTime = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ListStateFilterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		include = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exclude = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ignore = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSortByException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSortOrderException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidBucketNameFilterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidKeyPrefixFilterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketNameFilterRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeployedStateFilterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidNextTokenException
	{
	}
	
	/// <summary>
	/// Represents the output of a ListApplications operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListApplications</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListApplicationsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeploymentConfigs</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentConfigsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigsList")]
		public string[] DeploymentConfigsList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListDeploymentConfigs</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentConfigsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroups")]
		public string[] DeploymentGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentGroupsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeploymentInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="instancesList")]
		public string[] InstancesList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>ListDeploymentInstances</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentInstancesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceStatusFilter")]
		public InstanceStatus[] InstanceStatusFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceTypeFilter")]
		public InstanceType[] InstanceTypeFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidInstanceStatusException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidInstanceTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidDeploymentInstanceTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTargetFilterNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentTargetsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetIds")]
		public string[] TargetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentTargetsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetFilters")]
		public TargetFilters TargetFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetFilters
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeployments</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deployments")]
		public string[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListDeployments</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentGroupName")]
		public string DeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeOnlyStatuses")]
		public DeploymentStatus[] IncludeOnlyStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTimeRange")]
		public TimeRange CreateTimeRange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.DateTimeOffset Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.DateTimeOffset End { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTimeRangeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidExternalIdException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>ListGitHubAccountTokenNames</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGitHubAccountTokenNamesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="tokenNameList")]
		public string[] TokenNameList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListGitHubAccountTokenNames</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGitHubAccountTokenNamesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of the list on-premises instances operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOnPremisesInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOnPremisesInstancesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="registrationStatus")]
		public RegistrationStatus RegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagFilters")]
		public TagFilter[] TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deregistered = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRegistrationStatusException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTagFilterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArnNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceArnRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLifecycleEventHookExecutionStatusOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEventHookExecutionId")]
		public string LifecycleEventHookExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLifecycleEventHookExecutionStatusInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lifecycleEventHookExecutionId")]
		public string LifecycleEventHookExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LifecycleEventStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidLifecycleEventHookExecutionStatusException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidLifecycleEventHookExecutionIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LifecycleEventAlreadyCompletedException
	{
	}
	
	/// <summary>
	/// Represents the input of a RegisterApplicationRevision operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterApplicationRevisionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public RevisionLocation Revision { get; set; }
	}
	
	/// <summary>
	/// Represents the input of the register on-premises instance operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterOnPremisesInstanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamSessionArn")]
		public string IamSessionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamUserArn")]
		public string IamUserArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceNameAlreadyRegisteredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IamArnRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IamSessionArnAlreadyRegisteredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IamUserArnAlreadyRegisteredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IamUserArnRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidIamSessionArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidIamUserArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultipleIamArnsProvidedException
	{
	}
	
	/// <summary>
	/// Represents the input of a <code>RemoveTagsFromOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveTagsFromOnPremisesInstancesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SkipWaitTimeForInstanceTerminationInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
	}
	
	/// <summary>
	///  Represents the output of a <code>StopDeployment</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDeploymentOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StopStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StopStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
	}
	
	/// <summary>
	///  Represents the input of a <code>StopDeployment</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDeploymentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRollbackEnabled")]
		public System.Nullable<System.Boolean> AutoRollbackEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an <code>UpdateApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateApplicationInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newApplicationName")]
		public string NewApplicationName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of an <code>UpdateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeploymentGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="hooksNotCleanedUp")]
		public AutoScalingGroup[] HooksNotCleanedUp { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an <code>UpdateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeploymentGroupInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationName")]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currentDeploymentGroupName")]
		public string CurrentDeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newDeploymentGroupName")]
		public string NewDeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentConfigName")]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagFilters")]
		public EC2TagFilter[] Ec2TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onPremisesInstanceTagFilters")]
		public TagFilter[] OnPremisesInstanceTagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScalingGroups")]
		public string[] AutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceRoleArn")]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerConfigurations")]
		public TriggerConfig[] TriggerConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alarmConfiguration")]
		public AlarmConfiguration AlarmConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRollbackConfiguration")]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outdatedInstancesStrategy")]
		public OutdatedInstancesStrategy OutdatedInstancesStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentStyle")]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blueGreenDeploymentConfiguration")]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancerInfo")]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2TagSet")]
		public EC2TagSet Ec2TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ecsServices")]
		public ECSService[] EcsServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onPremisesTagSet")]
		public OnPremisesTagSet OnPremisesTagSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TagFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AND_VALUE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TargetStatus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerInstanceLabel = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds tags to on-premises instances.
		/// AddTagsToOnPremisesInstances #X-Amz-Target=CodeDeploy_20141006.AddTagsToOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task AddTagsToOnPremisesInstancesAsync(AddTagsToOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.AddTagsToOnPremisesInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more application revisions. The maximum number of application revisions that can be returned is 25.
		/// BatchGetApplicationRevisions #X-Amz-Target=CodeDeploy_20141006.BatchGetApplicationRevisions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetApplicationRevisionsOutput> BatchGetApplicationRevisionsAsync(BatchGetApplicationRevisionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.BatchGetApplicationRevisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetApplicationRevisionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more applications. The maximum number of applications that can be returned is 100.
		/// BatchGetApplications #X-Amz-Target=CodeDeploy_20141006.BatchGetApplications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetApplicationsOutput> BatchGetApplicationsAsync(BatchGetApplicationsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.BatchGetApplications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetApplicationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more deployment groups.
		/// BatchGetDeploymentGroups #X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentGroupsOutput> BatchGetDeploymentGroupsAsync(BatchGetDeploymentGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetDeploymentGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <note> <p> This method works, but is deprecated. Use <code>BatchGetDeploymentTargets</code> instead. </p> </note> <p> Returns an array of one or more instances associated with a deployment. This method works with EC2/On-premises and Lambda compute platforms. The newer <code>BatchGetDeploymentTargets</code> works with all compute platforms. The maximum number of instances that can be returned is 25.</p>
		/// BatchGetDeploymentInstances #X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentInstancesOutput> BatchGetDeploymentInstancesAsync(BatchGetDeploymentInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetDeploymentInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Returns an array of one or more targets associated with a deployment. This method works with all compute types and should be used instead of the deprecated <code>BatchGetDeploymentInstances</code>. The maximum number of targets that can be returned is 25.</p> <p> The type of targets returned depends on the deployment's compute platform or deployment method: </p> <ul> <li> <p> <b>EC2/On-premises</b>: Information about Amazon EC2 instance targets. </p> </li> <li> <p> <b>Lambda</b>: Information about Lambda functions targets. </p> </li> <li> <p> <b>Amazon ECS</b>: Information about Amazon ECS service targets. </p> </li> <li> <p> <b>CloudFormation</b>: Information about targets of blue/green deployments initiated by a CloudFormation stack update.</p> </li> </ul>
		/// BatchGetDeploymentTargets #X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentTargets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentTargetsOutput> BatchGetDeploymentTargetsAsync(BatchGetDeploymentTargetsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentTargets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetDeploymentTargetsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more deployments. The maximum number of deployments that can be returned is 25.
		/// BatchGetDeployments #X-Amz-Target=CodeDeploy_20141006.BatchGetDeployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentsOutput> BatchGetDeploymentsAsync(BatchGetDeploymentsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.BatchGetDeployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetDeploymentsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more on-premises instances. The maximum number of on-premises instances that can be returned is 25.
		/// BatchGetOnPremisesInstances #X-Amz-Target=CodeDeploy_20141006.BatchGetOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetOnPremisesInstancesOutput> BatchGetOnPremisesInstancesAsync(BatchGetOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.BatchGetOnPremisesInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetOnPremisesInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For a blue/green deployment, starts the process of rerouting traffic from instances in the original environment to instances in the replacement environment without waiting for a specified wait time to elapse. (Traffic rerouting, which is achieved by registering instances in the replacement environment with the load balancer, can start as soon as all instances have a status of Ready.)
		/// ContinueDeployment #X-Amz-Target=CodeDeploy_20141006.ContinueDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task ContinueDeploymentAsync(ContinueDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ContinueDeployment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an application.
		/// CreateApplication #X-Amz-Target=CodeDeploy_20141006.CreateApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateApplicationOutput> CreateApplicationAsync(CreateApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.CreateApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateApplicationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deploys an application revision through the specified deployment group.
		/// CreateDeployment #X-Amz-Target=CodeDeploy_20141006.CreateDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentOutput> CreateDeploymentAsync(CreateDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.CreateDeployment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDeploymentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment configuration.
		/// CreateDeploymentConfig #X-Amz-Target=CodeDeploy_20141006.CreateDeploymentConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentConfigOutput> CreateDeploymentConfigAsync(CreateDeploymentConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDeploymentConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment group to which application revisions are deployed.
		/// CreateDeploymentGroup #X-Amz-Target=CodeDeploy_20141006.CreateDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentGroupOutput> CreateDeploymentGroupAsync(CreateDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an application.
		/// DeleteApplication #X-Amz-Target=CodeDeploy_20141006.DeleteApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteApplicationAsync(DeleteApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.DeleteApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a deployment configuration.</p> <note> <p>A deployment configuration cannot be deleted if it is currently in use. Predefined configurations cannot be deleted.</p> </note>
		/// DeleteDeploymentConfig #X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDeploymentConfigAsync(DeleteDeploymentConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment group.
		/// DeleteDeploymentGroup #X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDeploymentGroupOutput> DeleteDeploymentGroupAsync(DeleteDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a GitHub account connection.
		/// DeleteGitHubAccountToken #X-Amz-Target=CodeDeploy_20141006.DeleteGitHubAccountToken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteGitHubAccountTokenOutput> DeleteGitHubAccountTokenAsync(DeleteGitHubAccountTokenInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.DeleteGitHubAccountToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteGitHubAccountTokenOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes resources linked to an external ID.
		/// DeleteResourcesByExternalId #X-Amz-Target=CodeDeploy_20141006.DeleteResourcesByExternalId
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteResourcesByExternalIdOutput> DeleteResourcesByExternalIdAsync(DeleteResourcesByExternalIdInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.DeleteResourcesByExternalId";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteResourcesByExternalIdOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deregisters an on-premises instance.
		/// DeregisterOnPremisesInstance #X-Amz-Target=CodeDeploy_20141006.DeregisterOnPremisesInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeregisterOnPremisesInstanceAsync(DeregisterOnPremisesInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.DeregisterOnPremisesInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an application.
		/// GetApplication #X-Amz-Target=CodeDeploy_20141006.GetApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetApplicationOutput> GetApplicationAsync(GetApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApplicationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an application revision.
		/// GetApplicationRevision #X-Amz-Target=CodeDeploy_20141006.GetApplicationRevision
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetApplicationRevisionOutput> GetApplicationRevisionAsync(GetApplicationRevisionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetApplicationRevision";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApplicationRevisionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a deployment.</p> <note> <p> The <code>content</code> property of the <code>appSpecContent</code> object in the returned revision is always null. Use <code>GetApplicationRevision</code> and the <code>sha256</code> property of the returned <code>appSpecContent</code> object to get the content of the deployment’s AppSpec file. </p> </note>
		/// GetDeployment #X-Amz-Target=CodeDeploy_20141006.GetDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentOutput> GetDeploymentAsync(GetDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetDeployment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a deployment configuration.
		/// GetDeploymentConfig #X-Amz-Target=CodeDeploy_20141006.GetDeploymentConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentConfigOutput> GetDeploymentConfigAsync(GetDeploymentConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetDeploymentConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a deployment group.
		/// GetDeploymentGroup #X-Amz-Target=CodeDeploy_20141006.GetDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentGroupOutput> GetDeploymentGroupAsync(GetDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetDeploymentGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an instance as part of a deployment.
		/// GetDeploymentInstance #X-Amz-Target=CodeDeploy_20141006.GetDeploymentInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentInstanceOutput> GetDeploymentInstanceAsync(GetDeploymentInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetDeploymentInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentInstanceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a deployment target.
		/// GetDeploymentTarget #X-Amz-Target=CodeDeploy_20141006.GetDeploymentTarget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentTargetOutput> GetDeploymentTargetAsync(GetDeploymentTargetInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetDeploymentTarget";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentTargetOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an on-premises instance.
		/// GetOnPremisesInstance #X-Amz-Target=CodeDeploy_20141006.GetOnPremisesInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOnPremisesInstanceOutput> GetOnPremisesInstanceAsync(GetOnPremisesInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.GetOnPremisesInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOnPremisesInstanceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about revisions for an application.
		/// ListApplicationRevisions #X-Amz-Target=CodeDeploy_20141006.ListApplicationRevisions
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationRevisionsOutput> ListApplicationRevisionsAsync(string nextToken, ListApplicationRevisionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListApplicationRevisions?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListApplicationRevisionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the applications registered with the IAM user or Amazon Web Services account.
		/// ListApplications #X-Amz-Target=CodeDeploy_20141006.ListApplications
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationsOutput> ListApplicationsAsync(string nextToken, ListApplicationsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListApplications?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListApplicationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the deployment configurations with the IAM user or Amazon Web Services account.
		/// ListDeploymentConfigs #X-Amz-Target=CodeDeploy_20141006.ListDeploymentConfigs
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentConfigsOutput> ListDeploymentConfigsAsync(string nextToken, ListDeploymentConfigsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListDeploymentConfigs?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeploymentConfigsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the deployment groups for an application registered with the IAM user or Amazon Web Services account.
		/// ListDeploymentGroups #X-Amz-Target=CodeDeploy_20141006.ListDeploymentGroups
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentGroupsOutput> ListDeploymentGroupsAsync(string nextToken, ListDeploymentGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListDeploymentGroups?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeploymentGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <note> <p> The newer <code>BatchGetDeploymentTargets</code> should be used instead because it works with all compute types. <code>ListDeploymentInstances</code> throws an exception if it is used with a compute platform other than EC2/On-premises or Lambda. </p> </note> <p> Lists the instance for a deployment associated with the IAM user or Amazon Web Services account. </p>
		/// ListDeploymentInstances #X-Amz-Target=CodeDeploy_20141006.ListDeploymentInstances
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentInstancesOutput> ListDeploymentInstancesAsync(string nextToken, ListDeploymentInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListDeploymentInstances?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeploymentInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of target IDs that are associated a deployment.
		/// ListDeploymentTargets #X-Amz-Target=CodeDeploy_20141006.ListDeploymentTargets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDeploymentTargetsOutput> ListDeploymentTargetsAsync(ListDeploymentTargetsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListDeploymentTargets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeploymentTargetsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the deployments in a deployment group for an application registered with the IAM user or Amazon Web Services account.
		/// ListDeployments #X-Amz-Target=CodeDeploy_20141006.ListDeployments
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentsOutput> ListDeploymentsAsync(string nextToken, ListDeploymentsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListDeployments?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeploymentsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the names of stored connections to GitHub accounts.
		/// ListGitHubAccountTokenNames #X-Amz-Target=CodeDeploy_20141006.ListGitHubAccountTokenNames
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListGitHubAccountTokenNamesOutput> ListGitHubAccountTokenNamesAsync(ListGitHubAccountTokenNamesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListGitHubAccountTokenNames";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGitHubAccountTokenNamesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of names for one or more on-premises instances.</p> <p>Unless otherwise specified, both registered and deregistered on-premises instance names are listed. To list only registered or deregistered on-premises instance names, use the registration status parameter.</p>
		/// ListOnPremisesInstances #X-Amz-Target=CodeDeploy_20141006.ListOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListOnPremisesInstancesOutput> ListOnPremisesInstancesAsync(ListOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListOnPremisesInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOnPremisesInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of tags for the resource identified by a specified Amazon Resource Name (ARN). Tags are used to organize and categorize your CodeDeploy resources.
		/// ListTagsForResource #X-Amz-Target=CodeDeploy_20141006.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.ListTagsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the result of a Lambda validation function. The function validates lifecycle hooks during a deployment that uses the Lambda or Amazon ECS compute platform. For Lambda deployments, the available lifecycle hooks are <code>BeforeAllowTraffic</code> and <code>AfterAllowTraffic</code>. For Amazon ECS deployments, the available lifecycle hooks are <code>BeforeInstall</code>, <code>AfterInstall</code>, <code>AfterAllowTestTraffic</code>, <code>BeforeAllowTraffic</code>, and <code>AfterAllowTraffic</code>. Lambda validation functions return <code>Succeeded</code> or <code>Failed</code>. For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-lambda">AppSpec 'hooks' Section for an Lambda Deployment </a> and <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-ecs">AppSpec 'hooks' Section for an Amazon ECS Deployment</a>.
		/// PutLifecycleEventHookExecutionStatus #X-Amz-Target=CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutLifecycleEventHookExecutionStatusOutput> PutLifecycleEventHookExecutionStatusAsync(PutLifecycleEventHookExecutionStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutLifecycleEventHookExecutionStatusOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers with CodeDeploy a revision for the specified application.
		/// RegisterApplicationRevision #X-Amz-Target=CodeDeploy_20141006.RegisterApplicationRevision
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterApplicationRevisionAsync(RegisterApplicationRevisionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.RegisterApplicationRevision";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers an on-premises instance.</p> <note> <p>Only one IAM ARN (an IAM session ARN or IAM user ARN) is supported in the request. You cannot use both.</p> </note>
		/// RegisterOnPremisesInstance #X-Amz-Target=CodeDeploy_20141006.RegisterOnPremisesInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterOnPremisesInstanceAsync(RegisterOnPremisesInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.RegisterOnPremisesInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from one or more on-premises instances.
		/// RemoveTagsFromOnPremisesInstances #X-Amz-Target=CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task RemoveTagsFromOnPremisesInstancesAsync(RemoveTagsFromOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// In a blue/green deployment, overrides any specified wait time and starts terminating instances immediately after the traffic routing is complete.
		/// SkipWaitTimeForInstanceTermination #X-Amz-Target=CodeDeploy_20141006.SkipWaitTimeForInstanceTermination
		/// </summary>
		/// <returns>Success</returns>
		public async Task SkipWaitTimeForInstanceTerminationAsync(SkipWaitTimeForInstanceTerminationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.SkipWaitTimeForInstanceTermination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to stop an ongoing deployment.
		/// StopDeployment #X-Amz-Target=CodeDeploy_20141006.StopDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopDeploymentOutput> StopDeploymentAsync(StopDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.StopDeployment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopDeploymentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the list of tags in the input <code>Tags</code> parameter with the resource identified by the <code>ResourceArn</code> input parameter.
		/// TagResource #X-Amz-Target=CodeDeploy_20141006.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceOutput> TagResourceAsync(TagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates a resource from a list of tags. The resource is identified by the <code>ResourceArn</code> input parameter. The tags are identified by the list of keys in the <code>TagKeys</code> input parameter.
		/// UntagResource #X-Amz-Target=CodeDeploy_20141006.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceOutput> UntagResourceAsync(UntagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the name of an application.
		/// UpdateApplication #X-Amz-Target=CodeDeploy_20141006.UpdateApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateApplicationAsync(UpdateApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.UpdateApplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes information about a deployment group.
		/// UpdateDeploymentGroup #X-Amz-Target=CodeDeploy_20141006.UpdateDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDeploymentGroupOutput> UpdateDeploymentGroupAsync(UpdateDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeDeploy_20141006.UpdateDeploymentGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AddTagsToOnPremisesInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.AddTagsToOnPremisesInstances")]
		CodeDeploy_20141006_AddTagsToOnPremisesInstances = 0,
	}
	
	public enum BatchGetApplicationRevisionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.BatchGetApplicationRevisions")]
		CodeDeploy_20141006_BatchGetApplicationRevisions = 0,
	}
	
	public enum BatchGetApplicationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.BatchGetApplications")]
		CodeDeploy_20141006_BatchGetApplications = 0,
	}
	
	public enum BatchGetDeploymentGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.BatchGetDeploymentGroups")]
		CodeDeploy_20141006_BatchGetDeploymentGroups = 0,
	}
	
	public enum BatchGetDeploymentInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.BatchGetDeploymentInstances")]
		CodeDeploy_20141006_BatchGetDeploymentInstances = 0,
	}
	
	public enum BatchGetDeploymentTargetsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.BatchGetDeploymentTargets")]
		CodeDeploy_20141006_BatchGetDeploymentTargets = 0,
	}
	
	public enum BatchGetDeploymentsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.BatchGetDeployments")]
		CodeDeploy_20141006_BatchGetDeployments = 0,
	}
	
	public enum BatchGetOnPremisesInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.BatchGetOnPremisesInstances")]
		CodeDeploy_20141006_BatchGetOnPremisesInstances = 0,
	}
	
	public enum ContinueDeploymentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ContinueDeployment")]
		CodeDeploy_20141006_ContinueDeployment = 0,
	}
	
	public enum CreateApplicationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.CreateApplication")]
		CodeDeploy_20141006_CreateApplication = 0,
	}
	
	public enum CreateDeploymentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.CreateDeployment")]
		CodeDeploy_20141006_CreateDeployment = 0,
	}
	
	public enum CreateDeploymentConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.CreateDeploymentConfig")]
		CodeDeploy_20141006_CreateDeploymentConfig = 0,
	}
	
	public enum CreateDeploymentGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.CreateDeploymentGroup")]
		CodeDeploy_20141006_CreateDeploymentGroup = 0,
	}
	
	public enum DeleteApplicationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.DeleteApplication")]
		CodeDeploy_20141006_DeleteApplication = 0,
	}
	
	public enum DeleteDeploymentConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.DeleteDeploymentConfig")]
		CodeDeploy_20141006_DeleteDeploymentConfig = 0,
	}
	
	public enum DeleteDeploymentGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.DeleteDeploymentGroup")]
		CodeDeploy_20141006_DeleteDeploymentGroup = 0,
	}
	
	public enum DeleteGitHubAccountTokenX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.DeleteGitHubAccountToken")]
		CodeDeploy_20141006_DeleteGitHubAccountToken = 0,
	}
	
	public enum DeleteResourcesByExternalIdX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.DeleteResourcesByExternalId")]
		CodeDeploy_20141006_DeleteResourcesByExternalId = 0,
	}
	
	public enum DeregisterOnPremisesInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.DeregisterOnPremisesInstance")]
		CodeDeploy_20141006_DeregisterOnPremisesInstance = 0,
	}
	
	public enum GetApplicationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetApplication")]
		CodeDeploy_20141006_GetApplication = 0,
	}
	
	public enum GetApplicationRevisionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetApplicationRevision")]
		CodeDeploy_20141006_GetApplicationRevision = 0,
	}
	
	public enum GetDeploymentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetDeployment")]
		CodeDeploy_20141006_GetDeployment = 0,
	}
	
	public enum GetDeploymentConfigX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetDeploymentConfig")]
		CodeDeploy_20141006_GetDeploymentConfig = 0,
	}
	
	public enum GetDeploymentGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetDeploymentGroup")]
		CodeDeploy_20141006_GetDeploymentGroup = 0,
	}
	
	public enum GetDeploymentInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetDeploymentInstance")]
		CodeDeploy_20141006_GetDeploymentInstance = 0,
	}
	
	public enum GetDeploymentTargetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetDeploymentTarget")]
		CodeDeploy_20141006_GetDeploymentTarget = 0,
	}
	
	public enum GetOnPremisesInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.GetOnPremisesInstance")]
		CodeDeploy_20141006_GetOnPremisesInstance = 0,
	}
	
	public enum ListApplicationRevisionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListApplicationRevisions")]
		CodeDeploy_20141006_ListApplicationRevisions = 0,
	}
	
	public enum ListApplicationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListApplications")]
		CodeDeploy_20141006_ListApplications = 0,
	}
	
	public enum ListDeploymentConfigsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListDeploymentConfigs")]
		CodeDeploy_20141006_ListDeploymentConfigs = 0,
	}
	
	public enum ListDeploymentGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListDeploymentGroups")]
		CodeDeploy_20141006_ListDeploymentGroups = 0,
	}
	
	public enum ListDeploymentInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListDeploymentInstances")]
		CodeDeploy_20141006_ListDeploymentInstances = 0,
	}
	
	public enum ListDeploymentTargetsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListDeploymentTargets")]
		CodeDeploy_20141006_ListDeploymentTargets = 0,
	}
	
	public enum ListDeploymentsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListDeployments")]
		CodeDeploy_20141006_ListDeployments = 0,
	}
	
	public enum ListGitHubAccountTokenNamesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListGitHubAccountTokenNames")]
		CodeDeploy_20141006_ListGitHubAccountTokenNames = 0,
	}
	
	public enum ListOnPremisesInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListOnPremisesInstances")]
		CodeDeploy_20141006_ListOnPremisesInstances = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.ListTagsForResource")]
		CodeDeploy_20141006_ListTagsForResource = 0,
	}
	
	public enum PutLifecycleEventHookExecutionStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus")]
		CodeDeploy_20141006_PutLifecycleEventHookExecutionStatus = 0,
	}
	
	public enum RegisterApplicationRevisionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.RegisterApplicationRevision")]
		CodeDeploy_20141006_RegisterApplicationRevision = 0,
	}
	
	public enum RegisterOnPremisesInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.RegisterOnPremisesInstance")]
		CodeDeploy_20141006_RegisterOnPremisesInstance = 0,
	}
	
	public enum RemoveTagsFromOnPremisesInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances")]
		CodeDeploy_20141006_RemoveTagsFromOnPremisesInstances = 0,
	}
	
	public enum SkipWaitTimeForInstanceTerminationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.SkipWaitTimeForInstanceTermination")]
		CodeDeploy_20141006_SkipWaitTimeForInstanceTermination = 0,
	}
	
	public enum StopDeploymentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.StopDeployment")]
		CodeDeploy_20141006_StopDeployment = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.TagResource")]
		CodeDeploy_20141006_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.UntagResource")]
		CodeDeploy_20141006_UntagResource = 0,
	}
	
	public enum UpdateApplicationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.UpdateApplication")]
		CodeDeploy_20141006_UpdateApplication = 0,
	}
	
	public enum UpdateDeploymentGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeDeploy_20141006.UpdateDeploymentGroup")]
		CodeDeploy_20141006_UpdateDeploymentGroup = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
