//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddProfileKeyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCalculatedAttributeDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeDetails AttributeDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Conditions Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Mathematical expression and a list of attribute items specified in that expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeItem[] Attributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// The details of a single attribute item specified in the mathematical expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The conditions including range, object count, and threshold for the calculated attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Conditions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Range Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ObjectCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Threshold Threshold { get; set; }
	}
	
	/// <summary>
	/// The relative time period over which data is included in the aggregation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Range
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Value { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Unit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Unit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS = 0,
	}
	
	/// <summary>
	/// The threshold for the calculated attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Threshold
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Operator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Operator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_TO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL_TO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Statistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_OCCURRENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_OCCURRENCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_OCCURRENCE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDomainResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DefaultExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultEncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeadLetterQueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingResponse Matching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleBasedMatchingResponse RuleBasedMatching { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// The flag that enables the matching process of duplicate profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSchedule JobSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMerging AutoMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	/// <summary>
	/// The day and time when do you want to start the Identity Resolution Job every week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobSchedule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobScheduleDayOfTheWeek DayOfTheWeek { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobScheduleDayOfTheWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
	}
	
	/// <summary>
	/// Configuration settings for how to perform the auto-merging of profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoMerging
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Consolidation Consolidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolution ConflictResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinAllowedConfidenceScoreForMerging { get; set; }
	}
	
	/// <summary>
	/// The matching criteria to be used during the auto-merging process. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Consolidation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[][] MatchingAttributesList { get; set; }
	}
	
	/// <summary>
	/// How the auto-merging process should resolve conflicts between different profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictResolution
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolvingModel ConflictResolvingModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConflictResolvingModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE = 1,
	}
	
	/// <summary>
	/// <p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note> <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you'll get an exception in the API response. For an example policy, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportingConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3ExportingConfig S3Exporting { get; set; }
	}
	
	/// <summary>
	/// Configuration information about the S3 bucket where Identity Resolution Jobs write result files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3ExportingConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyName { get; set; }
	}
	
	/// <summary>
	/// The response of the Rule-based matching request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleBasedMatchingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingRule[] MatchingRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleBasedMatchingStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeTypesSelector AttributeTypesSelector { get; set; }
		
		/// <summary>
		/// How the auto-merging process should resolve conflicts between different profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolution ConflictResolution { get; set; }
		
		/// <summary>
		/// <p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note> <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you'll get an exception in the API response. For an example policy, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies how does the rule-based matching process should match profiles. You can choose from the following attributes to build the matching Rule:</p> <ul> <li> <p>AccountNumber</p> </li> <li> <p>Address.Address</p> </li> <li> <p>Address.City</p> </li> <li> <p>Address.Country</p> </li> <li> <p>Address.County</p> </li> <li> <p>Address.PostalCode</p> </li> <li> <p>Address.State</p> </li> <li> <p>Address.Province</p> </li> <li> <p>BirthDate</p> </li> <li> <p>BusinessName</p> </li> <li> <p>EmailAddress</p> </li> <li> <p>FirstName</p> </li> <li> <p>Gender</p> </li> <li> <p>LastName</p> </li> <li> <p>MiddleName</p> </li> <li> <p>PhoneNumber</p> </li> <li> <p>Any customized profile attributes that start with the <code>Attributes</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchingRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Rule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuleBasedMatchingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
	}
	
	/// <summary>
	/// <p>Configuration information about the <code>AttributeTypesSelector </code>where the rule-based identity resolution uses to match profiles. You can choose how profiles are compared across attribute types and which attribute to use for matching from each type. There are three attribute types you can configure:</p> <ul> <li> <p>Email type</p> <ul> <li> <p>You can choose from <code>Email</code>, <code>BusinessEmail</code>, and <code>PersonalEmail</code> </p> </li> </ul> </li> <li> <p>Phone number type</p> <ul> <li> <p>You can choose from <code>Phone</code>, <code>HomePhone</code>, and <code>MobilePhone</code> </p> </li> </ul> </li> <li> <p>Address type</p> <ul> <li> <p>You can choose from <code>Address</code>, <code>BusinessAddress</code>, <code>MaillingAddress</code>, and <code>ShippingAddress</code> </p> </li> </ul> </li> </ul> <p>You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>AttributeMatchingModel</code>. When choosing <code>MANY_TO_MANY</code>, the system can match attribute across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the Email type. When choosing <code>ONE_TO_ONE</code> the system can only match if the sub-types are exact matches. For example, only when the value of the <code>Email</code> field of Profile A and the value of the <code>Email</code> field of Profile B matches, the two profiles are matched on the Email type.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeTypesSelector
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeMatchingModel AttributeMatchingModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EmailAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttributeMatchingModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_TO_ONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANY_TO_MANY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEventStreamResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventStreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIntegrationWorkflowResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Details for workflow of type <code>APPFLOW_INTEGRATION</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppflowIntegration
	{
		
		/// <summary>
		/// The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FlowDefinition FlowDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Batch[] Batches { get; set; }
	}
	
	/// <summary>
	/// The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlowDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KmsArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceFlowConfig SourceFlowConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Task_[] Tasks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TriggerConfig TriggerConfig { get; set; }
	}
	
	/// <summary>
	/// Contains information about the configuration of the source connector used in the flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceFlowConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IncrementalPullConfig IncrementalPullConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceConnectorProperties SourceConnectorProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourceConnectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Salesforce = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Marketo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zendesk = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Servicenow = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 4,
	}
	
	/// <summary>
	/// Specifies the configuration used when importing incremental records from the source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IncrementalPullConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatetimeTypeFieldName { get; set; }
	}
	
	/// <summary>
	/// Specifies the information that is required to query a particular Amazon AppFlow connector. Customer Profiles supports Salesforce, Zendesk, Marketo, ServiceNow and Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceConnectorProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoSourceProperties Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3SourceProperties S3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceSourceProperties Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowSourceProperties ServiceNow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskSourceProperties Zendesk { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when Marketo is being used as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketoSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when Amazon S3 is being used as the flow source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3SourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketPrefix { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when Salesforce is being used as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SalesforceSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableDynamicFieldUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDeletedRecords { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when ServiceNow is being used as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceNowSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when using Zendesk as a flow source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ZendeskSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// A class for modeling different type of tasks. Task implementation varies based on the TaskType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Task_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectorOperator ConnectorOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationField { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaskPropertiesMap TaskProperties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskType TaskType { get; set; }
	}
	
	/// <summary>
	/// The operation to be performed on the provided source fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectorOperator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoConnectorOperator Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3ConnectorOperator S3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceConnectorOperator Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowConnectorOperator ServiceNow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskConnectorOperator Zendesk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MarketoConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLICATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVISION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBTRACTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_ALL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_FIRST_N = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_LAST_N = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NULL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_ZERO = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NEGATIVE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NUMERIC = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OP = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum S3ConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL_TO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLICATION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVISION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBTRACTION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_ALL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_FIRST_N = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_LAST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NULL = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_ZERO = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NEGATIVE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NUMERIC = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OP = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SalesforceConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OP = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceNowConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OP = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ZendeskConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVISION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBTRACTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_ALL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_FIRST_N = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_LAST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NULL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_ZERO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NON_NEGATIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NUMERIC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_OP = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskPropertiesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arithmetic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Filter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Map = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mask = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Merge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Truncate = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Validate = 6,
	}
	
	/// <summary>
	/// The trigger settings that determine how and when Amazon AppFlow runs the specified flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TriggerType TriggerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TriggerProperties TriggerProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnDemand = 2,
	}
	
	/// <summary>
	/// Specifies the configuration details that control the trigger for a flow. Currently, these settings only apply to the Scheduled trigger type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledTriggerProperties Scheduled { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration details of a scheduled-trigger flow that you define. Currently, these settings only apply to the scheduled-trigger type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduledTriggerProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataPullMode DataPullMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduleStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ScheduleEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScheduleOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstExecutionFrom { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataPullMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Incremental = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 1,
	}
	
	/// <summary>
	/// Batch defines the boundaries for ingestion for each step in <code>APPFLOW_INTEGRATION</code> workflow. <code>APPFLOW_INTEGRATION</code> workflow splits ingestion based on these boundaries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Batch
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProfileResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteCalculatedAttributeDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEventStreamResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIntegrationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileKeyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileObjectTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWorkflowResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAutoMergingPreviewResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfMatchesInSample { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfProfilesInSample { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfProfilesWillBeMerged { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCalculatedAttributeDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Conditions Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeDetails AttributeDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCalculatedAttributeForProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IsDataPartial { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDomainResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultEncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeadLetterQueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStats Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingResponse Matching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleBasedMatchingResponse RuleBasedMatching { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Usage-specific statistics about the domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainStats
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProfileCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MeteringProfileCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ObjectCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEventStreamResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventStreamArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventStreamState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StoppedSince { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventStreamDestinationDetails DestinationDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventStreamState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 1,
	}
	
	/// <summary>
	/// Details of the destination being used for the EventStream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventStreamDestinationDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventStreamDestinationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UnhealthySince { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventStreamDestinationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIdentityResolutionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityResolutionJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMerging AutoMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportingLocation ExportingLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStats JobStats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IdentityResolutionJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIND_MATCHING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	/// <summary>
	/// The S3 location where Identity Resolution Jobs write result files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportingLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3ExportingLocation S3Exporting { get; set; }
	}
	
	/// <summary>
	/// The S3 location where Identity Resolution Jobs write result files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3ExportingLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyName { get; set; }
	}
	
	/// <summary>
	/// Statistics about the Identity Resolution Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobStats
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfProfilesReviewed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfMatchesFound { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfMergesDone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntegrationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectTypeNames ObjectTypeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsUnstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectTypeNames
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMatchesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset MatchGenerationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PotentialMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchItem[] Matches { get; set; }
	}
	
	/// <summary>
	/// The Match group object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MatchId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProfileIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ConfidenceScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProfileObjectTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowProfileCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceLastUpdatedTimestampFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldMap Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyMap Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProfileObjectTypeTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowProfileCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceLastUpdatedTimestampFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldMap Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyMap Keys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSimilarProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProfileIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MatchId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchType MatchType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RuleLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ConfidenceScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RULE_BASED_MATCHING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML_BASED_MATCHING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowMetrics Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPFLOW_INTEGRATION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPLIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
	}
	
	/// <summary>
	/// Structure to hold workflow attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppflowIntegrationWorkflowAttributes AppflowIntegration { get; set; }
	}
	
	/// <summary>
	/// Structure holding all <code>APPFLOW_INTEGRATION</code> specific workflow attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppflowIntegrationWorkflowAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceConnectorType SourceConnectorType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Generic object containing workflow execution metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppflowIntegrationWorkflowMetrics AppflowIntegration { get; set; }
	}
	
	/// <summary>
	/// Workflow specific execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppflowIntegrationWorkflowMetrics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RecordsProcessed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StepsCompleted { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalSteps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkflowStepsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowStepItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// List containing steps in workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowStepItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppflowIntegrationWorkflowStep AppflowIntegration { get; set; }
	}
	
	/// <summary>
	/// Workflow step details for <code>APPFLOW_INTEGRATION</code> workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppflowIntegrationWorkflowStep
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlowName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RecordsProcessed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BatchRecordsStartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BatchRecordsEndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountIntegrationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListIntegrationItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An integration in list of integrations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntegrationItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectTypeNames ObjectTypeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsUnstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCalculatedAttributeDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListCalculatedAttributeDefinitionItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of a single calculated attribute definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCalculatedAttributeDefinitionItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCalculatedAttributesForProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListCalculatedAttributeForProfileItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of a single calculated attribute for a profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCalculatedAttributeForProfileItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IsDataPartial { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListDomainItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object in a list that represents a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventStreamsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventStreamSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An instance of EventStream in a list of EventStreams.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventStreamSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventStreamName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventStreamArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventStreamState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StoppedSince { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationSummary DestinationSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Summary information about the Kinesis data stream
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DestinationSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventStreamDestinationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UnhealthySince { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIdentityResolutionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityResolutionJob[] IdentityResolutionJobsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the Identity Resolution Job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityResolutionJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityResolutionJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStats JobStats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportingLocation ExportingLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntegrationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListIntegrationItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectTypeTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListProfileObjectTypeTemplateItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A ProfileObjectTypeTemplate in a list of ProfileObjectTypeTemplates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectTypeTemplateItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceObject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListProfileObjectTypeItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A ProfileObjectType instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectTypeItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListProfileObjectsItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A ProfileObject in a list of ProfileObjects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectsItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileObjectUniqueKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRuleBasedMatchesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MatchIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkflowsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListWorkflowsItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A workflow in list of workflows.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkflowsItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StatusDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MergeProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeSourceIdMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutIntegrationResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectTypeNames ObjectTypeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsUnstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProfileObjectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileObjectUniqueKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProfileObjectTypeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowProfileCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceLastUpdatedTimestampFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldMap Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyMap Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Represents a field in a ProfileObjectType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectTypeField
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldContentType ContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_ADDRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 4,
	}
	
	/// <summary>
	/// An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectTypeKey
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StandardIdentifier[] StandardIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FieldNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StandardIdentifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIQUE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDARY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOOKUP_ONLY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_ONLY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Profile[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The standard profile of a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartyType PartyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Gender Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MobilePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PersonalEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address MailingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FoundByKeyValue[] FoundByItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartyTypeString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenderString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDIVIDUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Gender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMALE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 2,
	}
	
	/// <summary>
	/// A generic address associated with the customer that is not mailing, shipping, or billing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attributes
	{
	}
	
	/// <summary>
	/// A data type pair that consists of a <code>KeyName</code> and <code>Values</code> list that were used to find a profile returned in response to a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FoundByKeyValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// A data type pair that consists of a <code>KeyName</code> and <code>Values</code> list that is used in conjunction with the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html#customerprofiles-SearchProfiles-request-KeyName">KeyName</a> and <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html#customerprofiles-SearchProfiles-request-Values">Values</a> parameters to search for profiles using the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdditionalSearchKey
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCalculatedAttributeDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CalculatedAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Conditions Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeDetails AttributeDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDomainResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultEncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeadLetterQueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingResponse Matching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleBasedMatchingResponse RuleBasedMatching { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProfileResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddProfileKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCalculatedAttributeDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeDetails AttributeDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Conditions Conditions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// The flag that enables the matching process of duplicate profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSchedule JobSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMerging AutoMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	/// <summary>
	/// The request to enable the rule-based matching.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleBasedMatchingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingRule[] MatchingRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeTypesSelector AttributeTypesSelector { get; set; }
		
		/// <summary>
		/// How the auto-merging process should resolve conflicts between different profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolution ConflictResolution { get; set; }
		
		/// <summary>
		/// <p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note> <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you'll get an exception in the API response. For an example policy, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DefaultExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultEncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeadLetterQueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingRequest Matching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleBasedMatchingRequest RuleBasedMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEventStreamRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration data for integration workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegrationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppflowIntegration AppflowIntegration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateIntegrationWorkflowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IntegrationConfig IntegrationConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartyType PartyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Gender Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MobilePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PersonalEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address MailingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartyTypeString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenderString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteCalculatedAttributeDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEventStreamRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteIntegrationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileObjectUniqueKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileObjectTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWorkflowRequest
	{
	}
	
	/// <summary>
	/// A duplicate customer profile that is to be merged into a main profile. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldSourceProfileIds
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MobilePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PersonalEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MailingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeSourceIdMap Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAutoMergingPreviewRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Consolidation Consolidation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolution ConflictResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinAllowedConfidenceScoreForMerging { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCalculatedAttributeDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCalculatedAttributeForProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEventStreamRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIdentityResolutionJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetIntegrationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetMatchesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProfileObjectTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProfileObjectTypeTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSimilarProfilesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MatchType MatchType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SearchKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SearchValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkflowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkflowStepsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountIntegrationsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCalculatedAttributeDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCalculatedAttributesForProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventStreamsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIdentityResolutionJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIntegrationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectTypeTemplatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectTypesRequest
	{
	}
	
	/// <summary>
	/// The filter applied to <code>ListProfileObjects</code> response to include profile objects with the specified index values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfileObjectsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectFilter ObjectFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRuleBasedMatchesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkflowsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset QueryStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset QueryEndDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MergeProfilesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MainProfileId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ProfileIdsToBeMerged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldSourceProfileIds FieldSourceProfileIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperatorPropertiesKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPPER_BOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOWER_BOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_DATA_TYPE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_DATA_TYPE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ACTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_VALUE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK_LENGTH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUNCATE_LENGTH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATH_OPERATION_FIELDS_ORDER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCAT_FORMAT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBFIELD_CATEGORY_MAP = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutIntegrationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FlowDefinition FlowDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectTypeNames ObjectTypeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProfileObjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProfileObjectTypeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowProfileCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceLastUpdatedTimestampFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldMap Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyMap Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogicalOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchProfilesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalSearchKey[] AdditionalSearchKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogicalOperator LogicalOperator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	/// Updates associated with the address properties of a customer profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAttributes
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCalculatedAttributeDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Conditions Conditions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDomainRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultEncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeadLetterQueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingRequest Matching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleBasedMatchingRequest RuleBasedMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartyType PartyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Gender Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MobilePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PersonalEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAddress ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAddress MailingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAddress BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartyTypeString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenderString { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Associates a new key value with a specific profile, such as a Contact Record ContactId.</p> <p>A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.</p>
		/// AddProfileKey domains/{DomainName}/profiles/keys
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<AddProfileKeyResponse> AddProfileKeyAsync(string DomainName, AddProfileKeyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AddProfileKeyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new calculated attribute definition. After creation, new object data ingested into Customer Profiles will be included in the calculated attribute, which can be retrieved for a profile using the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetCalculatedAttributeForProfile.html">GetCalculatedAttributeForProfile</a> API. Defining a calculated attribute makes it available for all profiles within a domain. Each calculated attribute can only reference one <code>ObjectType</code> and at most, two fields from that <code>ObjectType</code>.
		/// CreateCalculatedAttributeDefinition domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="CalculatedAttributeName">The unique name of the calculated attribute.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateCalculatedAttributeDefinitionResponse> CreateCalculatedAttributeDefinitionAsync(string DomainName, string CalculatedAttributeName, CreateCalculatedAttributeDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/calculated-attributes/"+ (CalculatedAttributeName==null? "" : System.Uri.EscapeDataString(CalculatedAttributeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateCalculatedAttributeDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing calculated attribute definition. Note that deleting a default calculated attribute is possible, however once deleted, you will be unable to undo that action and will need to recreate it on your own using the CreateCalculatedAttributeDefinition API if you want it back.
		/// DeleteCalculatedAttributeDefinition domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="CalculatedAttributeName">The unique name of the calculated attribute.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteCalculatedAttributeDefinitionResponse> DeleteCalculatedAttributeDefinitionAsync(string DomainName, string CalculatedAttributeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/calculated-attributes/"+ (CalculatedAttributeName==null? "" : System.Uri.EscapeDataString(CalculatedAttributeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteCalculatedAttributeDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides more information on a calculated attribute definition for Customer Profiles.
		/// GetCalculatedAttributeDefinition domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="CalculatedAttributeName">The unique name of the calculated attribute.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCalculatedAttributeDefinitionResponse> GetCalculatedAttributeDefinitionAsync(string DomainName, string CalculatedAttributeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/calculated-attributes/"+ (CalculatedAttributeName==null? "" : System.Uri.EscapeDataString(CalculatedAttributeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCalculatedAttributeDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing calculated attribute definition. When updating the Conditions, note that increasing the date range of a calculated attribute will not trigger inclusion of historical data greater than the current date range.
		/// UpdateCalculatedAttributeDefinition domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="CalculatedAttributeName">The unique name of the calculated attribute.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateCalculatedAttributeDefinitionResponse> UpdateCalculatedAttributeDefinitionAsync(string DomainName, string CalculatedAttributeName, UpdateCalculatedAttributeDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/calculated-attributes/"+ (CalculatedAttributeName==null? "" : System.Uri.EscapeDataString(CalculatedAttributeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateCalculatedAttributeDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations.</p> <p>Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.</p> <p>Use this API or <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html">UpdateDomain</a> to enable <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">identity resolution</a>: set <code>Matching</code> to true.</p> <p>To prevent cross-service impersonation when you call this API, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html">Cross-service confused deputy prevention</a> for sample policies that you should apply. </p>
		/// CreateDomain domains/{DomainName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDomainResponse> CreateDomainAsync(string DomainName, CreateDomainPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateDomainResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.
		/// DeleteDomain domains/{DomainName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDomainResponse> DeleteDomainAsync(string DomainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteDomainResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific domain.
		/// GetDomain domains/{DomainName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDomainResponse> GetDomainAsync(string DomainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDomainResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key.</p> <p>After a domain is created, the name can’t be changed.</p> <p>Use this API or <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html">CreateDomain</a> to enable <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">identity resolution</a>: set <code>Matching</code> to true.</p> <p>To prevent cross-service impersonation when you call this API, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html">Cross-service confused deputy prevention</a> for sample policies that you should apply. </p> <p>To add or remove tags on an existing Domain, see <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html">TagResource</a>/<a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
		/// UpdateDomain domains/{DomainName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDomainResponse> UpdateDomainAsync(string DomainName, UpdateDomainPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateDomainResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an event stream, which is a subscription to real-time events, such as when profiles are created and updated through Amazon Connect Customer Profiles.</p> <p>Each event stream can be associated with only one Kinesis Data Stream destination in the same region and Amazon Web Services account as the customer profiles domain</p>
		/// CreateEventStream domains/{DomainName}/event-streams/{EventStreamName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="EventStreamName">The name of the event stream.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateEventStreamResponse> CreateEventStreamAsync(string DomainName, string EventStreamName, CreateEventStreamPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/event-streams/"+ (EventStreamName==null? "" : System.Uri.EscapeDataString(EventStreamName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateEventStreamResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables and deletes the specified event stream.
		/// DeleteEventStream domains/{DomainName}/event-streams/{EventStreamName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="EventStreamName">The name of the event stream
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteEventStreamResponse> DeleteEventStreamAsync(string DomainName, string EventStreamName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/event-streams/"+ (EventStreamName==null? "" : System.Uri.EscapeDataString(EventStreamName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteEventStreamResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified event stream in a specific domain.
		/// GetEventStream domains/{DomainName}/event-streams/{EventStreamName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="EventStreamName">The name of the event stream provided during create operations.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetEventStreamResponse> GetEventStreamAsync(string DomainName, string EventStreamName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/event-streams/"+ (EventStreamName==null? "" : System.Uri.EscapeDataString(EventStreamName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetEventStreamResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an integration workflow. An integration workflow is an async process which ingests historic data and sets up an integration for ongoing updates. The supported Amazon AppFlow sources are Salesforce, ServiceNow, and Marketo.
		/// CreateIntegrationWorkflow domains/{DomainName}/workflows/integrations
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateIntegrationWorkflowResponse> CreateIntegrationWorkflowAsync(string DomainName, CreateIntegrationWorkflowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/workflows/integrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateIntegrationWorkflowResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a standard profile.</p> <p>A standard profile represents the following attributes for a customer profile in a domain.</p>
		/// CreateProfile domains/{DomainName}/profiles
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateProfileResponse> CreateProfileAsync(string DomainName, CreateProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the properties of a profile. The ProfileId is required for updating a customer profile.</p> <p>When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.</p>
		/// UpdateProfile domains/{DomainName}/profiles
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProfileResponse> UpdateProfileAsync(string DomainName, UpdateProfilePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an integration from a specific domain.
		/// DeleteIntegration domains/{DomainName}/integrations/delete
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteIntegrationResponse> DeleteIntegrationAsync(string DomainName, DeleteIntegrationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/integrations/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteIntegrationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the standard customer profile and all data pertaining to the profile.
		/// DeleteProfile domains/{DomainName}/profiles/delete
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProfileResponse> DeleteProfileAsync(string DomainName, DeleteProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a searchable key from a customer profile.
		/// DeleteProfileKey domains/{DomainName}/profiles/keys/delete
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProfileKeyResponse> DeleteProfileKeyAsync(string DomainName, DeleteProfileKeyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/keys/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteProfileKeyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an object associated with a profile of a given ProfileObjectType.
		/// DeleteProfileObject domains/{DomainName}/profiles/objects/delete
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProfileObjectResponse> DeleteProfileObjectAsync(string DomainName, DeleteProfileObjectPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/objects/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteProfileObjectResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.
		/// DeleteProfileObjectType domains/{DomainName}/object-types/{ObjectTypeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="ObjectTypeName">The name of the profile object type.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProfileObjectTypeResponse> DeleteProfileObjectTypeAsync(string DomainName, string ObjectTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/object-types/"+ (ObjectTypeName==null? "" : System.Uri.EscapeDataString(ObjectTypeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteProfileObjectTypeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the object types for a specific domain.
		/// GetProfileObjectType domains/{DomainName}/object-types/{ObjectTypeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="ObjectTypeName">The name of the profile object type.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<GetProfileObjectTypeResponse> GetProfileObjectTypeAsync(string DomainName, string ObjectTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/object-types/"+ (ObjectTypeName==null? "" : System.Uri.EscapeDataString(ObjectTypeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetProfileObjectTypeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Defines a ProfileObjectType.</p> <p>To add or remove tags on an existing ObjectType, see <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html"> TagResource</a>/<a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>
		/// PutProfileObjectType domains/{DomainName}/object-types/{ObjectTypeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="ObjectTypeName">The name of the profile object type.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<PutProfileObjectTypeResponse> PutProfileObjectTypeAsync(string DomainName, string ObjectTypeName, PutProfileObjectTypePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/object-types/"+ (ObjectTypeName==null? "" : System.Uri.EscapeDataString(ObjectTypeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutProfileObjectTypeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified workflow and all its corresponding resources. This is an async process.
		/// DeleteWorkflow domains/{DomainName}/workflows/{WorkflowId}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="WorkflowId">Unique identifier for the workflow.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteWorkflowResponse> DeleteWorkflowAsync(string DomainName, string WorkflowId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/workflows/"+ (WorkflowId==null? "" : System.Uri.EscapeDataString(WorkflowId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteWorkflowResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of specified workflow.
		/// GetWorkflow domains/{DomainName}/workflows/{WorkflowId}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="WorkflowId">Unique identifier for the workflow.</param>
		/// <returns>Success</returns>
		public async Task<GetWorkflowResponse> GetWorkflowAsync(string DomainName, string WorkflowId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/workflows/"+ (WorkflowId==null? "" : System.Uri.EscapeDataString(WorkflowId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWorkflowResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list. </p> <p>You can't view which profiles are matched and would be merged.</p> <important> <p>We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include <b>at least</b> two matching attributes. If your matching list includes too few attributes (such as only <code>FirstName</code> or only <code>LastName</code>), there may be a large number of matches. This increases the chances of erroneous merges.</p> </important>
		/// GetAutoMergingPreview domains/{DomainName}/identity-resolution-jobs/auto-merging-preview
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAutoMergingPreviewResponse> GetAutoMergingPreviewAsync(string DomainName, GetAutoMergingPreviewPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/identity-resolution-jobs/auto-merging-preview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAutoMergingPreviewResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a calculated attribute for a customer profile.
		/// GetCalculatedAttributeForProfile domains/{DomainName}/profile/{ProfileId}/calculated-attributes/{CalculatedAttributeName}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="ProfileId">The unique identifier of a customer profile.</param>
		/// <param name="CalculatedAttributeName">The unique name of the calculated attribute.
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCalculatedAttributeForProfileResponse> GetCalculatedAttributeForProfileAsync(string DomainName, string ProfileId, string CalculatedAttributeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profile/"+ (ProfileId==null? "" : System.Uri.EscapeDataString(ProfileId))+"/calculated-attributes/"+ (CalculatedAttributeName==null? "" : System.Uri.EscapeDataString(CalculatedAttributeName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCalculatedAttributeForProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about an Identity Resolution Job in a specific domain. </p> <p>Identity Resolution Jobs are set up using the Amazon Connect admin console. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/use-identity-resolution.html">Use Identity Resolution to consolidate similar profiles</a>.</p>
		/// GetIdentityResolutionJob domains/{DomainName}/identity-resolution-jobs/{JobId}
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="JobId">The unique identifier of the Identity Resolution Job.</param>
		/// <returns>Success</returns>
		public async Task<GetIdentityResolutionJobResponse> GetIdentityResolutionJobAsync(string DomainName, string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/identity-resolution-jobs/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetIdentityResolutionJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an integration for a domain.
		/// GetIntegration domains/{DomainName}/integrations
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetIntegrationResponse> GetIntegrationAsync(string DomainName, GetIntegrationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/integrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetIntegrationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the integrations in your domain.
		/// ListIntegrations domains/{DomainName}/integrations
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="next_token">The pagination token from the previous ListIntegrations API call.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="include_hidden">Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</param>
		/// <returns>Success</returns>
		public async Task<ListIntegrationsResponse> ListIntegrationsAsync(string DomainName, string next_token, int max_results, bool include_hidden, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/integrations&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&include-hidden="+include_hidden;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIntegrationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect.</p> <p>An integration can belong to only one domain.</p> <p>To add or remove tags on an existing Integration, see <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html"> TagResource </a>/<a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html"> UntagResource</a>.</p>
		/// PutIntegration domains/{DomainName}/integrations
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<PutIntegrationResponse> PutIntegrationAsync(string DomainName, PutIntegrationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/integrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutIntegrationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Before calling this API, use <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html">CreateDomain</a> or <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html">UpdateDomain</a> to enable identity resolution: set <code>Matching</code> to true.</p> <p>GetMatches returns potentially matching profiles, based on the results of the latest run of a machine learning process. </p> <important> <p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p> </important> <p>Amazon Connect uses the following profile attributes to identify matches:</p> <ul> <li> <p>PhoneNumber</p> </li> <li> <p>HomePhoneNumber</p> </li> <li> <p>BusinessPhoneNumber</p> </li> <li> <p>MobilePhoneNumber</p> </li> <li> <p>EmailAddress</p> </li> <li> <p>PersonalEmailAddress</p> </li> <li> <p>BusinessEmailAddress</p> </li> <li> <p>FullName</p> </li> </ul> <p>For example, two or more profiles—with spelling mistakes such as <b>John Doe</b> and <b>Jhn Doe</b>, or different casing email addresses such as <b>JOHN_DOE@ANYCOMPANY.COM</b> and <b>johndoe@anycompany.com</b>, or different phone number formats such as <b>555-010-0000</b> and <b>+1-555-010-0000</b>—can be detected as belonging to the same customer <b>John Doe</b> and merged into a unified profile.</p>
		/// GetMatches domains/{DomainName}/matches
		/// </summary>
		/// <param name="next_token">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMatchesResponse> GetMatchesAsync(string next_token, int max_results, string DomainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/matches?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetMatchesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a set of profiles that belong to the same matching group using the <code>matchId</code> or <code>profileId</code>. You can also specify the type of matching that you want for finding similar profiles using either <code>RULE_BASED_MATCHING</code> or <code>ML_BASED_MATCHING</code>.
		/// GetSimilarProfiles domains/{DomainName}/matches
		/// </summary>
		/// <param name="next_token">The pagination token from the previous <code>GetSimilarProfiles</code> API call.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSimilarProfilesResponse> GetSimilarProfilesAsync(string next_token, int max_results, string DomainName, GetSimilarProfilesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/matches?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSimilarProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the template information for a specific object type.</p> <p>A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.</p>
		/// GetProfileObjectTypeTemplate templates/{TemplateId}
		/// </summary>
		/// <param name="TemplateId">A unique identifier for the object template.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<GetProfileObjectTypeTemplateResponse> GetProfileObjectTypeTemplateAsync(string TemplateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/"+ (TemplateId==null? "" : System.Uri.EscapeDataString(TemplateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetProfileObjectTypeTemplateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get granular list of steps in workflow.
		/// GetWorkflowSteps domains/{DomainName}/workflows/{WorkflowId}/steps
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="WorkflowId">Unique identifier for the workflow.</param>
		/// <param name="next_token">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWorkflowStepsResponse> GetWorkflowStepsAsync(string DomainName, string WorkflowId, string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/workflows/"+ (WorkflowId==null? "" : System.Uri.EscapeDataString(WorkflowId))+"/steps&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWorkflowStepsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the integrations associated to a specific URI in the AWS account.
		/// ListAccountIntegrations integrations
		/// </summary>
		/// <param name="next_token">The pagination token from the previous ListAccountIntegrations API call.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="include_hidden">Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.</param>
		/// <returns>Success</returns>
		public async Task<ListAccountIntegrationsResponse> ListAccountIntegrationsAsync(string next_token, int max_results, bool include_hidden, ListAccountIntegrationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "integrations?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&include-hidden="+include_hidden;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAccountIntegrationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists calculated attribute definitions for Customer Profiles
		/// ListCalculatedAttributeDefinitions domains/{DomainName}/calculated-attributes
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="next_token">The pagination token from the previous call to ListCalculatedAttributeDefinitions.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of calculated attribute definitions returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListCalculatedAttributeDefinitionsResponse> ListCalculatedAttributeDefinitionsAsync(string DomainName, string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/calculated-attributes&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCalculatedAttributeDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of calculated attributes for a customer profile.
		/// ListCalculatedAttributesForProfile domains/{DomainName}/profile/{ProfileId}/calculated-attributes
		/// </summary>
		/// <param name="next_token">The pagination token from the previous call to ListCalculatedAttributesForProfile.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of calculated attributes returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="ProfileId">The unique identifier of a customer profile.</param>
		/// <returns>Success</returns>
		public async Task<ListCalculatedAttributesForProfileResponse> ListCalculatedAttributesForProfileAsync(string next_token, int max_results, string DomainName, string ProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profile/"+ (ProfileId==null? "" : System.Uri.EscapeDataString(ProfileId))+"/calculated-attributes?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCalculatedAttributesForProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all the domains for an AWS account that have been created.
		/// ListDomains domains
		/// </summary>
		/// <param name="next_token">The pagination token from the previous ListDomain API call.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDomainsResponse> ListDomainsAsync(string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDomainsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all the event streams in a specific domain.
		/// ListEventStreams domains/{DomainName}/event-streams
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="next_token">Identifies the next page of results to return.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEventStreamsResponse> ListEventStreamsAsync(string DomainName, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/event-streams&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEventStreamsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the Identity Resolution Jobs in your domain. The response sorts the list by <code>JobStartTime</code>.
		/// ListIdentityResolutionJobs domains/{DomainName}/identity-resolution-jobs
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="next_token">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListIdentityResolutionJobsResponse> ListIdentityResolutionJobsAsync(string DomainName, string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/identity-resolution-jobs&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIdentityResolutionJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the template information for object types.
		/// ListProfileObjectTypeTemplates templates
		/// </summary>
		/// <param name="next_token">The pagination token from the previous ListObjectTypeTemplates API call.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListProfileObjectTypeTemplatesResponse> ListProfileObjectTypeTemplatesAsync(string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProfileObjectTypeTemplatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the templates available within the service.
		/// ListProfileObjectTypes domains/{DomainName}/object-types
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="next_token">Identifies the next page of results to return.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListProfileObjectTypesResponse> ListProfileObjectTypesAsync(string DomainName, string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/object-types&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProfileObjectTypesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of objects associated with a profile of a given ProfileObjectType.
		/// ListProfileObjects domains/{DomainName}/profiles/objects
		/// </summary>
		/// <param name="next_token">The pagination token from the previous call to ListProfileObjects.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of objects returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<ListProfileObjectsResponse> ListProfileObjectsAsync(string next_token, int max_results, string DomainName, ListProfileObjectsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/objects?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProfileObjectsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds additional objects to customer profiles of a given ObjectType.</p> <p>When adding a specific profile object, like a Contact Record, an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional Contact Records with the same phone number will be mapped to the same inferred profile.</p> <p>When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition.</p> <p>PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.</p>
		/// PutProfileObject domains/{DomainName}/profiles/objects
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<PutProfileObjectResponse> PutProfileObjectAsync(string DomainName, PutProfileObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/objects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutProfileObjectResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a set of <code>MatchIds</code> that belong to the given domain.
		/// ListRuleBasedMatches domains/{DomainName}/profiles/ruleBasedMatches
		/// </summary>
		/// <param name="next_token">The pagination token from the previous <code>ListRuleBasedMatches</code> API call.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of <code>MatchIds</code> returned per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<ListRuleBasedMatchesResponse> ListRuleBasedMatchesAsync(string next_token, int max_results, string DomainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/ruleBasedMatches?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRuleBasedMatchesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource for which you want to view tags.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.</p> <p>Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters.</p> <p>You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource.</p>
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource that you're adding tags to.
		/// Max length: 256
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query to list all workflows.
		/// ListWorkflows domains/{DomainName}/workflows
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="next_token">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results">The maximum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListWorkflowsResponse> ListWorkflowsAsync(string DomainName, string next_token, int max_results, ListWorkflowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/workflows&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkflowsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Runs an AWS Lambda job that does the following:</p> <ol> <li> <p>All the profileKeys in the <code>ProfileToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>All the objects in the <code>ProfileToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>All the <code>ProfileToBeMerged</code> will be deleted at the end.</p> </li> <li> <p>All the profileKeys in the <code>ProfileIdsToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>Standard fields are merged as follows:</p> <ol> <li> <p>Fields are always "union"-ed if there are no conflicts in standard fields or attributeKeys.</p> </li> <li> <p>When there are conflicting fields:</p> <ol> <li> <p>If no <code>SourceProfileIds</code> entry is specified, the main Profile value is always taken. </p> </li> <li> <p>If a <code>SourceProfileIds</code> entry is specified, the specified profileId is always taken, even if it is a NULL value.</p> </li> </ol> </li> </ol> </li> </ol> <p>You can use MergeProfiles together with <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a>, which returns potentially matching profiles, or use it with the results of another matching system. After profiles have been merged, they cannot be separated (unmerged).</p>
		/// MergeProfiles domains/{DomainName}/profiles/objects/merge
		/// </summary>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<MergeProfilesResponse> MergeProfilesAsync(string DomainName, MergeProfilesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/objects/merge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MergeProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Searches for profiles within a specific domain using one or more predefined search keys (e.g., _fullName, _phone, _email, _account, etc.) and/or custom-defined search keys. A search key is a data type pair that consists of a <code>KeyName</code> and <code>Values</code> list.</p> <p>This operation supports searching for profiles with a minimum of 1 key-value(s) pair and up to 5 key-value(s) pairs using either <code>AND</code> or <code>OR</code> logic.</p>
		/// SearchProfiles domains/{DomainName}/profiles/search
		/// </summary>
		/// <param name="next_token">The pagination token from the previous SearchProfiles API call.
		/// Min length: 1
		/// Max length: 1024
		// </param>
		/// <param name="max_results"><p>The maximum number of objects returned per page.</p> <p>The default is 20 if this parameter is not included in the request.</p>
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="DomainName">The unique name of the domain.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<SearchProfilesResponse> SearchProfilesAsync(string next_token, int max_results, string DomainName, SearchProfilesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/"+ (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"/profiles/search?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource from which you are removing tags.
		/// Max length: 256
		// </param>
		/// <param name="tagKeys">The list of tag keys to remove from the resource.
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AddProfileKeyPostBody
	{
		
		/// <summary>
		/// The unique identifier of a customer profile.
		/// Required
		/// Pattern: [a-f0-9]{32}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-f0-9]{32}")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// A searchable identifier of a customer profile. The predefined keys you can use include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// A list of key values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	public class CreateCalculatedAttributeDefinitionPostBody
	{
		
		/// <summary>
		/// The display name of the calculated attribute.
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z_][a-zA-Z_0-9-\s]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z_][a-zA-Z_0-9-\s]*$")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The description of the calculated attribute.
		/// Min length: 1
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Mathematical expression and a list of attribute items specified in that expression.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateCalculatedAttributeDefinitionPostBodyAttributeDetails AttributeDetails { get; set; }
		
		/// <summary>
		/// The conditions including range, object count, and threshold for the calculated attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateCalculatedAttributeDefinitionPostBodyConditions Conditions { get; set; }
		
		/// <summary>
		/// The aggregation operation to perform for the calculated attribute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Statistic Statistic { get; set; }
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateCalculatedAttributeDefinitionPostBodyAttributeDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeItem[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
	}
	
	public class CreateCalculatedAttributeDefinitionPostBodyConditions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Range Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ObjectCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Threshold Threshold { get; set; }
	}
	
	public class UpdateCalculatedAttributeDefinitionPutBody
	{
		
		/// <summary>
		/// The display name of the calculated attribute.
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z_][a-zA-Z_0-9-\s]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z_][a-zA-Z_0-9-\s]*$")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The description of the calculated attribute.
		/// Min length: 1
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// The conditions including range, object count, and threshold for the calculated attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateCalculatedAttributeDefinitionPutBodyConditions Conditions { get; set; }
	}
	
	public class UpdateCalculatedAttributeDefinitionPutBodyConditions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Range Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ObjectCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Threshold Threshold { get; set; }
	}
	
	public class CreateDomainPostBody
	{
		
		/// <summary>
		/// The default number of days until the data within the domain expires.
		/// Required
		/// Minimum: 1
		/// Maximum: 1098
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1098)]
		public int DefaultExpirationDays { get; set; }
		
		/// <summary>
		/// The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DefaultEncryptionKey { get; set; }
		
		/// <summary>
		/// The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DeadLetterQueueUrl { get; set; }
		
		/// <summary>
		/// The flag that enables the matching process of duplicate profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDomainPostBodyMatching Matching { get; set; }
		
		/// <summary>
		/// The request to enable the rule-based matching.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDomainPostBodyRuleBasedMatching RuleBasedMatching { get; set; }
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateDomainPostBodyMatching
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSchedule JobSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMerging AutoMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	public class CreateDomainPostBodyRuleBasedMatching
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingRule[] MatchingRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeTypesSelector AttributeTypesSelector { get; set; }
		
		/// <summary>
		/// How the auto-merging process should resolve conflicts between different profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolution ConflictResolution { get; set; }
		
		/// <summary>
		/// <p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note> <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you'll get an exception in the API response. For an example policy, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	public class UpdateDomainPutBody
	{
		
		/// <summary>
		/// The default number of days until the data within the domain expires.
		/// Minimum: 1
		/// Maximum: 1098
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1098)]
		public System.Nullable<System.Int32> DefaultExpirationDays { get; set; }
		
		/// <summary>
		/// The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DefaultEncryptionKey { get; set; }
		
		/// <summary>
		/// The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DeadLetterQueueUrl { get; set; }
		
		/// <summary>
		/// The flag that enables the matching process of duplicate profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDomainPutBodyMatching Matching { get; set; }
		
		/// <summary>
		/// The request to enable the rule-based matching.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDomainPutBodyRuleBasedMatching RuleBasedMatching { get; set; }
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class UpdateDomainPutBodyMatching
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSchedule JobSchedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoMerging AutoMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	public class UpdateDomainPutBodyRuleBasedMatching
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchingRule[] MatchingRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMerging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAllowedRuleLevelForMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeTypesSelector AttributeTypesSelector { get; set; }
		
		/// <summary>
		/// How the auto-merging process should resolve conflicts between different profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolution ConflictResolution { get; set; }
		
		/// <summary>
		/// <p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note> <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you'll get an exception in the API response. For an example policy, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportingConfig ExportingConfig { get; set; }
	}
	
	public class CreateEventStreamPostBody
	{
		
		/// <summary>
		/// The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Uri { get; set; }
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateIntegrationWorkflowPostBody
	{
		
		/// <summary>
		/// The type of workflow. The only supported value is APPFLOW_INTEGRATION.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Configuration data for integration workflow.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateIntegrationWorkflowPostBodyIntegrationConfig IntegrationConfig { get; set; }
		
		/// <summary>
		/// The name of the profile object type.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z_][a-zA-Z_0-9-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z_][a-zA-Z_0-9-]*$")]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.
		/// Required
		/// Max length: 512
		/// Pattern: arn:aws:iam:.*:[0-9]+:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws:iam:.*:[0-9]+:.*")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateIntegrationWorkflowPostBodyIntegrationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppflowIntegration AppflowIntegration { get; set; }
	}
	
	public class CreateProfilePostBody
	{
		
		/// <summary>
		/// A unique account number that you have given to the customer.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Any additional information relevant to the customer’s profile.
		/// Min length: 1
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AdditionalInformation { get; set; }
		
		/// <summary>
		/// The type of profile used to describe the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PartyType PartyType { get; set; }
		
		/// <summary>
		/// The name of the customer’s business.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BusinessName { get; set; }
		
		/// <summary>
		/// The customer’s first name.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The customer’s middle name.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The customer’s last name.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LastName { get; set; }
		
		/// <summary>
		/// The customer’s birth date. 
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BirthDate { get; set; }
		
		/// <summary>
		/// The gender with which the customer identifies. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Gender Gender { get; set; }
		
		/// <summary>
		/// The customer’s phone number, which has not been specified as a mobile, home, or business number. 
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s mobile phone number.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobilePhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s home phone number.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HomePhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s business phone number.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BusinessPhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s email address, which has not been specified as a personal or business address. 
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The customer’s personal email address.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PersonalEmailAddress { get; set; }
		
		/// <summary>
		/// The customer’s business email address.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BusinessEmailAddress { get; set; }
		
		/// <summary>
		/// A generic address associated with the customer that is not mailing, shipping, or billing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProfilePostBodyAddress Address { get; set; }
		
		/// <summary>
		/// A generic address associated with the customer that is not mailing, shipping, or billing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProfilePostBodyShippingAddress ShippingAddress { get; set; }
		
		/// <summary>
		/// A generic address associated with the customer that is not mailing, shipping, or billing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProfilePostBodyMailingAddress MailingAddress { get; set; }
		
		/// <summary>
		/// A generic address associated with the customer that is not mailing, shipping, or billing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProfilePostBodyBillingAddress BillingAddress { get; set; }
		
		/// <summary>
		/// A key value pair of attributes of a customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// An alternative to <code>PartyType</code> which accepts any string as input.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartyTypeString { get; set; }
		
		/// <summary>
		/// An alternative to <code>Gender</code> which accepts any string as input.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GenderString { get; set; }
	}
	
	public class CreateProfilePostBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class CreateProfilePostBodyShippingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class CreateProfilePostBodyMailingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class CreateProfilePostBodyBillingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class UpdateProfilePutBody
	{
		
		/// <summary>
		/// The unique identifier of a customer profile.
		/// Required
		/// Pattern: [a-f0-9]{32}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-f0-9]{32}")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// Any additional information relevant to the customer’s profile.
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string AdditionalInformation { get; set; }
		
		/// <summary>
		/// A unique account number that you have given to the customer.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The type of profile used to describe the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PartyType PartyType { get; set; }
		
		/// <summary>
		/// The name of the customer’s business.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BusinessName { get; set; }
		
		/// <summary>
		/// The customer’s first name.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The customer’s middle name.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The customer’s last name.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string LastName { get; set; }
		
		/// <summary>
		/// The customer’s birth date. 
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BirthDate { get; set; }
		
		/// <summary>
		/// The gender with which the customer identifies. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Gender Gender { get; set; }
		
		/// <summary>
		/// The customer’s phone number, which has not been specified as a mobile, home, or business number. 
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s mobile phone number.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MobilePhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s home phone number.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string HomePhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s business phone number.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BusinessPhoneNumber { get; set; }
		
		/// <summary>
		/// The customer’s email address, which has not been specified as a personal or business address. 
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// The customer’s personal email address.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PersonalEmailAddress { get; set; }
		
		/// <summary>
		/// The customer’s business email address.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string BusinessEmailAddress { get; set; }
		
		/// <summary>
		/// Updates associated with the address properties of a customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateProfilePutBodyAddress Address { get; set; }
		
		/// <summary>
		/// Updates associated with the address properties of a customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateProfilePutBodyShippingAddress ShippingAddress { get; set; }
		
		/// <summary>
		/// Updates associated with the address properties of a customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateProfilePutBodyMailingAddress MailingAddress { get; set; }
		
		/// <summary>
		/// Updates associated with the address properties of a customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateProfilePutBodyBillingAddress BillingAddress { get; set; }
		
		/// <summary>
		/// A key value pair of attributes of a customer profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// An alternative to <code>PartyType</code> which accepts any string as input.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartyTypeString { get; set; }
		
		/// <summary>
		/// An alternative to <code>Gender</code> which accepts any string as input.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string GenderString { get; set; }
	}
	
	public class UpdateProfilePutBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class UpdateProfilePutBodyShippingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class UpdateProfilePutBodyMailingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class UpdateProfilePutBodyBillingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Province { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public class DeleteIntegrationPostBody
	{
		
		/// <summary>
		/// The URI of the S3 bucket or any other type of data source.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Uri { get; set; }
	}
	
	public class DeleteProfilePostBody
	{
		
		/// <summary>
		/// The unique identifier of a customer profile.
		/// Required
		/// Pattern: [a-f0-9]{32}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-f0-9]{32}")]
		public string ProfileId { get; set; }
	}
	
	public class DeleteProfileKeyPostBody
	{
		
		/// <summary>
		/// The unique identifier of a customer profile.
		/// Required
		/// Pattern: [a-f0-9]{32}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-f0-9]{32}")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// A searchable identifier of a customer profile.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// A list of key values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	public class DeleteProfileObjectPostBody
	{
		
		/// <summary>
		/// The unique identifier of a customer profile.
		/// Required
		/// Pattern: [a-f0-9]{32}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-f0-9]{32}")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// The unique identifier of the profile object generated by the service.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ProfileObjectUniqueKey { get; set; }
		
		/// <summary>
		/// The name of the profile object type.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z_][a-zA-Z_0-9-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z_][a-zA-Z_0-9-]*$")]
		public string ObjectTypeName { get; set; }
	}
	
	public class PutProfileObjectTypePutBody
	{
		
		/// <summary>
		/// Description of the profile object type.
		/// Required
		/// Min length: 1
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string TemplateId { get; set; }
		
		/// <summary>
		/// The number of days until the data in the object expires.
		/// Minimum: 1
		/// Maximum: 1098
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1098)]
		public System.Nullable<System.Int32> ExpirationDays { get; set; }
		
		/// <summary>
		/// The customer-provided key to encrypt the profile object that will be created in this profile object type.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string EncryptionKey { get; set; }
		
		/// <summary>
		/// Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowProfileCreation { get; set; }
		
		/// <summary>
		/// The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. 
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SourceLastUpdatedTimestampFormat { get; set; }
		
		/// <summary>
		/// A map of the name and ObjectType field.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, ObjectTypeField> Fields { get; set; }
		
		/// <summary>
		/// A list of unique keys that can be used to map data to the profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, ObjectTypeKey[]> Keys { get; set; }
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class GetAutoMergingPreviewPostBody
	{
		
		/// <summary>
		/// The matching criteria to be used during the auto-merging process. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetAutoMergingPreviewPostBodyConsolidation Consolidation { get; set; }
		
		/// <summary>
		/// How the auto-merging process should resolve conflicts between different profiles.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetAutoMergingPreviewPostBodyConflictResolution ConflictResolution { get; set; }
		
		/// <summary>
		/// Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> MinAllowedConfidenceScoreForMerging { get; set; }
	}
	
	public class GetAutoMergingPreviewPostBodyConsolidation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[][] MatchingAttributesList { get; set; }
	}
	
	public class GetAutoMergingPreviewPostBodyConflictResolution
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConflictResolvingModel ConflictResolvingModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
	}
	
	public class GetIntegrationPostBody
	{
		
		/// <summary>
		/// The URI of the S3 bucket or any other type of data source.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Uri { get; set; }
	}
	
	public class PutIntegrationPutBody
	{
		
		/// <summary>
		/// The URI of the S3 bucket or any other type of data source.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Uri { get; set; }
		
		/// <summary>
		/// The name of the profile object type.
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z_][a-zA-Z_0-9-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z_][a-zA-Z_0-9-]*$")]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationPutBodyFlowDefinition FlowDefinition { get; set; }
		
		/// <summary>
		/// A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> ObjectTypeNames { get; set; }
	}
	
	public class PutIntegrationPutBodyFlowDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceFlowConfig SourceFlowConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Task_[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TriggerConfig TriggerConfig { get; set; }
	}
	
	public class GetSimilarProfilesPostBody
	{
		
		/// <summary>
		/// Specify the type of matching to get similar profiles for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MatchType MatchType { get; set; }
		
		/// <summary>
		/// The string indicating the search key to be used.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SearchKey { get; set; }
		
		/// <summary>
		/// The string based on <code>SearchKey</code> to be searched for similar profiles.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SearchValue { get; set; }
	}
	
	public class ListAccountIntegrationsPostBody
	{
		
		/// <summary>
		/// The URI of the S3 bucket or any other type of data source.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Uri { get; set; }
	}
	
	public class ListProfileObjectsPostBody
	{
		
		/// <summary>
		/// The name of the profile object type.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z_][a-zA-Z_0-9-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z_][a-zA-Z_0-9-]*$")]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// The unique identifier of a customer profile.
		/// Required
		/// Pattern: [a-f0-9]{32}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-f0-9]{32}")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// The filter applied to <code>ListProfileObjects</code> response to include profile objects with the specified index values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListProfileObjectsPostBodyObjectFilter ObjectFilter { get; set; }
	}
	
	public class ListProfileObjectsPostBodyObjectFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	public class PutProfileObjectPutBody
	{
		
		/// <summary>
		/// The name of the profile object type.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// Pattern: ^[a-zA-Z_][a-zA-Z_0-9-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z_][a-zA-Z_0-9-]*$")]
		public string ObjectTypeName { get; set; }
		
		/// <summary>
		/// A string that is serialized from a JSON object.
		/// Required
		/// Min length: 1
		/// Max length: 256000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256000)]
		public string Object { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags used to organize, track, or control access for this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListWorkflowsPostBody
	{
		
		/// <summary>
		/// The type of workflow. The only supported value is APPFLOW_INTEGRATION.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Status of workflow execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		/// <summary>
		/// Retrieve workflows started after timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> QueryStartDate { get; set; }
		
		/// <summary>
		/// Retrieve workflows ended after timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> QueryEndDate { get; set; }
	}
	
	public class MergeProfilesPostBody
	{
		
		/// <summary>
		/// The identifier of the profile to be taken.
		/// Required
		/// Pattern: [a-f0-9]{32}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-f0-9]{32}")]
		public string MainProfileId { get; set; }
		
		/// <summary>
		/// The identifier of the profile to be merged into MainProfileId.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string[] ProfileIdsToBeMerged { get; set; }
		
		/// <summary>
		/// A duplicate customer profile that is to be merged into a main profile. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MergeProfilesPostBodyFieldSourceProfileIds FieldSourceProfileIds { get; set; }
	}
	
	public class MergeProfilesPostBodyFieldSourceProfileIds
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BirthDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MobilePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PersonalEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BusinessEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MailingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeSourceIdMap Attributes { get; set; }
	}
	
	public class SearchProfilesPostBody
	{
		
		/// <summary>
		/// A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_-]+$")]
		public string KeyName { get; set; }
		
		/// <summary>
		/// A list of key values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
		
		/// <summary>
		/// A list of <code>AdditionalSearchKey</code> objects that are each searchable identifiers of a profile. Each <code>AdditionalSearchKey</code> object contains a <code>KeyName</code> and a list of <code>Values</code> associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the <code>LogicalOperator</code> and the required <code>KeyName</code> and <code>Values</code> parameters to search for profiles that satisfy the search criteria. 
		/// Minimum items: 1
		/// Maximum items: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public AdditionalSearchKey[] AdditionalSearchKeys { get; set; }
		
		/// <summary>
		/// <p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogicalOperator LogicalOperator { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
