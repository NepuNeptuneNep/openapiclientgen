//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AbortMultipartReadSetUploadResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotSupportedOperationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteReadSetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ReadSetBatchError[] Errors { get; set; }
	}
	
	/// <summary>
	/// An error from a batch read set operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadSetBatchError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelAnnotationImportResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelVariantImportResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteMultipartReadSetUploadResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readSetId")]
		public string ReadSetId { get; set; }
	}
	
	/// <summary>
	///  Part of the response to the CompleteReadSetUpload API, including metadata. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteReadSetUploadPartListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public int PartNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partSource")]
		public ReadSetPartSource PartSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetPartSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAnnotationStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeFormat")]
		public StoreFormat StoreFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeOptions")]
		public StoreOptions StoreOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// A genome reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StoreFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCF = 2,
	}
	
	/// <summary>
	/// Settings for a store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StoreOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="tsvStoreOptions")]
		public TsvStoreOptions TsvStoreOptions { get; set; }
	}
	
	/// <summary>
	/// File settings for a TSV store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TsvStoreOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotationType")]
		public AnnotationType AnnotationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatToHeader")]
		public FormatToHeader FormatToHeader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public SchemaItem[] Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AnnotationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHR_POS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHR_POS_REF_ALT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHR_START_END_ONE_BASE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHR_START_END_REF_ALT_ONE_BASE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHR_START_END_ZERO_BASE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHR_START_END_REF_ALT_ZERO_BASE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FormatToHeader
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaItem
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMultipartReadSetUploadResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFileType")]
		public FileType SourceFileType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FASTQ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRAM = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReferenceStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// Server-side encryption (SSE) settings for a store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SseConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRunGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSequenceStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fallbackLocation")]
		public string FallbackLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateVariantStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkflowStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 5,
	}
	
	/// <summary>
	/// A workflow parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public System.Nullable<System.Boolean> Optional { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAnnotationStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReferenceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReferenceStoreResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSequenceStoreResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteVariantStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAnnotationImportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AnnotationImportItemDetail[] Items { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public bool RunLeftNormalization { get; set; }
		
		/// <summary>
		/// Formatting options for a file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formatOptions")]
		public FormatOptions FormatOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public AnnotationFieldMap AnnotationFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_WITH_FAILURES = 5,
	}
	
	/// <summary>
	/// Details about an imported annotation item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnnotationImportItemDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobStatus")]
		public JobStatus JobStatus { get; set; }
	}
	
	/// <summary>
	/// Formatting options for a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FormatOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="tsvOptions")]
		public TsvOptions TsvOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcfOptions")]
		public VcfOptions VcfOptions { get; set; }
	}
	
	/// <summary>
	/// Formatting options for a TSV file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TsvOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="readOptions")]
		public ReadOptions ReadOptions { get; set; }
	}
	
	/// <summary>
	/// Read options for an annotation import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="sep")]
		public string Sep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public string Encoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quote")]
		public string Quote { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quoteAll")]
		public System.Nullable<System.Boolean> QuoteAll { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="escape")]
		public string Escape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="escapeQuotes")]
		public System.Nullable<System.Boolean> EscapeQuotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public System.Nullable<System.Boolean> Header { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineSep")]
		public string LineSep { get; set; }
	}
	
	/// <summary>
	/// Formatting options for a VCF file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VcfOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="ignoreQualField")]
		public System.Nullable<System.Boolean> IgnoreQualField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreFilterField")]
		public System.Nullable<System.Boolean> IgnoreFilterField { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnnotationFieldMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAnnotationStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeArn")]
		public string StoreArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeOptions")]
		public StoreOptions StoreOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeFormat")]
		public StoreFormat StoreFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeSizeBytes")]
		public int StoreSizeBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RangeNotSatisfiableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetActivationJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public ActivateReadSetSourceItem[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetActivationJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_WITH_FAILURES = 6,
	}
	
	/// <summary>
	/// A source for a read set activation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateReadSetSourceItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readSetId")]
		public string ReadSetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetActivationJobItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetExportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readSets")]
		public ExportReadSetDetail[] ReadSets { get; set; }
	}
	
	/// <summary>
	/// Details about a read set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportReadSetDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetImportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public ImportReadSetSourceItem[] Sources { get; set; }
	}
	
	/// <summary>
	/// A source for an import read set job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportReadSetSourceItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFiles")]
		public SourceFiles SourceFiles { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFileType")]
		public FileType SourceFileType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Source files for a sequence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceFiles
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source1")]
		public string Source1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source2")]
		public string Source2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public FileType FileType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequenceInformation")]
		public SequenceInformation SequenceInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public ReadSetFiles Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationType")]
		public CreationType CreationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING_UPLOAD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD_FAILED = 6,
	}
	
	/// <summary>
	/// Details about a sequence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SequenceInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalReadCount")]
		public System.Nullable<System.Int32> TotalReadCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalBaseCount")]
		public System.Nullable<System.Int32> TotalBaseCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public string Alignment { get; set; }
	}
	
	/// <summary>
	/// Files in a read set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadSetFiles
	{
		
		[System.Runtime.Serialization.DataMember(Name="source1")]
		public FileInformation Source1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source2")]
		public FileInformation Source2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public FileInformation Index { get; set; }
	}
	
	/// <summary>
	/// Details about a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalParts")]
		public System.Nullable<System.Int32> TotalParts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partSize")]
		public System.Nullable<System.Int32> PartSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public System.Nullable<System.Int32> ContentLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceImportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceStoreId")]
		public string ReferenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public ImportReferenceSourceItem[] Sources { get; set; }
	}
	
	/// <summary>
	/// An genome reference source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportReferenceSourceItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceFile")]
		public string SourceFile { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceMetadataResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceStoreId")]
		public string ReferenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReferenceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public ReferenceFiles Files { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReferenceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 2,
	}
	
	/// <summary>
	/// A set of genome reference files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceFiles
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public FileInformation Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public FileInformation Index { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRunResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RunStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runGroupId")]
		public string RunGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public RunParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageCapacity")]
		public System.Nullable<System.Int32> StorageCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputUri")]
		public string OutputUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public RunLogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDigests")]
		public RunResourceDigests ResourceDigests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedBy")]
		public string StartedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopTime")]
		public System.DateTimeOffset StopTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public Accelerators Accelerators { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY2RUN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RunLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunResourceDigests
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Accelerators
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GPU = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RunExport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFINITION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRunGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCpus")]
		public System.Nullable<System.Int32> MaxCpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxRuns")]
		public System.Nullable<System.Int32> MaxRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDuration")]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGpus")]
		public System.Nullable<System.Int32> MaxGpus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRunTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public System.Nullable<System.Int32> Cpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopTime")]
		public System.DateTimeOffset StopTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logStream")]
		public string LogStream { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gpus")]
		public System.Nullable<System.Int32> Gpus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSequenceStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fallbackLocation")]
		public string FallbackLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetVariantImportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VariantImportItemDetail[] Items { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public bool RunLeftNormalization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public AnnotationFieldMap AnnotationFields { get; set; }
	}
	
	/// <summary>
	/// Details about an imported variant item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariantImportItemDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobStatus")]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetVariantStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeArn")]
		public string StoreArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeSizeBytes")]
		public int StoreSizeBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkflowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkflowStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public WorkflowType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public WorkflowEngine Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="main")]
		public string Main { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterTemplate")]
		public WorkflowParameterTemplate ParameterTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageCapacity")]
		public System.Nullable<System.Int32> StorageCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public WorkflowMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public Accelerators Accelerators { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WDL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXTFLOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CWL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowParameterTemplate
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowMetadata
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowExport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFINITION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnnotationImportJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotationImportJobs")]
		public AnnotationImportJobItem[] AnnotationImportJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An annotation import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnnotationImportJobItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public System.Nullable<System.Boolean> RunLeftNormalization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public AnnotationFieldMap AnnotationFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnnotationStoresResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotationStores")]
		public AnnotationStoreItem[] AnnotationStores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An annotation store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnnotationStoreItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeArn")]
		public string StoreArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeFormat")]
		public StoreFormat StoreFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeSizeBytes")]
		public int StoreSizeBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMultipartReadSetUploadsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploads")]
		public MultipartReadSetUploadListItem[] Uploads { get; set; }
	}
	
	/// <summary>
	///  Part of the response to ListMultipartReadSetUploads, excluding completed and aborted multipart uploads. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultipartReadSetUploadListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFileType")]
		public FileType SourceFileType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetActivationJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activationJobs")]
		public ActivateReadSetJobItem[] ActivationJobs { get; set; }
	}
	
	/// <summary>
	/// A read set activation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateReadSetJobItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetExportJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exportJobs")]
		public ExportReadSetJobDetail[] ExportJobs { get; set; }
	}
	
	/// <summary>
	/// Details about a read set export job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportReadSetJobDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetExportJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_WITH_FAILURES = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetImportJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importJobs")]
		public ImportReadSetJobItem[] ImportJobs { get; set; }
	}
	
	/// <summary>
	/// An import read set job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportReadSetJobItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetImportJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_WITH_FAILURES = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetUploadPartsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public ReadSetUploadPartListItem[] Parts { get; set; }
	}
	
	/// <summary>
	///  The metadata of a single part of a file that was added to a multipart upload. A list of these parts is returned in the response to the ListReadSetUploadParts API. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadSetUploadPartListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public int PartNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partSize")]
		public int PartSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partSource")]
		public ReadSetPartSource PartSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readSets")]
		public ReadSetListItem[] ReadSets { get; set; }
	}
	
	/// <summary>
	/// A read set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadSetListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public FileType FileType { get; set; }
		
		/// <summary>
		/// Details about a sequence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequenceInformation")]
		public SequenceInformation SequenceInformation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationType")]
		public CreationType CreationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReferenceImportJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importJobs")]
		public ImportReferenceJobItem[] ImportJobs { get; set; }
	}
	
	/// <summary>
	/// An import reference job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportReferenceJobItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceStoreId")]
		public string ReferenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReferenceImportJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_WITH_FAILURES = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReferenceStoresResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceStores")]
		public ReferenceStoreDetail[] ReferenceStores { get; set; }
	}
	
	/// <summary>
	/// Details about a reference store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceStoreDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReferencesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="references")]
		public ReferenceListItem[] References { get; set; }
	}
	
	/// <summary>
	/// A genome reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceStoreId")]
		public string ReferenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReferenceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRunGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RunGroupListItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A run group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunGroupListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCpus")]
		public System.Nullable<System.Int32> MaxCpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxRuns")]
		public System.Nullable<System.Int32> MaxRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDuration")]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGpus")]
		public System.Nullable<System.Int32> MaxGpus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRunTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TaskListItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A workflow run task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpus")]
		public System.Nullable<System.Int32> Cpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopTime")]
		public System.DateTimeOffset StopTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gpus")]
		public System.Nullable<System.Int32> Gpus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRunsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RunListItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A workflow run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RunStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageCapacity")]
		public System.Nullable<System.Int32> StorageCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopTime")]
		public System.DateTimeOffset StopTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSequenceStoresResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStores")]
		public SequenceStoreDetail[] SequenceStores { get; set; }
	}
	
	/// <summary>
	/// Details about a sequence store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SequenceStoreDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fallbackLocation")]
		public string FallbackLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVariantImportJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="variantImportJobs")]
		public VariantImportJobItem[] VariantImportJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A variant import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariantImportJobItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public System.Nullable<System.Boolean> RunLeftNormalization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public AnnotationFieldMap AnnotationFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVariantStoresResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="variantStores")]
		public VariantStoreItem[] VariantStores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A variant store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariantStoreItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeArn")]
		public string StoreArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeSizeBytes")]
		public int StoreSizeBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkflowsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public WorkflowListItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A workflow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowListItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public WorkflowStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public WorkflowType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public WorkflowMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartAnnotationImportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
	}
	
	/// <summary>
	/// A source for an annotation import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnnotationImportItemSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetActivationJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// A source for a read set activation job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetActivationJobSourceItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readSetId")]
		public string ReadSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetExportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// A read set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportReadSet
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readSetId")]
		public string ReadSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetImportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceStoreId")]
		public string SequenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// A source for a read set import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetImportJobSourceItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFiles")]
		public SourceFiles SourceFiles { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFileType")]
		public FileType SourceFileType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReferenceImportJobResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceStoreId")]
		public string ReferenceStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	/// <summary>
	/// A source for a reference import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReferenceImportJobSourceItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFile")]
		public string SourceFile { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRunResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RunStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartVariantImportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
	}
	
	/// <summary>
	/// A imported variant item's source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariantImportItemSource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAnnotationStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeOptions")]
		public StoreOptions StoreOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeFormat")]
		public StoreFormat StoreFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateVariantStoreResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadReadSetPartResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AbortMultipartReadSetUploadRequest
	{
	}
	
	/// <summary>
	/// A read set activation job filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateReadSetFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteReadSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelAnnotationImportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelVariantImportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteMultipartReadSetUploadRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public CompleteReadSetUploadPartListItem[] Parts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAnnotationStoreRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeFormat")]
		public StoreFormat StoreFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeOptions")]
		public StoreOptions StoreOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateMultipartReadSetUploadRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFileType")]
		public FileType SourceFileType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateReferenceStoreRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRunGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCpus")]
		public System.Nullable<System.Int32> MaxCpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxRuns")]
		public System.Nullable<System.Int32> MaxRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDuration")]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGpus")]
		public System.Nullable<System.Int32> MaxGpus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSequenceStoreRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fallbackLocation")]
		public string FallbackLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateVariantStoreRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public ReferenceItem Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public SseConfig SseConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWorkflowRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public WorkflowEngine Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definitionZip")]
		public string DefinitionZip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definitionUri")]
		public string DefinitionUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="main")]
		public string Main { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterTemplate")]
		public WorkflowParameterTemplate ParameterTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageCapacity")]
		public System.Nullable<System.Int32> StorageCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public Accelerators Accelerators { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAnnotationStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReferenceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteReferenceStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRunGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSequenceStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteVariantStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWorkflowRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetExportJobItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// An read set export job filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportReadSetFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FormatToHeaderKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POS = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAnnotationImportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAnnotationStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetActivationJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetExportJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetImportJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetMetadataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetFile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDEX = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReadSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceImportJobRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceMetadataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReferenceFile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDEX = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetReferenceStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRunGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRunRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRunTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSequenceStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetVariantImportRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetVariantStoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkflowRequest
	{
	}
	
	/// <summary>
	/// A filter for import read set jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportReadSetFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadSetImportJobItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// A filter for import references.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportReferenceFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReferenceImportJobItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// A filter for annotation import jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnnotationImportJobsFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnnotationImportJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListAnnotationImportJobsFilter Filter { get; set; }
	}
	
	/// <summary>
	/// A filter for annotation stores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnnotationStoresFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnnotationStoresRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListAnnotationStoresFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMultipartReadSetUploadsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetActivationJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ActivateReadSetFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetExportJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ExportReadSetFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetImportJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ImportReadSetFilter Filter { get; set; }
	}
	
	/// <summary>
	///  Filter settings that select for read set upload parts of interest. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadSetUploadPartListFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetUploadPartsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partSource")]
		public ReadSetPartSource PartSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ReadSetUploadPartListFilter Filter { get; set; }
	}
	
	/// <summary>
	/// A filter for read sets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadSetFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationType")]
		public CreationType CreationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReadSetsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ReadSetFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReferenceImportJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ImportReferenceFilter Filter { get; set; }
	}
	
	/// <summary>
	/// A filter for reference stores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceStoreFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReferenceStoresRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ReferenceStoreFilter Filter { get; set; }
	}
	
	/// <summary>
	/// A filter for references.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferenceFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReferencesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ReferenceFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRunGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRunTasksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRunsRequest
	{
	}
	
	/// <summary>
	/// A filter for a sequence store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SequenceStoreFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSequenceStoresRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public SequenceStoreFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// A filter for variant import jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVariantImportJobsFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVariantImportJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListVariantImportJobsFilter Filter { get; set; }
	}
	
	/// <summary>
	/// A filter for variant stores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVariantStoresFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVariantStoresRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListVariantStoresFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkflowsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchemaValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOAT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartAnnotationImportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AnnotationImportItemSource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatOptions")]
		public FormatOptions FormatOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public System.Nullable<System.Boolean> RunLeftNormalization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public AnnotationFieldMap AnnotationFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetActivationJobRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public StartReadSetActivationJobSourceItem[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetExportJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public ExportReadSet[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReadSetImportJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public StartReadSetImportJobSourceItem[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartReferenceImportJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public StartReferenceImportJobSourceItem[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartRunRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runGroupId")]
		public string RunGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public RunParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storageCapacity")]
		public System.Nullable<System.Int32> StorageCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputUri")]
		public string OutputUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		public RunLogLevel LogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartVariantImportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public VariantImportItemSource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public System.Nullable<System.Boolean> RunLeftNormalization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public AnnotationFieldMap AnnotationFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequestTagsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagResourceRequestTagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAnnotationStoreRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRunGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCpus")]
		public System.Nullable<System.Int32> MaxCpus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxRuns")]
		public System.Nullable<System.Int32> MaxRuns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDuration")]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGpus")]
		public System.Nullable<System.Int32> MaxGpus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateVariantStoreRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWorkflowRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadReadSetPartRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Stops a multipart upload.
		/// AbortMultipartReadSetUpload sequencestore/{sequenceStoreId}/upload/{uploadId}/abort
		/// </summary>
		/// <param name="sequenceStoreId"> The sequence store ID for the store involved in the multipart upload. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="uploadId"> The ID for the multipart upload. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<AbortMultipartReadSetUploadResponse> AbortMultipartReadSetUploadAsync(string sequenceStoreId, string uploadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/upload/"+ (uploadId==null? "" : System.Uri.EscapeDataString(uploadId))+"/abort";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AbortMultipartReadSetUploadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more read sets.
		/// BatchDeleteReadSet sequencestore/{sequenceStoreId}/readset/batch/delete
		/// </summary>
		/// <param name="sequenceStoreId">The read sets' sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<BatchDeleteReadSetResponse> BatchDeleteReadSetAsync(string sequenceStoreId, BatchDeleteReadSetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/readset/batch/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchDeleteReadSetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an annotation import job.
		/// CancelAnnotationImportJob import/annotation/{jobId}
		/// </summary>
		/// <param name="jobId">The job's ID.</param>
		/// <returns>Success</returns>
		public async Task<CancelAnnotationImportResponse> CancelAnnotationImportJobAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/annotation/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CancelAnnotationImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an annotation import job.
		/// GetAnnotationImportJob import/annotation/{jobId}
		/// </summary>
		/// <param name="jobId">The job's ID.</param>
		/// <returns>Success</returns>
		public async Task<GetAnnotationImportResponse> GetAnnotationImportJobAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/annotation/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAnnotationImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a run.
		/// CancelRun run/{id}/cancel
		/// </summary>
		/// <param name="id">The run's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		public async Task CancelRunAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "run/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a variant import job.
		/// CancelVariantImportJob import/variant/{jobId}
		/// </summary>
		/// <param name="jobId">The job's ID.</param>
		/// <returns>Success</returns>
		public async Task<CancelVariantImportResponse> CancelVariantImportJobAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/variant/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CancelVariantImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a variant import job.
		/// GetVariantImportJob import/variant/{jobId}
		/// </summary>
		/// <param name="jobId">The job's ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVariantImportResponse> GetVariantImportJobAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/variant/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetVariantImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Concludes a multipart upload once you have uploaded all the components.
		/// CompleteMultipartReadSetUpload sequencestore/{sequenceStoreId}/upload/{uploadId}/complete
		/// </summary>
		/// <param name="sequenceStoreId"> The sequence store ID for the store involved in the multipart upload. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="uploadId"> The ID for the multipart upload. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<CompleteMultipartReadSetUploadResponse> CompleteMultipartReadSetUploadAsync(string sequenceStoreId, string uploadId, CompleteMultipartReadSetUploadPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/upload/"+ (uploadId==null? "" : System.Uri.EscapeDataString(uploadId))+"/complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CompleteMultipartReadSetUploadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an annotation store.
		/// CreateAnnotationStore annotationStore
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAnnotationStoreResponse> CreateAnnotationStoreAsync(CreateAnnotationStorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotationStore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateAnnotationStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Begins a multipart read set upload.
		/// CreateMultipartReadSetUpload sequencestore/{sequenceStoreId}/upload
		/// </summary>
		/// <param name="sequenceStoreId"> The sequence store ID for the store that is the destination of the multipart uploads. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateMultipartReadSetUploadResponse> CreateMultipartReadSetUploadAsync(string sequenceStoreId, CreateMultipartReadSetUploadPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/upload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateMultipartReadSetUploadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a reference store.
		/// CreateReferenceStore referencestore
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateReferenceStoreResponse> CreateReferenceStoreAsync(CreateReferenceStorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateReferenceStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a run group.
		/// CreateRunGroup runGroup
		/// </summary>
		public async Task CreateRunGroupAsync(CreateRunGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "runGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of run groups.
		/// ListRunGroups runGroup
		/// </summary>
		/// <param name="name">The run groups' name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="startingToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of run groups to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListRunGroupsResponse> ListRunGroupsAsync(string name, string startingToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "runGroup?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&startingToken=" + (startingToken==null? "" : System.Uri.EscapeDataString(startingToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRunGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a sequence store.
		/// CreateSequenceStore sequencestore
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSequenceStoreResponse> CreateSequenceStoreAsync(CreateSequenceStorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSequenceStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a variant store.
		/// CreateVariantStore variantStore
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateVariantStoreResponse> CreateVariantStoreAsync(CreateVariantStorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variantStore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateVariantStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a workflow.
		/// CreateWorkflow workflow
		/// </summary>
		public async Task CreateWorkflowAsync(CreateWorkflowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of workflows.
		/// ListWorkflows workflow
		/// </summary>
		/// <param name="type">The workflows' type.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="name">The workflows' name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="startingToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of workflows to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListWorkflowsResponse> ListWorkflowsAsync(WorkflowType type, string name, string startingToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflow?type=" + type+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&startingToken=" + (startingToken==null? "" : System.Uri.EscapeDataString(startingToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkflowsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an annotation store.
		/// DeleteAnnotationStore annotationStore/{name}
		/// </summary>
		/// <param name="name">The store's name.</param>
		/// <param name="force">Whether to force deletion.</param>
		/// <returns>Success</returns>
		public async Task<DeleteAnnotationStoreResponse> DeleteAnnotationStoreAsync(string name, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotationStore/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteAnnotationStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an annotation store.
		/// GetAnnotationStore annotationStore/{name}
		/// </summary>
		/// <param name="name">The store's name.</param>
		/// <returns>Success</returns>
		public async Task<GetAnnotationStoreResponse> GetAnnotationStoreAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotationStore/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAnnotationStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an annotation store.
		/// UpdateAnnotationStore annotationStore/{name}
		/// </summary>
		/// <param name="name">A name for the store.</param>
		/// <returns>Success</returns>
		public async Task<UpdateAnnotationStoreResponse> UpdateAnnotationStoreAsync(string name, UpdateAnnotationStorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotationStore/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateAnnotationStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a genome reference.
		/// DeleteReference referencestore/{referenceStoreId}/reference/{id}
		/// </summary>
		/// <param name="id">The reference's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="referenceStoreId">The reference's store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteReferenceResponse> DeleteReferenceAsync(string id, string referenceStoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (referenceStoreId==null? "" : System.Uri.EscapeDataString(referenceStoreId))+"/reference/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteReferenceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a genome reference store.
		/// DeleteReferenceStore referencestore/{id}
		/// </summary>
		/// <param name="id">The store's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteReferenceStoreResponse> DeleteReferenceStoreAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteReferenceStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a reference store.
		/// GetReferenceStore referencestore/{id}
		/// </summary>
		/// <param name="id">The store's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReferenceStoreResponse> GetReferenceStoreAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReferenceStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a workflow run.
		/// DeleteRun run/{id}
		/// </summary>
		/// <param name="id">The run's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		public async Task DeleteRunAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "run/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a workflow run.
		/// GetRun run/{id}
		/// </summary>
		/// <param name="id">The run's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		/// <param name="export">The run's export format.
		/// Minimum items: 0
		/// Maximum items: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<GetRunResponse> GetRunAsync(string id, RunExport[] export, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "run/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", export.Select(z => $"export={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRunResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a workflow run group.
		/// DeleteRunGroup runGroup/{id}
		/// </summary>
		/// <param name="id">The run group's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		public async Task DeleteRunGroupAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "runGroup/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a workflow run group.
		/// GetRunGroup runGroup/{id}
		/// </summary>
		/// <param name="id">The group's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		/// <returns>Success</returns>
		public async Task<GetRunGroupResponse> GetRunGroupAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "runGroup/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRunGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a run group.
		/// UpdateRunGroup runGroup/{id}
		/// </summary>
		/// <param name="id">The group's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		public async Task UpdateRunGroupAsync(string id, UpdateRunGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "runGroup/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a sequence store.
		/// DeleteSequenceStore sequencestore/{id}
		/// </summary>
		/// <param name="id">The sequence store's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSequenceStoreResponse> DeleteSequenceStoreAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteSequenceStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a sequence store.
		/// GetSequenceStore sequencestore/{id}
		/// </summary>
		/// <param name="id">The store's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSequenceStoreResponse> GetSequenceStoreAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSequenceStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a variant store.
		/// DeleteVariantStore variantStore/{name}
		/// </summary>
		/// <param name="name">The store's name.</param>
		/// <param name="force">Whether to force deletion.</param>
		/// <returns>Success</returns>
		public async Task<DeleteVariantStoreResponse> DeleteVariantStoreAsync(string name, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variantStore/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&force="+force;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteVariantStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a variant store.
		/// GetVariantStore variantStore/{name}
		/// </summary>
		/// <param name="name">The store's name.</param>
		/// <returns>Success</returns>
		public async Task<GetVariantStoreResponse> GetVariantStoreAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variantStore/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetVariantStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a variant store.
		/// UpdateVariantStore variantStore/{name}
		/// </summary>
		/// <param name="name">A name for the store.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVariantStoreResponse> UpdateVariantStoreAsync(string name, UpdateVariantStorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variantStore/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateVariantStoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a workflow.
		/// DeleteWorkflow workflow/{id}
		/// </summary>
		/// <param name="id">The workflow's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		public async Task DeleteWorkflowAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflow/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a workflow.
		/// GetWorkflow workflow/{id}
		/// </summary>
		/// <param name="id">The workflow's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		/// <param name="type">The workflow's type.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="export">The export format for the workflow.
		/// Minimum items: 0
		/// Maximum items: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWorkflowResponse> GetWorkflowAsync(string id, WorkflowType type, WorkflowExport[] export, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflow/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&type=" + type+"&"+string.Join("&", export.Select(z => $"export={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetWorkflowResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a workflow.
		/// UpdateWorkflow workflow/{id}
		/// </summary>
		/// <param name="id">The workflow's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		public async Task UpdateWorkflowAsync(string id, UpdateWorkflowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workflow/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a file from a read set.
		/// GetReadSet sequencestore/{sequenceStoreId}/readset/{id}#partNumber
		/// </summary>
		/// <param name="id">The read set's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="sequenceStoreId">The read set's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="file">The file to retrieve.</param>
		/// <param name="partNumber">The part number to retrieve.
		/// Minimum: 1
		/// Maximum: 10000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReadSetResponse> GetReadSetAsync(string id, string sequenceStoreId, ReadSetFile file, int partNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/readset/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#partNumber&file=" + file+"&partNumber="+partNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReadSetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a read set activation job.
		/// GetReadSetActivationJob sequencestore/{sequenceStoreId}/activationjob/{id}
		/// </summary>
		/// <param name="id">The job's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="sequenceStoreId">The job's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReadSetActivationJobResponse> GetReadSetActivationJobAsync(string id, string sequenceStoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/activationjob/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReadSetActivationJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a read set export job.
		/// GetReadSetExportJob sequencestore/{sequenceStoreId}/exportjob/{id}
		/// </summary>
		/// <param name="sequenceStoreId">The job's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="id">The job's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReadSetExportJobResponse> GetReadSetExportJobAsync(string sequenceStoreId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/exportjob/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReadSetExportJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a read set import job.
		/// GetReadSetImportJob sequencestore/{sequenceStoreId}/importjob/{id}
		/// </summary>
		/// <param name="id">The job's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="sequenceStoreId">The job's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReadSetImportJobResponse> GetReadSetImportJobAsync(string id, string sequenceStoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/importjob/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReadSetImportJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about a read set.
		/// GetReadSetMetadata sequencestore/{sequenceStoreId}/readset/{id}/metadata
		/// </summary>
		/// <param name="id">The read set's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="sequenceStoreId">The read set's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReadSetMetadataResponse> GetReadSetMetadataAsync(string id, string sequenceStoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/readset/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReadSetMetadataResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a reference file.
		/// GetReference referencestore/{referenceStoreId}/reference/{id}#partNumber
		/// </summary>
		/// <param name="id">The reference's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="referenceStoreId">The reference's store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="partNumber">The part number to retrieve.
		/// Minimum: 1
		/// Maximum: 10000
		// </param>
		/// <param name="file">The file to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetReferenceResponse> GetReferenceAsync(string id, string referenceStoreId, int partNumber, ReferenceFile file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (referenceStoreId==null? "" : System.Uri.EscapeDataString(referenceStoreId))+"/reference/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"#partNumber&partNumber="+partNumber+"&file=" + file;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReferenceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a reference import job.
		/// GetReferenceImportJob referencestore/{referenceStoreId}/importjob/{id}
		/// </summary>
		/// <param name="id">The job's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="referenceStoreId">The job's reference store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReferenceImportJobResponse> GetReferenceImportJobAsync(string id, string referenceStoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (referenceStoreId==null? "" : System.Uri.EscapeDataString(referenceStoreId))+"/importjob/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReferenceImportJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a genome reference's metadata.
		/// GetReferenceMetadata referencestore/{referenceStoreId}/reference/{id}/metadata
		/// </summary>
		/// <param name="id">The reference's ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="referenceStoreId">The reference's reference store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetReferenceMetadataResponse> GetReferenceMetadataAsync(string id, string referenceStoreId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (referenceStoreId==null? "" : System.Uri.EscapeDataString(referenceStoreId))+"/reference/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetReferenceMetadataResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a workflow run task.
		/// GetRunTask run/{id}/task/{taskId}
		/// </summary>
		/// <param name="id">The task's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		/// <param name="taskId">The task's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		/// <returns>Success</returns>
		public async Task<GetRunTaskResponse> GetRunTaskAsync(string id, string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "run/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/task/"+ (taskId==null? "" : System.Uri.EscapeDataString(taskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRunTaskResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of annotation import jobs.
		/// ListAnnotationImportJobs import/annotations
		/// </summary>
		/// <param name="maxResults">The maximum number of jobs to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 10000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAnnotationImportJobsResponse> ListAnnotationImportJobsAsync(int maxResults, string nextToken, ListAnnotationImportJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/annotations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAnnotationImportJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of annotation stores.
		/// ListAnnotationStores annotationStores
		/// </summary>
		/// <param name="maxResults">The maximum number of stores to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 10000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAnnotationStoresResponse> ListAnnotationStoresAsync(int maxResults, string nextToken, ListAnnotationStoresPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "annotationStores?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAnnotationStoresResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all multipart read set uploads and their statuses.
		/// ListMultipartReadSetUploads sequencestore/{sequenceStoreId}/uploads
		/// </summary>
		/// <param name="sequenceStoreId"> The Sequence Store ID used for the multipart uploads. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="maxResults"> The maximum number of multipart uploads returned in a page. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken"> Next token returned in the response of a previous ListMultipartReadSetUploads call. Used to get the next page of results. 
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListMultipartReadSetUploadsResponse> ListMultipartReadSetUploadsAsync(string sequenceStoreId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/uploads&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMultipartReadSetUploadsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of read set activation jobs.
		/// ListReadSetActivationJobs sequencestore/{sequenceStoreId}/activationjobs
		/// </summary>
		/// <param name="sequenceStoreId">The read set's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="maxResults">The maximum number of read set activation jobs to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReadSetActivationJobsResponse> ListReadSetActivationJobsAsync(string sequenceStoreId, int maxResults, string nextToken, ListReadSetActivationJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/activationjobs&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReadSetActivationJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of read set export jobs.
		/// ListReadSetExportJobs sequencestore/{sequenceStoreId}/exportjobs
		/// </summary>
		/// <param name="sequenceStoreId">The jobs' sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="maxResults">The maximum number of jobs to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReadSetExportJobsResponse> ListReadSetExportJobsAsync(string sequenceStoreId, int maxResults, string nextToken, ListReadSetExportJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/exportjobs&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReadSetExportJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of read set import jobs.
		/// ListReadSetImportJobs sequencestore/{sequenceStoreId}/importjobs
		/// </summary>
		/// <param name="maxResults">The maximum number of jobs to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <param name="sequenceStoreId">The jobs' sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReadSetImportJobsResponse> ListReadSetImportJobsAsync(int maxResults, string nextToken, string sequenceStoreId, ListReadSetImportJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/importjobs?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReadSetImportJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation will list all parts in a requested multipart upload for a sequence store.
		/// ListReadSetUploadParts sequencestore/{sequenceStoreId}/upload/{uploadId}/parts
		/// </summary>
		/// <param name="sequenceStoreId"> The Sequence Store ID used for the multipart uploads. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="uploadId"> The ID for the initiated multipart upload. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="maxResults"> The maximum number of read set upload parts returned in a page. 
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken"> Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. 
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReadSetUploadPartsResponse> ListReadSetUploadPartsAsync(string sequenceStoreId, string uploadId, int maxResults, string nextToken, ListReadSetUploadPartsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/upload/"+ (uploadId==null? "" : System.Uri.EscapeDataString(uploadId))+"/parts&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReadSetUploadPartsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of read sets.
		/// ListReadSets sequencestore/{sequenceStoreId}/readsets
		/// </summary>
		/// <param name="sequenceStoreId">The jobs' sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="maxResults">The maximum number of read sets to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReadSetsResponse> ListReadSetsAsync(string sequenceStoreId, int maxResults, string nextToken, ListReadSetsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/readsets&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReadSetsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of reference import jobs.
		/// ListReferenceImportJobs referencestore/{referenceStoreId}/importjobs
		/// </summary>
		/// <param name="maxResults">The maximum number of jobs to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <param name="referenceStoreId">The job's reference store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReferenceImportJobsResponse> ListReferenceImportJobsAsync(int maxResults, string nextToken, string referenceStoreId, ListReferenceImportJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (referenceStoreId==null? "" : System.Uri.EscapeDataString(referenceStoreId))+"/importjobs?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReferenceImportJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of reference stores.
		/// ListReferenceStores referencestores
		/// </summary>
		/// <param name="maxResults">The maximum number of stores to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReferenceStoresResponse> ListReferenceStoresAsync(int maxResults, string nextToken, ListReferenceStoresPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestores?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReferenceStoresResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of references.
		/// ListReferences referencestore/{referenceStoreId}/references
		/// </summary>
		/// <param name="referenceStoreId">The references' reference store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="maxResults">The maximum number of references to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListReferencesResponse> ListReferencesAsync(string referenceStoreId, int maxResults, string nextToken, ListReferencesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (referenceStoreId==null? "" : System.Uri.EscapeDataString(referenceStoreId))+"/references&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReferencesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of tasks for a run.
		/// ListRunTasks run/{id}/task
		/// </summary>
		/// <param name="id">The run's ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		/// <param name="status">Filter the list by status.
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <param name="startingToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of run tasks to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListRunTasksResponse> ListRunTasksAsync(string id, TaskStatus status, string startingToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "run/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/task&status=" + status+"&startingToken=" + (startingToken==null? "" : System.Uri.EscapeDataString(startingToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRunTasksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of runs.
		/// ListRuns run
		/// </summary>
		/// <param name="name">Filter the list by run name.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="runGroupId">Filter the list by run group ID.
		/// Min length: 1
		/// Max length: 18
		// </param>
		/// <param name="startingToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxResults">The maximum number of runs to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="status"> The status of a run. 
		/// Min length: 1
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<ListRunsResponse> ListRunsAsync(string name, string runGroupId, string startingToken, int maxResults, RunStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "run?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&runGroupId=" + (runGroupId==null? "" : System.Uri.EscapeDataString(runGroupId))+"&startingToken=" + (startingToken==null? "" : System.Uri.EscapeDataString(startingToken))+"&maxResults="+maxResults+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRunsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a run.
		/// StartRun run
		/// </summary>
		public async Task StartRunAsync(StartRunPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of sequence stores.
		/// ListSequenceStores sequencestores
		/// </summary>
		/// <param name="maxResults">The maximum number of stores to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 6144
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSequenceStoresResponse> ListSequenceStoresAsync(int maxResults, string nextToken, ListSequenceStoresPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestores?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSequenceStoresResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of tags for a resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The resource's ARN.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tags a resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The resource's ARN.
		/// Min length: 1
		/// Max length: 128
		// </param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of variant import jobs.
		/// ListVariantImportJobs import/variants
		/// </summary>
		/// <param name="maxResults">The maximum number of import jobs to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 10000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListVariantImportJobsResponse> ListVariantImportJobsAsync(int maxResults, string nextToken, ListVariantImportJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/variants?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVariantImportJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of variant stores.
		/// ListVariantStores variantStores
		/// </summary>
		/// <param name="maxResults">The maximum number of stores to return in one page of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">Specify the pagination token from a previous request to retrieve the next page of results.
		/// Min length: 1
		/// Max length: 10000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListVariantStoresResponse> ListVariantStoresAsync(int maxResults, string nextToken, ListVariantStoresPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variantStores?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVariantStoresResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an annotation import job.
		/// StartAnnotationImportJob import/annotation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartAnnotationImportResponse> StartAnnotationImportJobAsync(StartAnnotationImportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/annotation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartAnnotationImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates an archived read set. To reduce storage charges, Amazon Omics archives unused read sets after 30 days.
		/// StartReadSetActivationJob sequencestore/{sequenceStoreId}/activationjob
		/// </summary>
		/// <param name="sequenceStoreId">The read set's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartReadSetActivationJobResponse> StartReadSetActivationJobAsync(string sequenceStoreId, StartReadSetActivationJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/activationjob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartReadSetActivationJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports a read set to Amazon S3.
		/// StartReadSetExportJob sequencestore/{sequenceStoreId}/exportjob
		/// </summary>
		/// <param name="sequenceStoreId">The read set's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartReadSetExportJobResponse> StartReadSetExportJobAsync(string sequenceStoreId, StartReadSetExportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/exportjob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartReadSetExportJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a read set import job.
		/// StartReadSetImportJob sequencestore/{sequenceStoreId}/importjob
		/// </summary>
		/// <param name="sequenceStoreId">The read set's sequence store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartReadSetImportJobResponse> StartReadSetImportJobAsync(string sequenceStoreId, StartReadSetImportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/importjob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartReadSetImportJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a reference import job.
		/// StartReferenceImportJob referencestore/{referenceStoreId}/importjob
		/// </summary>
		/// <param name="referenceStoreId">The job's reference store ID.
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<StartReferenceImportJobResponse> StartReferenceImportJobAsync(string referenceStoreId, StartReferenceImportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "referencestore/"+ (referenceStoreId==null? "" : System.Uri.EscapeDataString(referenceStoreId))+"/importjob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartReferenceImportJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a variant import job.
		/// StartVariantImportJob import/variant
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartVariantImportResponse> StartVariantImportJobAsync(StartVariantImportJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/variant";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartVariantImportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The resource's ARN.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="tagKeys">Keys of tags to remove.
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation uploads a specific part of a read set. If you upload a new part using a previously used part number, the previously uploaded part will be overwritten.
		/// UploadReadSetPart sequencestore/{sequenceStoreId}/upload/{uploadId}/part#partSource&partNumber
		/// </summary>
		/// <param name="sequenceStoreId"> The Sequence Store ID used for the multipart upload. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="uploadId"> The ID for the initiated multipart upload. 
		/// Min length: 10
		/// Max length: 36
		// </param>
		/// <param name="partSource"> The source file for an upload part. </param>
		/// <param name="partNumber"> The number of the part being uploaded. 
		/// Minimum: 1
		/// Maximum: 10000
		// </param>
		/// <returns>Success</returns>
		public async Task<UploadReadSetPartResponse> UploadReadSetPartAsync(string sequenceStoreId, string uploadId, ReadSetPartSource partSource, int partNumber, UploadReadSetPartPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sequencestore/"+ (sequenceStoreId==null? "" : System.Uri.EscapeDataString(sequenceStoreId))+"/upload/"+ (uploadId==null? "" : System.Uri.EscapeDataString(uploadId))+"/part#partSource&partNumber&partSource=" + partSource+"&partNumber="+partNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UploadReadSetPartResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchDeleteReadSetPostBody
	{
		
		/// <summary>
		/// The read sets' IDs.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] Ids { get; set; }
	}
	
	public class CompleteMultipartReadSetUploadPostBody
	{
		
		/// <summary>
		///  The individual uploads or parts of a multipart upload. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public CompleteReadSetUploadPartListItem[] Parts { get; set; }
	}
	
	public class CreateAnnotationStorePostBody
	{
		
		/// <summary>
		/// A genome reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public CreateAnnotationStorePostBodyReference Reference { get; set; }
		
		/// <summary>
		/// A name for the store.
		/// Pattern: ([a-z]){1}([a-z0-9_]){2,254}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([a-z]){1}([a-z0-9_]){2,254}")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description for the store.
		/// Min length: 0
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// Tags for the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Server-side encryption (SSE) settings for a store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public CreateAnnotationStorePostBodySseConfig SseConfig { get; set; }
		
		/// <summary>
		/// The annotation file format of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="storeFormat")]
		public StoreFormat StoreFormat { get; set; }
		
		/// <summary>
		/// Settings for a store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeOptions")]
		public CreateAnnotationStorePostBodyStoreOptions StoreOptions { get; set; }
	}
	
	public class CreateAnnotationStorePostBodyReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
	}
	
	public class CreateAnnotationStorePostBodySseConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
	}
	
	public class CreateAnnotationStorePostBodyStoreOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="tsvStoreOptions")]
		public TsvStoreOptions TsvStoreOptions { get; set; }
	}
	
	public class CreateMultipartReadSetUploadPostBody
	{
		
		/// <summary>
		///  An idempotency token that can be used to avoid triggering multiple multipart uploads. 
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		///  The type of file being uploaded. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFileType")]
		public FileType SourceFileType { get; set; }
		
		/// <summary>
		///  The source's subject ID. 
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string SubjectId { get; set; }
		
		/// <summary>
		///  The source's sample ID. 
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string SampleId { get; set; }
		
		/// <summary>
		///  Where the source originated. 
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string GeneratedFrom { get; set; }
		
		/// <summary>
		///  The ARN of the reference. 
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:.+")]
		public string ReferenceArn { get; set; }
		
		/// <summary>
		///  The name of the read set. 
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		///  The description of the read set. 
		/// Min length: 1
		/// Max length: 255
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Description { get; set; }
		
		/// <summary>
		///  Any tags to add to the read set. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateReferenceStorePostBody
	{
		
		/// <summary>
		/// A name for the store.
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description for the store.
		/// Min length: 1
		/// Max length: 255
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// Server-side encryption (SSE) settings for a store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public CreateReferenceStorePostBodySseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Tags for the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// To ensure that requests don't run multiple times, specify a unique token for each request.
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string ClientToken { get; set; }
	}
	
	public class CreateReferenceStorePostBodySseConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
	}
	
	public class CreateRunGroupPostBody
	{
		
		/// <summary>
		/// A name for the group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The maximum number of CPUs to use in the group.
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCpus")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxCpus { get; set; }
		
		/// <summary>
		/// The maximum number of concurrent runs for the group.
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRuns")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxRuns { get; set; }
		
		/// <summary>
		/// A maximum run time for the group in minutes.
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDuration")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		/// <summary>
		/// Tags for the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// To ensure that requests don't run multiple times, specify a unique ID for each request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string RequestId { get; set; }
		
		/// <summary>
		///  The maximum GPUs that can be used by a run group. 
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxGpus")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxGpus { get; set; }
	}
	
	public class CreateSequenceStorePostBody
	{
		
		/// <summary>
		/// A name for the store.
		/// Required
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description for the store.
		/// Min length: 1
		/// Max length: 255
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// Server-side encryption (SSE) settings for a store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public CreateSequenceStorePostBodySseConfig SseConfig { get; set; }
		
		/// <summary>
		/// Tags for the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// To ensure that requests don't run multiple times, specify a unique token for each request.
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		///  An S3 location that is used to store files that have failed a direct upload. 
		/// Pattern: s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackLocation")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?")]
		public string FallbackLocation { get; set; }
	}
	
	public class CreateSequenceStorePostBodySseConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
	}
	
	public class CreateVariantStorePostBody
	{
		
		/// <summary>
		/// A genome reference.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public CreateVariantStorePostBodyReference Reference { get; set; }
		
		/// <summary>
		/// A name for the store.
		/// Pattern: ([a-z]){1}([a-z0-9_]){2,254}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([a-z]){1}([a-z0-9_]){2,254}")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description for the store.
		/// Min length: 0
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
		
		/// <summary>
		/// Tags for the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Server-side encryption (SSE) settings for a store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sseConfig")]
		public CreateVariantStorePostBodySseConfig SseConfig { get; set; }
	}
	
	public class CreateVariantStorePostBodyReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
	}
	
	public class CreateVariantStorePostBodySseConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
	}
	
	public class CreateWorkflowPostBody
	{
		
		/// <summary>
		/// A name for the workflow.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description for the workflow.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// An engine for the workflow.
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engine")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public WorkflowEngine Engine { get; set; }
		
		/// <summary>
		/// A ZIP archive for the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definitionZip")]
		public string DefinitionZip { get; set; }
		
		/// <summary>
		/// The URI of a definition for the workflow.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definitionUri")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string DefinitionUri { get; set; }
		
		/// <summary>
		/// The path of the main definition file for the workflow.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="main")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Main { get; set; }
		
		/// <summary>
		/// A parameter template for the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterTemplate")]
		public System.Collections.Generic.Dictionary<string, WorkflowParameter> ParameterTemplate { get; set; }
		
		/// <summary>
		/// A storage capacity for the workflow in gigabytes.
		/// Minimum: 0
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageCapacity")]
		[System.ComponentModel.DataAnnotations.Range(0, 100000)]
		public System.Nullable<System.Int32> StorageCapacity { get; set; }
		
		/// <summary>
		/// Tags for the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// To ensure that requests don't run multiple times, specify a unique ID for each request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string RequestId { get; set; }
		
		/// <summary>
		///  The computational accelerator specified to run the workflow. 
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public Accelerators Accelerators { get; set; }
	}
	
	public class UpdateAnnotationStorePostBody
	{
		
		/// <summary>
		/// A description for the store.
		/// Min length: 0
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
	}
	
	public class UpdateRunGroupPostBody
	{
		
		/// <summary>
		/// A name for the group.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The maximum number of CPUs to use.
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCpus")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxCpus { get; set; }
		
		/// <summary>
		/// The maximum number of concurrent runs for the group.
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxRuns")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxRuns { get; set; }
		
		/// <summary>
		/// A maximum run time for the group in minutes.
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDuration")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		/// <summary>
		///  The maximum GPUs that can be used by a run group. 
		/// Minimum: 1
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxGpus")]
		[System.ComponentModel.DataAnnotations.Range(1, 100000)]
		public System.Nullable<System.Int32> MaxGpus { get; set; }
	}
	
	public class UpdateVariantStorePostBody
	{
		
		/// <summary>
		/// A description for the store.
		/// Min length: 0
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Description { get; set; }
	}
	
	public class UpdateWorkflowPostBody
	{
		
		/// <summary>
		/// A name for the workflow.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description for the workflow.
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Description { get; set; }
	}
	
	public class ListAnnotationImportJobsPostBody
	{
		
		/// <summary>
		/// IDs of annotation import jobs to retrieve.
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// A filter for annotation import jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListAnnotationImportJobsPostBodyFilter Filter { get; set; }
	}
	
	public class ListAnnotationImportJobsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
	}
	
	public class ListAnnotationStoresPostBody
	{
		
		/// <summary>
		/// IDs of stores to list.
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// A filter for annotation stores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListAnnotationStoresPostBodyFilter Filter { get; set; }
	}
	
	public class ListAnnotationStoresPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
	}
	
	public class ListReadSetActivationJobsPostBody
	{
		
		/// <summary>
		/// A read set activation job filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReadSetActivationJobsPostBodyFilter Filter { get; set; }
	}
	
	public class ListReadSetActivationJobsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class ListReadSetExportJobsPostBody
	{
		
		/// <summary>
		/// An read set export job filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReadSetExportJobsPostBodyFilter Filter { get; set; }
	}
	
	public class ListReadSetExportJobsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class ListReadSetImportJobsPostBody
	{
		
		/// <summary>
		/// A filter for import read set jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReadSetImportJobsPostBodyFilter Filter { get; set; }
	}
	
	public class ListReadSetImportJobsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class ListReadSetUploadPartsPostBody
	{
		
		/// <summary>
		///  The source file for the upload part. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partSource")]
		public ReadSetPartSource PartSource { get; set; }
		
		/// <summary>
		///  Filter settings that select for read set upload parts of interest. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReadSetUploadPartsPostBodyFilter Filter { get; set; }
	}
	
	public class ListReadSetUploadPartsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class ListReadSetsPostBody
	{
		
		/// <summary>
		/// A filter for read sets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReadSetsPostBodyFilter Filter { get; set; }
	}
	
	public class ListReadSetsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceArn")]
		public string ReferenceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public string SampleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjectId")]
		public string SubjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFrom")]
		public string GeneratedFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationType")]
		public CreationType CreationType { get; set; }
	}
	
	public class ListReferenceImportJobsPostBody
	{
		
		/// <summary>
		/// A filter for import references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReferenceImportJobsPostBodyFilter Filter { get; set; }
	}
	
	public class ListReferenceImportJobsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReadSetActivationJobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class ListReferenceStoresPostBody
	{
		
		/// <summary>
		/// A filter for reference stores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReferenceStoresPostBodyFilter Filter { get; set; }
	}
	
	public class ListReferenceStoresPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class ListReferencesPostBody
	{
		
		/// <summary>
		/// A filter for references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListReferencesPostBodyFilter Filter { get; set; }
	}
	
	public class ListReferencesPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class StartRunPostBody
	{
		
		/// <summary>
		/// The run's workflow ID.
		/// Min length: 1
		/// Max length: 18
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]+")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// The run's workflows type.
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// The run's ID.
		/// Min length: 1
		/// Max length: 18
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]+")]
		public string RunId { get; set; }
		
		/// <summary>
		/// A service role for the run.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:.+")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A name for the run.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The run's group ID.
		/// Min length: 1
		/// Max length: 18
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]+")]
		public string RunGroupId { get; set; }
		
		/// <summary>
		/// A priority for the run.
		/// Minimum: 0
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		[System.ComponentModel.DataAnnotations.Range(0, 100000)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Parameters for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
		
		/// <summary>
		/// A storage capacity for the run in gigabytes.
		/// Minimum: 0
		/// Maximum: 100000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageCapacity")]
		[System.ComponentModel.DataAnnotations.Range(0, 100000)]
		public System.Nullable<System.Int32> StorageCapacity { get; set; }
		
		/// <summary>
		/// An output URI for the run.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUri")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string OutputUri { get; set; }
		
		/// <summary>
		/// A log level for the run.
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logLevel")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public RunLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Tags for the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// To ensure that requests don't run multiple times, specify a unique ID for each request.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string RequestId { get; set; }
	}
	
	public class ListSequenceStoresPostBody
	{
		
		/// <summary>
		/// A filter for a sequence store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListSequenceStoresPostBodyFilter Filter { get; set; }
	}
	
	public class ListSequenceStoresPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAfter")]
		public System.DateTimeOffset CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.DateTimeOffset CreatedBefore { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Tags for the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListVariantImportJobsPostBody
	{
		
		/// <summary>
		/// A list of job IDs.
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// A filter for variant import jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListVariantImportJobsPostBodyFilter Filter { get; set; }
	}
	
	public class ListVariantImportJobsPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeName")]
		public string StoreName { get; set; }
	}
	
	public class ListVariantStoresPostBody
	{
		
		/// <summary>
		/// A list of store IDs.
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// A filter for variant stores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ListVariantStoresPostBodyFilter Filter { get; set; }
	}
	
	public class ListVariantStoresPostBodyFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StoreStatus Status { get; set; }
	}
	
	public class StartAnnotationImportJobPostBody
	{
		
		/// <summary>
		/// A destination annotation store for the job.
		/// Required
		/// Min length: 3
		/// Max length: 255
		/// Pattern: ([a-z]){1}([a-z0-9_]){2,254}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([a-z]){1}([a-z0-9_]){2,254}")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// A service role for the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Items to import.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AnnotationImportItemSource[] Items { get; set; }
		
		/// <summary>
		/// Formatting options for a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatOptions")]
		public StartAnnotationImportJobPostBodyFormatOptions FormatOptions { get; set; }
		
		/// <summary>
		/// The job's left normalization setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public System.Nullable<System.Boolean> RunLeftNormalization { get; set; }
		
		/// <summary>
		///  The annotation schema generated by the parsed annotation data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public System.Collections.Generic.Dictionary<string, string> AnnotationFields { get; set; }
	}
	
	public class StartAnnotationImportJobPostBodyFormatOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="tsvOptions")]
		public TsvOptions TsvOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcfOptions")]
		public VcfOptions VcfOptions { get; set; }
	}
	
	public class StartReadSetActivationJobPostBody
	{
		
		/// <summary>
		/// To ensure that jobs don't run multiple times, specify a unique token for each job.
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The job's source files.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public StartReadSetActivationJobSourceItem[] Sources { get; set; }
	}
	
	public class StartReadSetExportJobPostBody
	{
		
		/// <summary>
		/// A location for exported files in Amazon S3.
		/// Required
		/// Pattern: s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?")]
		public string Destination { get; set; }
		
		/// <summary>
		/// A service role for the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:.*")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// To ensure that jobs don't run multiple times, specify a unique token for each job.
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The job's source files.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ExportReadSet[] Sources { get; set; }
	}
	
	public class StartReadSetImportJobPostBody
	{
		
		/// <summary>
		/// A service role for the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:.*")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// To ensure that jobs don't run multiple times, specify a unique token for each job.
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The job's source files.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public StartReadSetImportJobSourceItem[] Sources { get; set; }
	}
	
	public class StartReferenceImportJobPostBody
	{
		
		/// <summary>
		/// A service role for the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:.*")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// To ensure that jobs don't run multiple times, specify a unique token for each job.
		/// Min length: 1
		/// Max length: 127
		/// Pattern: [\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The job's source files.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public StartReferenceImportJobSourceItem[] Sources { get; set; }
	}
	
	public class StartVariantImportJobPostBody
	{
		
		/// <summary>
		/// The destination variant store for the job.
		/// Required
		/// Min length: 3
		/// Max length: 255
		/// Pattern: ([a-z]){1}([a-z0-9_]){2,254}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"([a-z]){1}([a-z0-9_]){2,254}")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// A service role for the job.
		/// Required
		/// Min length: 20
		/// Max length: 2048
		/// Pattern: arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:([^: ]*):([^: ]*):([^: ]*):([0-9]{12}):([^: ]*)")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Items to import.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public VariantImportItemSource[] Items { get; set; }
		
		/// <summary>
		/// The job's left normalization setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runLeftNormalization")]
		public System.Nullable<System.Boolean> RunLeftNormalization { get; set; }
		
		/// <summary>
		///  The annotation schema generated by the parsed annotation data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotationFields")]
		public System.Collections.Generic.Dictionary<string, string> AnnotationFields { get; set; }
	}
	
	public class UploadReadSetPartPutBody
	{
		
		/// <summary>
		///  The read set data to upload for a part. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
