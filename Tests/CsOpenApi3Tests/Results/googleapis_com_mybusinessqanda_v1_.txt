//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents an answer to a question
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Answer
	{
		
		/// <summary>
		/// Represents the author of a question or answer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public Author Author { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the answer was written. Only retrieved during ListResponse fetching.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The unique name for the answer locations/*/questions/*/answers/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The text of the answer. It should contain at least one non-whitespace character. The maximum length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the answer was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The number of upvotes for the answer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upvoteCount")]
		public System.Nullable<System.Int32> UpvoteCount { get; set; }
	}
	
	/// <summary>
	/// Represents the author of a question or answer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Author
	{
		
		/// <summary>
		/// The display name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The profile photo URI of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePhotoUri")]
		public string ProfilePhotoUri { get; set; }
		
		/// <summary>
		/// The type of user the author is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AuthorType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGULAR_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_GUIDE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERCHANT = 3,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Response message for QuestionsAndAnswers.ListAnswers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAnswersResponse
	{
		
		/// <summary>
		/// The requested answers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public Answer[] Answers { get; set; }
		
		/// <summary>
		/// If the number of answers exceeds the requested max page size, this field is populated with a token to fetch the next page of answers on a subsequent call. If there are no more answers, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of answers posted for this question across all pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for QuestionsAndAnswers.ListQuestions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListQuestionsResponse
	{
		
		/// <summary>
		/// If the number of questions exceeds the requested max page size, this field is populated with a token to fetch the next page of questions on a subsequent call. If there are no more questions, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The requested questions,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public Question[] Questions { get; set; }
		
		/// <summary>
		/// The total number of questions posted for this location across all pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Represents a single question and some of its answers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Question
	{
		
		/// <summary>
		/// Represents the author of a question or answer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public Author Author { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the question was written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topAnswers")]
		public Answer[] TopAnswers { get; set; }
		
		/// <summary>
		/// Output only. The total number of answers posted for this question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalAnswerCount")]
		public System.Nullable<System.Int32> TotalAnswerCount { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the question was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The number of upvotes for the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upvoteCount")]
		public System.Nullable<System.Int32> UpvoteCount { get; set; }
	}
	
	/// <summary>
	/// Request message for QuestionsAndAnswers.UpsertAnswer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpsertAnswerRequest
	{
		
		/// <summary>
		/// Represents an answer to a question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public Answer Answer { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a specific question written by the current user.
		/// Mybusinessqanda_locations_questions_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the question to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusinessqanda_locations_questions_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a specific question written by the current user.
		/// Mybusinessqanda_locations_questions_patch v1/{name}
		/// </summary>
		/// <param name="name">Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation.</param>
		/// <param name="updateMask">Required. The specific fields to update. Only question text can be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Question> Mybusinessqanda_locations_questions_patchAsync(string name, string updateMask, Question requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Question>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the answer written by the current user to a question.
		/// Mybusinessqanda_locations_questions_answers_delete v1/{name}/answers:delete
		/// </summary>
		/// <param name="name">Required. The name of the question to delete an answer for.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusinessqanda_locations_questions_answers_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/answers:delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the paginated list of questions and some of its answers for a specified location. This operation is only valid if the specified location is verified.
		/// Mybusinessqanda_locations_questions_list v1/{parent}
		/// </summary>
		/// <param name="parent">Required. The name of the location to fetch questions for.</param>
		/// <param name="answersPerQuestion">Optional. How many answers to fetch per question. The default and maximum `answers_per_question` values are 10.</param>
		/// <param name="filter">Optional. A filter constraining the questions to return. The only filter currently supported is "ignore_answered=true"</param>
		/// <param name="orderBy">Optional. The order to return the questions. Valid options include 'update_time desc' and 'upvote_count desc', which will return the questions sorted descendingly by the requested field. The default sort order is 'update_time desc'.</param>
		/// <param name="pageSize">Optional. How many questions to fetch per page. The default and maximum `page_size` values are 10.</param>
		/// <param name="pageToken">Optional. If specified, the next page of questions is retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ListQuestionsResponse> Mybusinessqanda_locations_questions_listAsync(string parent, int answersPerQuestion, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"&answersPerQuestion="+answersPerQuestion+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListQuestionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a question for the specified location.
		/// Mybusinessqanda_locations_questions_create v1/{parent}
		/// </summary>
		/// <param name="parent">Required. The name of the location to write a question for.</param>
		/// <returns>Successful response</returns>
		public async Task<Question> Mybusinessqanda_locations_questions_createAsync(string parent, Question requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Question>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the paginated list of answers for a specified question.
		/// Mybusinessqanda_locations_questions_answers_list v1/{parent}/answers
		/// </summary>
		/// <param name="parent">Required. The name of the question to fetch answers for.</param>
		/// <param name="orderBy">Optional. The order to return the answers. Valid options include 'update_time desc' and 'upvote_count desc', which will return the answers sorted descendingly by the requested field. The default sort order is 'update_time desc'.</param>
		/// <param name="pageSize">Optional. How many answers to fetch per page. The default and maximum `page_size` values are 10.</param>
		/// <param name="pageToken">Optional. If specified, the next page of answers is retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAnswersResponse> Mybusinessqanda_locations_questions_answers_listAsync(string parent, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/answers&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAnswersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an answer or updates the existing answer written by the user for the specified question. A user can only create one answer per question.
		/// Mybusinessqanda_locations_questions_answers_upsert v1/{parent}/answers:upsert
		/// </summary>
		/// <param name="parent">Required. The name of the question to write an answer for.</param>
		/// <returns>Successful response</returns>
		public async Task<Answer> Mybusinessqanda_locations_questions_answers_upsertAsync(string parent, UpsertAnswerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/answers:upsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Answer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
