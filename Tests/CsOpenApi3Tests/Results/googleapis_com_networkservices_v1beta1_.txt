//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A definition of a matcher that selects endpoints to which the policies should be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointMatcher
	{
		
		/// <summary>
		/// The matcher that is based on node metadata presented by xDS clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataLabelMatcher")]
		public MetadataLabelMatcher MetadataLabelMatcher { get; set; }
	}
	
	/// <summary>
	/// The matcher that is based on node metadata presented by xDS clients.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetadataLabelMatcher
	{
		
		/// <summary>
		/// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataLabelMatchCriteria")]
		public System.Nullable<MetadataLabelMatcherMetadataLabelMatchCriteria> MetadataLabelMatchCriteria { get; set; }
		
		/// <summary>
		/// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataLabels")]
		public MetadataLabels[] MetadataLabels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetadataLabelMatcherMetadataLabelMatchCriteria
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METADATA_LABEL_MATCH_CRITERIA_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCH_ANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCH_ALL = 2,
	}
	
	/// <summary>
	/// Defines a name-pair value for a single label.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetadataLabels
	{
		
		/// <summary>
		/// Required. Label name presented as key in xDS Node Metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelName")]
		public string LabelName { get; set; }
		
		/// <summary>
		/// Required. Label value presented as value corresponding to the above key, in xDS Node Metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelValue")]
		public string LabelValue { get; set; }
	}
	
	/// <summary>
	/// EndpointPolicy is a resource that helps apply desired configuration on the endpoints that match specific criteria. For example, this resource can be used to apply "authentication config" an all endpoints that serve on port 8080.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointPolicy
	{
		
		/// <summary>
		/// Optional. This field specifies the URL of AuthorizationPolicy resource that applies authorization policies to the inbound traffic at the matched endpoints. Refer to Authorization. If this field is not specified, authorization is disabled(no authz checks) for this endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationPolicy")]
		public string AuthorizationPolicy { get; set; }
		
		/// <summary>
		/// Optional. A URL referring to a ClientTlsPolicy resource. ClientTlsPolicy can be set to specify the authentication for traffic from the proxy to the actual endpoints. More specifically, it is applied to the outgoing traffic from the proxy to the endpoint. This is typically used for sidecar model where the proxy identifies itself as endpoint to the control plane, with the connection between sidecar and endpoint requiring authentication. If this field is not set, authentication is disabled(open). Applicable only when EndpointPolicyType is SIDECAR_PROXY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientTlsPolicy")]
		public string ClientTlsPolicy { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A definition of a matcher that selects endpoints to which the policies should be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointMatcher")]
		public EndpointMatcher EndpointMatcher { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the EndpointPolicy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. Name of the EndpointPolicy resource. It matches pattern `projects/{project}/locations/global/endpointPolicies/{endpoint_policy}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. A URL referring to ServerTlsPolicy resource. ServerTlsPolicy is used to determine the authentication policy to be applied to terminate the inbound traffic at the identified backends. If this field is not set, authentication is disabled(open) for this endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverTlsPolicy")]
		public string ServerTlsPolicy { get; set; }
		
		/// <summary>
		/// Specification of a port-based selector.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trafficPortSelector")]
		public TrafficPortSelector TrafficPortSelector { get; set; }
		
		/// <summary>
		/// Required. The type of endpoint policy. This is primarily used to validate the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EndpointPolicyType> Type { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Specification of a port-based selector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrafficPortSelector
	{
		
		/// <summary>
		/// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public string[] Ports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndpointPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDPOINT_POLICY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIDECAR_PROXY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRPC_SERVER = 2,
	}
	
	/// <summary>
	/// A single extension chain wrapper that contains the match conditions and extensions to execute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtensionChain
	{
		
		/// <summary>
		/// Required. A set of extensions to execute for the matching request. At least one extension is required. Up to 3 extensions can be defined for each extension chain for `LbTrafficExtension` resource. `LbRouteExtension` chains are limited to 1 extension per extension chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public ExtensionChainExtension[] Extensions { get; set; }
		
		/// <summary>
		/// Conditions under which this chain is invoked for a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchCondition")]
		public ExtensionChainMatchCondition MatchCondition { get; set; }
		
		/// <summary>
		/// Required. The name for this extension chain. The name is logged as part of the HTTP request logs. The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens, and can have a maximum length of 63 characters. Additionally, the first character must be a letter and the last a letter or a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A single extension in the chain to execute for the matching request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtensionChainExtension
	{
		
		/// <summary>
		/// Required. The `:authority` header in the gRPC request sent from Envoy to the extension service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authority")]
		public string Authority { get; set; }
		
		/// <summary>
		/// Optional. Determines how the proxy behaves if the call to the extension fails or times out. When set to `TRUE`, request or response processing continues without error. Any subsequent extensions in the extension chain are also executed. When set to `FALSE`: * If response headers have not been delivered to the downstream client, a generic 500 error is returned to the client. The error response can be tailored by configuring a custom error response in the load balancer. * If response headers have been delivered, then the HTTP stream to the downstream client is reset. Default is `FALSE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failOpen")]
		public System.Nullable<System.Boolean> FailOpen { get; set; }
		
		/// <summary>
		/// Optional. List of the HTTP headers to forward to the extension (from the client or backend). If omitted, all headers are sent. Each element is a string indicating the header name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardHeaders")]
		public string[] ForwardHeaders { get; set; }
		
		/// <summary>
		/// Required. The name for this extension. The name is logged as part of the HTTP request logs. The name must conform with RFC-1034, is restricted to lower-cased letters, numbers and hyphens, and can have a maximum length of 63 characters. Additionally, the first character must be a letter and the last a letter or a number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The reference to the service that runs the extension. Currently only Callout extensions are supported here. To configure a Callout extension, `service` must be a fully-qualified reference to a [backend service](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices) in the format: `https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}` or `https://www.googleapis.com/compute/v1/projects/{project}/global/backendServices/{backendService}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// Optional. A set of events during request or response processing for which this extension is called. This field is required for the `LbTrafficExtension` resource. It's not relevant for the `LbRouteExtension` resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedEvents")]
		public string[] SupportedEvents { get; set; }
		
		/// <summary>
		/// Required. Specifies the timeout for each individual message on the stream. The timeout must be between 10-1000 milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Conditions under which this chain is invoked for a request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtensionChainMatchCondition
	{
		
		/// <summary>
		/// Required. A Common Expression Language (CEL) expression that is used to match requests for which the extension chain is executed. For more information, see [CEL matcher language reference](https://cloud.google.com/service-extensions/docs/cel-matcher-language-reference).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="celExpression")]
		public string CelExpression { get; set; }
	}
	
	/// <summary>
	/// Gateway represents the configuration for a proxy, typically a load balancer. It captures the ip:port over which the services are exposed by the proxy, along with any policy configurations. Routes have reference to to Gateways to dictate how requests should be routed by this Gateway. Next id: 29
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Gateway
	{
		
		/// <summary>
		/// Optional. Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic. When no address is provided, an IP from the subnetwork is allocated This field only applies to gateways of type 'SECURE_WEB_GATEWAY'. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public string[] Addresses { get; set; }
		
		/// <summary>
		/// Optional. A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection. This feature only applies to gateways of type 'SECURE_WEB_GATEWAY'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateUrls")]
		public string[] CertificateUrls { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envoyHeaders")]
		public System.Nullable<GatewayEnvoyHeaders> EnvoyHeaders { get; set; }
		
		/// <summary>
		/// Optional. A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections. For example: `projects/*/locations/*/gatewaySecurityPolicies/swg-policy`. This policy is specific to gateways of type 'SECURE_WEB_GATEWAY'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewaySecurityPolicy")]
		public string GatewaySecurityPolicy { get; set; }
		
		/// <summary>
		/// Optional. The IP Version that will be used by this gateway. Valid options are IPV4 or IPV6. Default is IPV4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipVersion")]
		public System.Nullable<GatewayIpVersion> IpVersion { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the Gateway resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. Name of the Gateway resource. It matches pattern `projects/*/locations/*/gateways/`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The relative resource name identifying the VPC network that is using this configuration. For example: `projects/*/global/networks/network-1`. Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Required. One or more port numbers (1-65535), on which the Gateway will receive traffic. The proxy binds to the specified ports. Gateways of type 'SECURE_WEB_GATEWAY' are limited to 1 port. Gateways of type 'OPEN_MESH' listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public int[] Ports { get; set; }
		
		/// <summary>
		/// Optional. Scope determines how configuration across multiple Gateway instances are merged. The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer. Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// Output only. Server-defined URL of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Optional. A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverTlsPolicy")]
		public string ServerTlsPolicy { get; set; }
		
		/// <summary>
		/// Optional. The relative resource name identifying the subnetwork in which this SWG is allocated. For example: `projects/*/regions/us-central1/subnetworks/network-1` Currently, this field is specific to gateways of type 'SECURE_WEB_GATEWAY".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
		
		/// <summary>
		/// Immutable. The type of the customer managed gateway. This field is required. If unspecified, an error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GatewayType> Type { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GatewayEnvoyHeaders
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVOY_HEADERS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG_HEADERS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GatewayIpVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IP_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPV4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPV6 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GatewayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_MESH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURE_WEB_GATEWAY = 2,
	}
	
	/// <summary>
	/// GrpcRoute is the resource defining how gRPC traffic routed by a Mesh or Gateway resource is routed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRoute
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateways")]
		public string[] Gateways { get; set; }
		
		/// <summary>
		/// Required. Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same route, it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`. If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. "xds:///service:123"), otherwise they must supply the URI without a port (i.e. "xds:///service").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostnames")]
		public string[] Hostnames { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the GrpcRoute resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meshes")]
		public string[] Meshes { get; set; }
		
		/// <summary>
		/// Required. Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public GrpcRouteRouteRule[] Rules { get; set; }
		
		/// <summary>
		/// Output only. Server-defined URL of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Describes how to route traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteRouteRule
	{
		
		/// <summary>
		/// Specifies how to route matched traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public GrpcRouteRouteAction Action { get; set; }
		
		/// <summary>
		/// Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public GrpcRouteRouteMatch[] Matches { get; set; }
	}
	
	/// <summary>
	/// Specifies how to route matched traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteRouteAction
	{
		
		/// <summary>
		/// Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public GrpcRouteDestination[] Destinations { get; set; }
		
		/// <summary>
		/// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faultInjectionPolicy")]
		public GrpcRouteFaultInjectionPolicy FaultInjectionPolicy { get; set; }
		
		/// <summary>
		/// Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleTimeout")]
		public string IdleTimeout { get; set; }
		
		/// <summary>
		/// The specifications for retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryPolicy")]
		public GrpcRouteRetryPolicy RetryPolicy { get; set; }
		
		/// <summary>
		/// The specification for cookie-based stateful session affinity where the date plane supplies a “session cookie” with the name "GSSA" which encodes a specific destination host and each request containing that cookie will be directed to that host as long as the destination host remains up and healthy. The gRPC proxyless mesh library or sidecar proxy will manage the session cookie but the client application code is responsible for copying the cookie from each RPC in the session to the next.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statefulSessionAffinity")]
		public GrpcRouteStatefulSessionAffinityPolicy StatefulSessionAffinity { get; set; }
		
		/// <summary>
		/// Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// The destination to which traffic will be routed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteDestination
	{
		
		/// <summary>
		/// Required. The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteFaultInjectionPolicy
	{
		
		/// <summary>
		/// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abort")]
		public GrpcRouteFaultInjectionPolicyAbort Abort { get; set; }
		
		/// <summary>
		/// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay")]
		public GrpcRouteFaultInjectionPolicyDelay Delay { get; set; }
	}
	
	/// <summary>
	/// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteFaultInjectionPolicyAbort
	{
		
		/// <summary>
		/// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public System.Nullable<System.Int32> HttpStatus { get; set; }
		
		/// <summary>
		/// The percentage of traffic which will be aborted. The value must be between [0, 100]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Int32> Percentage { get; set; }
	}
	
	/// <summary>
	/// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteFaultInjectionPolicyDelay
	{
		
		/// <summary>
		/// Specify a fixed delay before forwarding the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelay")]
		public string FixedDelay { get; set; }
		
		/// <summary>
		/// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Int32> Percentage { get; set; }
	}
	
	/// <summary>
	/// The specifications for retries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteRetryPolicy
	{
		
		/// <summary>
		/// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numRetries")]
		public System.Nullable<System.UInt32> NumRetries { get; set; }
		
		/// <summary>
		/// - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryConditions")]
		public string[] RetryConditions { get; set; }
	}
	
	/// <summary>
	/// The specification for cookie-based stateful session affinity where the date plane supplies a “session cookie” with the name "GSSA" which encodes a specific destination host and each request containing that cookie will be directed to that host as long as the destination host remains up and healthy. The gRPC proxyless mesh library or sidecar proxy will manage the session cookie but the client application code is responsible for copying the cookie from each RPC in the session to the next.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteStatefulSessionAffinityPolicy
	{
		
		/// <summary>
		/// Required. The cookie TTL value for the Set-Cookie header generated by the data plane. The lifetime of the cookie may be set to a value from 1 to 86400 seconds (24 hours) inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieTtl")]
		public string CookieTtl { get; set; }
	}
	
	/// <summary>
	/// Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteRouteMatch
	{
		
		/// <summary>
		/// Optional. Specifies a collection of headers to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public GrpcRouteHeaderMatch[] Headers { get; set; }
		
		/// <summary>
		/// Specifies a match against a method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public GrpcRouteMethodMatch Method { get; set; }
	}
	
	/// <summary>
	/// A match against a collection of headers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteHeaderMatch
	{
		
		/// <summary>
		/// Required. The key of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GrpcRouteHeaderMatchType> Type { get; set; }
		
		/// <summary>
		/// Required. The value of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GrpcRouteHeaderMatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGULAR_EXPRESSION = 2,
	}
	
	/// <summary>
	/// Specifies a match against a method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrpcRouteMethodMatch
	{
		
		/// <summary>
		/// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caseSensitive")]
		public System.Nullable<System.Boolean> CaseSensitive { get; set; }
		
		/// <summary>
		/// Required. Name of the method to match against. If unspecified, will match all methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grpcMethod")]
		public string GrpcMethod { get; set; }
		
		/// <summary>
		/// Required. Name of the service to match against. If unspecified, will match all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grpcService")]
		public string GrpcService { get; set; }
		
		/// <summary>
		/// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GrpcRouteHeaderMatchType Type { get; set; }
	}
	
	/// <summary>
	/// HttpRoute is the resource defining how HTTP traffic should be routed by a Mesh or Gateway resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRoute
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateways")]
		public string[] Gateways { get; set; }
		
		/// <summary>
		/// Required. Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostnames")]
		public string[] Hostnames { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the HttpRoute resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meshes")]
		public string[] Meshes { get; set; }
		
		/// <summary>
		/// Required. Name of the HttpRoute resource. It matches pattern `projects/*/locations/global/httpRoutes/http_route_name>`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public HttpRouteRouteRule[] Rules { get; set; }
		
		/// <summary>
		/// Output only. Server-defined URL of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Specifies how to match traffic and how to route traffic when traffic is matched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteRouteRule
	{
		
		/// <summary>
		/// The specifications for routing traffic and applying associated policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public HttpRouteRouteAction Action { get; set; }
		
		/// <summary>
		/// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public HttpRouteRouteMatch[] Matches { get; set; }
	}
	
	/// <summary>
	/// The specifications for routing traffic and applying associated policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteRouteAction
	{
		
		/// <summary>
		/// The Specification for allowing client side cross-origin requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corsPolicy")]
		public HttpRouteCorsPolicy CorsPolicy { get; set; }
		
		/// <summary>
		/// The destination to which traffic should be forwarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public HttpRouteDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Static HTTP response object to be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directResponse")]
		public HttpRouteHttpDirectResponse DirectResponse { get; set; }
		
		/// <summary>
		/// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faultInjectionPolicy")]
		public HttpRouteFaultInjectionPolicy FaultInjectionPolicy { get; set; }
		
		/// <summary>
		/// Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleTimeout")]
		public string IdleTimeout { get; set; }
		
		/// <summary>
		/// The specification for redirecting traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect")]
		public HttpRouteRedirect Redirect { get; set; }
		
		/// <summary>
		/// The specification for modifying HTTP header in HTTP request and HTTP response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestHeaderModifier")]
		public HttpRouteHeaderModifier RequestHeaderModifier { get; set; }
		
		/// <summary>
		/// Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestMirrorPolicy")]
		public HttpRouteRequestMirrorPolicy RequestMirrorPolicy { get; set; }
		
		/// <summary>
		/// The specification for modifying HTTP header in HTTP request and HTTP response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseHeaderModifier")]
		public HttpRouteHeaderModifier ResponseHeaderModifier { get; set; }
		
		/// <summary>
		/// The specifications for retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryPolicy")]
		public HttpRouteRetryPolicy RetryPolicy { get; set; }
		
		/// <summary>
		/// The specification for cookie-based stateful session affinity where the date plane supplies a “session cookie” with the name "GSSA" which encodes a specific destination host and each request containing that cookie will be directed to that host as long as the destination host remains up and healthy. The gRPC proxyless mesh library or sidecar proxy will manage the session cookie but the client application code is responsible for copying the cookie from each RPC in the session to the next.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statefulSessionAffinity")]
		public HttpRouteStatefulSessionAffinityPolicy StatefulSessionAffinity { get; set; }
		
		/// <summary>
		/// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// The specification for modifying the URL of the request, prior to forwarding the request to the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlRewrite")]
		public HttpRouteURLRewrite UrlRewrite { get; set; }
	}
	
	/// <summary>
	/// The Specification for allowing client side cross-origin requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteCorsPolicy
	{
		
		/// <summary>
		/// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowCredentials")]
		public System.Nullable<System.Boolean> AllowCredentials { get; set; }
		
		/// <summary>
		/// Specifies the content for Access-Control-Allow-Headers header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowHeaders")]
		public string[] AllowHeaders { get; set; }
		
		/// <summary>
		/// Specifies the content for Access-Control-Allow-Methods header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowMethods")]
		public string[] AllowMethods { get; set; }
		
		/// <summary>
		/// Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowOriginRegexes")]
		public string[] AllowOriginRegexes { get; set; }
		
		/// <summary>
		/// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowOrigins")]
		public string[] AllowOrigins { get; set; }
		
		/// <summary>
		/// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Specifies the content for Access-Control-Expose-Headers header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposeHeaders")]
		public string[] ExposeHeaders { get; set; }
		
		/// <summary>
		/// Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAge")]
		public string MaxAge { get; set; }
	}
	
	/// <summary>
	/// Specifications of a destination to which the request should be routed to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteDestination
	{
		
		/// <summary>
		/// The specification for modifying HTTP header in HTTP request and HTTP response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestHeaderModifier")]
		public HttpRouteHeaderModifier RequestHeaderModifier { get; set; }
		
		/// <summary>
		/// The specification for modifying HTTP header in HTTP request and HTTP response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseHeaderModifier")]
		public HttpRouteHeaderModifier ResponseHeaderModifier { get; set; }
		
		/// <summary>
		/// The URL of a BackendService to route traffic to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// The specification for modifying HTTP header in HTTP request and HTTP response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteHeaderModifier
	{
		
		/// <summary>
		/// Add the headers with given map where key is the name of the header, value is the value of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="add")]
		public System.Collections.Generic.Dictionary<string, string> Add { get; set; }
		
		/// <summary>
		/// Remove headers (matching by header names) specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remove")]
		public string[] Remove { get; set; }
		
		/// <summary>
		/// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="set")]
		public System.Collections.Generic.Dictionary<string, string> Set { get; set; }
	}
	
	/// <summary>
	/// Static HTTP response object to be returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteHttpDirectResponse
	{
		
		/// <summary>
		/// Optional. Response body as bytes. Maximum body size is 4096B.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesBody")]
		public string BytesBody { get; set; }
		
		/// <summary>
		/// Required. Status to return as part of HTTP Response. Must be a positive integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Optional. Response body as a string. Maximum body length is 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringBody")]
		public string StringBody { get; set; }
	}
	
	/// <summary>
	/// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteFaultInjectionPolicy
	{
		
		/// <summary>
		/// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abort")]
		public HttpRouteFaultInjectionPolicyAbort Abort { get; set; }
		
		/// <summary>
		/// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delay")]
		public HttpRouteFaultInjectionPolicyDelay Delay { get; set; }
	}
	
	/// <summary>
	/// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteFaultInjectionPolicyAbort
	{
		
		/// <summary>
		/// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public System.Nullable<System.Int32> HttpStatus { get; set; }
		
		/// <summary>
		/// The percentage of traffic which will be aborted. The value must be between [0, 100]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Int32> Percentage { get; set; }
	}
	
	/// <summary>
	/// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteFaultInjectionPolicyDelay
	{
		
		/// <summary>
		/// Specify a fixed delay before forwarding the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedDelay")]
		public string FixedDelay { get; set; }
		
		/// <summary>
		/// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public System.Nullable<System.Int32> Percentage { get; set; }
	}
	
	/// <summary>
	/// The specification for redirecting traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteRedirect
	{
		
		/// <summary>
		/// The host that will be used in the redirect response instead of the one that was supplied in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostRedirect")]
		public string HostRedirect { get; set; }
		
		/// <summary>
		/// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpsRedirect")]
		public System.Nullable<System.Boolean> HttpsRedirect { get; set; }
		
		/// <summary>
		/// The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathRedirect")]
		public string PathRedirect { get; set; }
		
		/// <summary>
		/// The port that will be used in the redirected request instead of the one that was supplied in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portRedirect")]
		public System.Nullable<System.Int32> PortRedirect { get; set; }
		
		/// <summary>
		/// Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefixRewrite")]
		public string PrefixRewrite { get; set; }
		
		/// <summary>
		/// The HTTP Status code to use for the redirect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseCode")]
		public System.Nullable<HttpRouteRedirectResponseCode> ResponseCode { get; set; }
		
		/// <summary>
		/// if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stripQuery")]
		public System.Nullable<System.Boolean> StripQuery { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HttpRouteRedirectResponseCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOVED_PERMANENTLY_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEE_OTHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_REDIRECT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMANENT_REDIRECT = 5,
	}
	
	/// <summary>
	/// Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteRequestMirrorPolicy
	{
		
		/// <summary>
		/// Specifications of a destination to which the request should be routed to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public HttpRouteDestination Destination { get; set; }
		
		/// <summary>
		/// Optional. The percentage of requests to get mirrored to the desired destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mirrorPercent")]
		public System.Nullable<System.Single> MirrorPercent { get; set; }
	}
	
	/// <summary>
	/// The specifications for retries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteRetryPolicy
	{
		
		/// <summary>
		/// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numRetries")]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		/// <summary>
		/// Specifies a non-zero timeout per retry attempt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perTryTimeout")]
		public string PerTryTimeout { get; set; }
		
		/// <summary>
		/// Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryConditions")]
		public string[] RetryConditions { get; set; }
	}
	
	/// <summary>
	/// The specification for cookie-based stateful session affinity where the date plane supplies a “session cookie” with the name "GSSA" which encodes a specific destination host and each request containing that cookie will be directed to that host as long as the destination host remains up and healthy. The gRPC proxyless mesh library or sidecar proxy will manage the session cookie but the client application code is responsible for copying the cookie from each RPC in the session to the next.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteStatefulSessionAffinityPolicy
	{
		
		/// <summary>
		/// Required. The cookie TTL value for the Set-Cookie header generated by the data plane. The lifetime of the cookie may be set to a value from 1 to 86400 seconds (24 hours) inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieTtl")]
		public string CookieTtl { get; set; }
	}
	
	/// <summary>
	/// The specification for modifying the URL of the request, prior to forwarding the request to the destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteURLRewrite
	{
		
		/// <summary>
		/// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostRewrite")]
		public string HostRewrite { get; set; }
		
		/// <summary>
		/// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathPrefixRewrite")]
		public string PathPrefixRewrite { get; set; }
	}
	
	/// <summary>
	/// RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteRouteMatch
	{
		
		/// <summary>
		/// The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullPathMatch")]
		public string FullPathMatch { get; set; }
		
		/// <summary>
		/// Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public HttpRouteHeaderMatch[] Headers { get; set; }
		
		/// <summary>
		/// Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreCase")]
		public System.Nullable<System.Boolean> IgnoreCase { get; set; }
		
		/// <summary>
		/// The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefixMatch")]
		public string PrefixMatch { get; set; }
		
		/// <summary>
		/// Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameters")]
		public HttpRouteQueryParameterMatch[] QueryParameters { get; set; }
		
		/// <summary>
		/// The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regexMatch")]
		public string RegexMatch { get; set; }
	}
	
	/// <summary>
	/// Specifies how to select a route rule based on HTTP request headers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteHeaderMatch
	{
		
		/// <summary>
		/// The value of the header should match exactly the content of exact_match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exactMatch")]
		public string ExactMatch { get; set; }
		
		/// <summary>
		/// The name of the HTTP header to match against.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		/// <summary>
		/// If specified, the match result will be inverted before checking. Default value is set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertMatch")]
		public System.Nullable<System.Boolean> InvertMatch { get; set; }
		
		/// <summary>
		/// The value of the header must start with the contents of prefix_match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefixMatch")]
		public string PrefixMatch { get; set; }
		
		/// <summary>
		/// A header with header_name must exist. The match takes place whether or not the header has a value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presentMatch")]
		public System.Nullable<System.Boolean> PresentMatch { get; set; }
		
		/// <summary>
		/// Represents an integer value range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rangeMatch")]
		public HttpRouteHeaderMatchIntegerRange RangeMatch { get; set; }
		
		/// <summary>
		/// The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regexMatch")]
		public string RegexMatch { get; set; }
		
		/// <summary>
		/// The value of the header must end with the contents of suffix_match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffixMatch")]
		public string SuffixMatch { get; set; }
	}
	
	/// <summary>
	/// Represents an integer value range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteHeaderMatchIntegerRange
	{
		
		/// <summary>
		/// End of the range (exclusive)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		/// <summary>
		/// Start of the range (inclusive)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	/// <summary>
	/// Specifications to match a query parameter in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRouteQueryParameterMatch
	{
		
		/// <summary>
		/// The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exactMatch")]
		public string ExactMatch { get; set; }
		
		/// <summary>
		/// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presentMatch")]
		public System.Nullable<System.Boolean> PresentMatch { get; set; }
		
		/// <summary>
		/// The name of the query parameter to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryParameter")]
		public string QueryParameter { get; set; }
		
		/// <summary>
		/// The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regexMatch")]
		public string RegexMatch { get; set; }
	}
	
	/// <summary>
	/// `LbRouteExtension` is a resource that lets you control where traffic is routed to for a given request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LbRouteExtension
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A human-readable description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. A set of ordered extension chains that contain the match conditions and extensions to execute. Match conditions for each extension chain are evaluated in sequence for a given request. The first extension chain that has a condition that matches the request is executed. Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensionChains")]
		public ExtensionChain[] ExtensionChains { get; set; }
		
		/// <summary>
		/// Required. A list of references to the forwarding rules to which this service extension is attached to. At least one forwarding rule is required. There can be only one `LbRouteExtension` resource per forwarding rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardingRules")]
		public string[] ForwardingRules { get; set; }
		
		/// <summary>
		/// Optional. Set of labels associated with the `LbRouteExtension` resource. The format must comply with [the following requirements](/compute/docs/labeling-resources#requirements).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. Supported values: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancingScheme")]
		public System.Nullable<LbRouteExtensionLoadBalancingScheme> LoadBalancingScheme { get; set; }
		
		/// <summary>
		/// Required. Name of the `LbRouteExtension` resource in the following format: `projects/{project}/locations/{location}/lbRouteExtensions/{lb_route_extension}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LbRouteExtensionLoadBalancingScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAD_BALANCING_SCHEME_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_MANAGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_MANAGED = 2,
	}
	
	/// <summary>
	/// `LbTrafficExtension` is a resource that lets the extension service modify the headers and payloads of both requests and responses without impacting the choice of backend services or any other security policies associated with the backend service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LbTrafficExtension
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A human-readable description of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. A set of ordered extension chains that contain the match conditions and extensions to execute. Match conditions for each extension chain are evaluated in sequence for a given request. The first extension chain that has a condition that matches the request is executed. Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensionChains")]
		public ExtensionChain[] ExtensionChains { get; set; }
		
		/// <summary>
		/// Required. A list of references to the forwarding rules to which this service extension is attached to. At least one forwarding rule is required. There can be only one `LBTrafficExtension` resource per forwarding rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardingRules")]
		public string[] ForwardingRules { get; set; }
		
		/// <summary>
		/// Optional. Set of labels associated with the `LbTrafficExtension` resource. The format must comply with [the following requirements](/compute/docs/labeling-resources#requirements).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. Supported values: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`. For more information, refer to [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancingScheme")]
		public LbRouteExtensionLoadBalancingScheme LoadBalancingScheme { get; set; }
		
		/// <summary>
		/// Required. Name of the `LbTrafficExtension` resource in the following format: `projects/{project}/locations/{location}/lbTrafficExtensions/{lb_traffic_extension}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListEndpointPolicies method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEndpointPoliciesResponse
	{
		
		/// <summary>
		/// List of EndpointPolicy resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointPolicies")]
		public EndpointPolicy[] EndpointPolicies { get; set; }
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListGateways method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGatewaysResponse
	{
		
		/// <summary>
		/// List of Gateway resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateways")]
		public Gateway[] Gateways { get; set; }
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListGrpcRoutes method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGrpcRoutesResponse
	{
		
		/// <summary>
		/// List of GrpcRoute resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grpcRoutes")]
		public GrpcRoute[] GrpcRoutes { get; set; }
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListHttpRoutes method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListHttpRoutesResponse
	{
		
		/// <summary>
		/// List of HttpRoute resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpRoutes")]
		public HttpRoute[] HttpRoutes { get; set; }
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing `LbRouteExtension` resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLbRouteExtensionsResponse
	{
		
		/// <summary>
		/// The list of `LbRouteExtension` resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lbRouteExtensions")]
		public LbRouteExtension[] LbRouteExtensions { get; set; }
		
		/// <summary>
		/// A token identifying a page of results that the server returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Message for response to listing `LbTrafficExtension` resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLbTrafficExtensionsResponse
	{
		
		/// <summary>
		/// The list of `LbTrafficExtension` resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lbTrafficExtensions")]
		public LbTrafficExtension[] LbTrafficExtensions { get; set; }
		
		/// <summary>
		/// A token identifying a page of results that the server returns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListMeshes method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMeshesResponse
	{
		
		/// <summary>
		/// List of Mesh resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meshes")]
		public Mesh[] Meshes { get; set; }
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Mesh represents a logical configuration grouping for workload to workload communication within a service mesh. Routes that point to mesh dictate how requests are routed within this logical mesh boundary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mesh
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Determines if envoy will insert internal debug headers into upstream requests. Other Envoy headers may still be injected. By default, envoy will not insert any debug headers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envoyHeaders")]
		public GatewayEnvoyHeaders EnvoyHeaders { get; set; }
		
		/// <summary>
		/// Optional. If set to a valid TCP port (1-65535), instructs the SIDECAR proxy to listen on the specified port of localhost (127.0.0.1) address. The SIDECAR proxy will expect all traffic to be redirected to this port regardless of its actual ip:port destination. If unset, a port '15001' is used as the interception port. This is applicable only for sidecar proxy deployments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interceptionPort")]
		public System.Nullable<System.Int32> InterceptionPort { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the Mesh resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. Name of the Mesh resource. It matches pattern `projects/*/locations/global/meshes/`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Server-defined URL of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListServiceBindings method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceBindingsResponse
	{
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of ServiceBinding resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceBindings")]
		public ServiceBinding[] ServiceBindings { get; set; }
	}
	
	/// <summary>
	/// ServiceBinding is the resource that defines a Service Directory Service to be used in a BackendService resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceBinding
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the ServiceBinding resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. Name of the ServiceBinding resource. It matches pattern `projects/*/locations/global/serviceBindings/service_binding_name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The full Service Directory Service name of the format projects/*/locations/*/namespaces/*/services/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the Service Directory Service against which the Service Binding resource is validated. This is populated when the Service Binding resource is used in another resource (like Backend Service). This is of the UUID4 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListServiceLbPolicies method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServiceLbPoliciesResponse
	{
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of ServiceLbPolicy resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceLbPolicies")]
		public ServiceLbPolicy[] ServiceLbPolicies { get; set; }
	}
	
	/// <summary>
	/// ServiceLbPolicy holds global load balancing and traffic distribution configuration that can be applied to a BackendService.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceLbPolicy
	{
		
		/// <summary>
		/// Option to specify if an unhealthy IG/NEG should be considered for global load balancing and traffic routing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoCapacityDrain")]
		public ServiceLbPolicyAutoCapacityDrain AutoCapacityDrain { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when this resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverConfig")]
		public ServiceLbPolicyFailoverConfig FailoverConfig { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the ServiceLbPolicy resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. The type of load balancing algorithm to be used. The default behavior is WATERFALL_BY_REGION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancingAlgorithm")]
		public System.Nullable<ServiceLbPolicyLoadBalancingAlgorithm> LoadBalancingAlgorithm { get; set; }
		
		/// <summary>
		/// Required. Name of the ServiceLbPolicy resource. It matches pattern `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when this resource was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Option to specify if an unhealthy IG/NEG should be considered for global load balancing and traffic routing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceLbPolicyAutoCapacityDrain
	{
		
		/// <summary>
		/// Optional. If set to 'True', an unhealthy IG/NEG will be set as drained. - An IG/NEG is considered unhealthy if less than 25% of the instances/endpoints in the IG/NEG are healthy. - This option will never result in draining more than 50% of the configured IGs/NEGs for the Backend Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enable")]
		public System.Nullable<System.Boolean> Enable { get; set; }
	}
	
	/// <summary>
	/// Option to specify health based failover behavior. This is not related to Network load balancer FailoverPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceLbPolicyFailoverConfig
	{
		
		/// <summary>
		/// Optional. The percentage threshold that a load balancer will begin to send traffic to failover backends. If the percentage of endpoints in a MIG/NEG is smaller than this value, traffic would be sent to failover backends if possible. This field should be set to a value between 1 and 99. The default value is 50 for Global external HTTP(S) load balancer (classic) and Proxyless service mesh, and 70 for others.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverHealthThreshold")]
		public System.Nullable<System.Int32> FailoverHealthThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceLbPolicyLoadBalancingAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAD_BALANCING_ALGORITHM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPRAY_TO_WORLD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPRAY_TO_REGION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WATERFALL_BY_REGION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WATERFALL_BY_ZONE = 4,
	}
	
	/// <summary>
	/// Response returned by the ListTcpRoutes method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTcpRoutesResponse
	{
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of TcpRoute resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tcpRoutes")]
		public TcpRoute[] TcpRoutes { get; set; }
	}
	
	/// <summary>
	/// TcpRoute is the resource defining how TCP traffic should be routed by a Mesh/Gateway resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TcpRoute
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateways")]
		public string[] Gateways { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the TcpRoute resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meshes")]
		public string[] Meshes { get; set; }
		
		/// <summary>
		/// Required. Name of the TcpRoute resource. It matches pattern `projects/*/locations/global/tcpRoutes/tcp_route_name>`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public TcpRouteRouteRule[] Rules { get; set; }
		
		/// <summary>
		/// Output only. Server-defined URL of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Specifies how to match traffic and how to route traffic when traffic is matched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TcpRouteRouteRule
	{
		
		/// <summary>
		/// The specifications for routing traffic and applying associated policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public TcpRouteRouteAction Action { get; set; }
		
		/// <summary>
		/// Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public TcpRouteRouteMatch[] Matches { get; set; }
	}
	
	/// <summary>
	/// The specifications for routing traffic and applying associated policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TcpRouteRouteAction
	{
		
		/// <summary>
		/// Optional. The destination services to which traffic should be forwarded. At least one destination service is required. Only one of route destination or original destination can be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public TcpRouteRouteDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 30 seconds. If set to 0s, the timeout will be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleTimeout")]
		public string IdleTimeout { get; set; }
		
		/// <summary>
		/// Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false. Only one of route destinations or original destination can be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalDestination")]
		public System.Nullable<System.Boolean> OriginalDestination { get; set; }
	}
	
	/// <summary>
	/// Describe the destination for traffic to be routed to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TcpRouteRouteDestination
	{
		
		/// <summary>
		/// Required. The URL of a BackendService to route traffic to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TcpRouteRouteMatch
	{
		
		/// <summary>
		/// Required. Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Required. Specifies the destination port to match against.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
	}
	
	/// <summary>
	/// Response returned by the ListTlsRoutes method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTlsRoutesResponse
	{
		
		/// <summary>
		/// If there might be more results than those appearing in this response, then `next_page_token` is included. To get the next set of results, call this method again using the value of `next_page_token` as `page_token`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of TlsRoute resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tlsRoutes")]
		public TlsRoute[] TlsRoutes { get; set; }
	}
	
	/// <summary>
	/// TlsRoute defines how traffic should be routed based on SNI and other matching L3 attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TlsRoute
	{
		
		/// <summary>
		/// Output only. The timestamp when the resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A free-text description of the resource. Max length 1024 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateways")]
		public string[] Gateways { get; set; }
		
		/// <summary>
		/// Optional. Set of label tags associated with the TlsRoute resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meshes")]
		public string[] Meshes { get; set; }
		
		/// <summary>
		/// Required. Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public TlsRouteRouteRule[] Rules { get; set; }
		
		/// <summary>
		/// Output only. Server-defined URL of this resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Specifies how to match traffic and how to route traffic when traffic is matched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TlsRouteRouteRule
	{
		
		/// <summary>
		/// The specifications for routing traffic and applying associated policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public TlsRouteRouteAction Action { get; set; }
		
		/// <summary>
		/// Required. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matches")]
		public TlsRouteRouteMatch[] Matches { get; set; }
	}
	
	/// <summary>
	/// The specifications for routing traffic and applying associated policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TlsRouteRouteAction
	{
		
		/// <summary>
		/// Required. The destination services to which traffic should be forwarded. At least one destination service is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public TlsRouteRouteDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleTimeout")]
		public string IdleTimeout { get; set; }
	}
	
	/// <summary>
	/// Describe the destination for traffic to be routed to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TlsRouteRouteDestination
	{
		
		/// <summary>
		/// Required. The URL of a BackendService to route traffic to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: - weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "AND"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TlsRouteRouteMatch
	{
		
		/// <summary>
		/// Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alpn")]
		public string[] Alpn { get; set; }
		
		/// <summary>
		/// Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. `www.example.com` will be first matched against `www.example.com`, then `*.example.com`, then `*.com.` Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sniHost")]
		public string[] SniHost { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a single TlsRoute.
		/// Networkservices_projects_locations_tlsRoutes_delete v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. A name of the TlsRoute to delete. Must be in the format `projects/*/locations/global/tlsRoutes/*`.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server can ignore the request if it has already been completed. The server guarantees that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, ignores the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_tlsRoutes_deleteAsync(string name, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details of a single TlsRoute.
		/// Networkservices_projects_locations_tlsRoutes_get v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. A name of the TlsRoute to get. Must be in the format `projects/*/locations/global/tlsRoutes/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<TlsRoute> Networkservices_projects_locations_tlsRoutes_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TlsRoute>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the parameters of a single TlsRoute.
		/// Networkservices_projects_locations_tlsRoutes_patch v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.</param>
		/// <param name="updateMask">Optional. Field mask is used to specify the fields to be overwritten in the TlsRoute resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_tlsRoutes_patchAsync(string name, string updateMask, TlsRoute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Networkservices_projects_locations_list v1beta1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Networkservices_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Networkservices_projects_locations_operations_list v1beta1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Networkservices_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Networkservices_projects_locations_operations_cancel v1beta1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Networkservices_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists EndpointPolicies in a given project and location.
		/// Networkservices_projects_locations_endpointPolicies_list v1beta1/{parent}/endpointPolicies
		/// </summary>
		/// <param name="parent">Required. The project and location from which the EndpointPolicies should be listed, specified in the format `projects/*/locations/global`.</param>
		/// <param name="pageSize">Maximum number of EndpointPolicies to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListEndpointPoliciesResponse` Indicates that this is a continuation of a prior `ListEndpointPolicies` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEndpointPoliciesResponse> Networkservices_projects_locations_endpointPolicies_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/endpointPolicies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEndpointPoliciesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new EndpointPolicy in a given project and location.
		/// Networkservices_projects_locations_endpointPolicies_create v1beta1/{parent}/endpointPolicies
		/// </summary>
		/// <param name="parent">Required. The parent resource of the EndpointPolicy. Must be in the format `projects/*/locations/global`.</param>
		/// <param name="endpointPolicyId">Required. Short name of the EndpointPolicy resource to be created. E.g. "CustomECS".</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_endpointPolicies_createAsync(string parent, string endpointPolicyId, EndpointPolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/endpointPolicies&endpointPolicyId=" + (endpointPolicyId==null? "" : System.Uri.EscapeDataString(endpointPolicyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Gateways in a given project and location.
		/// Networkservices_projects_locations_gateways_list v1beta1/{parent}/gateways
		/// </summary>
		/// <param name="parent">Required. The project and location from which the Gateways should be listed, specified in the format `projects/*/locations/*`.</param>
		/// <param name="pageSize">Maximum number of Gateways to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListGatewaysResponse` Indicates that this is a continuation of a prior `ListGateways` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGatewaysResponse> Networkservices_projects_locations_gateways_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/gateways&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGatewaysResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Gateway in a given project and location.
		/// Networkservices_projects_locations_gateways_create v1beta1/{parent}/gateways
		/// </summary>
		/// <param name="parent">Required. The parent resource of the Gateway. Must be in the format `projects/*/locations/*`.</param>
		/// <param name="gatewayId">Required. Short name of the Gateway resource to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_gateways_createAsync(string parent, string gatewayId, Gateway requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/gateways&gatewayId=" + (gatewayId==null? "" : System.Uri.EscapeDataString(gatewayId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists GrpcRoutes in a given project and location.
		/// Networkservices_projects_locations_grpcRoutes_list v1beta1/{parent}/grpcRoutes
		/// </summary>
		/// <param name="parent">Required. The project and location from which the GrpcRoutes should be listed, specified in the format `projects/*/locations/global`.</param>
		/// <param name="pageSize">Maximum number of GrpcRoutes to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListGrpcRoutesResponse` Indicates that this is a continuation of a prior `ListGrpcRoutes` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGrpcRoutesResponse> Networkservices_projects_locations_grpcRoutes_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/grpcRoutes&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGrpcRoutesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new GrpcRoute in a given project and location.
		/// Networkservices_projects_locations_grpcRoutes_create v1beta1/{parent}/grpcRoutes
		/// </summary>
		/// <param name="parent">Required. The parent resource of the GrpcRoute. Must be in the format `projects/*/locations/global`.</param>
		/// <param name="grpcRouteId">Required. Short name of the GrpcRoute resource to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_grpcRoutes_createAsync(string parent, string grpcRouteId, GrpcRoute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/grpcRoutes&grpcRouteId=" + (grpcRouteId==null? "" : System.Uri.EscapeDataString(grpcRouteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists HttpRoute in a given project and location.
		/// Networkservices_projects_locations_httpRoutes_list v1beta1/{parent}/httpRoutes
		/// </summary>
		/// <param name="parent">Required. The project and location from which the HttpRoutes should be listed, specified in the format `projects/*/locations/global`.</param>
		/// <param name="pageSize">Maximum number of HttpRoutes to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListHttpRoutesResponse` Indicates that this is a continuation of a prior `ListHttpRoutes` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListHttpRoutesResponse> Networkservices_projects_locations_httpRoutes_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/httpRoutes&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListHttpRoutesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new HttpRoute in a given project and location.
		/// Networkservices_projects_locations_httpRoutes_create v1beta1/{parent}/httpRoutes
		/// </summary>
		/// <param name="parent">Required. The parent resource of the HttpRoute. Must be in the format `projects/*/locations/global`.</param>
		/// <param name="httpRouteId">Required. Short name of the HttpRoute resource to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_httpRoutes_createAsync(string parent, string httpRouteId, HttpRoute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/httpRoutes&httpRouteId=" + (httpRouteId==null? "" : System.Uri.EscapeDataString(httpRouteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists `LbRouteExtension` resources in a given project and location.
		/// Networkservices_projects_locations_lbRouteExtensions_list v1beta1/{parent}/lbRouteExtensions
		/// </summary>
		/// <param name="parent">Required. The project and location from which the `LbRouteExtension` resources are listed, specified in the following format: `projects/{project}/locations/{location}`.</param>
		/// <param name="filter">Optional. Filtering results.</param>
		/// <param name="orderBy">Optional. Hint for how to order the results.</param>
		/// <param name="pageSize">Optional. Requested page size. The server might return fewer items than requested. If unspecified, the server picks an appropriate default.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results that the server returns.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLbRouteExtensionsResponse> Networkservices_projects_locations_lbRouteExtensions_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/lbRouteExtensions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLbRouteExtensionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new `LbRouteExtension` resource in a given project and location.
		/// Networkservices_projects_locations_lbRouteExtensions_create v1beta1/{parent}/lbRouteExtensions
		/// </summary>
		/// <param name="parent">Required. The parent resource of the `LbRouteExtension` resource. Must be in the format `projects/{project}/locations/{location}`.</param>
		/// <param name="lbRouteExtensionId">Required. User-provided ID of the `LbRouteExtension` resource to be created.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server can ignore the request if it has already been completed. The server guarantees that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, ignores the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_lbRouteExtensions_createAsync(string parent, string lbRouteExtensionId, string requestId, LbRouteExtension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/lbRouteExtensions&lbRouteExtensionId=" + (lbRouteExtensionId==null? "" : System.Uri.EscapeDataString(lbRouteExtensionId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists `LbTrafficExtension` resources in a given project and location.
		/// Networkservices_projects_locations_lbTrafficExtensions_list v1beta1/{parent}/lbTrafficExtensions
		/// </summary>
		/// <param name="parent">Required. The project and location from which the `LbTrafficExtension` resources are listed, specified in the following format: `projects/{project}/locations/{location}`.</param>
		/// <param name="filter">Optional. Filtering results.</param>
		/// <param name="orderBy">Optional. Hint for how to order the results.</param>
		/// <param name="pageSize">Optional. Requested page size. The server might return fewer items than requested. If unspecified, the server picks an appropriate default.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results that the server returns.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLbTrafficExtensionsResponse> Networkservices_projects_locations_lbTrafficExtensions_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/lbTrafficExtensions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLbTrafficExtensionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new `LbTrafficExtension` resource in a given project and location.
		/// Networkservices_projects_locations_lbTrafficExtensions_create v1beta1/{parent}/lbTrafficExtensions
		/// </summary>
		/// <param name="parent">Required. The parent resource of the `LbTrafficExtension` resource. Must be in the format `projects/{project}/locations/{location}`.</param>
		/// <param name="lbTrafficExtensionId">Required. User-provided ID of the `LbTrafficExtension` resource to be created.</param>
		/// <param name="requestId">Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server can ignore the request if it has already been completed. The server guarantees that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, ignores the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_lbTrafficExtensions_createAsync(string parent, string lbTrafficExtensionId, string requestId, LbTrafficExtension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/lbTrafficExtensions&lbTrafficExtensionId=" + (lbTrafficExtensionId==null? "" : System.Uri.EscapeDataString(lbTrafficExtensionId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Meshes in a given project and location.
		/// Networkservices_projects_locations_meshes_list v1beta1/{parent}/meshes
		/// </summary>
		/// <param name="parent">Required. The project and location from which the Meshes should be listed, specified in the format `projects/*/locations/global`.</param>
		/// <param name="pageSize">Maximum number of Meshes to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListMeshesResponse` Indicates that this is a continuation of a prior `ListMeshes` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMeshesResponse> Networkservices_projects_locations_meshes_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/meshes&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMeshesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Mesh in a given project and location.
		/// Networkservices_projects_locations_meshes_create v1beta1/{parent}/meshes
		/// </summary>
		/// <param name="parent">Required. The parent resource of the Mesh. Must be in the format `projects/*/locations/global`.</param>
		/// <param name="meshId">Required. Short name of the Mesh resource to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_meshes_createAsync(string parent, string meshId, Mesh requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/meshes&meshId=" + (meshId==null? "" : System.Uri.EscapeDataString(meshId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists ServiceBinding in a given project and location.
		/// Networkservices_projects_locations_serviceBindings_list v1beta1/{parent}/serviceBindings
		/// </summary>
		/// <param name="parent">Required. The project and location from which the ServiceBindings should be listed, specified in the format `projects/*/locations/global`.</param>
		/// <param name="pageSize">Maximum number of ServiceBindings to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListServiceBindingsResponse` Indicates that this is a continuation of a prior `ListRouters` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListServiceBindingsResponse> Networkservices_projects_locations_serviceBindings_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/serviceBindings&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServiceBindingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new ServiceBinding in a given project and location.
		/// Networkservices_projects_locations_serviceBindings_create v1beta1/{parent}/serviceBindings
		/// </summary>
		/// <param name="parent">Required. The parent resource of the ServiceBinding. Must be in the format `projects/*/locations/global`.</param>
		/// <param name="serviceBindingId">Required. Short name of the ServiceBinding resource to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_serviceBindings_createAsync(string parent, string serviceBindingId, ServiceBinding requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/serviceBindings&serviceBindingId=" + (serviceBindingId==null? "" : System.Uri.EscapeDataString(serviceBindingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists ServiceLbPolicies in a given project and location.
		/// Networkservices_projects_locations_serviceLbPolicies_list v1beta1/{parent}/serviceLbPolicies
		/// </summary>
		/// <param name="parent">Required. The project and location from which the ServiceLbPolicies should be listed, specified in the format `projects/{project}/locations/{location}`.</param>
		/// <param name="pageSize">Maximum number of ServiceLbPolicies to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListServiceLbPoliciesResponse` Indicates that this is a continuation of a prior `ListRouters` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListServiceLbPoliciesResponse> Networkservices_projects_locations_serviceLbPolicies_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/serviceLbPolicies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServiceLbPoliciesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new ServiceLbPolicy in a given project and location.
		/// Networkservices_projects_locations_serviceLbPolicies_create v1beta1/{parent}/serviceLbPolicies
		/// </summary>
		/// <param name="parent">Required. The parent resource of the ServiceLbPolicy. Must be in the format `projects/{project}/locations/{location}`.</param>
		/// <param name="serviceLbPolicyId">Required. Short name of the ServiceLbPolicy resource to be created. E.g. for resource name `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`. the id is value of {service_lb_policy_name}</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_serviceLbPolicies_createAsync(string parent, string serviceLbPolicyId, ServiceLbPolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/serviceLbPolicies&serviceLbPolicyId=" + (serviceLbPolicyId==null? "" : System.Uri.EscapeDataString(serviceLbPolicyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists TcpRoute in a given project and location.
		/// Networkservices_projects_locations_tcpRoutes_list v1beta1/{parent}/tcpRoutes
		/// </summary>
		/// <param name="parent">Required. The project and location from which the TcpRoutes should be listed, specified in the format `projects/*/locations/global`.</param>
		/// <param name="pageSize">Maximum number of TcpRoutes to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListTcpRoutesResponse` Indicates that this is a continuation of a prior `ListTcpRoutes` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTcpRoutesResponse> Networkservices_projects_locations_tcpRoutes_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tcpRoutes&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTcpRoutesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new TcpRoute in a given project and location.
		/// Networkservices_projects_locations_tcpRoutes_create v1beta1/{parent}/tcpRoutes
		/// </summary>
		/// <param name="parent">Required. The parent resource of the TcpRoute. Must be in the format `projects/*/locations/global`.</param>
		/// <param name="tcpRouteId">Required. Short name of the TcpRoute resource to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_tcpRoutes_createAsync(string parent, string tcpRouteId, TcpRoute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tcpRoutes&tcpRouteId=" + (tcpRouteId==null? "" : System.Uri.EscapeDataString(tcpRouteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists TlsRoute in a given project and location.
		/// Networkservices_projects_locations_tlsRoutes_list v1beta1/{parent}/tlsRoutes
		/// </summary>
		/// <param name="parent">Required. The project and location from which the TlsRoutes should be listed, specified in the format `projects/*/locations/global`.</param>
		/// <param name="pageSize">Maximum number of TlsRoutes to return per call.</param>
		/// <param name="pageToken">The value returned by the last `ListTlsRoutesResponse` Indicates that this is a continuation of a prior `ListTlsRoutes` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTlsRoutesResponse> Networkservices_projects_locations_tlsRoutes_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tlsRoutes&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTlsRoutesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new TlsRoute in a given project and location.
		/// Networkservices_projects_locations_tlsRoutes_create v1beta1/{parent}/tlsRoutes
		/// </summary>
		/// <param name="parent">Required. The parent resource of the TlsRoute. Must be in the format `projects/*/locations/global`.</param>
		/// <param name="tlsRouteId">Required. Short name of the TlsRoute resource to be created.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Networkservices_projects_locations_tlsRoutes_createAsync(string parent, string tlsRouteId, TlsRoute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tlsRoutes&tlsRouteId=" + (tlsRouteId==null? "" : System.Uri.EscapeDataString(tlsRouteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Networkservices_projects_locations_serviceLbPolicies_getIamPolicy v1beta1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Networkservices_projects_locations_serviceLbPolicies_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Networkservices_projects_locations_serviceLbPolicies_setIamPolicy v1beta1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Networkservices_projects_locations_serviceLbPolicies_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Networkservices_projects_locations_serviceLbPolicies_testIamPermissions v1beta1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Networkservices_projects_locations_serviceLbPolicies_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
