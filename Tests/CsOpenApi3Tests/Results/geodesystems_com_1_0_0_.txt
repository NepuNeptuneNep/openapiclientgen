//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// API for Extract sheets
		/// API to call: Extract sheets
		/// Media_tabular_extractsheet repository/entry/show
		/// </summary>
		/// <param name="output">Output type  -don't change</param>
		/// <param name="entryid">Entry ID</param>
		/// <param name="arg1">Sheets</param>
		/// <returns>No response was specified</returns>
		public async Task Media_tabular_extractsheetAsync(string output, string entryid, string arg1, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/entry/show?output=" + (output==null? "" : System.Uri.EscapeDataString(output))+"&entryid=" + (entryid==null? "" : System.Uri.EscapeDataString(entryid))+"&arg1=" + (arg1==null? "" : System.Uri.EscapeDataString(arg1));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for '2017 Boulder Election Expenditures' entry type
		/// API to search for entries of type 2017 Boulder Election Expenditures
		/// Search_2017_boulder_election_expenditures repository/search/type/2017_boulder_election_expenditures
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_2017_boulder_election_expenditures_committee">Committee</param>
		/// <param name="search_db_2017_boulder_election_expenditures_transaction_date">Transaction Date</param>
		/// <param name="search_db_2017_boulder_election_expenditures_name">Name</param>
		/// <param name="search_db_2017_boulder_election_expenditures_street">Street</param>
		/// <param name="search_db_2017_boulder_election_expenditures_city">City</param>
		/// <param name="search_db_2017_boulder_election_expenditures_state">State</param>
		/// <param name="search_db_2017_boulder_election_expenditures_zip">Zip</param>
		/// <param name="search_db_2017_boulder_election_expenditures_expenditure">Expenditure</param>
		/// <param name="search_db_2017_boulder_election_expenditures_purpose">Purpose</param>
		/// <returns>No response was specified</returns>
		public async Task Search_2017_boulder_election_expendituresAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_2017_boulder_election_expenditures_committee, 
					string search_db_2017_boulder_election_expenditures_transaction_date, 
					string search_db_2017_boulder_election_expenditures_name, 
					string search_db_2017_boulder_election_expenditures_street, 
					string search_db_2017_boulder_election_expenditures_city, 
					string search_db_2017_boulder_election_expenditures_state, 
					string search_db_2017_boulder_election_expenditures_zip, 
					double search_db_2017_boulder_election_expenditures_expenditure, 
					string search_db_2017_boulder_election_expenditures_purpose, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/2017_boulder_election_expenditures?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_2017_boulder_election_expenditures.committee=" + (search_db_2017_boulder_election_expenditures_committee==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_committee))+"&search.db_2017_boulder_election_expenditures.transaction_date=" + (search_db_2017_boulder_election_expenditures_transaction_date==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_transaction_date))+"&search.db_2017_boulder_election_expenditures.name=" + (search_db_2017_boulder_election_expenditures_name==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_name))+"&search.db_2017_boulder_election_expenditures.street=" + (search_db_2017_boulder_election_expenditures_street==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_street))+"&search.db_2017_boulder_election_expenditures.city=" + (search_db_2017_boulder_election_expenditures_city==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_city))+"&search.db_2017_boulder_election_expenditures.state=" + (search_db_2017_boulder_election_expenditures_state==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_state))+"&search.db_2017_boulder_election_expenditures.zip=" + (search_db_2017_boulder_election_expenditures_zip==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_zip))+"&search.db_2017_boulder_election_expenditures.expenditure="+search_db_2017_boulder_election_expenditures_expenditure+"&search.db_2017_boulder_election_expenditures.purpose=" + (search_db_2017_boulder_election_expenditures_purpose==null? "" : System.Uri.EscapeDataString(search_db_2017_boulder_election_expenditures_purpose));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Any file type' entry type
		/// API to search for entries of type Any file type
		/// Search_any repository/search/type/any
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_anyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/any?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Before and After Images' entry type
		/// API to search for entries of type Before and After Images
		/// Search_beforeafter repository/search/type/beforeafter
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_beforeafterAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/beforeafter?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Bibliographic Entry' entry type
		/// API to search for entries of type Bibliographic Entry
		/// Search_biblio repository/search/type/biblio
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_biblio_primary_author">Primary Author</param>
		/// <param name="search_biblio_type">Publication Type</param>
		/// <param name="search_biblio_institution">Institution</param>
		/// <param name="search_biblio_other_authors">Other Authors</param>
		/// <param name="search_biblio_publication">Publication</param>
		/// <returns>No response was specified</returns>
		public async Task Search_biblioAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_biblio_primary_author, 
					string search_biblio_type, 
					string search_biblio_institution, 
					string search_biblio_other_authors, 
					string search_biblio_publication, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/biblio?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.biblio.primary_author=" + (search_biblio_primary_author==null? "" : System.Uri.EscapeDataString(search_biblio_primary_author))+"&search.biblio.type=" + (search_biblio_type==null? "" : System.Uri.EscapeDataString(search_biblio_type))+"&search.biblio.institution=" + (search_biblio_institution==null? "" : System.Uri.EscapeDataString(search_biblio_institution))+"&search.biblio.other_authors=" + (search_biblio_other_authors==null? "" : System.Uri.EscapeDataString(search_biblio_other_authors))+"&search.biblio.publication=" + (search_biblio_publication==null? "" : System.Uri.EscapeDataString(search_biblio_publication));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'DICOM File' entry type
		/// API to search for entries of type DICOM File
		/// Search_bio_dicom repository/search/type/bio_dicom
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_dicomAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_dicom?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'DICOM Test File' entry type
		/// API to search for entries of type DICOM Test File
		/// Search_bio_dicom_test repository/search/type/bio_dicom_test
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_bio_dicom_test_PatientName">Patient Name</param>
		/// <param name="search_bio_dicom_test_PatientID">Patient ID</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_dicom_testAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_bio_dicom_test_PatientName, 
					string search_bio_dicom_test_PatientID, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_dicom_test?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.bio_dicom_test.PatientName=" + (search_bio_dicom_test_PatientName==null? "" : System.Uri.EscapeDataString(search_bio_dicom_test_PatientName))+"&search.bio_dicom_test.PatientID=" + (search_bio_dicom_test_PatientID==null? "" : System.Uri.EscapeDataString(search_bio_dicom_test_PatientID));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FASTA File' entry type
		/// API to search for entries of type FASTA File
		/// Search_bio_fasta repository/search/type/bio_fasta
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_fastaAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_fasta?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FASTQ File' entry type
		/// API to search for entries of type FASTQ File
		/// Search_bio_fastq repository/search/type/bio_fastq
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_fastqAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_fastq?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'HMMER Index File' entry type
		/// API to search for entries of type HMMER Index File
		/// Search_bio_hmmer_index repository/search/type/bio_hmmer_index
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_hmmer_indexAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_hmmer_index?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'OME TIFF File' entry type
		/// API to search for entries of type OME TIFF File
		/// Search_bio_ome_tiff repository/search/type/bio_ome_tiff
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_ome_tiffAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_ome_tiff?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Assay' entry type
		/// API to search for entries of type Assay
		/// Search_bio_ontology_assay repository/search/type/bio_ontology_assay
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_ontology_assayAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_ontology_assay?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Cohort' entry type
		/// API to search for entries of type Cohort
		/// Search_bio_ontology_cohort repository/search/type/bio_ontology_cohort
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_ontology_cohortAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_ontology_cohort?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Person' entry type
		/// API to search for entries of type Person
		/// Search_bio_ontology_person repository/search/type/bio_ontology_person
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_bio_ontology_person_gender">Gender</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_ontology_personAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_bio_ontology_person_gender, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_ontology_person?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.bio_ontology_person.gender=" + (search_bio_ontology_person_gender==null? "" : System.Uri.EscapeDataString(search_bio_ontology_person_gender));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Sample' entry type
		/// API to search for entries of type Sample
		/// Search_bio_ontology_sample repository/search/type/bio_ontology_sample
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_ontology_sampleAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_ontology_sample?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Series' entry type
		/// API to search for entries of type Series
		/// Search_bio_ontology_series repository/search/type/bio_ontology_series
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_ontology_seriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_ontology_series?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Study' entry type
		/// API to search for entries of type Study
		/// Search_bio_ontology_study repository/search/type/bio_ontology_study
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_ontology_studyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_ontology_study?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SAM Data' entry type
		/// API to search for entries of type SAM Data
		/// Search_bio_sam repository/search/type/bio_sam
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_samAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_sam?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'PDB Protein File' entry type
		/// API to search for entries of type PDB Protein File
		/// Search_bio_sf_pdb repository/search/type/bio_sf_pdb
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_sf_pdbAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_sf_pdb?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Sequence Read Archive' entry type
		/// API to search for entries of type Sequence Read Archive
		/// Search_bio_sra repository/search/type/bio_sra
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_sraAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_sra?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Stockholm File' entry type
		/// API to search for entries of type Stockholm File
		/// Search_bio_stockholm repository/search/type/bio_stockholm
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_stockholmAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_stockholm?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Taxonomic Entry' entry type
		/// API to search for entries of type Taxonomic Entry
		/// Search_bio_taxonomy repository/search/type/bio_taxonomy
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_bio_taxonomy_rank">Rank</param>
		/// <param name="search_bio_taxonomy_embl_code">EMBL Code</param>
		/// <param name="search_bio_taxonomy_division">Divison</param>
		/// <param name="search_bio_taxonomy_inherited_div">Inheritied division</param>
		/// <param name="search_bio_taxonomy_aliases">Also known</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bio_taxonomyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_bio_taxonomy_rank, 
					string search_bio_taxonomy_embl_code, 
					string search_bio_taxonomy_division, 
					bool search_bio_taxonomy_inherited_div, 
					string search_bio_taxonomy_aliases, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bio_taxonomy?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.bio_taxonomy.rank=" + (search_bio_taxonomy_rank==null? "" : System.Uri.EscapeDataString(search_bio_taxonomy_rank))+"&search.bio_taxonomy.embl_code=" + (search_bio_taxonomy_embl_code==null? "" : System.Uri.EscapeDataString(search_bio_taxonomy_embl_code))+"&search.bio_taxonomy.division=" + (search_bio_taxonomy_division==null? "" : System.Uri.EscapeDataString(search_bio_taxonomy_division))+"&search.bio_taxonomy.inherited_div="+search_bio_taxonomy_inherited_div+"&search.bio_taxonomy.aliases=" + (search_bio_taxonomy_aliases==null? "" : System.Uri.EscapeDataString(search_bio_taxonomy_aliases));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Weblog Entry' entry type
		/// API to search for entries of type Weblog Entry
		/// Search_blogentry repository/search/type/blogentry
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_blogentry_blogtext">Extra Text</param>
		/// <returns>No response was specified</returns>
		public async Task Search_blogentryAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_blogentry_blogtext, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/blogentry?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.blogentry.blogtext=" + (search_blogentry_blogtext==null? "" : System.Uri.EscapeDataString(search_blogentry_blogtext));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder Rental Housing' entry type
		/// API to search for entries of type Boulder Rental Housing
		/// Search_bolder_rental_housing repository/search/type/bolder_rental_housing
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_bolder_rental_housing_propaddr1">Property Address</param>
		/// <param name="search_db_bolder_rental_housing_rentaltype">Rental Type</param>
		/// <param name="search_db_bolder_rental_housing_bldgtype">Building Type</param>
		/// <param name="search_db_bolder_rental_housing_dwellunits">Dwelling Units</param>
		/// <param name="search_db_bolder_rental_housing_roomunits">Room Units</param>
		/// <param name="search_db_bolder_rental_housing_neighbrhd">Neighborhood</param>
		/// <param name="search_db_bolder_rental_housing_complexnm">Complex Name</param>
		/// <param name="search_db_bolder_rental_housing_name">Name</param>
		/// <param name="search_db_bolder_rental_housing_persontype">Person Type</param>
		/// <param name="search_db_bolder_rental_housing_company">Company</param>
		/// <param name="search_db_bolder_rental_housing_engcompl">Engcompl</param>
		/// <param name="search_db_bolder_rental_housing_licenseexp">Expiration Date</param>
		/// <param name="search_db_bolder_rental_housing_licensenum">Licensenum</param>
		/// <param name="search_db_bolder_rental_housing_ppl1_coname">Ppl1 Coname</param>
		/// <param name="search_db_bolder_rental_housing_person_1">Person 1</param>
		/// <param name="search_db_bolder_rental_housing_ppl1_role">Ppl1 Role</param>
		/// <param name="search_db_bolder_rental_housing_ppl2_coname">Ppl2 Coname</param>
		/// <param name="search_db_bolder_rental_housing_person_2">Person 2</param>
		/// <param name="search_db_bolder_rental_housing_ppl2_role">Ppl2 Role</param>
		/// <param name="search_db_bolder_rental_housing_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bolder_rental_housingAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_bolder_rental_housing_propaddr1, 
					string search_db_bolder_rental_housing_rentaltype, 
					string search_db_bolder_rental_housing_bldgtype, 
					int search_db_bolder_rental_housing_dwellunits, 
					int search_db_bolder_rental_housing_roomunits, 
					string search_db_bolder_rental_housing_neighbrhd, 
					string search_db_bolder_rental_housing_complexnm, 
					string search_db_bolder_rental_housing_name, 
					string search_db_bolder_rental_housing_persontype, 
					string search_db_bolder_rental_housing_company, 
					string search_db_bolder_rental_housing_engcompl, 
					string search_db_bolder_rental_housing_licenseexp, 
					string search_db_bolder_rental_housing_licensenum, 
					string search_db_bolder_rental_housing_ppl1_coname, 
					string search_db_bolder_rental_housing_person_1, 
					string search_db_bolder_rental_housing_ppl1_role, 
					string search_db_bolder_rental_housing_ppl2_coname, 
					string search_db_bolder_rental_housing_person_2, 
					string search_db_bolder_rental_housing_ppl2_role, 
					string search_db_bolder_rental_housing_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bolder_rental_housing?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_bolder_rental_housing.propaddr1=" + (search_db_bolder_rental_housing_propaddr1==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_propaddr1))+"&search.db_bolder_rental_housing.rentaltype=" + (search_db_bolder_rental_housing_rentaltype==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_rentaltype))+"&search.db_bolder_rental_housing.bldgtype=" + (search_db_bolder_rental_housing_bldgtype==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_bldgtype))+"&search.db_bolder_rental_housing.dwellunits="+search_db_bolder_rental_housing_dwellunits+"&search.db_bolder_rental_housing.roomunits="+search_db_bolder_rental_housing_roomunits+"&search.db_bolder_rental_housing.neighbrhd=" + (search_db_bolder_rental_housing_neighbrhd==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_neighbrhd))+"&search.db_bolder_rental_housing.complexnm=" + (search_db_bolder_rental_housing_complexnm==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_complexnm))+"&search.db_bolder_rental_housing.name=" + (search_db_bolder_rental_housing_name==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_name))+"&search.db_bolder_rental_housing.persontype=" + (search_db_bolder_rental_housing_persontype==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_persontype))+"&search.db_bolder_rental_housing.company=" + (search_db_bolder_rental_housing_company==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_company))+"&search.db_bolder_rental_housing.engcompl=" + (search_db_bolder_rental_housing_engcompl==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_engcompl))+"&search.db_bolder_rental_housing.licenseexp=" + (search_db_bolder_rental_housing_licenseexp==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_licenseexp))+"&search.db_bolder_rental_housing.licensenum=" + (search_db_bolder_rental_housing_licensenum==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_licensenum))+"&search.db_bolder_rental_housing.ppl1_coname=" + (search_db_bolder_rental_housing_ppl1_coname==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_ppl1_coname))+"&search.db_bolder_rental_housing.person_1=" + (search_db_bolder_rental_housing_person_1==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_person_1))+"&search.db_bolder_rental_housing.ppl1_role=" + (search_db_bolder_rental_housing_ppl1_role==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_ppl1_role))+"&search.db_bolder_rental_housing.ppl2_coname=" + (search_db_bolder_rental_housing_ppl2_coname==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_ppl2_coname))+"&search.db_bolder_rental_housing.person_2=" + (search_db_bolder_rental_housing_person_2==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_person_2))+"&search.db_bolder_rental_housing.ppl2_role=" + (search_db_bolder_rental_housing_ppl2_role==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_ppl2_role))+"&search.db_bolder_rental_housing.location=" + (search_db_bolder_rental_housing_location==null? "" : System.Uri.EscapeDataString(search_db_bolder_rental_housing_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Bookmarks' entry type
		/// API to search for entries of type Bookmarks
		/// Search_bookmarks repository/search/type/bookmarks
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_bookmarks_title">Title</param>
		/// <param name="search_db_bookmarks_url">URL</param>
		/// <param name="search_db_bookmarks_category">Category</param>
		/// <param name="search_db_bookmarks_date">Date</param>
		/// <returns>No response was specified</returns>
		public async Task Search_bookmarksAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_bookmarks_title, 
					string search_db_bookmarks_url, 
					string search_db_bookmarks_category, 
					string search_db_bookmarks_date, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/bookmarks?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_bookmarks.title=" + (search_db_bookmarks_title==null? "" : System.Uri.EscapeDataString(search_db_bookmarks_title))+"&search.db_bookmarks.url=" + (search_db_bookmarks_url==null? "" : System.Uri.EscapeDataString(search_db_bookmarks_url))+"&search.db_bookmarks.category=" + (search_db_bookmarks_category==null? "" : System.Uri.EscapeDataString(search_db_bookmarks_category))+"&search.db_bookmarks.date=" + (search_db_bookmarks_date==null? "" : System.Uri.EscapeDataString(search_db_bookmarks_date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boston Crime' entry type
		/// API to search for entries of type Boston Crime
		/// Search_boston_crime repository/search/type/boston_crime
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boston_crime_offense">Offense</param>
		/// <param name="search_db_boston_crime_offense_code_group">Offense Code Group</param>
		/// <param name="search_db_boston_crime_offense_description">Offense Description</param>
		/// <param name="search_db_boston_crime_district">District</param>
		/// <param name="search_db_boston_crime_reporting_area">Reporting Area</param>
		/// <param name="search_db_boston_crime_shooting">Shooting</param>
		/// <param name="search_db_boston_crime_year">Year</param>
		/// <param name="search_db_boston_crime_month">Month</param>
		/// <param name="search_db_boston_crime_day_of_week">Day Of Week</param>
		/// <param name="search_db_boston_crime_hour">Hour</param>
		/// <param name="search_db_boston_crime_street">Street</param>
		/// <param name="search_db_boston_crime_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boston_crimeAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boston_crime_offense, 
					string search_db_boston_crime_offense_code_group, 
					string search_db_boston_crime_offense_description, 
					string search_db_boston_crime_district, 
					string search_db_boston_crime_reporting_area, 
					string search_db_boston_crime_shooting, 
					double search_db_boston_crime_year, 
					double search_db_boston_crime_month, 
					string search_db_boston_crime_day_of_week, 
					double search_db_boston_crime_hour, 
					string search_db_boston_crime_street, 
					string search_db_boston_crime_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boston_crime?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boston_crime.offense=" + (search_db_boston_crime_offense==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_offense))+"&search.db_boston_crime.offense_code_group=" + (search_db_boston_crime_offense_code_group==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_offense_code_group))+"&search.db_boston_crime.offense_description=" + (search_db_boston_crime_offense_description==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_offense_description))+"&search.db_boston_crime.district=" + (search_db_boston_crime_district==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_district))+"&search.db_boston_crime.reporting_area=" + (search_db_boston_crime_reporting_area==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_reporting_area))+"&search.db_boston_crime.shooting=" + (search_db_boston_crime_shooting==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_shooting))+"&search.db_boston_crime.year="+search_db_boston_crime_year+"&search.db_boston_crime.month="+search_db_boston_crime_month+"&search.db_boston_crime.day_of_week=" + (search_db_boston_crime_day_of_week==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_day_of_week))+"&search.db_boston_crime.hour="+search_db_boston_crime_hour+"&search.db_boston_crime.street=" + (search_db_boston_crime_street==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_street))+"&search.db_boston_crime.location=" + (search_db_boston_crime_location==null? "" : System.Uri.EscapeDataString(search_db_boston_crime_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder 2017 Election Contributions' entry type
		/// API to search for entries of type Boulder 2017 Election Contributions
		/// Search_boulder_2017_election_contributions repository/search/type/boulder_2017_election_contributions
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boulder_2017_election_contributions_committee">Committee</param>
		/// <param name="search_db_boulder_2017_election_contributions_last_name">Last Name</param>
		/// <param name="search_db_boulder_2017_election_contributions_first_name">First Name</param>
		/// <param name="search_db_boulder_2017_election_contributions_street">Street</param>
		/// <param name="search_db_boulder_2017_election_contributions_city">City</param>
		/// <param name="search_db_boulder_2017_election_contributions_state">State</param>
		/// <param name="search_db_boulder_2017_election_contributions_zip">Zip</param>
		/// <param name="search_db_boulder_2017_election_contributions_contribution_type">Contribution Type</param>
		/// <param name="search_db_boulder_2017_election_contributions_from_candidate">From Candidate</param>
		/// <param name="search_db_boulder_2017_election_contributions_date">Date</param>
		/// <param name="search_db_boulder_2017_election_contributions_amount">Amount</param>
		/// <param name="search_db_boulder_2017_election_contributions_match_amount">Match Amount</param>
		/// <param name="search_db_boulder_2017_election_contributions_ytd_amount">Ytd Amount</param>
		/// <param name="search_db_boulder_2017_election_contributions_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boulder_2017_election_contributionsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boulder_2017_election_contributions_committee, 
					string search_db_boulder_2017_election_contributions_last_name, 
					string search_db_boulder_2017_election_contributions_first_name, 
					string search_db_boulder_2017_election_contributions_street, 
					string search_db_boulder_2017_election_contributions_city, 
					string search_db_boulder_2017_election_contributions_state, 
					string search_db_boulder_2017_election_contributions_zip, 
					string search_db_boulder_2017_election_contributions_contribution_type, 
					string search_db_boulder_2017_election_contributions_from_candidate, 
					string search_db_boulder_2017_election_contributions_date, 
					double search_db_boulder_2017_election_contributions_amount, 
					double search_db_boulder_2017_election_contributions_match_amount, 
					double search_db_boulder_2017_election_contributions_ytd_amount, 
					string search_db_boulder_2017_election_contributions_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boulder_2017_election_contributions?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boulder_2017_election_contributions.committee=" + (search_db_boulder_2017_election_contributions_committee==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_committee))+"&search.db_boulder_2017_election_contributions.last_name=" + (search_db_boulder_2017_election_contributions_last_name==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_last_name))+"&search.db_boulder_2017_election_contributions.first_name=" + (search_db_boulder_2017_election_contributions_first_name==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_first_name))+"&search.db_boulder_2017_election_contributions.street=" + (search_db_boulder_2017_election_contributions_street==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_street))+"&search.db_boulder_2017_election_contributions.city=" + (search_db_boulder_2017_election_contributions_city==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_city))+"&search.db_boulder_2017_election_contributions.state=" + (search_db_boulder_2017_election_contributions_state==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_state))+"&search.db_boulder_2017_election_contributions.zip=" + (search_db_boulder_2017_election_contributions_zip==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_zip))+"&search.db_boulder_2017_election_contributions.contribution_type=" + (search_db_boulder_2017_election_contributions_contribution_type==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_contribution_type))+"&search.db_boulder_2017_election_contributions.from_candidate=" + (search_db_boulder_2017_election_contributions_from_candidate==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_from_candidate))+"&search.db_boulder_2017_election_contributions.date=" + (search_db_boulder_2017_election_contributions_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_date))+"&search.db_boulder_2017_election_contributions.amount="+search_db_boulder_2017_election_contributions_amount+"&search.db_boulder_2017_election_contributions.match_amount="+search_db_boulder_2017_election_contributions_match_amount+"&search.db_boulder_2017_election_contributions.ytd_amount="+search_db_boulder_2017_election_contributions_ytd_amount+"&search.db_boulder_2017_election_contributions.location=" + (search_db_boulder_2017_election_contributions_location==null? "" : System.Uri.EscapeDataString(search_db_boulder_2017_election_contributions_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder Campaign Contributions' entry type
		/// API to search for entries of type Boulder Campaign Contributions
		/// Search_boulder_campaign_contributions repository/search/type/boulder_campaign_contributions
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boulder_campaign_contributions_committee">Committee</param>
		/// <param name="search_db_boulder_campaign_contributions_type">Type</param>
		/// <param name="search_db_boulder_campaign_contributions_committee_num">Committee Num</param>
		/// <param name="search_db_boulder_campaign_contributions_candidate">Candidate</param>
		/// <param name="search_db_boulder_campaign_contributions_filing_date">Filing Date</param>
		/// <param name="search_db_boulder_campaign_contributions_amended_date">Amended Date</param>
		/// <param name="search_db_boulder_campaign_contributions_official_filing">Official Filing</param>
		/// <param name="search_db_boulder_campaign_contributions_transaction_date">Transaction Date</param>
		/// <param name="search_db_boulder_campaign_contributions_last_name">Last Name</param>
		/// <param name="search_db_boulder_campaign_contributions_first_name">First Name</param>
		/// <param name="search_db_boulder_campaign_contributions_street">Street</param>
		/// <param name="search_db_boulder_campaign_contributions_city">City</param>
		/// <param name="search_db_boulder_campaign_contributions_state">State</param>
		/// <param name="search_db_boulder_campaign_contributions_zip">Zip</param>
		/// <param name="search_db_boulder_campaign_contributions_contribution">Contribution</param>
		/// <param name="search_db_boulder_campaign_contributions_contribution_type">Contribution Type</param>
		/// <param name="search_db_boulder_campaign_contributions_anonymous">Anonymous</param>
		/// <param name="search_db_boulder_campaign_contributions_from_candidate">From Candidate</param>
		/// <param name="search_db_boulder_campaign_contributions_match">Match</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boulder_campaign_contributionsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boulder_campaign_contributions_committee, 
					string search_db_boulder_campaign_contributions_type, 
					string search_db_boulder_campaign_contributions_committee_num, 
					string search_db_boulder_campaign_contributions_candidate, 
					string search_db_boulder_campaign_contributions_filing_date, 
					string search_db_boulder_campaign_contributions_amended_date, 
					string search_db_boulder_campaign_contributions_official_filing, 
					string search_db_boulder_campaign_contributions_transaction_date, 
					string search_db_boulder_campaign_contributions_last_name, 
					string search_db_boulder_campaign_contributions_first_name, 
					string search_db_boulder_campaign_contributions_street, 
					string search_db_boulder_campaign_contributions_city, 
					string search_db_boulder_campaign_contributions_state, 
					string search_db_boulder_campaign_contributions_zip, 
					double search_db_boulder_campaign_contributions_contribution, 
					string search_db_boulder_campaign_contributions_contribution_type, 
					string search_db_boulder_campaign_contributions_anonymous, 
					string search_db_boulder_campaign_contributions_from_candidate, 
					double search_db_boulder_campaign_contributions_match, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boulder_campaign_contributions?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boulder_campaign_contributions.committee=" + (search_db_boulder_campaign_contributions_committee==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_committee))+"&search.db_boulder_campaign_contributions.type=" + (search_db_boulder_campaign_contributions_type==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_type))+"&search.db_boulder_campaign_contributions.committee_num=" + (search_db_boulder_campaign_contributions_committee_num==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_committee_num))+"&search.db_boulder_campaign_contributions.candidate=" + (search_db_boulder_campaign_contributions_candidate==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_candidate))+"&search.db_boulder_campaign_contributions.filing_date=" + (search_db_boulder_campaign_contributions_filing_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_filing_date))+"&search.db_boulder_campaign_contributions.amended_date=" + (search_db_boulder_campaign_contributions_amended_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_amended_date))+"&search.db_boulder_campaign_contributions.official_filing=" + (search_db_boulder_campaign_contributions_official_filing==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_official_filing))+"&search.db_boulder_campaign_contributions.transaction_date=" + (search_db_boulder_campaign_contributions_transaction_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_transaction_date))+"&search.db_boulder_campaign_contributions.last_name=" + (search_db_boulder_campaign_contributions_last_name==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_last_name))+"&search.db_boulder_campaign_contributions.first_name=" + (search_db_boulder_campaign_contributions_first_name==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_first_name))+"&search.db_boulder_campaign_contributions.street=" + (search_db_boulder_campaign_contributions_street==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_street))+"&search.db_boulder_campaign_contributions.city=" + (search_db_boulder_campaign_contributions_city==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_city))+"&search.db_boulder_campaign_contributions.state=" + (search_db_boulder_campaign_contributions_state==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_state))+"&search.db_boulder_campaign_contributions.zip=" + (search_db_boulder_campaign_contributions_zip==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_zip))+"&search.db_boulder_campaign_contributions.contribution="+search_db_boulder_campaign_contributions_contribution+"&search.db_boulder_campaign_contributions.contribution_type=" + (search_db_boulder_campaign_contributions_contribution_type==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_contribution_type))+"&search.db_boulder_campaign_contributions.anonymous=" + (search_db_boulder_campaign_contributions_anonymous==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_anonymous))+"&search.db_boulder_campaign_contributions.from_candidate=" + (search_db_boulder_campaign_contributions_from_candidate==null? "" : System.Uri.EscapeDataString(search_db_boulder_campaign_contributions_from_candidate))+"&search.db_boulder_campaign_contributions.match="+search_db_boulder_campaign_contributions_match;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder Consulting Services Database' entry type
		/// API to search for entries of type Boulder Consulting Services Database
		/// Search_boulder_consulting_services repository/search/type/boulder_consulting_services
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boulder_consulting_services_fund">Fund</param>
		/// <param name="search_db_boulder_consulting_services_department">Department</param>
		/// <param name="search_db_boulder_consulting_services_organization">Organization</param>
		/// <param name="search_db_boulder_consulting_services_object">Object</param>
		/// <param name="search_db_boulder_consulting_services_project">Project</param>
		/// <param name="search_db_boulder_consulting_services_account_description">Account Description</param>
		/// <param name="search_db_boulder_consulting_services_date">Date</param>
		/// <param name="search_db_boulder_consulting_services_amount">Amount</param>
		/// <param name="search_db_boulder_consulting_services_purchase_order">Purchase Order</param>
		/// <param name="search_db_boulder_consulting_services_vendor_name">Vendor Name</param>
		/// <param name="search_db_boulder_consulting_services_comment">Comment</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boulder_consulting_servicesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boulder_consulting_services_fund, 
					string search_db_boulder_consulting_services_department, 
					string search_db_boulder_consulting_services_organization, 
					string search_db_boulder_consulting_services_object, 
					string search_db_boulder_consulting_services_project, 
					string search_db_boulder_consulting_services_account_description, 
					string search_db_boulder_consulting_services_date, 
					double search_db_boulder_consulting_services_amount, 
					string search_db_boulder_consulting_services_purchase_order, 
					string search_db_boulder_consulting_services_vendor_name, 
					string search_db_boulder_consulting_services_comment, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boulder_consulting_services?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boulder_consulting_services.fund=" + (search_db_boulder_consulting_services_fund==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_fund))+"&search.db_boulder_consulting_services.department=" + (search_db_boulder_consulting_services_department==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_department))+"&search.db_boulder_consulting_services.organization=" + (search_db_boulder_consulting_services_organization==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_organization))+"&search.db_boulder_consulting_services.object=" + (search_db_boulder_consulting_services_object==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_object))+"&search.db_boulder_consulting_services.project=" + (search_db_boulder_consulting_services_project==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_project))+"&search.db_boulder_consulting_services.account_description=" + (search_db_boulder_consulting_services_account_description==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_account_description))+"&search.db_boulder_consulting_services.date=" + (search_db_boulder_consulting_services_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_date))+"&search.db_boulder_consulting_services.amount="+search_db_boulder_consulting_services_amount+"&search.db_boulder_consulting_services.purchase_order=" + (search_db_boulder_consulting_services_purchase_order==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_purchase_order))+"&search.db_boulder_consulting_services.vendor_name=" + (search_db_boulder_consulting_services_vendor_name==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_vendor_name))+"&search.db_boulder_consulting_services.comment=" + (search_db_boulder_consulting_services_comment==null? "" : System.Uri.EscapeDataString(search_db_boulder_consulting_services_comment));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder County Voter Details' entry type
		/// API to search for entries of type Boulder County Voter Details
		/// Search_boulder_county_voter_details repository/search/type/boulder_county_voter_details
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boulder_county_voter_details_first_name">First Name</param>
		/// <param name="search_db_boulder_county_voter_details_last_name">Last Name</param>
		/// <param name="search_db_boulder_county_voter_details_registration_date">Registration Date</param>
		/// <param name="search_db_boulder_county_voter_details_last_updated_date">Last Updated Date</param>
		/// <param name="search_db_boulder_county_voter_details_residential_address">Residential Address</param>
		/// <param name="search_db_boulder_county_voter_details_residential_city">Residential City</param>
		/// <param name="search_db_boulder_county_voter_details_mailing_zip_code">Mailing Zip Code</param>
		/// <param name="search_db_boulder_county_voter_details_voter_status">Voter Status</param>
		/// <param name="search_db_boulder_county_voter_details_party">Party</param>
		/// <param name="search_db_boulder_county_voter_details_gender">Gender</param>
		/// <param name="search_db_boulder_county_voter_details_birth_year">Birth Year</param>
		/// <param name="search_db_boulder_county_voter_details_precinct_code">Precinct Code</param>
		/// <param name="search_db_boulder_county_voter_details_congressional">Congressional</param>
		/// <param name="search_db_boulder_county_voter_details_state_senate">State Senate</param>
		/// <param name="search_db_boulder_county_voter_details_state_house">State House</param>
		/// <param name="search_db_boulder_county_voter_details_municipality">Municipality</param>
		/// <param name="search_db_boulder_county_voter_details_city_ward_district">City Ward/district</param>
		/// <param name="search_db_boulder_county_voter_details_school_district">School District</param>
		/// <param name="search_db_boulder_county_voter_details_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boulder_county_voter_detailsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boulder_county_voter_details_first_name, 
					string search_db_boulder_county_voter_details_last_name, 
					string search_db_boulder_county_voter_details_registration_date, 
					string search_db_boulder_county_voter_details_last_updated_date, 
					string search_db_boulder_county_voter_details_residential_address, 
					string search_db_boulder_county_voter_details_residential_city, 
					string search_db_boulder_county_voter_details_mailing_zip_code, 
					string search_db_boulder_county_voter_details_voter_status, 
					string search_db_boulder_county_voter_details_party, 
					string search_db_boulder_county_voter_details_gender, 
					int search_db_boulder_county_voter_details_birth_year, 
					string search_db_boulder_county_voter_details_precinct_code, 
					string search_db_boulder_county_voter_details_congressional, 
					string search_db_boulder_county_voter_details_state_senate, 
					string search_db_boulder_county_voter_details_state_house, 
					string search_db_boulder_county_voter_details_municipality, 
					string search_db_boulder_county_voter_details_city_ward_district, 
					string search_db_boulder_county_voter_details_school_district, 
					string search_db_boulder_county_voter_details_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boulder_county_voter_details?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boulder_county_voter_details.first_name=" + (search_db_boulder_county_voter_details_first_name==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_first_name))+"&search.db_boulder_county_voter_details.last_name=" + (search_db_boulder_county_voter_details_last_name==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_last_name))+"&search.db_boulder_county_voter_details.registration_date=" + (search_db_boulder_county_voter_details_registration_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_registration_date))+"&search.db_boulder_county_voter_details.last_updated_date=" + (search_db_boulder_county_voter_details_last_updated_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_last_updated_date))+"&search.db_boulder_county_voter_details.residential_address=" + (search_db_boulder_county_voter_details_residential_address==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_residential_address))+"&search.db_boulder_county_voter_details.residential_city=" + (search_db_boulder_county_voter_details_residential_city==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_residential_city))+"&search.db_boulder_county_voter_details.mailing_zip_code=" + (search_db_boulder_county_voter_details_mailing_zip_code==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_mailing_zip_code))+"&search.db_boulder_county_voter_details.voter_status=" + (search_db_boulder_county_voter_details_voter_status==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_voter_status))+"&search.db_boulder_county_voter_details.party=" + (search_db_boulder_county_voter_details_party==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_party))+"&search.db_boulder_county_voter_details.gender=" + (search_db_boulder_county_voter_details_gender==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_gender))+"&search.db_boulder_county_voter_details.birth_year="+search_db_boulder_county_voter_details_birth_year+"&search.db_boulder_county_voter_details.precinct_code=" + (search_db_boulder_county_voter_details_precinct_code==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_precinct_code))+"&search.db_boulder_county_voter_details.congressional=" + (search_db_boulder_county_voter_details_congressional==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_congressional))+"&search.db_boulder_county_voter_details.state_senate=" + (search_db_boulder_county_voter_details_state_senate==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_state_senate))+"&search.db_boulder_county_voter_details.state_house=" + (search_db_boulder_county_voter_details_state_house==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_state_house))+"&search.db_boulder_county_voter_details.municipality=" + (search_db_boulder_county_voter_details_municipality==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_municipality))+"&search.db_boulder_county_voter_details.city_ward_district=" + (search_db_boulder_county_voter_details_city_ward_district==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_city_ward_district))+"&search.db_boulder_county_voter_details.school_district=" + (search_db_boulder_county_voter_details_school_district==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_school_district))+"&search.db_boulder_county_voter_details.location=" + (search_db_boulder_county_voter_details_location==null? "" : System.Uri.EscapeDataString(search_db_boulder_county_voter_details_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder Crime Reports' entry type
		/// API to search for entries of type Boulder Crime Reports
		/// Search_boulder_crimes repository/search/type/boulder_crimes
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boulder_crimes_offense">Offense</param>
		/// <param name="search_db_boulder_crimes_reportdate">Report Date</param>
		/// <param name="search_db_boulder_crimes_blockadd">Address</param>
		/// <param name="search_db_boulder_crimes_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boulder_crimesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boulder_crimes_offense, 
					string search_db_boulder_crimes_reportdate, 
					string search_db_boulder_crimes_blockadd, 
					string search_db_boulder_crimes_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boulder_crimes?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boulder_crimes.offense=" + (search_db_boulder_crimes_offense==null? "" : System.Uri.EscapeDataString(search_db_boulder_crimes_offense))+"&search.db_boulder_crimes.reportdate=" + (search_db_boulder_crimes_reportdate==null? "" : System.Uri.EscapeDataString(search_db_boulder_crimes_reportdate))+"&search.db_boulder_crimes.blockadd=" + (search_db_boulder_crimes_blockadd==null? "" : System.Uri.EscapeDataString(search_db_boulder_crimes_blockadd))+"&search.db_boulder_crimes.location=" + (search_db_boulder_crimes_location==null? "" : System.Uri.EscapeDataString(search_db_boulder_crimes_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder Council Emails' entry type
		/// API to search for entries of type Boulder Council Emails
		/// Search_boulder_emails repository/search/type/boulder_emails
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boulder_emails_sent_from">Sent From</param>
		/// <param name="search_db_boulder_emails_sent_to">Sent To</param>
		/// <param name="search_db_boulder_emails_sent_cc">Sent Cc</param>
		/// <param name="search_db_boulder_emails_received_date">Received Date</param>
		/// <param name="search_db_boulder_emails_email_subject">Email Subject</param>
		/// <param name="search_db_boulder_emails_plain_text_body">Email Body</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boulder_emailsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boulder_emails_sent_from, 
					string search_db_boulder_emails_sent_to, 
					string search_db_boulder_emails_sent_cc, 
					string search_db_boulder_emails_received_date, 
					string search_db_boulder_emails_email_subject, 
					string search_db_boulder_emails_plain_text_body, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boulder_emails?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boulder_emails.sent_from=" + (search_db_boulder_emails_sent_from==null? "" : System.Uri.EscapeDataString(search_db_boulder_emails_sent_from))+"&search.db_boulder_emails.sent_to=" + (search_db_boulder_emails_sent_to==null? "" : System.Uri.EscapeDataString(search_db_boulder_emails_sent_to))+"&search.db_boulder_emails.sent_cc=" + (search_db_boulder_emails_sent_cc==null? "" : System.Uri.EscapeDataString(search_db_boulder_emails_sent_cc))+"&search.db_boulder_emails.received_date=" + (search_db_boulder_emails_received_date==null? "" : System.Uri.EscapeDataString(search_db_boulder_emails_received_date))+"&search.db_boulder_emails.email_subject=" + (search_db_boulder_emails_email_subject==null? "" : System.Uri.EscapeDataString(search_db_boulder_emails_email_subject))+"&search.db_boulder_emails.plain_text_body=" + (search_db_boulder_emails_plain_text_body==null? "" : System.Uri.EscapeDataString(search_db_boulder_emails_plain_text_body));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Boulder Employee Salaries' entry type
		/// API to search for entries of type Boulder Employee Salaries
		/// Search_boulder_employee_salaries repository/search/type/boulder_employee_salaries
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_boulder_employee_salaries_position_description">Position Description</param>
		/// <param name="search_db_boulder_employee_salaries_department">Department</param>
		/// <param name="search_db_boulder_employee_salaries_employee_flsa_exempt_y_n">Employee Flsa Exempt Y N</param>
		/// <param name="search_db_boulder_employee_salaries_pay_range_min">Pay Range Min</param>
		/// <param name="search_db_boulder_employee_salaries_pay_range_max">Pay Range Max</param>
		/// <param name="search_db_boulder_employee_salaries_employee_hourly_pay_rate">Employee Hourly Pay Rate</param>
		/// <param name="search_db_boulder_employee_salaries_employee_fte_in_this_position">Employee Fte In This Position</param>
		/// <param name="search_db_boulder_employee_salaries_employee_annual_base_salary">Employee Annual Base Salary</param>
		/// <returns>No response was specified</returns>
		public async Task Search_boulder_employee_salariesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_boulder_employee_salaries_position_description, 
					string search_db_boulder_employee_salaries_department, 
					string search_db_boulder_employee_salaries_employee_flsa_exempt_y_n, 
					double search_db_boulder_employee_salaries_pay_range_min, 
					double search_db_boulder_employee_salaries_pay_range_max, 
					double search_db_boulder_employee_salaries_employee_hourly_pay_rate, 
					double search_db_boulder_employee_salaries_employee_fte_in_this_position, 
					double search_db_boulder_employee_salaries_employee_annual_base_salary, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/boulder_employee_salaries?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_boulder_employee_salaries.position_description=" + (search_db_boulder_employee_salaries_position_description==null? "" : System.Uri.EscapeDataString(search_db_boulder_employee_salaries_position_description))+"&search.db_boulder_employee_salaries.department=" + (search_db_boulder_employee_salaries_department==null? "" : System.Uri.EscapeDataString(search_db_boulder_employee_salaries_department))+"&search.db_boulder_employee_salaries.employee_flsa_exempt_y_n=" + (search_db_boulder_employee_salaries_employee_flsa_exempt_y_n==null? "" : System.Uri.EscapeDataString(search_db_boulder_employee_salaries_employee_flsa_exempt_y_n))+"&search.db_boulder_employee_salaries.pay_range_min="+search_db_boulder_employee_salaries_pay_range_min+"&search.db_boulder_employee_salaries.pay_range_max="+search_db_boulder_employee_salaries_pay_range_max+"&search.db_boulder_employee_salaries.employee_hourly_pay_rate="+search_db_boulder_employee_salaries_employee_hourly_pay_rate+"&search.db_boulder_employee_salaries.employee_fte_in_this_position="+search_db_boulder_employee_salaries_employee_fte_in_this_position+"&search.db_boulder_employee_salaries.employee_annual_base_salary="+search_db_boulder_employee_salaries_employee_annual_base_salary;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Calendar' entry type
		/// API to search for entries of type Calendar
		/// Search_calendar repository/search/type/calendar
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_calendarAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/calendar?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Campaign Donors' entry type
		/// API to search for entries of type Campaign Donors
		/// Search_campaign_donors repository/search/type/campaign_donors
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_campaign_donors_committee">Committee</param>
		/// <param name="search_db_campaign_donors_amount">Amount</param>
		/// <param name="search_db_campaign_donors_party">Party</param>
		/// <param name="search_db_campaign_donors_donor">Donor</param>
		/// <param name="search_db_campaign_donors_gender">Gender</param>
		/// <param name="search_db_campaign_donors_city">City</param>
		/// <param name="search_db_campaign_donors_state">State</param>
		/// <param name="search_db_campaign_donors_zip_code">Zip Code</param>
		/// <param name="search_db_campaign_donors_employer">Employer</param>
		/// <param name="search_db_campaign_donors_occupation">Occupation</param>
		/// <param name="search_db_campaign_donors_date">Date</param>
		/// <param name="search_db_campaign_donors_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_campaign_donorsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_campaign_donors_committee, 
					double search_db_campaign_donors_amount, 
					string search_db_campaign_donors_party, 
					string search_db_campaign_donors_donor, 
					string search_db_campaign_donors_gender, 
					string search_db_campaign_donors_city, 
					string search_db_campaign_donors_state, 
					string search_db_campaign_donors_zip_code, 
					string search_db_campaign_donors_employer, 
					string search_db_campaign_donors_occupation, 
					string search_db_campaign_donors_date, 
					string search_db_campaign_donors_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/campaign_donors?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_campaign_donors.committee=" + (search_db_campaign_donors_committee==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_committee))+"&search.db_campaign_donors.amount="+search_db_campaign_donors_amount+"&search.db_campaign_donors.party=" + (search_db_campaign_donors_party==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_party))+"&search.db_campaign_donors.donor=" + (search_db_campaign_donors_donor==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_donor))+"&search.db_campaign_donors.gender=" + (search_db_campaign_donors_gender==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_gender))+"&search.db_campaign_donors.city=" + (search_db_campaign_donors_city==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_city))+"&search.db_campaign_donors.state=" + (search_db_campaign_donors_state==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_state))+"&search.db_campaign_donors.zip_code=" + (search_db_campaign_donors_zip_code==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_zip_code))+"&search.db_campaign_donors.employer=" + (search_db_campaign_donors_employer==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_employer))+"&search.db_campaign_donors.occupation=" + (search_db_campaign_donors_occupation==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_occupation))+"&search.db_campaign_donors.date=" + (search_db_campaign_donors_date==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_date))+"&search.db_campaign_donors.location=" + (search_db_campaign_donors_location==null? "" : System.Uri.EscapeDataString(search_db_campaign_donors_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Campaign Expenditures' entry type
		/// API to search for entries of type Campaign Expenditures
		/// Search_campaign_expenditures repository/search/type/campaign_expenditures
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_campaign_expenditures_committee">Committee</param>
		/// <param name="search_db_campaign_expenditures_amount">Amount</param>
		/// <param name="search_db_campaign_expenditures_party">Party</param>
		/// <param name="search_db_campaign_expenditures_recipient">Recipient</param>
		/// <param name="search_db_campaign_expenditures_city">City</param>
		/// <param name="search_db_campaign_expenditures_state">State</param>
		/// <param name="search_db_campaign_expenditures_zip_code">Zip Code</param>
		/// <param name="search_db_campaign_expenditures_transaction_date">Transaction Date</param>
		/// <param name="search_db_campaign_expenditures_purpose">Purpose</param>
		/// <param name="search_db_campaign_expenditures_memo_text">Memo Text</param>
		/// <param name="search_db_campaign_expenditures_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_campaign_expendituresAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_campaign_expenditures_committee, 
					double search_db_campaign_expenditures_amount, 
					string search_db_campaign_expenditures_party, 
					string search_db_campaign_expenditures_recipient, 
					string search_db_campaign_expenditures_city, 
					string search_db_campaign_expenditures_state, 
					string search_db_campaign_expenditures_zip_code, 
					string search_db_campaign_expenditures_transaction_date, 
					string search_db_campaign_expenditures_purpose, 
					string search_db_campaign_expenditures_memo_text, 
					string search_db_campaign_expenditures_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/campaign_expenditures?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_campaign_expenditures.committee=" + (search_db_campaign_expenditures_committee==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_committee))+"&search.db_campaign_expenditures.amount="+search_db_campaign_expenditures_amount+"&search.db_campaign_expenditures.party=" + (search_db_campaign_expenditures_party==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_party))+"&search.db_campaign_expenditures.recipient=" + (search_db_campaign_expenditures_recipient==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_recipient))+"&search.db_campaign_expenditures.city=" + (search_db_campaign_expenditures_city==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_city))+"&search.db_campaign_expenditures.state=" + (search_db_campaign_expenditures_state==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_state))+"&search.db_campaign_expenditures.zip_code=" + (search_db_campaign_expenditures_zip_code==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_zip_code))+"&search.db_campaign_expenditures.transaction_date=" + (search_db_campaign_expenditures_transaction_date==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_transaction_date))+"&search.db_campaign_expenditures.purpose=" + (search_db_campaign_expenditures_purpose==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_purpose))+"&search.db_campaign_expenditures.memo_text=" + (search_db_campaign_expenditures_memo_text==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_memo_text))+"&search.db_campaign_expenditures.location=" + (search_db_campaign_expenditures_location==null? "" : System.Uri.EscapeDataString(search_db_campaign_expenditures_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Catalog Link' entry type
		/// API to search for entries of type Catalog Link
		/// Search_cataloglink repository/search/type/cataloglink
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_cataloglinkAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/cataloglink?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Gridded Data File' entry type
		/// API to search for entries of type Gridded Data File
		/// Search_cdm_grid repository/search/type/cdm_grid
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_cdm_gridAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/cdm_grid?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Chat Room' entry type
		/// API to search for entries of type Chat Room
		/// Search_chatroom repository/search/type/chatroom
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_chatroomAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/chatroom?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Colorado Water Rights' entry type
		/// API to search for entries of type Colorado Water Rights
		/// Search_colorado_water_rights repository/search/type/colorado_water_rights
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_colorado_water_rights_structure_name">Structure Name</param>
		/// <param name="search_db_colorado_water_rights_structure_type">Structure Type</param>
		/// <param name="search_db_colorado_water_rights_water_source">Water Source</param>
		/// <param name="search_db_colorado_water_rights_county">County</param>
		/// <param name="search_db_colorado_water_rights_adjudication_date">Adjudication Date</param>
		/// <param name="search_db_colorado_water_rights_appropriation_date">Appropriation Date</param>
		/// <param name="search_db_colorado_water_rights_priority_no">Priority No</param>
		/// <param name="search_db_colorado_water_rights_decreed_uses">Decreed Uses</param>
		/// <param name="search_db_colorado_water_rights_net_absolute">Net Absolute</param>
		/// <param name="search_db_colorado_water_rights_net_conditional">Net Conditional</param>
		/// <param name="search_db_colorado_water_rights_net_apex_absolute">Net Apex Absolute</param>
		/// <param name="search_db_colorado_water_rights_net_apex_conditional">Net Apex Conditional</param>
		/// <param name="search_db_colorado_water_rights_decreed_units">Decreed Units</param>
		/// <param name="search_db_colorado_water_rights_seasonal_limits">Seasonal Limits</param>
		/// <param name="search_db_colorado_water_rights_comments">Comments</param>
		/// <param name="search_db_colorado_water_rights_more_information">More Information</param>
		/// <param name="search_db_colorado_water_rights_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_colorado_water_rightsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_colorado_water_rights_structure_name, 
					string search_db_colorado_water_rights_structure_type, 
					string search_db_colorado_water_rights_water_source, 
					string search_db_colorado_water_rights_county, 
					string search_db_colorado_water_rights_adjudication_date, 
					string search_db_colorado_water_rights_appropriation_date, 
					string search_db_colorado_water_rights_priority_no, 
					string search_db_colorado_water_rights_decreed_uses, 
					double search_db_colorado_water_rights_net_absolute, 
					double search_db_colorado_water_rights_net_conditional, 
					double search_db_colorado_water_rights_net_apex_absolute, 
					double search_db_colorado_water_rights_net_apex_conditional, 
					string search_db_colorado_water_rights_decreed_units, 
					string search_db_colorado_water_rights_seasonal_limits, 
					string search_db_colorado_water_rights_comments, 
					string search_db_colorado_water_rights_more_information, 
					string search_db_colorado_water_rights_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/colorado_water_rights?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_colorado_water_rights.structure_name=" + (search_db_colorado_water_rights_structure_name==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_structure_name))+"&search.db_colorado_water_rights.structure_type=" + (search_db_colorado_water_rights_structure_type==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_structure_type))+"&search.db_colorado_water_rights.water_source=" + (search_db_colorado_water_rights_water_source==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_water_source))+"&search.db_colorado_water_rights.county=" + (search_db_colorado_water_rights_county==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_county))+"&search.db_colorado_water_rights.adjudication_date=" + (search_db_colorado_water_rights_adjudication_date==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_adjudication_date))+"&search.db_colorado_water_rights.appropriation_date=" + (search_db_colorado_water_rights_appropriation_date==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_appropriation_date))+"&search.db_colorado_water_rights.priority_no=" + (search_db_colorado_water_rights_priority_no==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_priority_no))+"&search.db_colorado_water_rights.decreed_uses=" + (search_db_colorado_water_rights_decreed_uses==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_decreed_uses))+"&search.db_colorado_water_rights.net_absolute="+search_db_colorado_water_rights_net_absolute+"&search.db_colorado_water_rights.net_conditional="+search_db_colorado_water_rights_net_conditional+"&search.db_colorado_water_rights.net_apex_absolute="+search_db_colorado_water_rights_net_apex_absolute+"&search.db_colorado_water_rights.net_apex_conditional="+search_db_colorado_water_rights_net_apex_conditional+"&search.db_colorado_water_rights.decreed_units=" + (search_db_colorado_water_rights_decreed_units==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_decreed_units))+"&search.db_colorado_water_rights.seasonal_limits=" + (search_db_colorado_water_rights_seasonal_limits==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_seasonal_limits))+"&search.db_colorado_water_rights.comments=" + (search_db_colorado_water_rights_comments==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_comments))+"&search.db_colorado_water_rights.more_information=" + (search_db_colorado_water_rights_more_information==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_more_information))+"&search.db_colorado_water_rights.location=" + (search_db_colorado_water_rights_location==null? "" : System.Uri.EscapeDataString(search_db_colorado_water_rights_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Committee Donations' entry type
		/// API to search for entries of type Committee Donations
		/// Search_committee_donations repository/search/type/committee_donations
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_committee_donations_committee">Committee</param>
		/// <param name="search_db_committee_donations_amount">Amount</param>
		/// <param name="search_db_committee_donations_recipient">Recipient</param>
		/// <param name="search_db_committee_donations_date">Date</param>
		/// <param name="search_db_committee_donations_city">City</param>
		/// <param name="search_db_committee_donations_state">State</param>
		/// <param name="search_db_committee_donations_zip_code">Zip Code</param>
		/// <param name="search_db_committee_donations_employer">Employer</param>
		/// <param name="search_db_committee_donations_occupation">Occupation</param>
		/// <param name="search_db_committee_donations_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_committee_donationsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_committee_donations_committee, 
					double search_db_committee_donations_amount, 
					string search_db_committee_donations_recipient, 
					string search_db_committee_donations_date, 
					string search_db_committee_donations_city, 
					string search_db_committee_donations_state, 
					string search_db_committee_donations_zip_code, 
					string search_db_committee_donations_employer, 
					string search_db_committee_donations_occupation, 
					string search_db_committee_donations_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/committee_donations?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_committee_donations.committee=" + (search_db_committee_donations_committee==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_committee))+"&search.db_committee_donations.amount="+search_db_committee_donations_amount+"&search.db_committee_donations.recipient=" + (search_db_committee_donations_recipient==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_recipient))+"&search.db_committee_donations.date=" + (search_db_committee_donations_date==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_date))+"&search.db_committee_donations.city=" + (search_db_committee_donations_city==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_city))+"&search.db_committee_donations.state=" + (search_db_committee_donations_state==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_state))+"&search.db_committee_donations.zip_code=" + (search_db_committee_donations_zip_code==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_zip_code))+"&search.db_committee_donations.employer=" + (search_db_committee_donations_employer==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_employer))+"&search.db_committee_donations.occupation=" + (search_db_committee_donations_occupation==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_occupation))+"&search.db_committee_donations.location=" + (search_db_committee_donations_location==null? "" : System.Uri.EscapeDataString(search_db_committee_donations_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Data Hub' entry type
		/// API to search for entries of type Data Hub
		/// Search_community_datahub repository/search/type/community_datahub
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_community_datahubAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/community_datahub?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Facility' entry type
		/// API to search for entries of type Facility
		/// Search_community_resource repository/search/type/community_resource
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_community_resource_resource_type">Type</param>
		/// <param name="search_community_resource_address">Address</param>
		/// <param name="search_community_resource_city">City</param>
		/// <param name="search_community_resource_state">State or Province</param>
		/// <param name="search_community_resource_zipcode">Zip Code</param>
		/// <returns>No response was specified</returns>
		public async Task Search_community_resourceAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_community_resource_resource_type, 
					string search_community_resource_address, 
					string search_community_resource_city, 
					string search_community_resource_state, 
					string search_community_resource_zipcode, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/community_resource?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.community_resource.resource_type=" + (search_community_resource_resource_type==null? "" : System.Uri.EscapeDataString(search_community_resource_resource_type))+"&search.community_resource.address=" + (search_community_resource_address==null? "" : System.Uri.EscapeDataString(search_community_resource_address))+"&search.community_resource.city=" + (search_community_resource_city==null? "" : System.Uri.EscapeDataString(search_community_resource_city))+"&search.community_resource.state=" + (search_community_resource_state==null? "" : System.Uri.EscapeDataString(search_community_resource_state))+"&search.community_resource.zipcode=" + (search_community_resource_zipcode==null? "" : System.Uri.EscapeDataString(search_community_resource_zipcode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Construction Permits' entry type
		/// API to search for entries of type Construction Permits
		/// Search_construction_permits repository/search/type/construction_permits
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_construction_permits_address">Address</param>
		/// <param name="search_db_construction_permits_case_status">Case Status</param>
		/// <param name="search_db_construction_permits_category">Category</param>
		/// <param name="search_db_construction_permits_building_uses_and_work_scopes">Building Uses And Work Scopes</param>
		/// <param name="search_db_construction_permits_permit_types">Permit Types</param>
		/// <param name="search_db_construction_permits_total_project_value">Total Project Value</param>
		/// <param name="search_db_construction_permits_total_subpermit_value">Total Subpermit Value</param>
		/// <param name="search_db_construction_permits_applied">Applied</param>
		/// <param name="search_db_construction_permits_approved">Approved</param>
		/// <param name="search_db_construction_permits_issued">Issued</param>
		/// <param name="search_db_construction_permits_co_date">Co Date</param>
		/// <param name="search_db_construction_permits_completion_date">Completion Date</param>
		/// <param name="search_db_construction_permits_new_res_unit">New Res Unit</param>
		/// <param name="search_db_construction_permits_existing_res_unit">Existing Res Unit</param>
		/// <param name="search_db_construction_permits_affordable_hsg_unit">Affordable Hsg Unit</param>
		/// <param name="search_db_construction_permits_new_sf">New Sf</param>
		/// <param name="search_db_construction_permits_remodel_sf">Remodel Sf</param>
		/// <param name="search_db_construction_permits_narrative_description">Narrative Description</param>
		/// <param name="search_db_construction_permits_primary_first_name">Primary First Name</param>
		/// <param name="search_db_construction_permits_primary_last_name">Primary Last Name</param>
		/// <param name="search_db_construction_permits_primary_company">Primary Company</param>
		/// <param name="search_db_construction_permits_contractor_first_name">Contractor First Name</param>
		/// <param name="search_db_construction_permits_contractor_last_name">Contractor Last Name</param>
		/// <param name="search_db_construction_permits_contractor_company">Contractor Company</param>
		/// <param name="search_db_construction_permits_owner1_first_name">Owner1 First Name</param>
		/// <param name="search_db_construction_permits_owner1_last_name">Owner1 Last Name</param>
		/// <param name="search_db_construction_permits_owner1_company">Owner1 Company</param>
		/// <param name="search_db_construction_permits_owner2_first_name">Owner2 First Name</param>
		/// <param name="search_db_construction_permits_owner2_last_name">Owner2 Last Name</param>
		/// <param name="search_db_construction_permits_owner2_company">Owner2 Company</param>
		/// <returns>No response was specified</returns>
		public async Task Search_construction_permitsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_construction_permits_address, 
					string search_db_construction_permits_case_status, 
					string search_db_construction_permits_category, 
					string search_db_construction_permits_building_uses_and_work_scopes, 
					string search_db_construction_permits_permit_types, 
					double search_db_construction_permits_total_project_value, 
					double search_db_construction_permits_total_subpermit_value, 
					string search_db_construction_permits_applied, 
					string search_db_construction_permits_approved, 
					string search_db_construction_permits_issued, 
					string search_db_construction_permits_co_date, 
					string search_db_construction_permits_completion_date, 
					int search_db_construction_permits_new_res_unit, 
					int search_db_construction_permits_existing_res_unit, 
					int search_db_construction_permits_affordable_hsg_unit, 
					int search_db_construction_permits_new_sf, 
					int search_db_construction_permits_remodel_sf, 
					string search_db_construction_permits_narrative_description, 
					string search_db_construction_permits_primary_first_name, 
					string search_db_construction_permits_primary_last_name, 
					string search_db_construction_permits_primary_company, 
					string search_db_construction_permits_contractor_first_name, 
					string search_db_construction_permits_contractor_last_name, 
					string search_db_construction_permits_contractor_company, 
					string search_db_construction_permits_owner1_first_name, 
					string search_db_construction_permits_owner1_last_name, 
					string search_db_construction_permits_owner1_company, 
					string search_db_construction_permits_owner2_first_name, 
					string search_db_construction_permits_owner2_last_name, 
					string search_db_construction_permits_owner2_company, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/construction_permits?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_construction_permits.address=" + (search_db_construction_permits_address==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_address))+"&search.db_construction_permits.case_status=" + (search_db_construction_permits_case_status==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_case_status))+"&search.db_construction_permits.category=" + (search_db_construction_permits_category==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_category))+"&search.db_construction_permits.building_uses_and_work_scopes=" + (search_db_construction_permits_building_uses_and_work_scopes==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_building_uses_and_work_scopes))+"&search.db_construction_permits.permit_types=" + (search_db_construction_permits_permit_types==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_permit_types))+"&search.db_construction_permits.total_project_value="+search_db_construction_permits_total_project_value+"&search.db_construction_permits.total_subpermit_value="+search_db_construction_permits_total_subpermit_value+"&search.db_construction_permits.applied=" + (search_db_construction_permits_applied==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_applied))+"&search.db_construction_permits.approved=" + (search_db_construction_permits_approved==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_approved))+"&search.db_construction_permits.issued=" + (search_db_construction_permits_issued==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_issued))+"&search.db_construction_permits.co_date=" + (search_db_construction_permits_co_date==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_co_date))+"&search.db_construction_permits.completion_date=" + (search_db_construction_permits_completion_date==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_completion_date))+"&search.db_construction_permits.new_res_unit="+search_db_construction_permits_new_res_unit+"&search.db_construction_permits.existing_res_unit="+search_db_construction_permits_existing_res_unit+"&search.db_construction_permits.affordable_hsg_unit="+search_db_construction_permits_affordable_hsg_unit+"&search.db_construction_permits.new_sf="+search_db_construction_permits_new_sf+"&search.db_construction_permits.remodel_sf="+search_db_construction_permits_remodel_sf+"&search.db_construction_permits.narrative_description=" + (search_db_construction_permits_narrative_description==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_narrative_description))+"&search.db_construction_permits.primary_first_name=" + (search_db_construction_permits_primary_first_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_primary_first_name))+"&search.db_construction_permits.primary_last_name=" + (search_db_construction_permits_primary_last_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_primary_last_name))+"&search.db_construction_permits.primary_company=" + (search_db_construction_permits_primary_company==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_primary_company))+"&search.db_construction_permits.contractor_first_name=" + (search_db_construction_permits_contractor_first_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_contractor_first_name))+"&search.db_construction_permits.contractor_last_name=" + (search_db_construction_permits_contractor_last_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_contractor_last_name))+"&search.db_construction_permits.contractor_company=" + (search_db_construction_permits_contractor_company==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_contractor_company))+"&search.db_construction_permits.owner1_first_name=" + (search_db_construction_permits_owner1_first_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_owner1_first_name))+"&search.db_construction_permits.owner1_last_name=" + (search_db_construction_permits_owner1_last_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_owner1_last_name))+"&search.db_construction_permits.owner1_company=" + (search_db_construction_permits_owner1_company==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_owner1_company))+"&search.db_construction_permits.owner2_first_name=" + (search_db_construction_permits_owner2_first_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_owner2_first_name))+"&search.db_construction_permits.owner2_last_name=" + (search_db_construction_permits_owner2_last_name==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_owner2_last_name))+"&search.db_construction_permits.owner2_company=" + (search_db_construction_permits_owner2_company==null? "" : System.Uri.EscapeDataString(search_db_construction_permits_owner2_company));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Contact List' entry type
		/// API to search for entries of type Contact List
		/// Search_contact repository/search/type/contact
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_contact_name">Name</param>
		/// <param name="search_db_contact_institution">Institution</param>
		/// <param name="search_db_contact_email">Email</param>
		/// <returns>No response was specified</returns>
		public async Task Search_contactAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_contact_name, 
					string search_db_contact_institution, 
					string search_db_contact_email, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/contact?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_contact.name=" + (search_db_contact_name==null? "" : System.Uri.EscapeDataString(search_db_contact_name))+"&search.db_contact.institution=" + (search_db_contact_institution==null? "" : System.Uri.EscapeDataString(search_db_contact_institution))+"&search.db_contact.email=" + (search_db_contact_email==null? "" : System.Uri.EscapeDataString(search_db_contact_email));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Colorado Health Indicators' entry type
		/// API to search for entries of type Colorado Health Indicators
		/// Search_db_co_indicators repository/search/type/db_co_indicators
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_db_co_indicators_geo_name">County</param>
		/// <param name="search_db_db_co_indicators_domain">Domain</param>
		/// <param name="search_db_db_co_indicators_subdomain">Subdomain</param>
		/// <param name="search_db_db_co_indicators_indicatorName">Indicator</param>
		/// <param name="search_db_db_co_indicators_description">Description</param>
		/// <param name="search_db_db_co_indicators_measure">Measure</param>
		/// <param name="search_db_db_co_indicators_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_db_co_indicatorsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_db_co_indicators_geo_name, 
					string search_db_db_co_indicators_domain, 
					string search_db_db_co_indicators_subdomain, 
					string search_db_db_co_indicators_indicatorName, 
					string search_db_db_co_indicators_description, 
					double search_db_db_co_indicators_measure, 
					string search_db_db_co_indicators_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/db_co_indicators?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_db_co_indicators.geo_name=" + (search_db_db_co_indicators_geo_name==null? "" : System.Uri.EscapeDataString(search_db_db_co_indicators_geo_name))+"&search.db_db_co_indicators.domain=" + (search_db_db_co_indicators_domain==null? "" : System.Uri.EscapeDataString(search_db_db_co_indicators_domain))+"&search.db_db_co_indicators.subdomain=" + (search_db_db_co_indicators_subdomain==null? "" : System.Uri.EscapeDataString(search_db_db_co_indicators_subdomain))+"&search.db_db_co_indicators.indicatorName=" + (search_db_db_co_indicators_indicatorName==null? "" : System.Uri.EscapeDataString(search_db_db_co_indicators_indicatorName))+"&search.db_db_co_indicators.description=" + (search_db_db_co_indicators_description==null? "" : System.Uri.EscapeDataString(search_db_db_co_indicators_description))+"&search.db_db_co_indicators.measure="+search_db_db_co_indicators_measure+"&search.db_db_co_indicators.location=" + (search_db_db_co_indicators_location==null? "" : System.Uri.EscapeDataString(search_db_db_co_indicators_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Landsat Satellite Data' entry type
		/// API to search for entries of type Landsat Satellite Data
		/// Search_earth_satellite_landsat repository/search/type/earth_satellite_landsat
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_earth_satellite_landsat_sensor">Sensor</param>
		/// <param name="search_earth_satellite_landsat_satellite">Satellite</param>
		/// <param name="search_earth_satellite_landsat_wrs_path_number">WRS Path</param>
		/// <param name="search_earth_satellite_landsat_wrs_row_number">WRS Row</param>
		/// <param name="search_earth_satellite_landsat_ground_station">Ground Station</param>
		/// <param name="search_earth_satellite_landsat_archive_version_number">Archive Version Number</param>
		/// <returns>No response was specified</returns>
		public async Task Search_earth_satellite_landsatAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_earth_satellite_landsat_sensor, 
					string search_earth_satellite_landsat_satellite, 
					int search_earth_satellite_landsat_wrs_path_number, 
					int search_earth_satellite_landsat_wrs_row_number, 
					string search_earth_satellite_landsat_ground_station, 
					int search_earth_satellite_landsat_archive_version_number, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/earth_satellite_landsat?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.earth_satellite_landsat.sensor=" + (search_earth_satellite_landsat_sensor==null? "" : System.Uri.EscapeDataString(search_earth_satellite_landsat_sensor))+"&search.earth_satellite_landsat.satellite=" + (search_earth_satellite_landsat_satellite==null? "" : System.Uri.EscapeDataString(search_earth_satellite_landsat_satellite))+"&search.earth_satellite_landsat.wrs_path_number="+search_earth_satellite_landsat_wrs_path_number+"&search.earth_satellite_landsat.wrs_row_number="+search_earth_satellite_landsat_wrs_row_number+"&search.earth_satellite_landsat.ground_station=" + (search_earth_satellite_landsat_ground_station==null? "" : System.Uri.EscapeDataString(search_earth_satellite_landsat_ground_station))+"&search.earth_satellite_landsat.archive_version_number="+search_earth_satellite_landsat_archive_version_number;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FAQ' entry type
		/// API to search for entries of type FAQ
		/// Search_faq repository/search/type/faq
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_faqAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/faq?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FEC PACs' entry type
		/// API to search for entries of type FEC PACs
		/// Search_fec_pacs repository/search/type/fec_pacs
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_fec_pacs_committee">Committee</param>
		/// <param name="search_db_fec_pacs_total_receipts">Total Receipts</param>
		/// <param name="search_db_fec_pacs_beginning_cash">Beginning Cash</param>
		/// <param name="search_db_fec_pacs_ending_cash">Ending Cash</param>
		/// <param name="search_db_fec_pacs_contributions_from_individuals">Contributions From Individuals</param>
		/// <param name="search_db_fec_pacs_contributions_from_other_committees">Contributions From Other Committees</param>
		/// <param name="search_db_fec_pacs_trans_from_affiliates">Trans From Affiliates</param>
		/// <param name="search_db_fec_pacs_contributions_to_other_committee">Contributions To Other Committee</param>
		/// <param name="search_db_fec_pacs_contributions_from_candidate">Contributions From Candidate</param>
		/// <param name="search_db_fec_pacs_loans_from_candidate">Loans From Candidate</param>
		/// <param name="search_db_fec_pacs_total_loans_received">Total Loans Received</param>
		/// <param name="search_db_fec_pacs_total_distributions">Total Distributions</param>
		/// <param name="search_db_fec_pacs_transfers_to_affiliates">Transfers To Affiliates</param>
		/// <param name="search_db_fec_pacs_refunds_to_individuals">Refunds To Individuals</param>
		/// <param name="search_db_fec_pacs_refends_to_othercommittees">Refends To Othercommittees</param>
		/// <param name="search_db_fec_pacs_candidate_loan_repayments">Candidate Loan Repayments</param>
		/// <param name="search_db_fec_pacs_loan_repayments">Loan Repayments</param>
		/// <returns>No response was specified</returns>
		public async Task Search_fec_pacsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_fec_pacs_committee, 
					double search_db_fec_pacs_total_receipts, 
					double search_db_fec_pacs_beginning_cash, 
					double search_db_fec_pacs_ending_cash, 
					double search_db_fec_pacs_contributions_from_individuals, 
					double search_db_fec_pacs_contributions_from_other_committees, 
					double search_db_fec_pacs_trans_from_affiliates, 
					double search_db_fec_pacs_contributions_to_other_committee, 
					double search_db_fec_pacs_contributions_from_candidate, 
					double search_db_fec_pacs_loans_from_candidate, 
					double search_db_fec_pacs_total_loans_received, 
					double search_db_fec_pacs_total_distributions, 
					double search_db_fec_pacs_transfers_to_affiliates, 
					double search_db_fec_pacs_refunds_to_individuals, 
					double search_db_fec_pacs_refends_to_othercommittees, 
					double search_db_fec_pacs_candidate_loan_repayments, 
					double search_db_fec_pacs_loan_repayments, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/fec_pacs?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_fec_pacs.committee=" + (search_db_fec_pacs_committee==null? "" : System.Uri.EscapeDataString(search_db_fec_pacs_committee))+"&search.db_fec_pacs.total_receipts="+search_db_fec_pacs_total_receipts+"&search.db_fec_pacs.beginning_cash="+search_db_fec_pacs_beginning_cash+"&search.db_fec_pacs.ending_cash="+search_db_fec_pacs_ending_cash+"&search.db_fec_pacs.contributions_from_individuals="+search_db_fec_pacs_contributions_from_individuals+"&search.db_fec_pacs.contributions_from_other_committees="+search_db_fec_pacs_contributions_from_other_committees+"&search.db_fec_pacs.trans_from_affiliates="+search_db_fec_pacs_trans_from_affiliates+"&search.db_fec_pacs.contributions_to_other_committee="+search_db_fec_pacs_contributions_to_other_committee+"&search.db_fec_pacs.contributions_from_candidate="+search_db_fec_pacs_contributions_from_candidate+"&search.db_fec_pacs.loans_from_candidate="+search_db_fec_pacs_loans_from_candidate+"&search.db_fec_pacs.total_loans_received="+search_db_fec_pacs_total_loans_received+"&search.db_fec_pacs.total_distributions="+search_db_fec_pacs_total_distributions+"&search.db_fec_pacs.transfers_to_affiliates="+search_db_fec_pacs_transfers_to_affiliates+"&search.db_fec_pacs.refunds_to_individuals="+search_db_fec_pacs_refunds_to_individuals+"&search.db_fec_pacs.refends_to_othercommittees="+search_db_fec_pacs_refends_to_othercommittees+"&search.db_fec_pacs.candidate_loan_repayments="+search_db_fec_pacs_candidate_loan_repayments+"&search.db_fec_pacs.loan_repayments="+search_db_fec_pacs_loan_repayments;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Candidates' entry type
		/// API to search for entries of type Candidates
		/// Search_feccandidates repository/search/type/feccandidates
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_feccandidates_name">Name</param>
		/// <param name="search_db_feccandidates_party">Party</param>
		/// <param name="search_db_feccandidates_state">State</param>
		/// <param name="search_db_feccandidates_district">District</param>
		/// <param name="search_db_feccandidates_gender">Gender</param>
		/// <param name="search_db_feccandidates_beginning_cash">Beginning Cash</param>
		/// <param name="search_db_feccandidates_ending_cash">Ending Cash</param>
		/// <param name="search_db_feccandidates_total_receipts">Total Receipts</param>
		/// <param name="search_db_feccandidates_total_indivual_contributions">Total Indivual Contributions</param>
		/// <param name="search_db_feccandidates_transfers_from_committees">Transfers From Committees</param>
		/// <param name="search_db_feccandidates_transfers_to_committees">Transfers To Committees</param>
		/// <param name="search_db_feccandidates_total_disbursements">Total Disbursements</param>
		/// <param name="search_db_feccandidates_contributions_from_candidate">Contributions From Candidate</param>
		/// <param name="search_db_feccandidates_loans_from_candidates">Loans From Candidates</param>
		/// <param name="search_db_feccandidates_other_loans">Other Loans</param>
		/// <param name="search_db_feccandidates_candidate_loan_repayments">Candidate Loan Repayments</param>
		/// <param name="search_db_feccandidates_other_loan_repayments">Other Loan Repayments</param>
		/// <param name="search_db_feccandidates_debts_owed_by">Debts Owed By</param>
		/// <param name="search_db_feccandidates_contributions_from_other_committees">Contributions From Other Committees</param>
		/// <param name="search_db_feccandidates_contributions_from_party_committees">Contributions From Party Committees</param>
		/// <param name="search_db_feccandidates_coverage_end_date">Coverage End Date</param>
		/// <param name="search_db_feccandidates_individual_refunds">Individual Refunds</param>
		/// <param name="search_db_feccandidates_committee_refunds">Committee Refunds</param>
		/// <returns>No response was specified</returns>
		public async Task Search_feccandidatesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_feccandidates_name, 
					string search_db_feccandidates_party, 
					string search_db_feccandidates_state, 
					string search_db_feccandidates_district, 
					string search_db_feccandidates_gender, 
					double search_db_feccandidates_beginning_cash, 
					double search_db_feccandidates_ending_cash, 
					double search_db_feccandidates_total_receipts, 
					double search_db_feccandidates_total_indivual_contributions, 
					double search_db_feccandidates_transfers_from_committees, 
					double search_db_feccandidates_transfers_to_committees, 
					double search_db_feccandidates_total_disbursements, 
					double search_db_feccandidates_contributions_from_candidate, 
					double search_db_feccandidates_loans_from_candidates, 
					double search_db_feccandidates_other_loans, 
					double search_db_feccandidates_candidate_loan_repayments, 
					double search_db_feccandidates_other_loan_repayments, 
					double search_db_feccandidates_debts_owed_by, 
					double search_db_feccandidates_contributions_from_other_committees, 
					double search_db_feccandidates_contributions_from_party_committees, 
					string search_db_feccandidates_coverage_end_date, 
					double search_db_feccandidates_individual_refunds, 
					double search_db_feccandidates_committee_refunds, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/feccandidates?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_feccandidates.name=" + (search_db_feccandidates_name==null? "" : System.Uri.EscapeDataString(search_db_feccandidates_name))+"&search.db_feccandidates.party=" + (search_db_feccandidates_party==null? "" : System.Uri.EscapeDataString(search_db_feccandidates_party))+"&search.db_feccandidates.state=" + (search_db_feccandidates_state==null? "" : System.Uri.EscapeDataString(search_db_feccandidates_state))+"&search.db_feccandidates.district=" + (search_db_feccandidates_district==null? "" : System.Uri.EscapeDataString(search_db_feccandidates_district))+"&search.db_feccandidates.gender=" + (search_db_feccandidates_gender==null? "" : System.Uri.EscapeDataString(search_db_feccandidates_gender))+"&search.db_feccandidates.beginning_cash="+search_db_feccandidates_beginning_cash+"&search.db_feccandidates.ending_cash="+search_db_feccandidates_ending_cash+"&search.db_feccandidates.total_receipts="+search_db_feccandidates_total_receipts+"&search.db_feccandidates.total_indivual_contributions="+search_db_feccandidates_total_indivual_contributions+"&search.db_feccandidates.transfers_from_committees="+search_db_feccandidates_transfers_from_committees+"&search.db_feccandidates.transfers_to_committees="+search_db_feccandidates_transfers_to_committees+"&search.db_feccandidates.total_disbursements="+search_db_feccandidates_total_disbursements+"&search.db_feccandidates.contributions_from_candidate="+search_db_feccandidates_contributions_from_candidate+"&search.db_feccandidates.loans_from_candidates="+search_db_feccandidates_loans_from_candidates+"&search.db_feccandidates.other_loans="+search_db_feccandidates_other_loans+"&search.db_feccandidates.candidate_loan_repayments="+search_db_feccandidates_candidate_loan_repayments+"&search.db_feccandidates.other_loan_repayments="+search_db_feccandidates_other_loan_repayments+"&search.db_feccandidates.debts_owed_by="+search_db_feccandidates_debts_owed_by+"&search.db_feccandidates.contributions_from_other_committees="+search_db_feccandidates_contributions_from_other_committees+"&search.db_feccandidates.contributions_from_party_committees="+search_db_feccandidates_contributions_from_party_committees+"&search.db_feccandidates.coverage_end_date=" + (search_db_feccandidates_coverage_end_date==null? "" : System.Uri.EscapeDataString(search_db_feccandidates_coverage_end_date))+"&search.db_feccandidates.individual_refunds="+search_db_feccandidates_individual_refunds+"&search.db_feccandidates.committee_refunds="+search_db_feccandidates_committee_refunds;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'RSS/ATOM Feed' entry type
		/// API to search for entries of type RSS/ATOM Feed
		/// Search_feed repository/search/type/feed
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_feedAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/feed?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'File' entry type
		/// API to search for entries of type File
		/// Search_file repository/search/type/file
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_fileAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/file?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FITS Data File' entry type
		/// API to search for entries of type FITS Data File
		/// Search_fits_data repository/search/type/fits_data
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_fits_data_origin">Origin</param>
		/// <param name="search_fits_data_telescope">Telescope</param>
		/// <param name="search_fits_data_instrument">Instrument</param>
		/// <returns>No response was specified</returns>
		public async Task Search_fits_dataAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_fits_data_origin, 
					string search_fits_data_telescope, 
					string search_fits_data_instrument, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/fits_data?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.fits_data.origin=" + (search_fits_data_origin==null? "" : System.Uri.EscapeDataString(search_fits_data_origin))+"&search.fits_data.telescope=" + (search_fits_data_telescope==null? "" : System.Uri.EscapeDataString(search_fits_data_telescope))+"&search.fits_data.instrument=" + (search_fits_data_instrument==null? "" : System.Uri.EscapeDataString(search_fits_data_instrument));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Remote FTP File View' entry type
		/// API to search for entries of type Remote FTP File View
		/// Search_ftp repository/search/type/ftp
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_ftpAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/ftp?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Countdown' entry type
		/// API to search for entries of type Countdown
		/// Search_gadgets_countdown repository/search/type/gadgets_countdown
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_gadgets_countdownAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/gadgets_countdown?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Stock Ticker' entry type
		/// API to search for entries of type Stock Ticker
		/// Search_gadgets_stock repository/search/type/gadgets_stock
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_gadgets_stockAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/gadgets_stock?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Weather' entry type
		/// API to search for entries of type Weather
		/// Search_gadgets_weather repository/search/type/gadgets_weather
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_gadgets_weatherAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/gadgets_weather?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Census Tracts' entry type
		/// API to search for entries of type Census Tracts
		/// Search_gazeteer_census_tracts repository/search/type/gazeteer_census_tracts
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_gazeteer_census_tracts_state">State</param>
		/// <param name="search_db_gazeteer_census_tracts_state_fips">State Fips</param>
		/// <param name="search_db_gazeteer_census_tracts_county_name">County Name</param>
		/// <param name="search_db_gazeteer_census_tracts_county_fips">County Fips</param>
		/// <param name="search_db_gazeteer_census_tracts_census_tract_id">Census Tract Id</param>
		/// <param name="search_db_gazeteer_census_tracts_full_census_tract_id">Full Census Tract Id</param>
		/// <param name="search_db_gazeteer_census_tracts_land_area">Land Area</param>
		/// <param name="search_db_gazeteer_census_tracts_water_area">Water Area</param>
		/// <param name="search_db_gazeteer_census_tracts_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_gazeteer_census_tractsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_gazeteer_census_tracts_state, 
					string search_db_gazeteer_census_tracts_state_fips, 
					string search_db_gazeteer_census_tracts_county_name, 
					string search_db_gazeteer_census_tracts_county_fips, 
					string search_db_gazeteer_census_tracts_census_tract_id, 
					string search_db_gazeteer_census_tracts_full_census_tract_id, 
					double search_db_gazeteer_census_tracts_land_area, 
					double search_db_gazeteer_census_tracts_water_area, 
					string search_db_gazeteer_census_tracts_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/gazeteer_census_tracts?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_gazeteer_census_tracts.state=" + (search_db_gazeteer_census_tracts_state==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_census_tracts_state))+"&search.db_gazeteer_census_tracts.state_fips=" + (search_db_gazeteer_census_tracts_state_fips==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_census_tracts_state_fips))+"&search.db_gazeteer_census_tracts.county_name=" + (search_db_gazeteer_census_tracts_county_name==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_census_tracts_county_name))+"&search.db_gazeteer_census_tracts.county_fips=" + (search_db_gazeteer_census_tracts_county_fips==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_census_tracts_county_fips))+"&search.db_gazeteer_census_tracts.census_tract_id=" + (search_db_gazeteer_census_tracts_census_tract_id==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_census_tracts_census_tract_id))+"&search.db_gazeteer_census_tracts.full_census_tract_id=" + (search_db_gazeteer_census_tracts_full_census_tract_id==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_census_tracts_full_census_tract_id))+"&search.db_gazeteer_census_tracts.land_area="+search_db_gazeteer_census_tracts_land_area+"&search.db_gazeteer_census_tracts.water_area="+search_db_gazeteer_census_tracts_water_area+"&search.db_gazeteer_census_tracts.location=" + (search_db_gazeteer_census_tracts_location==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_census_tracts_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Census Gazeteer Counties' entry type
		/// API to search for entries of type Census Gazeteer Counties
		/// Search_gazeteer_counties repository/search/type/gazeteer_counties
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_gazeteer_counties_state_abbreviation">State Abbreviation</param>
		/// <param name="search_db_gazeteer_counties_state_fips">State Fips</param>
		/// <param name="search_db_gazeteer_counties_county_fips">County Fips</param>
		/// <param name="search_db_gazeteer_counties_full_county_fips">Full County Fips</param>
		/// <param name="search_db_gazeteer_counties_county_name">County Name</param>
		/// <param name="search_db_gazeteer_counties_area_land">Area Land</param>
		/// <param name="search_db_gazeteer_counties_area_water">Area Water</param>
		/// <param name="search_db_gazeteer_counties_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_gazeteer_countiesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_gazeteer_counties_state_abbreviation, 
					string search_db_gazeteer_counties_state_fips, 
					string search_db_gazeteer_counties_county_fips, 
					string search_db_gazeteer_counties_full_county_fips, 
					string search_db_gazeteer_counties_county_name, 
					double search_db_gazeteer_counties_area_land, 
					double search_db_gazeteer_counties_area_water, 
					string search_db_gazeteer_counties_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/gazeteer_counties?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_gazeteer_counties.state_abbreviation=" + (search_db_gazeteer_counties_state_abbreviation==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_counties_state_abbreviation))+"&search.db_gazeteer_counties.state_fips=" + (search_db_gazeteer_counties_state_fips==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_counties_state_fips))+"&search.db_gazeteer_counties.county_fips=" + (search_db_gazeteer_counties_county_fips==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_counties_county_fips))+"&search.db_gazeteer_counties.full_county_fips=" + (search_db_gazeteer_counties_full_county_fips==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_counties_full_county_fips))+"&search.db_gazeteer_counties.county_name=" + (search_db_gazeteer_counties_county_name==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_counties_county_name))+"&search.db_gazeteer_counties.area_land="+search_db_gazeteer_counties_area_land+"&search.db_gazeteer_counties.area_water="+search_db_gazeteer_counties_area_water+"&search.db_gazeteer_counties.location=" + (search_db_gazeteer_counties_location==null? "" : System.Uri.EscapeDataString(search_db_gazeteer_counties_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'GeoJson File' entry type
		/// API to search for entries of type GeoJson File
		/// Search_geo_geojson repository/search/type/geo_geojson
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_geo_geojsonAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/geo_geojson?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'GeoTIFF' entry type
		/// API to search for entries of type GeoTIFF
		/// Search_geo_geotiff repository/search/type/geo_geotiff
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_geo_geotiffAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/geo_geotiff?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'GPX GPS File' entry type
		/// API to search for entries of type GPX GPS File
		/// Search_geo_gpx repository/search/type/geo_gpx
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_geo_gpx_distance">Distance</param>
		/// <param name="search_geo_gpx_total_time">Total Time</param>
		/// <param name="search_geo_gpx_moving_time">Moving Time</param>
		/// <param name="search_geo_gpx_speed">Average Speed</param>
		/// <param name="search_geo_gpx_elevation_gain">Elevation Gain</param>
		/// <param name="search_geo_gpx_elevation_loss">Elevation Loss</param>
		/// <returns>No response was specified</returns>
		public async Task Search_geo_gpxAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					double search_geo_gpx_distance, 
					double search_geo_gpx_total_time, 
					double search_geo_gpx_moving_time, 
					double search_geo_gpx_speed, 
					double search_geo_gpx_elevation_gain, 
					double search_geo_gpx_elevation_loss, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/geo_gpx?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.geo_gpx.distance="+search_geo_gpx_distance+"&search.geo_gpx.total_time="+search_geo_gpx_total_time+"&search.geo_gpx.moving_time="+search_geo_gpx_moving_time+"&search.geo_gpx.speed="+search_geo_gpx_speed+"&search.geo_gpx.elevation_gain="+search_geo_gpx_elevation_gain+"&search.geo_gpx.elevation_loss="+search_geo_gpx_elevation_loss;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'HDF5 File' entry type
		/// API to search for entries of type HDF5 File
		/// Search_geo_hdf5 repository/search/type/geo_hdf5
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_geo_hdf5Async(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/geo_hdf5?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'KML/KMZ File' entry type
		/// API to search for entries of type KML/KMZ File
		/// Search_geo_kml repository/search/type/geo_kml
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_geo_kmlAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/geo_kml?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Shapefile' entry type
		/// API to search for entries of type Shapefile
		/// Search_geo_shapefile repository/search/type/geo_shapefile
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_geo_shapefileAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/geo_shapefile?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Shapefile with FIPS Code' entry type
		/// API to search for entries of type Shapefile with FIPS Code
		/// Search_geo_shapefile_fips repository/search/type/geo_shapefile_fips
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_geo_shapefile_fipsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/geo_shapefile_fips?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Glossary' entry type
		/// API to search for entries of type Glossary
		/// Search_glossary repository/search/type/glossary
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_glossaryAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/glossary?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Grid Aggregation' entry type
		/// API to search for entries of type Grid Aggregation
		/// Search_gridaggregation repository/search/type/gridaggregation
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_gridaggregationAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/gridaggregation?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Folder' entry type
		/// API to search for entries of type Folder
		/// Search_group repository/search/type/group
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_groupAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/group?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'HipChat Group' entry type
		/// API to search for entries of type HipChat Group
		/// Search_hipchat_group repository/search/type/hipchat_group
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_hipchat_groupAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/hipchat_group?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Home Page' entry type
		/// API to search for entries of type Home Page
		/// Search_homepage repository/search/type/homepage
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_homepageAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/homepage?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Incident' entry type
		/// API to search for entries of type Incident
		/// Search_incident repository/search/type/incident
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_incident_incidenttype">Incident Type</param>
		/// <param name="search_incident_cause">Cause</param>
		/// <param name="search_incident_state">State</param>
		/// <returns>No response was specified</returns>
		public async Task Search_incidentAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_incident_incidenttype, 
					string search_incident_cause, 
					string search_incident_state, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/incident?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.incident.incidenttype=" + (search_incident_incidenttype==null? "" : System.Uri.EscapeDataString(search_incident_incidenttype))+"&search.incident.cause=" + (search_incident_cause==null? "" : System.Uri.EscapeDataString(search_incident_cause))+"&search.incident.state=" + (search_incident_state==null? "" : System.Uri.EscapeDataString(search_incident_state));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Jeopardy' entry type
		/// API to search for entries of type Jeopardy
		/// Search_jeopardy repository/search/type/jeopardy
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_jeopardy_question">Question</param>
		/// <param name="search_db_jeopardy_answer">Answer</param>
		/// <param name="search_db_jeopardy_round">Round</param>
		/// <param name="search_db_jeopardy_category">Category</param>
		/// <param name="search_db_jeopardy_air_date">Air Date</param>
		/// <returns>No response was specified</returns>
		public async Task Search_jeopardyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_jeopardy_question, 
					string search_db_jeopardy_answer, 
					string search_db_jeopardy_round, 
					string search_db_jeopardy_category, 
					string search_db_jeopardy_air_date, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/jeopardy?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_jeopardy.question=" + (search_db_jeopardy_question==null? "" : System.Uri.EscapeDataString(search_db_jeopardy_question))+"&search.db_jeopardy.answer=" + (search_db_jeopardy_answer==null? "" : System.Uri.EscapeDataString(search_db_jeopardy_answer))+"&search.db_jeopardy.round=" + (search_db_jeopardy_round==null? "" : System.Uri.EscapeDataString(search_db_jeopardy_round))+"&search.db_jeopardy.category=" + (search_db_jeopardy_category==null? "" : System.Uri.EscapeDataString(search_db_jeopardy_category))+"&search.db_jeopardy.air_date=" + (search_db_jeopardy_air_date==null? "" : System.Uri.EscapeDataString(search_db_jeopardy_air_date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Lat-Lon Image' entry type
		/// API to search for entries of type Lat-Lon Image
		/// Search_latlonimage repository/search/type/latlonimage
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_latlonimageAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/latlonimage?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'LiDAR Collection' entry type
		/// API to search for entries of type LiDAR Collection
		/// Search_lidar_collection repository/search/type/lidar_collection
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_lidar_collectionAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/lidar_collection?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'LAS Lidar Data' entry type
		/// API to search for entries of type LAS Lidar Data
		/// Search_lidar_las repository/search/type/lidar_las
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_lidar_lasAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/lidar_las?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'LVIS Lidar Data' entry type
		/// API to search for entries of type LVIS Lidar Data
		/// Search_lidar_lvis repository/search/type/lidar_lvis
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_lidar_lvisAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/lidar_lvis?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Link' entry type
		/// API to search for entries of type Link
		/// Search_link repository/search/type/link
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_linkAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/link?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Server Side Files' entry type
		/// API to search for entries of type Server Side Files
		/// Search_localfiles repository/search/type/localfiles
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_localfilesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/localfiles?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Locations' entry type
		/// API to search for entries of type Locations
		/// Search_locations repository/search/type/locations
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_locations_name">Name</param>
		/// <param name="search_db_locations_type">Type</param>
		/// <param name="search_db_locations_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_locationsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_locations_name, 
					string search_db_locations_type, 
					string search_db_locations_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/locations?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_locations.name=" + (search_db_locations_name==null? "" : System.Uri.EscapeDataString(search_db_locations_name))+"&search.db_locations.type=" + (search_db_locations_type==null? "" : System.Uri.EscapeDataString(search_db_locations_type))+"&search.db_locations.location=" + (search_db_locations_location==null? "" : System.Uri.EscapeDataString(search_db_locations_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Google Map URL' entry type
		/// API to search for entries of type Google Map URL
		/// Search_map_googlemap repository/search/type/map_googlemap
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_map_googlemapAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/map_googlemap?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Audio File' entry type
		/// API to search for entries of type Audio File
		/// Search_media_audiofile repository/search/type/media_audiofile
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_media_audiofileAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/media_audiofile?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Image Loop' entry type
		/// API to search for entries of type Image Loop
		/// Search_media_imageloop repository/search/type/media_imageloop
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_media_imageloopAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/media_imageloop?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Photo Album' entry type
		/// API to search for entries of type Photo Album
		/// Search_media_photoalbum repository/search/type/media_photoalbum
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_media_photoalbumAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/media_photoalbum?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Video Channel' entry type
		/// API to search for entries of type Video Channel
		/// Search_media_video_channel repository/search/type/media_video_channel
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_media_video_channelAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/media_video_channel?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Quicktime Video' entry type
		/// API to search for entries of type Quicktime Video
		/// Search_media_video_quicktime repository/search/type/media_video_quicktime
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_media_video_quicktimeAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/media_video_quicktime?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'YouTube Video' entry type
		/// API to search for entries of type YouTube Video
		/// Search_media_youtubevideo repository/search/type/media_youtubevideo
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_media_youtubevideoAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/media_youtubevideo?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Notes' entry type
		/// API to search for entries of type Notes
		/// Search_notes repository/search/type/notes
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_notes_note">Note</param>
		/// <returns>No response was specified</returns>
		public async Task Search_notesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_notes_note, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/notes?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_notes.note=" + (search_db_notes_note==null? "" : System.Uri.EscapeDataString(search_db_notes_note));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Json File' entry type
		/// API to search for entries of type Json File
		/// Search_notes_jsonfile repository/search/type/notes_jsonfile
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_notes_jsonfileAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/notes_jsonfile?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Note' entry type
		/// API to search for entries of type Note
		/// Search_notes_note repository/search/type/notes_note
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_notes_noteAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/notes_note?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Notebook' entry type
		/// API to search for entries of type Notebook
		/// Search_notes_notebook repository/search/type/notes_notebook
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_notes_notebookAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/notes_notebook?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NWS Forecast Feed' entry type
		/// API to search for entries of type NWS Forecast Feed
		/// Search_nwsfeed repository/search/type/nwsfeed
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_nwsfeedAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/nwsfeed?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'OPeNDAP Link' entry type
		/// API to search for entries of type OPeNDAP Link
		/// Search_opendaplink repository/search/type/opendaplink
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_opendaplinkAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/opendaplink?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'OWL Class' entry type
		/// API to search for entries of type OWL Class
		/// Search_owl_class repository/search/type/owl.class
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_owl_classAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/owl.class?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'OWL Ontology' entry type
		/// API to search for entries of type OWL Ontology
		/// Search_owl_ontology repository/search/type/owl.ontology
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_owl_ontologyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/owl.ontology?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Paste Text Entry' entry type
		/// API to search for entries of type Paste Text Entry
		/// Search_pasteitentry repository/search/type/pasteitentry
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_pasteitentryAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/pasteitentry?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Text Point Data' entry type
		/// API to search for entries of type Text Point Data
		/// Search_point_text repository/search/type/point_text
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_point_textAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/point_text?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Police Stop Data' entry type
		/// API to search for entries of type Police Stop Data
		/// Search_police_stop_data repository/search/type/police_stop_data
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_police_stop_data_race">Race</param>
		/// <param name="search_db_police_stop_data_ethnicity">Ethnicity</param>
		/// <param name="search_db_police_stop_data_sex">Sex</param>
		/// <param name="search_db_police_stop_data_minutes">Minutes</param>
		/// <param name="search_db_police_stop_data_date">Date</param>
		/// <param name="search_db_police_stop_data_address">Address</param>
		/// <param name="search_db_police_stop_data_resident">Resident</param>
		/// <returns>No response was specified</returns>
		public async Task Search_police_stop_dataAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_police_stop_data_race, 
					string search_db_police_stop_data_ethnicity, 
					string search_db_police_stop_data_sex, 
					int search_db_police_stop_data_minutes, 
					string search_db_police_stop_data_date, 
					string search_db_police_stop_data_address, 
					string search_db_police_stop_data_resident, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/police_stop_data?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_police_stop_data.race=" + (search_db_police_stop_data_race==null? "" : System.Uri.EscapeDataString(search_db_police_stop_data_race))+"&search.db_police_stop_data.ethnicity=" + (search_db_police_stop_data_ethnicity==null? "" : System.Uri.EscapeDataString(search_db_police_stop_data_ethnicity))+"&search.db_police_stop_data.sex=" + (search_db_police_stop_data_sex==null? "" : System.Uri.EscapeDataString(search_db_police_stop_data_sex))+"&search.db_police_stop_data.minutes="+search_db_police_stop_data_minutes+"&search.db_police_stop_data.date=" + (search_db_police_stop_data_date==null? "" : System.Uri.EscapeDataString(search_db_police_stop_data_date))+"&search.db_police_stop_data.address=" + (search_db_police_stop_data_address==null? "" : System.Uri.EscapeDataString(search_db_police_stop_data_address))+"&search.db_police_stop_data.resident=" + (search_db_police_stop_data_resident==null? "" : System.Uri.EscapeDataString(search_db_police_stop_data_resident));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Poll' entry type
		/// API to search for entries of type Poll
		/// Search_poll repository/search/type/poll
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_pollAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/poll?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Campaign' entry type
		/// API to search for entries of type Campaign
		/// Search_project_campaign repository/search/type/project_campaign
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_campaignAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_campaign?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Case Study' entry type
		/// API to search for entries of type Case Study
		/// Search_project_casestudy repository/search/type/project_casestudy
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_casestudy_intended_use">Intended Use</param>
		/// <param name="search_project_casestudy_location">Where</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_casestudyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_casestudy_intended_use, 
					string search_project_casestudy_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_casestudy?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_casestudy.intended_use=" + (search_project_casestudy_intended_use==null? "" : System.Uri.EscapeDataString(search_project_casestudy_intended_use))+"&search.project_casestudy.location=" + (search_project_casestudy_location==null? "" : System.Uri.EscapeDataString(search_project_casestudy_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Research Contribution' entry type
		/// API to search for entries of type Research Contribution
		/// Search_project_contribution repository/search/type/project_contribution
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_contributionAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_contribution?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Data Format' entry type
		/// API to search for entries of type Data Format
		/// Search_project_dataformat repository/search/type/project_dataformat
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_dataformat_data_type">Data Type</param>
		/// <param name="search_project_dataformat_field">Field</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_dataformatAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_dataformat_data_type, 
					string search_project_dataformat_field, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_dataformat?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_dataformat.data_type=" + (search_project_dataformat_data_type==null? "" : System.Uri.EscapeDataString(search_project_dataformat_data_type))+"&search.project_dataformat.field=" + (search_project_dataformat_field==null? "" : System.Uri.EscapeDataString(search_project_dataformat_field));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Dataset' entry type
		/// API to search for entries of type Dataset
		/// Search_project_dataset repository/search/type/project_dataset
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_dataset_dataset_id">Dataset ID</param>
		/// <param name="search_project_dataset_data_type">Data Type</param>
		/// <param name="search_project_dataset_data_level">Data Level</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_datasetAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_dataset_dataset_id, 
					string search_project_dataset_data_type, 
					string search_project_dataset_data_level, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_dataset?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_dataset.dataset_id=" + (search_project_dataset_dataset_id==null? "" : System.Uri.EscapeDataString(search_project_dataset_dataset_id))+"&search.project_dataset.data_type=" + (search_project_dataset_data_type==null? "" : System.Uri.EscapeDataString(search_project_dataset_data_type))+"&search.project_dataset.data_level=" + (search_project_dataset_data_level==null? "" : System.Uri.EscapeDataString(search_project_dataset_data_level));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Deployment' entry type
		/// API to search for entries of type Deployment
		/// Search_project_deployment repository/search/type/project_deployment
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_deploymentAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_deployment?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Experiment' entry type
		/// API to search for entries of type Experiment
		/// Search_project_experiment repository/search/type/project_experiment
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_experimentAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_experiment?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Field Note' entry type
		/// API to search for entries of type Field Note
		/// Search_project_fieldnote repository/search/type/project_fieldnote
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_fieldnoteAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_fieldnote?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Control Points File' entry type
		/// API to search for entries of type Control Points File
		/// Search_project_gps_controlpoints repository/search/type/project_gps_controlpoints
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_gps_controlpointsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_gps_controlpoints?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Raw GPS File' entry type
		/// API to search for entries of type Raw GPS File
		/// Search_project_gps_raw repository/search/type/project_gps_raw
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_gps_rawAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_gps_raw?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'RINEX File' entry type
		/// API to search for entries of type RINEX File
		/// Search_project_gps_rinex repository/search/type/project_gps_rinex
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_gps_rinexAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_gps_rinex?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Instrument Data Collection' entry type
		/// API to search for entries of type Instrument Data Collection
		/// Search_project_instrument repository/search/type/project_instrument
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_instrumentAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_instrument?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Teaching Resource' entry type
		/// API to search for entries of type Teaching Resource
		/// Search_project_learning_resource repository/search/type/project_learning_resource
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_learning_resource_topic">Topic</param>
		/// <param name="search_project_learning_resource_grade_level">Grade Level</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_learning_resourceAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_learning_resource_topic, 
					string search_project_learning_resource_grade_level, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_learning_resource?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_learning_resource.topic=" + (search_project_learning_resource_topic==null? "" : System.Uri.EscapeDataString(search_project_learning_resource_topic))+"&search.project_learning_resource.grade_level=" + (search_project_learning_resource_grade_level==null? "" : System.Uri.EscapeDataString(search_project_learning_resource_grade_level));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Meeting' entry type
		/// API to search for entries of type Meeting
		/// Search_project_meeting repository/search/type/project_meeting
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_meeting_topic">Topic</param>
		/// <param name="search_project_meeting_location">Location</param>
		/// <param name="search_project_meeting_participants">Participants</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_meetingAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_meeting_topic, 
					string search_project_meeting_location, 
					string search_project_meeting_participants, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_meeting?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_meeting.topic=" + (search_project_meeting_topic==null? "" : System.Uri.EscapeDataString(search_project_meeting_topic))+"&search.project_meeting.location=" + (search_project_meeting_location==null? "" : System.Uri.EscapeDataString(search_project_meeting_location))+"&search.project_meeting.participants=" + (search_project_meeting_participants==null? "" : System.Uri.EscapeDataString(search_project_meeting_participants));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Organization' entry type
		/// API to search for entries of type Organization
		/// Search_project_organization repository/search/type/project_organization
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_organization_organization_type">Organization Type</param>
		/// <param name="search_project_organization_status">Status</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_organizationAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_organization_organization_type, 
					string search_project_organization_status, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_organization?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_organization.organization_type=" + (search_project_organization_organization_type==null? "" : System.Uri.EscapeDataString(search_project_organization_organization_type))+"&search.project_organization.status=" + (search_project_organization_status==null? "" : System.Uri.EscapeDataString(search_project_organization_status));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Program' entry type
		/// API to search for entries of type Program
		/// Search_project_program repository/search/type/project_program
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_programAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_program?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Project' entry type
		/// API to search for entries of type Project
		/// Search_project_project repository/search/type/project_project
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_projectAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_project?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Data Access Service' entry type
		/// API to search for entries of type Data Access Service
		/// Search_project_service repository/search/type/project_service
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_service_service_type">Service Type</param>
		/// <param name="search_project_service_provider">Provider</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_serviceAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_service_service_type, 
					string search_project_service_provider, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_service?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_service.service_type=" + (search_project_service_service_type==null? "" : System.Uri.EscapeDataString(search_project_service_service_type))+"&search.project_service.provider=" + (search_project_service_provider==null? "" : System.Uri.EscapeDataString(search_project_service_provider));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Site' entry type
		/// API to search for entries of type Site
		/// Search_project_site repository/search/type/project_site
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_site_short_name">Short Name</param>
		/// <param name="search_project_site_site_type">Site Type</param>
		/// <param name="search_project_site_status">Status</param>
		/// <param name="search_project_site_network">Network</param>
		/// <param name="search_project_site_country">Country</param>
		/// <param name="search_project_site_state">State/Province</param>
		/// <param name="search_project_site_county">County</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_siteAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_site_short_name, 
					string search_project_site_site_type, 
					string search_project_site_status, 
					string search_project_site_network, 
					string search_project_site_country, 
					string search_project_site_state, 
					string search_project_site_county, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_site?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_site.short_name=" + (search_project_site_short_name==null? "" : System.Uri.EscapeDataString(search_project_site_short_name))+"&search.project_site.site_type=" + (search_project_site_site_type==null? "" : System.Uri.EscapeDataString(search_project_site_site_type))+"&search.project_site.status=" + (search_project_site_status==null? "" : System.Uri.EscapeDataString(search_project_site_status))+"&search.project_site.network=" + (search_project_site_network==null? "" : System.Uri.EscapeDataString(search_project_site_network))+"&search.project_site.country=" + (search_project_site_country==null? "" : System.Uri.EscapeDataString(search_project_site_country))+"&search.project_site.state=" + (search_project_site_state==null? "" : System.Uri.EscapeDataString(search_project_site_state))+"&search.project_site.county=" + (search_project_site_county==null? "" : System.Uri.EscapeDataString(search_project_site_county));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Software Tool' entry type
		/// API to search for entries of type Software Tool
		/// Search_project_softwarepackage repository/search/type/project_softwarepackage
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_softwarepackage_software_use">Software Use</param>
		/// <param name="search_project_softwarepackage_software_type">Software Type</param>
		/// <param name="search_project_softwarepackage_domain">Science Domain</param>
		/// <param name="search_project_softwarepackage_platform">Platform</param>
		/// <param name="search_project_softwarepackage_license">License</param>
		/// <param name="search_project_softwarepackage_status">Development Status</param>
		/// <param name="search_project_softwarepackage_capabilities">Capabilities</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_softwarepackageAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_softwarepackage_software_use, 
					string search_project_softwarepackage_software_type, 
					string search_project_softwarepackage_domain, 
					string search_project_softwarepackage_platform, 
					string search_project_softwarepackage_license, 
					string search_project_softwarepackage_status, 
					string search_project_softwarepackage_capabilities, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_softwarepackage?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_softwarepackage.software_use=" + (search_project_softwarepackage_software_use==null? "" : System.Uri.EscapeDataString(search_project_softwarepackage_software_use))+"&search.project_softwarepackage.software_type=" + (search_project_softwarepackage_software_type==null? "" : System.Uri.EscapeDataString(search_project_softwarepackage_software_type))+"&search.project_softwarepackage.domain=" + (search_project_softwarepackage_domain==null? "" : System.Uri.EscapeDataString(search_project_softwarepackage_domain))+"&search.project_softwarepackage.platform=" + (search_project_softwarepackage_platform==null? "" : System.Uri.EscapeDataString(search_project_softwarepackage_platform))+"&search.project_softwarepackage.license=" + (search_project_softwarepackage_license==null? "" : System.Uri.EscapeDataString(search_project_softwarepackage_license))+"&search.project_softwarepackage.status=" + (search_project_softwarepackage_status==null? "" : System.Uri.EscapeDataString(search_project_softwarepackage_status))+"&search.project_softwarepackage.capabilities=" + (search_project_softwarepackage_capabilities==null? "" : System.Uri.EscapeDataString(search_project_softwarepackage_capabilities));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Standard Parameter Name' entry type
		/// API to search for entries of type Standard Parameter Name
		/// Search_project_standard_name repository/search/type/project_standard_name
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_standard_name_unit">Canonical Unit</param>
		/// <param name="search_project_standard_name_aliases">Aliases</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_standard_nameAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_standard_name_unit, 
					string search_project_standard_name_aliases, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_standard_name?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_standard_name.unit=" + (search_project_standard_name_unit==null? "" : System.Uri.EscapeDataString(search_project_standard_name_unit))+"&search.project_standard_name.aliases=" + (search_project_standard_name_aliases==null? "" : System.Uri.EscapeDataString(search_project_standard_name_aliases));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Survey Location' entry type
		/// API to search for entries of type Survey Location
		/// Search_project_surveylocation repository/search/type/project_surveylocation
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_surveylocationAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_surveylocation?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Vocabulary Term' entry type
		/// API to search for entries of type Vocabulary Term
		/// Search_project_term repository/search/type/project_term
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_project_term_value">Term Value</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_termAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_project_term_value, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_term?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.project_term.value=" + (search_project_term_value==null? "" : System.Uri.EscapeDataString(search_project_term_value));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Site Visit' entry type
		/// API to search for entries of type Site Visit
		/// Search_project_visit repository/search/type/project_visit
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_visitAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_visit?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Vocabulary' entry type
		/// API to search for entries of type Vocabulary
		/// Search_project_vocabulary repository/search/type/project_vocabulary
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_project_vocabularyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/project_vocabulary?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Property Sales' entry type
		/// API to search for entries of type Property Sales
		/// Search_property_sales repository/search/type/property_sales
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_property_sales_property_address">Property Address</param>
		/// <param name="search_db_property_sales_city">City</param>
		/// <param name="search_db_property_sales_zipcode">Zip Code</param>
		/// <param name="search_db_property_sales_sale_price">Sale Price</param>
		/// <param name="search_db_property_sales_sale_date">Sale Date</param>
		/// <param name="search_db_property_sales_seller">Seller</param>
		/// <param name="search_db_property_sales_buyer">Buyer</param>
		/// <param name="search_db_property_sales_type">Property Type</param>
		/// <param name="search_db_property_sales_building_description">Building Description</param>
		/// <param name="search_db_property_sales_building_design">Building Design</param>
		/// <param name="search_db_property_sales_subdivision">Subdivision</param>
		/// <param name="search_db_property_sales_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_property_salesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_property_sales_property_address, 
					string search_db_property_sales_city, 
					string search_db_property_sales_zipcode, 
					double search_db_property_sales_sale_price, 
					string search_db_property_sales_sale_date, 
					string search_db_property_sales_seller, 
					string search_db_property_sales_buyer, 
					string search_db_property_sales_type, 
					string search_db_property_sales_building_description, 
					string search_db_property_sales_building_design, 
					string search_db_property_sales_subdivision, 
					string search_db_property_sales_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/property_sales?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_property_sales.property_address=" + (search_db_property_sales_property_address==null? "" : System.Uri.EscapeDataString(search_db_property_sales_property_address))+"&search.db_property_sales.city=" + (search_db_property_sales_city==null? "" : System.Uri.EscapeDataString(search_db_property_sales_city))+"&search.db_property_sales.zipcode=" + (search_db_property_sales_zipcode==null? "" : System.Uri.EscapeDataString(search_db_property_sales_zipcode))+"&search.db_property_sales.sale_price="+search_db_property_sales_sale_price+"&search.db_property_sales.sale_date=" + (search_db_property_sales_sale_date==null? "" : System.Uri.EscapeDataString(search_db_property_sales_sale_date))+"&search.db_property_sales.seller=" + (search_db_property_sales_seller==null? "" : System.Uri.EscapeDataString(search_db_property_sales_seller))+"&search.db_property_sales.buyer=" + (search_db_property_sales_buyer==null? "" : System.Uri.EscapeDataString(search_db_property_sales_buyer))+"&search.db_property_sales.type=" + (search_db_property_sales_type==null? "" : System.Uri.EscapeDataString(search_db_property_sales_type))+"&search.db_property_sales.building_description=" + (search_db_property_sales_building_description==null? "" : System.Uri.EscapeDataString(search_db_property_sales_building_description))+"&search.db_property_sales.building_design=" + (search_db_property_sales_building_design==null? "" : System.Uri.EscapeDataString(search_db_property_sales_building_design))+"&search.db_property_sales.subdivision=" + (search_db_property_sales_subdivision==null? "" : System.Uri.EscapeDataString(search_db_property_sales_subdivision))+"&search.db_property_sales.location=" + (search_db_property_sales_location==null? "" : System.Uri.EscapeDataString(search_db_property_sales_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Property Database' entry type
		/// API to search for entries of type Property Database
		/// Search_propertydb repository/search/type/propertydb
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_propertydb_property_id">Property ID</param>
		/// <param name="search_db_propertydb_owner">Owner</param>
		/// <param name="search_db_propertydb_address">Address</param>
		/// <param name="search_db_propertydb_city">City</param>
		/// <param name="search_db_propertydb_state">State</param>
		/// <param name="search_db_propertydb_value">Property Value</param>
		/// <param name="search_db_propertydb_building_type">Building Type</param>
		/// <param name="search_db_propertydb_house_size">Building Sq Ft</param>
		/// <param name="search_db_propertydb_lot_sqft">Lot Size Sq Ft</param>
		/// <param name="search_db_propertydb_lot_acres">Lot Size Acres</param>
		/// <param name="search_db_propertydb_price_sqft">$-sqft</param>
		/// <param name="search_db_propertydb_location">Location</param>
		/// <returns>No response was specified</returns>
		public async Task Search_propertydbAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_propertydb_property_id, 
					string search_db_propertydb_owner, 
					string search_db_propertydb_address, 
					string search_db_propertydb_city, 
					string search_db_propertydb_state, 
					int search_db_propertydb_value, 
					string search_db_propertydb_building_type, 
					int search_db_propertydb_house_size, 
					int search_db_propertydb_lot_sqft, 
					double search_db_propertydb_lot_acres, 
					double search_db_propertydb_price_sqft, 
					string search_db_propertydb_location, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/propertydb?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_propertydb.property_id=" + (search_db_propertydb_property_id==null? "" : System.Uri.EscapeDataString(search_db_propertydb_property_id))+"&search.db_propertydb.owner=" + (search_db_propertydb_owner==null? "" : System.Uri.EscapeDataString(search_db_propertydb_owner))+"&search.db_propertydb.address=" + (search_db_propertydb_address==null? "" : System.Uri.EscapeDataString(search_db_propertydb_address))+"&search.db_propertydb.city=" + (search_db_propertydb_city==null? "" : System.Uri.EscapeDataString(search_db_propertydb_city))+"&search.db_propertydb.state=" + (search_db_propertydb_state==null? "" : System.Uri.EscapeDataString(search_db_propertydb_state))+"&search.db_propertydb.value="+search_db_propertydb_value+"&search.db_propertydb.building_type=" + (search_db_propertydb_building_type==null? "" : System.Uri.EscapeDataString(search_db_propertydb_building_type))+"&search.db_propertydb.house_size="+search_db_propertydb_house_size+"&search.db_propertydb.lot_sqft="+search_db_propertydb_lot_sqft+"&search.db_propertydb.lot_acres="+search_db_propertydb_lot_acres+"&search.db_propertydb.price_sqft="+search_db_propertydb_price_sqft+"&search.db_propertydb.location=" + (search_db_propertydb_location==null? "" : System.Uri.EscapeDataString(search_db_propertydb_location));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'IPython Notebook file' entry type
		/// API to search for entries of type IPython Notebook file
		/// Search_python_notebook repository/search/type/python_notebook
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_python_notebookAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/python_notebook?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Slack Team' entry type
		/// API to search for entries of type Slack Team
		/// Search_slack_team repository/search/type/slack_team
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_slack_teamAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/slack_team?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Status Board' entry type
		/// API to search for entries of type Status Board
		/// Search_statusboard repository/search/type/statusboard
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_statusboard_what">What</param>
		/// <param name="search_db_statusboard_status">Status</param>
		/// <returns>No response was specified</returns>
		public async Task Search_statusboardAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_statusboard_what, 
					string search_db_statusboard_status, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/statusboard?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_statusboard.what=" + (search_db_statusboard_what==null? "" : System.Uri.EscapeDataString(search_db_statusboard_what))+"&search.db_statusboard.status=" + (search_db_statusboard_status==null? "" : System.Uri.EscapeDataString(search_db_statusboard_status));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Sunrise/Sunset Display' entry type
		/// API to search for entries of type Sunrise/Sunset Display
		/// Search_sunrisesunset repository/search/type/sunrisesunset
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_sunrisesunsetAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/sunrisesunset?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Tasks' entry type
		/// API to search for entries of type Tasks
		/// Search_tasks repository/search/type/tasks
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_tasks_title">Title</param>
		/// <param name="search_db_tasks_priority">Priority</param>
		/// <param name="search_db_tasks_status">Status</param>
		/// <param name="search_db_tasks_complete">% Complete</param>
		/// <param name="search_db_tasks_assignedto">Assigned To</param>
		/// <param name="search_db_tasks_startdate">Start Date</param>
		/// <param name="search_db_tasks_enddate">End Date</param>
		/// <returns>No response was specified</returns>
		public async Task Search_tasksAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_tasks_title, 
					string search_db_tasks_priority, 
					string search_db_tasks_status, 
					double search_db_tasks_complete, 
					string search_db_tasks_assignedto, 
					string search_db_tasks_startdate, 
					string search_db_tasks_enddate, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/tasks?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_tasks.title=" + (search_db_tasks_title==null? "" : System.Uri.EscapeDataString(search_db_tasks_title))+"&search.db_tasks.priority=" + (search_db_tasks_priority==null? "" : System.Uri.EscapeDataString(search_db_tasks_priority))+"&search.db_tasks.status=" + (search_db_tasks_status==null? "" : System.Uri.EscapeDataString(search_db_tasks_status))+"&search.db_tasks.complete="+search_db_tasks_complete+"&search.db_tasks.assignedto=" + (search_db_tasks_assignedto==null? "" : System.Uri.EscapeDataString(search_db_tasks_assignedto))+"&search.db_tasks.startdate=" + (search_db_tasks_startdate==null? "" : System.Uri.EscapeDataString(search_db_tasks_startdate))+"&search.db_tasks.enddate=" + (search_db_tasks_enddate==null? "" : System.Uri.EscapeDataString(search_db_tasks_enddate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Tmdb Movies' entry type
		/// API to search for entries of type Tmdb Movies
		/// Search_tmdbmovies repository/search/type/tmdbmovies
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_tmdbmovies_original_title">Original Title</param>
		/// <param name="search_db_tmdbmovies_overview">Overview</param>
		/// <param name="search_db_tmdbmovies_budget">Budget</param>
		/// <param name="search_db_tmdbmovies_genres">Genres</param>
		/// <param name="search_db_tmdbmovies_homepage">Homepage</param>
		/// <param name="search_db_tmdbmovies_movie_id">Id</param>
		/// <param name="search_db_tmdbmovies_keywords">Keywords</param>
		/// <param name="search_db_tmdbmovies_original_language">Original Language</param>
		/// <param name="search_db_tmdbmovies_popularity">Popularity</param>
		/// <param name="search_db_tmdbmovies_production_companies">Production Companies</param>
		/// <param name="search_db_tmdbmovies_production_countries">Production Countries</param>
		/// <param name="search_db_tmdbmovies_release_date">Release Date</param>
		/// <param name="search_db_tmdbmovies_revenue">Revenue</param>
		/// <param name="search_db_tmdbmovies_runtime">Runtime</param>
		/// <param name="search_db_tmdbmovies_spoken_languages">Spoken Languages</param>
		/// <param name="search_db_tmdbmovies_status">Status</param>
		/// <param name="search_db_tmdbmovies_tagline">Tagline</param>
		/// <param name="search_db_tmdbmovies_title">Title</param>
		/// <param name="search_db_tmdbmovies_vote_average">Vote Average</param>
		/// <param name="search_db_tmdbmovies_vote_count">Vote Count</param>
		/// <returns>No response was specified</returns>
		public async Task Search_tmdbmoviesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_tmdbmovies_original_title, 
					string search_db_tmdbmovies_overview, 
					double search_db_tmdbmovies_budget, 
					string search_db_tmdbmovies_genres, 
					string search_db_tmdbmovies_homepage, 
					string search_db_tmdbmovies_movie_id, 
					string search_db_tmdbmovies_keywords, 
					string search_db_tmdbmovies_original_language, 
					double search_db_tmdbmovies_popularity, 
					string search_db_tmdbmovies_production_companies, 
					string search_db_tmdbmovies_production_countries, 
					string search_db_tmdbmovies_release_date, 
					double search_db_tmdbmovies_revenue, 
					double search_db_tmdbmovies_runtime, 
					string search_db_tmdbmovies_spoken_languages, 
					string search_db_tmdbmovies_status, 
					string search_db_tmdbmovies_tagline, 
					string search_db_tmdbmovies_title, 
					double search_db_tmdbmovies_vote_average, 
					double search_db_tmdbmovies_vote_count, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/tmdbmovies?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_tmdbmovies.original_title=" + (search_db_tmdbmovies_original_title==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_original_title))+"&search.db_tmdbmovies.overview=" + (search_db_tmdbmovies_overview==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_overview))+"&search.db_tmdbmovies.budget="+search_db_tmdbmovies_budget+"&search.db_tmdbmovies.genres=" + (search_db_tmdbmovies_genres==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_genres))+"&search.db_tmdbmovies.homepage=" + (search_db_tmdbmovies_homepage==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_homepage))+"&search.db_tmdbmovies.movie_id=" + (search_db_tmdbmovies_movie_id==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_movie_id))+"&search.db_tmdbmovies.keywords=" + (search_db_tmdbmovies_keywords==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_keywords))+"&search.db_tmdbmovies.original_language=" + (search_db_tmdbmovies_original_language==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_original_language))+"&search.db_tmdbmovies.popularity="+search_db_tmdbmovies_popularity+"&search.db_tmdbmovies.production_companies=" + (search_db_tmdbmovies_production_companies==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_production_companies))+"&search.db_tmdbmovies.production_countries=" + (search_db_tmdbmovies_production_countries==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_production_countries))+"&search.db_tmdbmovies.release_date=" + (search_db_tmdbmovies_release_date==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_release_date))+"&search.db_tmdbmovies.revenue="+search_db_tmdbmovies_revenue+"&search.db_tmdbmovies.runtime="+search_db_tmdbmovies_runtime+"&search.db_tmdbmovies.spoken_languages=" + (search_db_tmdbmovies_spoken_languages==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_spoken_languages))+"&search.db_tmdbmovies.status=" + (search_db_tmdbmovies_status==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_status))+"&search.db_tmdbmovies.tagline=" + (search_db_tmdbmovies_tagline==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_tagline))+"&search.db_tmdbmovies.title=" + (search_db_tmdbmovies_title==null? "" : System.Uri.EscapeDataString(search_db_tmdbmovies_title))+"&search.db_tmdbmovies.vote_average="+search_db_tmdbmovies_vote_average+"&search.db_tmdbmovies.vote_count="+search_db_tmdbmovies_vote_count;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Todo' entry type
		/// API to search for entries of type Todo
		/// Search_todo repository/search/type/todo
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_todo_checked">Done</param>
		/// <param name="search_db_todo_title">What</param>
		/// <param name="search_db_todo_category">Category</param>
		/// <returns>No response was specified</returns>
		public async Task Search_todoAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					bool search_db_todo_checked, 
					string search_db_todo_title, 
					string search_db_todo_category, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/todo?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_todo.checked="+search_db_todo_checked+"&search.db_todo.title=" + (search_db_todo_title==null? "" : System.Uri.EscapeDataString(search_db_todo_title))+"&search.db_todo.category=" + (search_db_todo_category==null? "" : System.Uri.EscapeDataString(search_db_todo_category));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Event' entry type
		/// API to search for entries of type Event
		/// Search_trip_event repository/search/type/trip_event
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_trip_eventAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/trip_event?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Flight Leg' entry type
		/// API to search for entries of type Flight Leg
		/// Search_trip_flight repository/search/type/trip_flight
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_trip_flightAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/trip_flight?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Lodging' entry type
		/// API to search for entries of type Lodging
		/// Search_trip_hotel repository/search/type/trip_hotel
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_trip_hotelAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/trip_hotel?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Trip Report' entry type
		/// API to search for entries of type Trip Report
		/// Search_trip_report repository/search/type/trip_report
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_trip_reportAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/trip_report?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Trip' entry type
		/// API to search for entries of type Trip
		/// Search_trip_trip repository/search/type/trip_trip
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_trip_tripAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/trip_trip?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'AWC Weather Observations' entry type
		/// API to search for entries of type AWC Weather Observations
		/// Search_type_awc_metar repository/search/type/type_awc_metar
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_awc_metar_site_id">Site ID</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_awc_metarAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_awc_metar_site_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_awc_metar?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_awc_metar.site_id=" + (search_type_awc_metar_site_id==null? "" : System.Uri.EscapeDataString(search_type_awc_metar_site_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Stock Ticker Data' entry type
		/// API to search for entries of type Stock Ticker Data
		/// Search_type_biz_stockseries repository/search/type/type_biz_stockseries
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_biz_stockseriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_biz_stockseries?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'BLS Series' entry type
		/// API to search for entries of type BLS Series
		/// Search_type_bls_series repository/search/type/type_bls_series
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_bls_series_survey_name">Survey Name</param>
		/// <param name="search_type_bls_series_measure_data_type">Measure Data Type</param>
		/// <param name="search_type_bls_series_industry">Industry</param>
		/// <param name="search_type_bls_series_sector">Sector</param>
		/// <param name="search_type_bls_series_area">Area</param>
		/// <param name="search_type_bls_series_item">Item</param>
		/// <param name="search_type_bls_series_seasonality">Seasonality</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_bls_seriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_bls_series_survey_name, 
					string search_type_bls_series_measure_data_type, 
					string search_type_bls_series_industry, 
					string search_type_bls_series_sector, 
					string search_type_bls_series_area, 
					string search_type_bls_series_item, 
					string search_type_bls_series_seasonality, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_bls_series?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_bls_series.survey_name=" + (search_type_bls_series_survey_name==null? "" : System.Uri.EscapeDataString(search_type_bls_series_survey_name))+"&search.type_bls_series.measure_data_type=" + (search_type_bls_series_measure_data_type==null? "" : System.Uri.EscapeDataString(search_type_bls_series_measure_data_type))+"&search.type_bls_series.industry=" + (search_type_bls_series_industry==null? "" : System.Uri.EscapeDataString(search_type_bls_series_industry))+"&search.type_bls_series.sector=" + (search_type_bls_series_sector==null? "" : System.Uri.EscapeDataString(search_type_bls_series_sector))+"&search.type_bls_series.area=" + (search_type_bls_series_area==null? "" : System.Uri.EscapeDataString(search_type_bls_series_area))+"&search.type_bls_series.item=" + (search_type_bls_series_item==null? "" : System.Uri.EscapeDataString(search_type_bls_series_item))+"&search.type_bls_series.seasonality=" + (search_type_bls_series_seasonality==null? "" : System.Uri.EscapeDataString(search_type_bls_series_seasonality));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'BLS Survey' entry type
		/// API to search for entries of type BLS Survey
		/// Search_type_bls_survey repository/search/type/type_bls_survey
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_bls_surveyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_bls_survey?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'US Census ACS Data' entry type
		/// API to search for entries of type US Census ACS Data
		/// Search_type_census_acs repository/search/type/type_census_acs
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_census_acs_fields">Indicators</param>
		/// <param name="search_type_census_acs_for_type">For</param>
		/// <param name="search_type_census_acs_in_type1">In</param>
		/// <param name="search_type_census_acs_in_type2">In #2</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_census_acsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_census_acs_fields, 
					string search_type_census_acs_for_type, 
					string search_type_census_acs_in_type1, 
					string search_type_census_acs_in_type2, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_census_acs?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_census_acs.fields=" + (search_type_census_acs_fields==null? "" : System.Uri.EscapeDataString(search_type_census_acs_fields))+"&search.type_census_acs.for_type=" + (search_type_census_acs_for_type==null? "" : System.Uri.EscapeDataString(search_type_census_acs_for_type))+"&search.type_census_acs.in_type1=" + (search_type_census_acs_in_type1==null? "" : System.Uri.EscapeDataString(search_type_census_acs_in_type1))+"&search.type_census_acs.in_type2=" + (search_type_census_acs_in_type2==null? "" : System.Uri.EscapeDataString(search_type_census_acs_in_type2));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Daymet Daily Weather' entry type
		/// API to search for entries of type Daymet Daily Weather
		/// Search_type_daymet repository/search/type/type_daymet
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_daymetAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_daymet?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Database Table' entry type
		/// API to search for entries of type Database Table
		/// Search_type_db_table repository/search/type/type_db_table
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_db_tableAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_db_table?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'CSV File' entry type
		/// API to search for entries of type CSV File
		/// Search_type_document_csv repository/search/type/type_document_csv
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_document_csvAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_document_csv?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Word File' entry type
		/// API to search for entries of type Word File
		/// Search_type_document_doc repository/search/type/type_document_doc
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_document_docAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_document_doc?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'HTML File' entry type
		/// API to search for entries of type HTML File
		/// Search_type_document_html repository/search/type/type_document_html
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_document_htmlAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_document_html?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'PDF File' entry type
		/// API to search for entries of type PDF File
		/// Search_type_document_pdf repository/search/type/type_document_pdf
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_document_pdfAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_document_pdf?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Powerpoint File' entry type
		/// API to search for entries of type Powerpoint File
		/// Search_type_document_ppt repository/search/type/type_document_ppt
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_document_pptAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_document_ppt?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Excel File' entry type
		/// API to search for entries of type Excel File
		/// Search_type_document_xls repository/search/type/type_document_xls
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_document_xlsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_document_xls?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Drilsdown Case Study' entry type
		/// API to search for entries of type Drilsdown Case Study
		/// Search_type_drilsdown_casestudy repository/search/type/type_drilsdown_casestudy
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_drilsdown_casestudyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_drilsdown_casestudy?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SEC EDGAR Filing' entry type
		/// API to search for entries of type SEC EDGAR Filing
		/// Search_type_edgar_filing repository/search/type/type_edgar_filing
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_edgar_filing_form_type">Form Type</param>
		/// <param name="search_type_edgar_filing_company_name">Company Name</param>
		/// <param name="search_type_edgar_filing_cik_number">CIK Number</param>
		/// <param name="search_type_edgar_filing_standard_industrial_classification">Standard Industrial Classification</param>
		/// <param name="search_type_edgar_filing_irs_number">IRS Number</param>
		/// <param name="search_type_edgar_filing_state">State of Incorporation</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_edgar_filingAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_edgar_filing_form_type, 
					string search_type_edgar_filing_company_name, 
					string search_type_edgar_filing_cik_number, 
					string search_type_edgar_filing_standard_industrial_classification, 
					string search_type_edgar_filing_irs_number, 
					string search_type_edgar_filing_state, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_edgar_filing?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_edgar_filing.form_type=" + (search_type_edgar_filing_form_type==null? "" : System.Uri.EscapeDataString(search_type_edgar_filing_form_type))+"&search.type_edgar_filing.company_name=" + (search_type_edgar_filing_company_name==null? "" : System.Uri.EscapeDataString(search_type_edgar_filing_company_name))+"&search.type_edgar_filing.cik_number=" + (search_type_edgar_filing_cik_number==null? "" : System.Uri.EscapeDataString(search_type_edgar_filing_cik_number))+"&search.type_edgar_filing.standard_industrial_classification=" + (search_type_edgar_filing_standard_industrial_classification==null? "" : System.Uri.EscapeDataString(search_type_edgar_filing_standard_industrial_classification))+"&search.type_edgar_filing.irs_number=" + (search_type_edgar_filing_irs_number==null? "" : System.Uri.EscapeDataString(search_type_edgar_filing_irs_number))+"&search.type_edgar_filing.state=" + (search_type_edgar_filing_state==null? "" : System.Uri.EscapeDataString(search_type_edgar_filing_state));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'EIA Category' entry type
		/// API to search for entries of type EIA Category
		/// Search_type_eia_category repository/search/type/type_eia_category
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_eia_categoryAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_eia_category?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'EIA Series' entry type
		/// API to search for entries of type EIA Series
		/// Search_type_eia_series repository/search/type/type_eia_series
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_eia_seriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_eia_series?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Feature Server' entry type
		/// API to search for entries of type ESRI Feature Server
		/// Search_type_esri_featureserver repository/search/type/type_esri_featureserver
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_featureserverAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_featureserver?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Geometry Server' entry type
		/// API to search for entries of type ESRI Geometry Server
		/// Search_type_esri_geometryserver repository/search/type/type_esri_geometryserver
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_geometryserverAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_geometryserver?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI GP Server' entry type
		/// API to search for entries of type ESRI GP Server
		/// Search_type_esri_gpserver repository/search/type/type_esri_gpserver
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_gpserverAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_gpserver?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Image Server' entry type
		/// API to search for entries of type ESRI Image Server
		/// Search_type_esri_imageserver repository/search/type/type_esri_imageserver
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_imageserverAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_imageserver?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Layer' entry type
		/// API to search for entries of type ESRI Layer
		/// Search_type_esri_layer repository/search/type/type_esri_layer
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_esri_layer_layer_type">Layer Type</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_layerAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_esri_layer_layer_type, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_layer?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_esri_layer.layer_type=" + (search_type_esri_layer_layer_type==null? "" : System.Uri.EscapeDataString(search_type_esri_layer_layer_type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Map Server' entry type
		/// API to search for entries of type ESRI Map Server
		/// Search_type_esri_mapserver repository/search/type/type_esri_mapserver
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_mapserverAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_mapserver?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Services Folder' entry type
		/// API to search for entries of type ESRI Services Folder
		/// Search_type_esri_restfolder repository/search/type/type_esri_restfolder
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_restfolderAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_restfolder?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Web Server' entry type
		/// API to search for entries of type ESRI Web Server
		/// Search_type_esri_restserver repository/search/type/type_esri_restserver
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_restserverAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_restserver?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ESRI Rest Service' entry type
		/// API to search for entries of type ESRI Rest Service
		/// Search_type_esri_restservice repository/search/type/type_esri_restservice
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_esri_restserviceAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_esri_restservice?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NOAA Extremes Data' entry type
		/// API to search for entries of type NOAA Extremes Data
		/// Search_type_extremes repository/search/type/type_extremes
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_extremes_region">US Climate Region</param>
		/// <param name="search_type_extremes_variable">Variable</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_extremesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_extremes_region, 
					string search_type_extremes_variable, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_extremes?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_extremes.region=" + (search_type_extremes_region==null? "" : System.Uri.EscapeDataString(search_type_extremes_region))+"&search.type_extremes.variable=" + (search_type_extremes_variable==null? "" : System.Uri.EscapeDataString(search_type_extremes_variable));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FRED Category' entry type
		/// API to search for entries of type FRED Category
		/// Search_type_fred_category repository/search/type/type_fred_category
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_fred_categoryAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_fred_category?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FRED Series' entry type
		/// API to search for entries of type FRED Series
		/// Search_type_fred_series repository/search/type/type_fred_series
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_fred_seriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_fred_series?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Transit Agency' entry type
		/// API to search for entries of type Transit Agency
		/// Search_type_gtfs_agency repository/search/type/type_gtfs_agency
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_gtfs_agencyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_gtfs_agency?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Transit Route' entry type
		/// API to search for entries of type Transit Route
		/// Search_type_gtfs_route repository/search/type/type_gtfs_route
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_gtfs_route_route_id">Route ID</param>
		/// <param name="search_type_gtfs_route_stop_names">Stop Names</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_gtfs_routeAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_gtfs_route_route_id, 
					string search_type_gtfs_route_stop_names, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_gtfs_route?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_gtfs_route.route_id=" + (search_type_gtfs_route_route_id==null? "" : System.Uri.EscapeDataString(search_type_gtfs_route_route_id))+"&search.type_gtfs_route.stop_names=" + (search_type_gtfs_route_stop_names==null? "" : System.Uri.EscapeDataString(search_type_gtfs_route_stop_names));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Transit Route Collection' entry type
		/// API to search for entries of type Transit Route Collection
		/// Search_type_gtfs_routes repository/search/type/type_gtfs_routes
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_gtfs_routesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_gtfs_routes?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Transit Stop' entry type
		/// API to search for entries of type Transit Stop
		/// Search_type_gtfs_stop repository/search/type/type_gtfs_stop
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_gtfs_stop_stop_id">Stop ID</param>
		/// <param name="search_type_gtfs_stop_stop_code">Stop Code</param>
		/// <param name="search_type_gtfs_stop_zone_id">Zone ID</param>
		/// <param name="search_type_gtfs_stop_location_type">Location Type</param>
		/// <param name="search_type_gtfs_stop_wheelchair_boarding">Wheelchair Boarding</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_gtfs_stopAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_gtfs_stop_stop_id, 
					string search_type_gtfs_stop_stop_code, 
					string search_type_gtfs_stop_zone_id, 
					string search_type_gtfs_stop_location_type, 
					string search_type_gtfs_stop_wheelchair_boarding, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_gtfs_stop?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_gtfs_stop.stop_id=" + (search_type_gtfs_stop_stop_id==null? "" : System.Uri.EscapeDataString(search_type_gtfs_stop_stop_id))+"&search.type_gtfs_stop.stop_code=" + (search_type_gtfs_stop_stop_code==null? "" : System.Uri.EscapeDataString(search_type_gtfs_stop_stop_code))+"&search.type_gtfs_stop.zone_id=" + (search_type_gtfs_stop_zone_id==null? "" : System.Uri.EscapeDataString(search_type_gtfs_stop_zone_id))+"&search.type_gtfs_stop.location_type=" + (search_type_gtfs_stop_location_type==null? "" : System.Uri.EscapeDataString(search_type_gtfs_stop_location_type))+"&search.type_gtfs_stop.wheelchair_boarding=" + (search_type_gtfs_stop_wheelchair_boarding==null? "" : System.Uri.EscapeDataString(search_type_gtfs_stop_wheelchair_boarding));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Transit Stop Collection' entry type
		/// API to search for entries of type Transit Stop Collection
		/// Search_type_gtfs_stops repository/search/type/type_gtfs_stops
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_gtfs_stopsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_gtfs_stops?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Transit Trip' entry type
		/// API to search for entries of type Transit Trip
		/// Search_type_gtfs_trip repository/search/type/type_gtfs_trip
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_gtfs_trip_trip_id">Trip ID</param>
		/// <param name="search_type_gtfs_trip_stop_ids">Stop IDS</param>
		/// <param name="search_type_gtfs_trip_wheelchair_accessible">Wheelchair Accessible</param>
		/// <param name="search_type_gtfs_trip_bikes_allowed">Bikes Allowed</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_gtfs_tripAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_gtfs_trip_trip_id, 
					string search_type_gtfs_trip_stop_ids, 
					string search_type_gtfs_trip_wheelchair_accessible, 
					string search_type_gtfs_trip_bikes_allowed, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_gtfs_trip?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_gtfs_trip.trip_id=" + (search_type_gtfs_trip_trip_id==null? "" : System.Uri.EscapeDataString(search_type_gtfs_trip_trip_id))+"&search.type_gtfs_trip.stop_ids=" + (search_type_gtfs_trip_stop_ids==null? "" : System.Uri.EscapeDataString(search_type_gtfs_trip_stop_ids))+"&search.type_gtfs_trip.wheelchair_accessible=" + (search_type_gtfs_trip_wheelchair_accessible==null? "" : System.Uri.EscapeDataString(search_type_gtfs_trip_wheelchair_accessible))+"&search.type_gtfs_trip.bikes_allowed=" + (search_type_gtfs_trip_bikes_allowed==null? "" : System.Uri.EscapeDataString(search_type_gtfs_trip_bikes_allowed));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Hazard Data' entry type
		/// API to search for entries of type Hazard Data
		/// Search_type_hazarddata repository/search/type/type_hazarddata
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_hazarddata_source">Source Agency</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_hazarddataAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_hazarddata_source, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_hazarddata?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_hazarddata.source=" + (search_type_hazarddata_source==null? "" : System.Uri.EscapeDataString(search_type_hazarddata_source));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Colorado DNR Stream Gage' entry type
		/// API to search for entries of type Colorado DNR Stream Gage
		/// Search_type_hydro_colorado repository/search/type/type_hydro_colorado
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_hydro_colorado_site_id">Site ID</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_hydro_coloradoAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_hydro_colorado_site_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_hydro_colorado?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_hydro_colorado.site_id=" + (search_type_hydro_colorado_site_id==null? "" : System.Uri.EscapeDataString(search_type_hydro_colorado_site_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'IDV Bundle' entry type
		/// API to search for entries of type IDV Bundle
		/// Search_type_idv_bundle repository/search/type/type_idv_bundle
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_idv_bundleAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_idv_bundle?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Image' entry type
		/// API to search for entries of type Image
		/// Search_type_image repository/search/type/type_image
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_imageAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_image?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Airport Image' entry type
		/// API to search for entries of type Airport Image
		/// Search_type_image_airport repository/search/type/type_image_airport
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_image_airportAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_image_airport?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Webcam' entry type
		/// API to search for entries of type Webcam
		/// Search_type_image_webcam repository/search/type/type_image_webcam
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_image_webcamAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_image_webcam?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'MB Bathymetry' entry type
		/// API to search for entries of type MB Bathymetry
		/// Search_type_mb repository/search/type/type_mb
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_mbAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_mb?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Bathymetry Collection' entry type
		/// API to search for entries of type Bathymetry Collection
		/// Search_type_mb_collection repository/search/type/type_mb_collection
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_mb_collectionAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_mb_collection?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Basic MB point file' entry type
		/// API to search for entries of type Basic MB point file
		/// Search_type_mb_point_basic repository/search/type/type_mb_point_basic
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_mb_point_basicAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_mb_point_basic?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Metadata Dictionary' entry type
		/// API to search for entries of type Metadata Dictionary
		/// Search_type_metameta_dictionary repository/search/type/type_metameta_dictionary
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_metameta_dictionary_field_index">Index</param>
		/// <param name="search_type_metameta_dictionary_dictionary_type">Type</param>
		/// <param name="search_type_metameta_dictionary_short_name">Short Name</param>
		/// <param name="search_type_metameta_dictionary_super_type">Super Type</param>
		/// <param name="search_type_metameta_dictionary_isgroup">Is Group</param>
		/// <param name="search_type_metameta_dictionary_handler_class">Handler Class</param>
		/// <param name="search_type_metameta_dictionary_properties">Properties</param>
		/// <param name="search_type_metameta_dictionary_wiki_text">Wiki Text</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_metameta_dictionaryAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					int search_type_metameta_dictionary_field_index, 
					string search_type_metameta_dictionary_dictionary_type, 
					string search_type_metameta_dictionary_short_name, 
					string search_type_metameta_dictionary_super_type, 
					bool search_type_metameta_dictionary_isgroup, 
					string search_type_metameta_dictionary_handler_class, 
					string search_type_metameta_dictionary_properties, 
					string search_type_metameta_dictionary_wiki_text, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_metameta_dictionary?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_metameta_dictionary.field_index="+search_type_metameta_dictionary_field_index+"&search.type_metameta_dictionary.dictionary_type=" + (search_type_metameta_dictionary_dictionary_type==null? "" : System.Uri.EscapeDataString(search_type_metameta_dictionary_dictionary_type))+"&search.type_metameta_dictionary.short_name=" + (search_type_metameta_dictionary_short_name==null? "" : System.Uri.EscapeDataString(search_type_metameta_dictionary_short_name))+"&search.type_metameta_dictionary.super_type=" + (search_type_metameta_dictionary_super_type==null? "" : System.Uri.EscapeDataString(search_type_metameta_dictionary_super_type))+"&search.type_metameta_dictionary.isgroup="+search_type_metameta_dictionary_isgroup+"&search.type_metameta_dictionary.handler_class=" + (search_type_metameta_dictionary_handler_class==null? "" : System.Uri.EscapeDataString(search_type_metameta_dictionary_handler_class))+"&search.type_metameta_dictionary.properties=" + (search_type_metameta_dictionary_properties==null? "" : System.Uri.EscapeDataString(search_type_metameta_dictionary_properties))+"&search.type_metameta_dictionary.wiki_text=" + (search_type_metameta_dictionary_wiki_text==null? "" : System.Uri.EscapeDataString(search_type_metameta_dictionary_wiki_text));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Metadata Field' entry type
		/// API to search for entries of type Metadata Field
		/// Search_type_metameta_field repository/search/type/type_metameta_field
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_metameta_field_field_index">Index</param>
		/// <param name="search_type_metameta_field_field_id">Field ID</param>
		/// <param name="search_type_metameta_field_datatype">Data Type</param>
		/// <param name="search_type_metameta_field_enumeration_values">Enumeration Values</param>
		/// <param name="search_type_metameta_field_properties">Properties</param>
		/// <param name="search_type_metameta_field_database_column_size">Database Column Size</param>
		/// <param name="search_type_metameta_field_missing">Missing Value</param>
		/// <param name="search_type_metameta_field_unit">Unit</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_metameta_fieldAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					int search_type_metameta_field_field_index, 
					string search_type_metameta_field_field_id, 
					string search_type_metameta_field_datatype, 
					string search_type_metameta_field_enumeration_values, 
					string search_type_metameta_field_properties, 
					int search_type_metameta_field_database_column_size, 
					string search_type_metameta_field_missing, 
					string search_type_metameta_field_unit, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_metameta_field?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_metameta_field.field_index="+search_type_metameta_field_field_index+"&search.type_metameta_field.field_id=" + (search_type_metameta_field_field_id==null? "" : System.Uri.EscapeDataString(search_type_metameta_field_field_id))+"&search.type_metameta_field.datatype=" + (search_type_metameta_field_datatype==null? "" : System.Uri.EscapeDataString(search_type_metameta_field_datatype))+"&search.type_metameta_field.enumeration_values=" + (search_type_metameta_field_enumeration_values==null? "" : System.Uri.EscapeDataString(search_type_metameta_field_enumeration_values))+"&search.type_metameta_field.properties=" + (search_type_metameta_field_properties==null? "" : System.Uri.EscapeDataString(search_type_metameta_field_properties))+"&search.type_metameta_field.database_column_size="+search_type_metameta_field_database_column_size+"&search.type_metameta_field.missing=" + (search_type_metameta_field_missing==null? "" : System.Uri.EscapeDataString(search_type_metameta_field_missing))+"&search.type_metameta_field.unit=" + (search_type_metameta_field_unit==null? "" : System.Uri.EscapeDataString(search_type_metameta_field_unit));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NASA AMES File' entry type
		/// API to search for entries of type NASA AMES File
		/// Search_type_nasaames repository/search/type/type_nasaames
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_nasaamesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_nasaames?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NetCDF Point Subset' entry type
		/// API to search for entries of type NetCDF Point Subset
		/// Search_type_ncss repository/search/type/type_ncss
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_ncssAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_ncss?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NITF File' entry type
		/// API to search for entries of type NITF File
		/// Search_type_nitf repository/search/type/type_nitf
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_nitfAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_nitf?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Ameriflux Level 2 CSV File' entry type
		/// API to search for entries of type Ameriflux Level 2 CSV File
		/// Search_type_point_ameriflux_level2 repository/search/type/type_point_ameriflux_level2
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_ameriflux_level2_site_id">Site ID</param>
		/// <param name="search_type_point_ameriflux_level2_contact">Contact</param>
		/// <param name="search_type_point_ameriflux_level2_ecosystem_type">Ecosystem Type</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ameriflux_level2Async(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_ameriflux_level2_site_id, 
					string search_type_point_ameriflux_level2_contact, 
					string search_type_point_ameriflux_level2_ecosystem_type, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ameriflux_level2?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_ameriflux_level2.site_id=" + (search_type_point_ameriflux_level2_site_id==null? "" : System.Uri.EscapeDataString(search_type_point_ameriflux_level2_site_id))+"&search.type_point_ameriflux_level2.contact=" + (search_type_point_ameriflux_level2_contact==null? "" : System.Uri.EscapeDataString(search_type_point_ameriflux_level2_contact))+"&search.type_point_ameriflux_level2.ecosystem_type=" + (search_type_point_ameriflux_level2_ecosystem_type==null? "" : System.Uri.EscapeDataString(search_type_point_ameriflux_level2_ecosystem_type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'AMRC Final QC Data' entry type
		/// API to search for entries of type AMRC Final QC Data
		/// Search_type_point_amrc_final repository/search/type/type_point_amrc_final
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_amrc_final_site_id">Site ID</param>
		/// <param name="search_type_point_amrc_final_site_name">Site Name</param>
		/// <param name="search_type_point_amrc_final_argos_id">Argos ID</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_amrc_finalAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_amrc_final_site_id, 
					string search_type_point_amrc_final_site_name, 
					string search_type_point_amrc_final_argos_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_amrc_final?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_amrc_final.site_id=" + (search_type_point_amrc_final_site_id==null? "" : System.Uri.EscapeDataString(search_type_point_amrc_final_site_id))+"&search.type_point_amrc_final.site_name=" + (search_type_point_amrc_final_site_name==null? "" : System.Uri.EscapeDataString(search_type_point_amrc_final_site_name))+"&search.type_point_amrc_final.argos_id=" + (search_type_point_amrc_final_argos_id==null? "" : System.Uri.EscapeDataString(search_type_point_amrc_final_argos_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'AMRC Freewave  Data' entry type
		/// API to search for entries of type AMRC Freewave  Data
		/// Search_type_point_amrc_freewave repository/search/type/type_point_amrc_freewave
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_amrc_freewave_station_name">Station Name</param>
		/// <param name="search_type_point_amrc_freewave_format">File Format</param>
		/// <param name="search_type_point_amrc_freewave_datalogger_model">Data Logger Model</param>
		/// <param name="search_type_point_amrc_freewave_datalogger_serial">Data Logger Serial</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_amrc_freewaveAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_amrc_freewave_station_name, 
					string search_type_point_amrc_freewave_format, 
					string search_type_point_amrc_freewave_datalogger_model, 
					string search_type_point_amrc_freewave_datalogger_serial, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_amrc_freewave?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_amrc_freewave.station_name=" + (search_type_point_amrc_freewave_station_name==null? "" : System.Uri.EscapeDataString(search_type_point_amrc_freewave_station_name))+"&search.type_point_amrc_freewave.format=" + (search_type_point_amrc_freewave_format==null? "" : System.Uri.EscapeDataString(search_type_point_amrc_freewave_format))+"&search.type_point_amrc_freewave.datalogger_model=" + (search_type_point_amrc_freewave_datalogger_model==null? "" : System.Uri.EscapeDataString(search_type_point_amrc_freewave_datalogger_model))+"&search.type_point_amrc_freewave.datalogger_serial=" + (search_type_point_amrc_freewave_datalogger_serial==null? "" : System.Uri.EscapeDataString(search_type_point_amrc_freewave_datalogger_serial));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'CZO Display File Format' entry type
		/// API to search for entries of type CZO Display File Format
		/// Search_type_point_czo repository/search/type/type_point_czo
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_czoAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_czo?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'GC-Net Point Data' entry type
		/// API to search for entries of type GC-Net Point Data
		/// Search_type_point_gcnet repository/search/type/type_point_gcnet
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_gcnetAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_gcnet?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'IAGA 2002 Geomagnetism Data' entry type
		/// API to search for entries of type IAGA 2002 Geomagnetism Data
		/// Search_type_point_geomag_iaga2002 repository/search/type/type_point_geomag_iaga2002
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_geomag_iaga2002_iaga_code">IAGA Code</param>
		/// <param name="search_type_point_geomag_iaga2002_station_name">Station Name</param>
		/// <param name="search_type_point_geomag_iaga2002_source_of_data">Source of data</param>
		/// <param name="search_type_point_geomag_iaga2002_digital_sampling">Digital Sampling</param>
		/// <param name="search_type_point_geomag_iaga2002_data_interval">Data Interval</param>
		/// <param name="search_type_point_geomag_iaga2002_data_type">Data Type</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_geomag_iaga2002Async(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_geomag_iaga2002_iaga_code, 
					string search_type_point_geomag_iaga2002_station_name, 
					string search_type_point_geomag_iaga2002_source_of_data, 
					string search_type_point_geomag_iaga2002_digital_sampling, 
					string search_type_point_geomag_iaga2002_data_interval, 
					string search_type_point_geomag_iaga2002_data_type, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_geomag_iaga2002?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_geomag_iaga2002.iaga_code=" + (search_type_point_geomag_iaga2002_iaga_code==null? "" : System.Uri.EscapeDataString(search_type_point_geomag_iaga2002_iaga_code))+"&search.type_point_geomag_iaga2002.station_name=" + (search_type_point_geomag_iaga2002_station_name==null? "" : System.Uri.EscapeDataString(search_type_point_geomag_iaga2002_station_name))+"&search.type_point_geomag_iaga2002.source_of_data=" + (search_type_point_geomag_iaga2002_source_of_data==null? "" : System.Uri.EscapeDataString(search_type_point_geomag_iaga2002_source_of_data))+"&search.type_point_geomag_iaga2002.digital_sampling=" + (search_type_point_geomag_iaga2002_digital_sampling==null? "" : System.Uri.EscapeDataString(search_type_point_geomag_iaga2002_digital_sampling))+"&search.type_point_geomag_iaga2002.data_interval=" + (search_type_point_geomag_iaga2002_data_interval==null? "" : System.Uri.EscapeDataString(search_type_point_geomag_iaga2002_data_interval))+"&search.type_point_geomag_iaga2002.data_type=" + (search_type_point_geomag_iaga2002_data_type==null? "" : System.Uri.EscapeDataString(search_type_point_geomag_iaga2002_data_type));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'WaterML' entry type
		/// API to search for entries of type WaterML
		/// Search_type_point_hydro_waterml repository/search/type/type_point_hydro_waterml
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_hydro_waterml_site_code">Site Code</param>
		/// <param name="search_type_point_hydro_waterml_site_name">Site Name</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_hydro_watermlAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_hydro_waterml_site_code, 
					string search_type_point_hydro_waterml_site_name, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_hydro_waterml?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_hydro_waterml.site_code=" + (search_type_point_hydro_waterml_site_code==null? "" : System.Uri.EscapeDataString(search_type_point_hydro_waterml_site_code))+"&search.type_point_hydro_waterml.site_name=" + (search_type_point_hydro_waterml_site_name==null? "" : System.Uri.EscapeDataString(search_type_point_hydro_waterml_site_name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ATM Ice SSN Data' entry type
		/// API to search for entries of type ATM Ice SSN Data
		/// Search_type_point_icebridge_atm_icessn repository/search/type/type_point_icebridge_atm_icessn
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_icebridge_atm_icessnAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_icebridge_atm_icessn?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'ATM QFIT Data' entry type
		/// API to search for entries of type ATM QFIT Data
		/// Search_type_point_icebridge_atm_qfit repository/search/type/type_point_icebridge_atm_qfit
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_icebridge_atm_qfitAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_icebridge_atm_qfit?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'McCords Irmcr2 Data' entry type
		/// API to search for entries of type McCords Irmcr2 Data
		/// Search_type_point_icebridge_mccords_irmcr2 repository/search/type/type_point_icebridge_mccords_irmcr2
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_icebridge_mccords_irmcr2Async(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_icebridge_mccords_irmcr2?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'McCords Irmcr3 Data' entry type
		/// API to search for entries of type McCords Irmcr3 Data
		/// Search_type_point_icebridge_mccords_irmcr3 repository/search/type/type_point_icebridge_mccords_irmcr3
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_icebridge_mccords_irmcr3Async(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_icebridge_mccords_irmcr3?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Paris Data' entry type
		/// API to search for entries of type Paris Data
		/// Search_type_point_icebridge_paris repository/search/type/type_point_icebridge_paris
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_icebridge_parisAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_icebridge_paris?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'IDV Point File' entry type
		/// API to search for entries of type IDV Point File
		/// Search_type_point_idv repository/search/type/type_point_idv
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_idvAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_idv?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Inline Point File' entry type
		/// API to search for entries of type Inline Point File
		/// Search_type_point_inline repository/search/type/type_point_inline
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_inlineAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_inline?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NC  DC Climate Data' entry type
		/// API to search for entries of type NC  DC Climate Data
		/// Search_type_point_ncdc_climate repository/search/type/type_point_ncdc_climate
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ncdc_climateAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ncdc_climate?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NetCDF Point File' entry type
		/// API to search for entries of type NetCDF Point File
		/// Search_type_point_netcdf repository/search/type/type_point_netcdf
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_netcdfAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_netcdf?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NOAA Carbon Measurements' entry type
		/// API to search for entries of type NOAA Carbon Measurements
		/// Search_type_point_noaa_carbon repository/search/type/type_point_noaa_carbon
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_noaa_carbon_site_id">Site ID</param>
		/// <param name="search_type_point_noaa_carbon_parameter">Parameter</param>
		/// <param name="search_type_point_noaa_carbon_project">Project</param>
		/// <param name="search_type_point_noaa_carbon_lab_id_number">Lab ID Number</param>
		/// <param name="search_type_point_noaa_carbon_measurement_group">Measurement Group</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_noaa_carbonAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_noaa_carbon_site_id, 
					string search_type_point_noaa_carbon_parameter, 
					string search_type_point_noaa_carbon_project, 
					string search_type_point_noaa_carbon_lab_id_number, 
					string search_type_point_noaa_carbon_measurement_group, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_noaa_carbon?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_noaa_carbon.site_id=" + (search_type_point_noaa_carbon_site_id==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_carbon_site_id))+"&search.type_point_noaa_carbon.parameter=" + (search_type_point_noaa_carbon_parameter==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_carbon_parameter))+"&search.type_point_noaa_carbon.project=" + (search_type_point_noaa_carbon_project==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_carbon_project))+"&search.type_point_noaa_carbon.lab_id_number=" + (search_type_point_noaa_carbon_lab_id_number==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_carbon_lab_id_number))+"&search.type_point_noaa_carbon.measurement_group=" + (search_type_point_noaa_carbon_measurement_group==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_carbon_measurement_group));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NOAA Flask Event Measurements' entry type
		/// API to search for entries of type NOAA Flask Event Measurements
		/// Search_type_point_noaa_flask_event repository/search/type/type_point_noaa_flask_event
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_noaa_flask_event_site_id">Site ID</param>
		/// <param name="search_type_point_noaa_flask_event_parameter">Parameter</param>
		/// <param name="search_type_point_noaa_flask_event_project">Project</param>
		/// <param name="search_type_point_noaa_flask_event_lab_id_number">Lab ID Number</param>
		/// <param name="search_type_point_noaa_flask_event_measurement_group">Measurement Group</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_noaa_flask_eventAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_noaa_flask_event_site_id, 
					string search_type_point_noaa_flask_event_parameter, 
					string search_type_point_noaa_flask_event_project, 
					string search_type_point_noaa_flask_event_lab_id_number, 
					string search_type_point_noaa_flask_event_measurement_group, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_noaa_flask_event?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_noaa_flask_event.site_id=" + (search_type_point_noaa_flask_event_site_id==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_event_site_id))+"&search.type_point_noaa_flask_event.parameter=" + (search_type_point_noaa_flask_event_parameter==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_event_parameter))+"&search.type_point_noaa_flask_event.project=" + (search_type_point_noaa_flask_event_project==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_event_project))+"&search.type_point_noaa_flask_event.lab_id_number=" + (search_type_point_noaa_flask_event_lab_id_number==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_event_lab_id_number))+"&search.type_point_noaa_flask_event.measurement_group=" + (search_type_point_noaa_flask_event_measurement_group==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_event_measurement_group));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NOAA Flask Month Measurements' entry type
		/// API to search for entries of type NOAA Flask Month Measurements
		/// Search_type_point_noaa_flask_month repository/search/type/type_point_noaa_flask_month
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_noaa_flask_month_site_id">Site ID</param>
		/// <param name="search_type_point_noaa_flask_month_parameter">Parameter</param>
		/// <param name="search_type_point_noaa_flask_month_project">Project</param>
		/// <param name="search_type_point_noaa_flask_month_lab_id_number">Lab ID Number</param>
		/// <param name="search_type_point_noaa_flask_month_measurement_group">Measurement Group</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_noaa_flask_monthAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_noaa_flask_month_site_id, 
					string search_type_point_noaa_flask_month_parameter, 
					string search_type_point_noaa_flask_month_project, 
					string search_type_point_noaa_flask_month_lab_id_number, 
					string search_type_point_noaa_flask_month_measurement_group, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_noaa_flask_month?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_noaa_flask_month.site_id=" + (search_type_point_noaa_flask_month_site_id==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_month_site_id))+"&search.type_point_noaa_flask_month.parameter=" + (search_type_point_noaa_flask_month_parameter==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_month_parameter))+"&search.type_point_noaa_flask_month.project=" + (search_type_point_noaa_flask_month_project==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_month_project))+"&search.type_point_noaa_flask_month.lab_id_number=" + (search_type_point_noaa_flask_month_lab_id_number==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_month_lab_id_number))+"&search.type_point_noaa_flask_month.measurement_group=" + (search_type_point_noaa_flask_month_measurement_group==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_flask_month_measurement_group));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NOAA MADIS Point Data' entry type
		/// API to search for entries of type NOAA MADIS Point Data
		/// Search_type_point_noaa_madis repository/search/type/type_point_noaa_madis
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_noaa_madisAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_noaa_madis?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NOAA Tower Network' entry type
		/// API to search for entries of type NOAA Tower Network
		/// Search_type_point_noaa_tower repository/search/type/type_point_noaa_tower
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_noaa_tower_site_id">Site ID</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_noaa_towerAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_noaa_tower_site_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_noaa_tower?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_noaa_tower.site_id=" + (search_type_point_noaa_tower_site_id==null? "" : System.Uri.EscapeDataString(search_type_point_noaa_tower_site_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SeaBird CNV Data' entry type
		/// API to search for entries of type SeaBird CNV Data
		/// Search_type_point_ocean_cnv repository/search/type/type_point_ocean_cnv
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ocean_cnvAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ocean_cnv?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SADO TTS Data' entry type
		/// API to search for entries of type SADO TTS Data
		/// Search_type_point_ocean_csv_sado_TTS repository/search/type/type_point_ocean_csv_sado_TTS
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ocean_csv_sado_TTSAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ocean_csv_sado_TTS?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SADO Meteo Data' entry type
		/// API to search for entries of type SADO Meteo Data
		/// Search_type_point_ocean_csv_sado_meteo repository/search/type/type_point_ocean_csv_sado_meteo
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ocean_csv_sado_meteoAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ocean_csv_sado_meteo?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SADO Position Data' entry type
		/// API to search for entries of type SADO Position Data
		/// Search_type_point_ocean_csv_sado_position repository/search/type/type_point_ocean_csv_sado_position
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ocean_csv_sado_positionAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ocean_csv_sado_position?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NetCDF Glider Data' entry type
		/// API to search for entries of type NetCDF Glider Data
		/// Search_type_point_ocean_netcdf_glider repository/search/type/type_point_ocean_netcdf_glider
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_ocean_netcdf_track_platform">Platform</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ocean_netcdf_gliderAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_ocean_netcdf_track_platform, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ocean_netcdf_glider?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_ocean_netcdf_track.platform=" + (search_type_point_ocean_netcdf_track_platform==null? "" : System.Uri.EscapeDataString(search_type_point_ocean_netcdf_track_platform));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NetCDF Track Data' entry type
		/// API to search for entries of type NetCDF Track Data
		/// Search_type_point_ocean_netcdf_track repository/search/type/type_point_ocean_netcdf_track
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_ocean_netcdf_track_platform">Platform</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ocean_netcdf_trackAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_ocean_netcdf_track_platform, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ocean_netcdf_track?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_ocean_netcdf_track.platform=" + (search_type_point_ocean_netcdf_track_platform==null? "" : System.Uri.EscapeDataString(search_type_point_ocean_netcdf_track_platform));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'OOI Data' entry type
		/// API to search for entries of type OOI Data
		/// Search_type_point_ocean_ooi_dmgx repository/search/type/type_point_ocean_ooi_dmgx
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_ocean_ooi_dmgxAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_ocean_ooi_dmgx?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Open AQ Air Quality' entry type
		/// API to search for entries of type Open AQ Air Quality
		/// Search_type_point_openaq repository/search/type/type_point_openaq
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_openaq_location">Location</param>
		/// <param name="search_type_point_openaq_country">Country</param>
		/// <param name="search_type_point_openaq_city">City</param>
		/// <param name="search_type_point_openaq_hours_offset">Offset Hours</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_openaqAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_openaq_location, 
					string search_type_point_openaq_country, 
					string search_type_point_openaq_city, 
					int search_type_point_openaq_hours_offset, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_openaq?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_openaq.location=" + (search_type_point_openaq_location==null? "" : System.Uri.EscapeDataString(search_type_point_openaq_location))+"&search.type_point_openaq.country=" + (search_type_point_openaq_country==null? "" : System.Uri.EscapeDataString(search_type_point_openaq_country))+"&search.type_point_openaq.city=" + (search_type_point_openaq_city==null? "" : System.Uri.EscapeDataString(search_type_point_openaq_city))+"&search.type_point_openaq.hours_offset="+search_type_point_openaq_hours_offset;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'PBO Position Time Series' entry type
		/// API to search for entries of type PBO Position Time Series
		/// Search_type_point_pbo_position_time_series repository/search/type/type_point_pbo_position_time_series
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_pbo_position_time_series_four_char_id">Four Char ID</param>
		/// <param name="search_type_point_pbo_position_time_series_station_name">Station Name</param>
		/// <param name="search_type_point_pbo_position_time_series_reference_frame">Reference Frame</param>
		/// <param name="search_type_point_pbo_position_time_series_format_version">Format Version</param>
		/// <param name="search_type_point_pbo_position_time_series_processing_center">Processing Center</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_pbo_position_time_seriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_pbo_position_time_series_four_char_id, 
					string search_type_point_pbo_position_time_series_station_name, 
					string search_type_point_pbo_position_time_series_reference_frame, 
					string search_type_point_pbo_position_time_series_format_version, 
					string search_type_point_pbo_position_time_series_processing_center, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_pbo_position_time_series?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_pbo_position_time_series.four_char_id=" + (search_type_point_pbo_position_time_series_four_char_id==null? "" : System.Uri.EscapeDataString(search_type_point_pbo_position_time_series_four_char_id))+"&search.type_point_pbo_position_time_series.station_name=" + (search_type_point_pbo_position_time_series_station_name==null? "" : System.Uri.EscapeDataString(search_type_point_pbo_position_time_series_station_name))+"&search.type_point_pbo_position_time_series.reference_frame=" + (search_type_point_pbo_position_time_series_reference_frame==null? "" : System.Uri.EscapeDataString(search_type_point_pbo_position_time_series_reference_frame))+"&search.type_point_pbo_position_time_series.format_version=" + (search_type_point_pbo_position_time_series_format_version==null? "" : System.Uri.EscapeDataString(search_type_point_pbo_position_time_series_format_version))+"&search.type_point_pbo_position_time_series.processing_center=" + (search_type_point_pbo_position_time_series_processing_center==null? "" : System.Uri.EscapeDataString(search_type_point_pbo_position_time_series_processing_center));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Simple Records' entry type
		/// API to search for entries of type Simple Records
		/// Search_type_point_simple_records repository/search/type/type_point_simple_records
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_simple_recordsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_simple_records?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SNOTEL Snow Data' entry type
		/// API to search for entries of type SNOTEL Snow Data
		/// Search_type_point_snotel repository/search/type/type_point_snotel
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_snotel_site_id">Site ID</param>
		/// <param name="search_type_point_snotel_site_number">Site Number</param>
		/// <param name="search_type_point_snotel_state">State</param>
		/// <param name="search_type_point_snotel_network">Network</param>
		/// <param name="search_type_point_snotel_huc_name">HUC Name</param>
		/// <param name="search_type_point_snotel_huc_id">HUC ID</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_snotelAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_snotel_site_id, 
					string search_type_point_snotel_site_number, 
					string search_type_point_snotel_state, 
					string search_type_point_snotel_network, 
					string search_type_point_snotel_huc_name, 
					string search_type_point_snotel_huc_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_snotel?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_snotel.site_id=" + (search_type_point_snotel_site_id==null? "" : System.Uri.EscapeDataString(search_type_point_snotel_site_id))+"&search.type_point_snotel.site_number=" + (search_type_point_snotel_site_number==null? "" : System.Uri.EscapeDataString(search_type_point_snotel_site_number))+"&search.type_point_snotel.state=" + (search_type_point_snotel_state==null? "" : System.Uri.EscapeDataString(search_type_point_snotel_state))+"&search.type_point_snotel.network=" + (search_type_point_snotel_network==null? "" : System.Uri.EscapeDataString(search_type_point_snotel_network))+"&search.type_point_snotel.huc_name=" + (search_type_point_snotel_huc_name==null? "" : System.Uri.EscapeDataString(search_type_point_snotel_huc_name))+"&search.type_point_snotel.huc_id=" + (search_type_point_snotel_huc_id==null? "" : System.Uri.EscapeDataString(search_type_point_snotel_huc_id));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Record Text File' entry type
		/// API to search for entries of type Record Text File
		/// Search_type_point_text repository/search/type/type_point_text
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_textAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_text?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Global Geodynamics GGP Format' entry type
		/// API to search for entries of type Global Geodynamics GGP Format
		/// Search_type_point_wsbb_ggp repository/search/type/type_point_wsbb_ggp
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_point_wsbb_ggp_station">Station</param>
		/// <param name="search_type_point_wsbb_ggp_instrument">Instrument</param>
		/// <param name="search_type_point_wsbb_ggp_author">Author</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_point_wsbb_ggpAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_point_wsbb_ggp_station, 
					string search_type_point_wsbb_ggp_instrument, 
					string search_type_point_wsbb_ggp_author, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_point_wsbb_ggp?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_point_wsbb_ggp.station=" + (search_type_point_wsbb_ggp_station==null? "" : System.Uri.EscapeDataString(search_type_point_wsbb_ggp_station))+"&search.type_point_wsbb_ggp.instrument=" + (search_type_point_wsbb_ggp_instrument==null? "" : System.Uri.EscapeDataString(search_type_point_wsbb_ggp_instrument))+"&search.type_point_wsbb_ggp.author=" + (search_type_point_wsbb_ggp_author==null? "" : System.Uri.EscapeDataString(search_type_point_wsbb_ggp_author));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NOAA-ESRL-PSD Monthly Climate Index' entry type
		/// API to search for entries of type NOAA-ESRL-PSD Monthly Climate Index
		/// Search_type_psd_monthly_climate_index repository/search/type/type_psd_monthly_climate_index
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_type_psd_monthly_climate_index_units">Units</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_psd_monthly_climate_indexAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_type_psd_monthly_climate_index_units, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_psd_monthly_climate_index?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.type_psd_monthly_climate_index.units=" + (search_type_psd_monthly_climate_index_units==null? "" : System.Uri.EscapeDataString(search_type_psd_monthly_climate_index_units));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'QUANDL Series' entry type
		/// API to search for entries of type QUANDL Series
		/// Search_type_quandl_series repository/search/type/type_quandl_series
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_quandl_seriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_quandl_series?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Service Group' entry type
		/// API to search for entries of type Service Group
		/// Search_type_service_group repository/search/type/type_service_group
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_service_groupAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_service_group?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Service Link' entry type
		/// API to search for entries of type Service Link
		/// Search_type_service_link repository/search/type/type_service_link
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_service_linkAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_service_link?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'SOCRATA Series' entry type
		/// API to search for entries of type SOCRATA Series
		/// Search_type_socrata_series repository/search/type/type_socrata_series
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_socrata_seriesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_socrata_series?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'COD Sounding' entry type
		/// API to search for entries of type COD Sounding
		/// Search_type_sounding_cod repository/search/type/type_sounding_cod
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_sounding_codAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_sounding_cod?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'FRD Sounding' entry type
		/// API to search for entries of type FRD Sounding
		/// Search_type_sounding_frd repository/search/type/type_sounding_frd
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_sounding_frdAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_sounding_frd?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'GSD Sounding' entry type
		/// API to search for entries of type GSD Sounding
		/// Search_type_sounding_gsd repository/search/type/type_sounding_gsd
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_sounding_gsdAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_sounding_gsd?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'UW Sounding' entry type
		/// API to search for entries of type UW Sounding
		/// Search_type_sounding_wyoming repository/search/type/type_sounding_wyoming
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_sounding_wyomingAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_sounding_wyoming?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'NREL TMY Data' entry type
		/// API to search for entries of type NREL TMY Data
		/// Search_type_tmy repository/search/type/type_tmy
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_tmyAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_tmy?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Tweet' entry type
		/// API to search for entries of type Tweet
		/// Search_type_tweet repository/search/type/type_tweet
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_tweetAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_tweet?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'USGS Stream Gauge' entry type
		/// API to search for entries of type USGS Stream Gauge
		/// Search_type_usgs_gauge repository/search/type/type_usgs_gauge
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_usgs_gaugeAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_usgs_gauge?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Virtual Group' entry type
		/// API to search for entries of type Virtual Group
		/// Search_type_virtual repository/search/type/type_virtual
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_virtualAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_virtual?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'WMS Capabilities' entry type
		/// API to search for entries of type WMS Capabilities
		/// Search_type_wms_capabilities repository/search/type/type_wms_capabilities
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_wms_capabilitiesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_wms_capabilities?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'WMS Layer' entry type
		/// API to search for entries of type WMS Layer
		/// Search_type_wms_layer repository/search/type/type_wms_layer
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_type_wms_layerAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/type_wms_layer?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Ufo Sightings' entry type
		/// API to search for entries of type Ufo Sightings
		/// Search_ufo_sightings repository/search/type/ufo_sightings
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_ufo_sightings_datetime">Datetime</param>
		/// <param name="search_db_ufo_sightings_city">City</param>
		/// <param name="search_db_ufo_sightings_state">State</param>
		/// <param name="search_db_ufo_sightings_country">Country</param>
		/// <param name="search_db_ufo_sightings_shape">Shape</param>
		/// <param name="search_db_ufo_sightings_duration_seconds">Duration (seconds)</param>
		/// <param name="search_db_ufo_sightings_duration_hours_min">Duration (hours/min)</param>
		/// <param name="search_db_ufo_sightings_comments">Comments</param>
		/// <param name="search_db_ufo_sightings_date_posted">Date Posted</param>
		/// <param name="search_db_ufo_sightings_latitude">Latitude</param>
		/// <param name="search_db_ufo_sightings_longitude">Longitude</param>
		/// <returns>No response was specified</returns>
		public async Task Search_ufo_sightingsAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_ufo_sightings_datetime, 
					string search_db_ufo_sightings_city, 
					string search_db_ufo_sightings_state, 
					string search_db_ufo_sightings_country, 
					string search_db_ufo_sightings_shape, 
					double search_db_ufo_sightings_duration_seconds, 
					string search_db_ufo_sightings_duration_hours_min, 
					string search_db_ufo_sightings_comments, 
					string search_db_ufo_sightings_date_posted, 
					double search_db_ufo_sightings_latitude, 
					double search_db_ufo_sightings_longitude, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/ufo_sightings?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_ufo_sightings.datetime=" + (search_db_ufo_sightings_datetime==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_datetime))+"&search.db_ufo_sightings.city=" + (search_db_ufo_sightings_city==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_city))+"&search.db_ufo_sightings.state=" + (search_db_ufo_sightings_state==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_state))+"&search.db_ufo_sightings.country=" + (search_db_ufo_sightings_country==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_country))+"&search.db_ufo_sightings.shape=" + (search_db_ufo_sightings_shape==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_shape))+"&search.db_ufo_sightings.duration_seconds="+search_db_ufo_sightings_duration_seconds+"&search.db_ufo_sightings.duration_hours_min=" + (search_db_ufo_sightings_duration_hours_min==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_duration_hours_min))+"&search.db_ufo_sightings.comments=" + (search_db_ufo_sightings_comments==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_comments))+"&search.db_ufo_sightings.date_posted=" + (search_db_ufo_sightings_date_posted==null? "" : System.Uri.EscapeDataString(search_db_ufo_sightings_date_posted))+"&search.db_ufo_sightings.latitude="+search_db_ufo_sightings_latitude+"&search.db_ufo_sightings.longitude="+search_db_ufo_sightings_longitude;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'US Places' entry type
		/// API to search for entries of type US Places
		/// Search_us_places repository/search/type/us_places
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_us_places_feature_name">Place Name</param>
		/// <param name="search_db_us_places_feature_class">Place Type</param>
		/// <param name="search_db_us_places_state_alpha">State</param>
		/// <param name="search_db_us_places_county_name">County Name</param>
		/// <param name="search_db_us_places_location">Location</param>
		/// <param name="search_db_us_places_elev_in_ft">Elev In Ft</param>
		/// <returns>No response was specified</returns>
		public async Task Search_us_placesAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_us_places_feature_name, 
					string search_db_us_places_feature_class, 
					string search_db_us_places_state_alpha, 
					string search_db_us_places_county_name, 
					string search_db_us_places_location, 
					double search_db_us_places_elev_in_ft, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/us_places?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_us_places.feature_name=" + (search_db_us_places_feature_name==null? "" : System.Uri.EscapeDataString(search_db_us_places_feature_name))+"&search.db_us_places.feature_class=" + (search_db_us_places_feature_class==null? "" : System.Uri.EscapeDataString(search_db_us_places_feature_class))+"&search.db_us_places.state_alpha=" + (search_db_us_places_state_alpha==null? "" : System.Uri.EscapeDataString(search_db_us_places_state_alpha))+"&search.db_us_places.county_name=" + (search_db_us_places_county_name==null? "" : System.Uri.EscapeDataString(search_db_us_places_county_name))+"&search.db_us_places.location=" + (search_db_us_places_location==null? "" : System.Uri.EscapeDataString(search_db_us_places_location))+"&search.db_us_places.elev_in_ft="+search_db_us_places_elev_in_ft;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Simple Yes-No Vote' entry type
		/// API to search for entries of type Simple Yes-No Vote
		/// Search_vote_yesno repository/search/type/vote_yesno
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_db_vote_yesno_vote">My Vote</param>
		/// <returns>No response was specified</returns>
		public async Task Search_vote_yesnoAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_db_vote_yesno_vote, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/vote_yesno?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.db_vote_yesno.vote=" + (search_db_vote_yesno_vote==null? "" : System.Uri.EscapeDataString(search_db_vote_yesno_vote));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Weblog' entry type
		/// API to search for entries of type Weblog
		/// Search_weblog repository/search/type/weblog
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <returns>No response was specified</returns>
		public async Task Search_weblogAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/weblog?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Search API for 'Wiki Page' entry type
		/// API to search for entries of type Wiki Page
		/// Search_wikipage repository/search/type/wikipage
		/// </summary>
		/// <param name="text">Search text</param>
		/// <param name="name">Search name</param>
		/// <param name="description">Search description</param>
		/// <param name="fromdate">From date</param>
		/// <param name="todate">To date</param>
		/// <param name="createdate_from">Archive create date from</param>
		/// <param name="createdate_to">Archive create date to</param>
		/// <param name="changedate_from">Archive change date from</param>
		/// <param name="changedate_to">Archive change date to</param>
		/// <param name="group">Parent entry</param>
		/// <param name="filesuffix">File suffix</param>
		/// <param name="maxlatitude">Northern bounds of search</param>
		/// <param name="minlongitude">Western bounds of search</param>
		/// <param name="minlatitude">Southern bounds of search</param>
		/// <param name="maxlongitude">Eastern bounds of search</param>
		/// <param name="max">Max number of results</param>
		/// <param name="skip">Number to skip</param>
		/// <param name="search_wikipage_wikitext">Wiki Text</param>
		/// <param name="search_wikipage_category">Wiki Page Category</param>
		/// <returns>No response was specified</returns>
		public async Task Search_wikipageAsync(
					string text, 
					string name, 
					string description, 
					System.DateTimeOffset fromdate, 
					System.DateTimeOffset todate, 
					System.DateTimeOffset createdate_from, 
					System.DateTimeOffset createdate_to, 
					System.DateTimeOffset changedate_from, 
					System.DateTimeOffset changedate_to, 
					string group, 
					string filesuffix, 
					float maxlatitude, 
					float minlongitude, 
					float minlatitude, 
					float maxlongitude, 
					int max, 
					int skip, 
					string search_wikipage_wikitext, 
					string search_wikipage_category, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "repository/search/type/wikipage?text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&fromdate=" + fromdate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&todate=" + todate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.from=" + createdate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&createdate.to=" + createdate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.from=" + changedate_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&changedate.to=" + changedate_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&group=" + (group==null? "" : System.Uri.EscapeDataString(group))+"&filesuffix=" + (filesuffix==null? "" : System.Uri.EscapeDataString(filesuffix))+"&maxlatitude="+maxlatitude+"&minlongitude="+minlongitude+"&minlatitude="+minlatitude+"&maxlongitude="+maxlongitude+"&max="+max+"&skip="+skip+"&search.wikipage.wikitext=" + (search_wikipage_wikitext==null? "" : System.Uri.EscapeDataString(search_wikipage_wikitext))+"&search.wikipage.category=" + (search_wikipage_category==null? "" : System.Uri.EscapeDataString(search_wikipage_category));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
