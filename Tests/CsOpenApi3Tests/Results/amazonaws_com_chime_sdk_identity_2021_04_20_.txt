//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
	}
	
	/// <summary>
	/// A tag object containing a key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottledClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceAdminResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Identity AppInstanceAdmin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
	}
	
	/// <summary>
	/// The details of a user or bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Identity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceBotResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceBotArn { get; set; }
	}
	
	/// <summary>
	/// The configuration for an Amazon Lex V2 bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LexConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RespondsTo RespondsTo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InvokedBy InvokedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LexBotAliasArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WelcomeIntent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RespondsTo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD_MESSAGES")]
		STANDARD_MESSAGES = 0,
	}
	
	/// <summary>
	/// Specifies the type of message that triggers a bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvokedBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StandardMessages StandardMessages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetedMessages TargetedMessages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StandardMessages
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MENTIONS")]
		MENTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetedMessages
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExpirationCriterion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED_TIMESTAMP")]
		CREATED_TIMESTAMP = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstance AppInstance { get; set; }
	}
	
	/// <summary>
	/// The details of an <code>AppInstance</code>, an instance of an Amazon Chime SDK messaging application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceAdminResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceAdmin AppInstanceAdmin { get; set; }
	}
	
	/// <summary>
	/// The name and ARN of the admin for the <code>AppInstance</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceAdmin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Identity Admin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceBotResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceBot AppInstanceBot { get; set; }
	}
	
	/// <summary>
	/// An Amazon Lex V2 chat bot created under an <code>AppInstance</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceBot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceBotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
	}
	
	/// <summary>
	/// A structure that contains configuration data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Configuration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LexConfiguration Lex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUser AppInstanceUser { get; set; }
	}
	
	/// <summary>
	/// The details of an <code>AppInstanceUser</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceUser
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpirationSettings ExpirationSettings { get; set; }
	}
	
	/// <summary>
	/// Determines the interval after which an <code>AppInstanceUser</code> is automatically deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExpirationSettings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ExpirationDays { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExpirationCriterion ExpirationCriterion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceUserEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUserEndpoint AppInstanceUserEndpoint { get; set; }
	}
	
	/// <summary>
	/// An endpoint under an Amazon Chime <code>AppInstanceUser</code> that receives messages for a user. For push notifications, the endpoint is a mobile device used to receive mobile push notifications for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceUserEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUserEndpointType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointAttributes EndpointAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedMessages AllowMessages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointState EndpointState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AppInstanceUserEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APNS")]
		APNS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APNS_SANDBOX")]
		APNS_SANDBOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GCM")]
		GCM = 2,
	}
	
	/// <summary>
	/// The attributes of an <code>Endpoint</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoipDeviceToken { get; set; }
	}
	
	/// <summary>
	/// <p>A read-only field that represents the state of an <code>AppInstanceUserEndpoint</code>. Supported values:</p> <ul> <li> <p> <code>ACTIVE</code>: The <code>AppInstanceUserEndpoint</code> is active and able to receive messages. When <code>ACTIVE</code>, the <code>EndpointStatusReason</code> remains empty.</p> </li> <li> <p> <code>INACTIVE</code>: The <code>AppInstanceUserEndpoint</code> is inactive and can't receive message. When INACTIVE, the corresponding reason will be conveyed through EndpointStatusReason.</p> </li> <li> <p> <code>INVALID_DEVICE_TOKEN</code> indicates that an <code>AppInstanceUserEndpoint</code> is <code>INACTIVE</code> due to invalid device token</p> </li> <li> <p> <code>INVALID_PINPOINT_ARN</code> indicates that an <code>AppInstanceUserEndpoint</code> is <code>INACTIVE</code> due to an invalid pinpoint ARN that was input through the <code>ResourceArn</code> field.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointState
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatusReason StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EndpointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EndpointStatusReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_DEVICE_TOKEN")]
		INVALID_DEVICE_TOKEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_PINPOINT_ARN")]
		INVALID_PINPOINT_ARN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppInstanceRetentionSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceRetentionSettings AppInstanceRetentionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InitiateDeletionTimestamp { get; set; }
	}
	
	/// <summary>
	/// The details of the data-retention settings for an <code>AppInstance</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceRetentionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelRetentionSettings ChannelRetentionSettings { get; set; }
	}
	
	/// <summary>
	/// The details of the retention settings for a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelRetentionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceAdminsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceAdminSummary[] AppInstanceAdmins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of the details of an <code>AppInstanceAdmin</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceAdminSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Identity Admin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceBotsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceBotSummary[] AppInstanceBots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// High-level information about an AppInstanceBot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceBotSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceBotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceUserEndpointsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUserEndpointSummary[] AppInstanceUserEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of the details of an <code>AppInstanceUserEndpoint</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceUserEndpointSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUserEndpointType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedMessages AllowMessages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointState EndpointState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUserSummary[] AppInstanceUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of the details of an <code>AppInstanceUser</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceUserSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstancesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceSummary[] AppInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of the data for an <code>AppInstance</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppInstanceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppInstanceRetentionSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceRetentionSettings AppInstanceRetentionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InitiateDeletionTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppInstanceUserExpirationSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpirationSettings ExpirationSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterAppInstanceUserEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceBotResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceBotArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceUserEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AllowMessages
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceAdminRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceAdminArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceBotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Configuration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppInstanceUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppInstanceUserId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpirationSettings ExpirationSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppInstanceAdminRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppInstanceBotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppInstanceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppInstanceUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterAppInstanceUserEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceAdminRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceBotRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceUserEndpointRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAppInstanceUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppInstanceRetentionSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceAdminsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceBotsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceUserEndpointsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstanceUsersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppInstancesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppInstanceRetentionSettingsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceRetentionSettings AppInstanceRetentionSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppInstanceUserExpirationSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExpirationSettings ExpirationSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterAppInstanceUserEndpointRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUserEndpointType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointAttributes EndpointAttributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedMessages AllowMessages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceBotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceUserEndpointRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedMessages AllowMessages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppInstanceUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates an Amazon Chime SDK messaging <code>AppInstance</code> under an AWS account. Only SDK messaging customers use this API. <code>CreateAppInstance</code> supports idempotency behavior as described in the AWS API Standard.</p> <p>identity</p>
		/// CreateAppInstance app-instances
		/// </summary>
		public async Task CreateAppInstanceAsync(CreateAppInstancePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all Amazon Chime <code>AppInstance</code>s created under a single AWS account.
		/// ListAppInstances app-instances
		/// </summary>
		/// <param name="max_results">The maximum number of <code>AppInstance</code>s that you want to return.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="next_token">The token passed by previous API requests until you reach the maximum number of <code>AppInstances</code>.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppInstancesResponse> ListAppInstancesAsync(int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances?max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppInstancesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Promotes an <code>AppInstanceUser</code> or <code>AppInstanceBot</code> to an <code>AppInstanceAdmin</code>. The promoted entity can perform the following actions. </p> <ul> <li> <p> <code>ChannelModerator</code> actions across all channels in the <code>AppInstance</code>.</p> </li> <li> <p> <code>DeleteChannelMessage</code> actions.</p> </li> </ul> <p>Only an <code>AppInstanceUser</code> and <code>AppInstanceBot</code> can be promoted to an <code>AppInstanceAdmin</code> role.</p>
		/// CreateAppInstanceAdmin app-instances/{appInstanceArn}/admins
		/// </summary>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		public async Task CreateAppInstanceAdminAsync(string appInstanceArn, CreateAppInstanceAdminPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn))+"/admins";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the administrators in the <code>AppInstance</code>.
		/// ListAppInstanceAdmins app-instances/{appInstanceArn}/admins
		/// </summary>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="max_results">The maximum number of administrators that you want to return.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="next_token">The token returned from previous API requests until the number of administrators is reached.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppInstanceAdminsResponse> ListAppInstanceAdminsAsync(string appInstanceArn, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn))+"/admins&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppInstanceAdminsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a bot under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>Configuration</code> and <code>Name</code> for that bot.
		/// CreateAppInstanceBot app-instance-bots
		/// </summary>
		public async Task CreateAppInstanceBotAsync(CreateAppInstanceBotPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-bots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a user under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>appInstanceUserId</code> and <code>Name</code> for that user.
		/// CreateAppInstanceUser app-instance-users
		/// </summary>
		public async Task CreateAppInstanceUserAsync(CreateAppInstanceUserPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an <code>AppInstance</code> and all associated data asynchronously.
		/// DeleteAppInstance app-instances/{appInstanceArn}
		/// </summary>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		public async Task DeleteAppInstanceAsync(string appInstanceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the full details of an <code>AppInstance</code>.
		/// DescribeAppInstance app-instances/{appInstanceArn}
		/// </summary>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAppInstanceResponse> DescribeAppInstanceAsync(string appInstanceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAppInstanceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates <code>AppInstance</code> metadata.
		/// UpdateAppInstance app-instances/{appInstanceArn}
		/// </summary>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAppInstanceResponse> UpdateAppInstanceAsync(string appInstanceArn, UpdateAppInstancePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAppInstanceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Demotes an <code>AppInstanceAdmin</code> to an <code>AppInstanceUser</code> or <code>AppInstanceBot</code>. This action does not delete the user.
		/// DeleteAppInstanceAdmin app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}
		/// </summary>
		/// <param name="appInstanceAdminArn">The ARN of the <code>AppInstance</code>'s administrator.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		public async Task DeleteAppInstanceAdminAsync(string appInstanceAdminArn, string appInstanceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn))+"/admins/"+ (appInstanceAdminArn==null? "" : System.Uri.EscapeDataString(appInstanceAdminArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the full details of an <code>AppInstanceAdmin</code>.
		/// DescribeAppInstanceAdmin app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}
		/// </summary>
		/// <param name="appInstanceAdminArn">The ARN of the <code>AppInstanceAdmin</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAppInstanceAdminResponse> DescribeAppInstanceAdminAsync(string appInstanceAdminArn, string appInstanceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn))+"/admins/"+ (appInstanceAdminArn==null? "" : System.Uri.EscapeDataString(appInstanceAdminArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAppInstanceAdminResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an <code>AppInstanceBot</code>.
		/// DeleteAppInstanceBot app-instance-bots/{appInstanceBotArn}
		/// </summary>
		/// <param name="appInstanceBotArn">The ARN of the <code>AppInstanceBot</code> being deleted.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		public async Task DeleteAppInstanceBotAsync(string appInstanceBotArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-bots/"+ (appInstanceBotArn==null? "" : System.Uri.EscapeDataString(appInstanceBotArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The <code>AppInstanceBot's</code> information.
		/// DescribeAppInstanceBot app-instance-bots/{appInstanceBotArn}
		/// </summary>
		/// <param name="appInstanceBotArn">The ARN of the <code>AppInstanceBot</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAppInstanceBotResponse> DescribeAppInstanceBotAsync(string appInstanceBotArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-bots/"+ (appInstanceBotArn==null? "" : System.Uri.EscapeDataString(appInstanceBotArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAppInstanceBotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the name and metadata of an <code>AppInstanceBot</code>.
		/// UpdateAppInstanceBot app-instance-bots/{appInstanceBotArn}
		/// </summary>
		/// <param name="appInstanceBotArn">The ARN of the <code>AppInstanceBot</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAppInstanceBotResponse> UpdateAppInstanceBotAsync(string appInstanceBotArn, UpdateAppInstanceBotPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-bots/"+ (appInstanceBotArn==null? "" : System.Uri.EscapeDataString(appInstanceBotArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAppInstanceBotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an <code>AppInstanceUser</code>.
		/// DeleteAppInstanceUser app-instance-users/{appInstanceUserArn}
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the user request being deleted.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		public async Task DeleteAppInstanceUserAsync(string appInstanceUserArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the full details of an <code>AppInstanceUser</code>.
		/// DescribeAppInstanceUser app-instance-users/{appInstanceUserArn}
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAppInstanceUserResponse> DescribeAppInstanceUserAsync(string appInstanceUserArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAppInstanceUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of an <code>AppInstanceUser</code>. You can update names and metadata.
		/// UpdateAppInstanceUser app-instance-users/{appInstanceUserArn}
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAppInstanceUserResponse> UpdateAppInstanceUserAsync(string appInstanceUserArn, UpdateAppInstanceUserPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAppInstanceUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deregisters an <code>AppInstanceUserEndpoint</code>.
		/// DeregisterAppInstanceUserEndpoint app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="endpointId">The unique identifier of the <code>AppInstanceUserEndpoint</code>.
		/// Min length: 0
		/// Max length: 64
		// </param>
		public async Task DeregisterAppInstanceUserEndpointAsync(string appInstanceUserArn, string endpointId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn))+"/endpoints/"+ (endpointId==null? "" : System.Uri.EscapeDataString(endpointId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the full details of an <code>AppInstanceUserEndpoint</code>.
		/// DescribeAppInstanceUserEndpoint app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 0
		/// Max length: 1600
		// </param>
		/// <param name="endpointId">The unique identifier of the <code>AppInstanceUserEndpoint</code>.
		/// Min length: 0
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeAppInstanceUserEndpointResponse> DescribeAppInstanceUserEndpointAsync(string appInstanceUserArn, string endpointId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn))+"/endpoints/"+ (endpointId==null? "" : System.Uri.EscapeDataString(endpointId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAppInstanceUserEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of an <code>AppInstanceUserEndpoint</code>. You can update the name and <code>AllowMessage</code> values.
		/// UpdateAppInstanceUserEndpoint app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="endpointId">The unique identifier of the <code>AppInstanceUserEndpoint</code>.
		/// Min length: 0
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAppInstanceUserEndpointResponse> UpdateAppInstanceUserEndpointAsync(string appInstanceUserArn, string endpointId, UpdateAppInstanceUserEndpointPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn))+"/endpoints/"+ (endpointId==null? "" : System.Uri.EscapeDataString(endpointId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAppInstanceUserEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the retention settings for an <code>AppInstance</code>.
		/// GetAppInstanceRetentionSettings app-instances/{appInstanceArn}/retention-settings
		/// </summary>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAppInstanceRetentionSettingsResponse> GetAppInstanceRetentionSettingsAsync(string appInstanceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn))+"/retention-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAppInstanceRetentionSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the amount of time in days that a given <code>AppInstance</code> retains data.
		/// PutAppInstanceRetentionSettings app-instances/{appInstanceArn}/retention-settings
		/// </summary>
		/// <param name="appInstanceArn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<PutAppInstanceRetentionSettingsResponse> PutAppInstanceRetentionSettingsAsync(string appInstanceArn, PutAppInstanceRetentionSettingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instances/"+ (appInstanceArn==null? "" : System.Uri.EscapeDataString(appInstanceArn))+"/retention-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAppInstanceRetentionSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all <code>AppInstanceBots</code> created under a single <code>AppInstance</code>.
		/// ListAppInstanceBots app-instance-bots#app-instance-arn
		/// </summary>
		/// <param name="app_instance_arn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="max_results">The maximum number of requests to return.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="next_token">The token passed by previous API calls until all requested bots are returned.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppInstanceBotsResponse> ListAppInstanceBotsAsync(string app_instance_arn, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-bots#app-instance-arn?app-instance-arn=" + (app_instance_arn==null? "" : System.Uri.EscapeDataString(app_instance_arn))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppInstanceBotsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the <code>AppInstanceUserEndpoints</code> created under a single <code>AppInstanceUser</code>.
		/// ListAppInstanceUserEndpoints app-instance-users/{appInstanceUserArn}/endpoints
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="max_results">The maximum number of endpoints that you want to return.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="next_token">The token passed by previous API calls until all requested endpoints are returned.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppInstanceUserEndpointsResponse> ListAppInstanceUserEndpointsAsync(string appInstanceUserArn, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn))+"/endpoints&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppInstanceUserEndpointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Registers an endpoint under an Amazon Chime <code>AppInstanceUser</code>. The endpoint receives messages for a user. For push notifications, the endpoint is a mobile device used to receive mobile push notifications for a user.
		/// RegisterAppInstanceUserEndpoint app-instance-users/{appInstanceUserArn}/endpoints
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		public async Task RegisterAppInstanceUserEndpointAsync(string appInstanceUserArn, RegisterAppInstanceUserEndpointPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn))+"/endpoints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all <code>AppInstanceUsers</code> created under a single <code>AppInstance</code>.
		/// ListAppInstanceUsers app-instance-users#app-instance-arn
		/// </summary>
		/// <param name="app_instance_arn">The ARN of the <code>AppInstance</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <param name="max_results">The maximum number of requests that you want returned.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="next_token">The token passed by previous API calls until all requested users are returned.
		/// Min length: 0
		/// Max length: 2048
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppInstanceUsersResponse> ListAppInstanceUsersAsync(string app_instance_arn, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users#app-instance-arn?app-instance-arn=" + (app_instance_arn==null? "" : System.Uri.EscapeDataString(app_instance_arn))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppInstanceUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags applied to an Amazon Chime SDK identity resource.
		/// ListTagsForResource tags#arn
		/// </summary>
		/// <param name="arn">The ARN of the resource.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the number of days before the <code>AppInstanceUser</code> is automatically deleted.</p> <note> <p>A background process deletes expired <code>AppInstanceUsers</code> within 6 hours of expiration. Actual deletion times may vary.</p> <p>Expired <code>AppInstanceUsers</code> that have not yet been deleted appear as active, and you can update their expiration settings. The system honors the new settings.</p> </note>
		/// PutAppInstanceUserExpirationSettings app-instance-users/{appInstanceUserArn}/expiration-settings
		/// </summary>
		/// <param name="appInstanceUserArn">The ARN of the <code>AppInstanceUser</code>.
		/// Min length: 5
		/// Max length: 1600
		// </param>
		/// <returns>Success</returns>
		public async Task<PutAppInstanceUserExpirationSettingsResponse> PutAppInstanceUserExpirationSettingsAsync(string appInstanceUserArn, PutAppInstanceUserExpirationSettingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "app-instance-users/"+ (appInstanceUserArn==null? "" : System.Uri.EscapeDataString(appInstanceUserArn))+"/expiration-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAppInstanceUserExpirationSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies the specified tags to the specified Amazon Chime SDK identity resource.
		/// TagResource tags#operation=tag-resource
		/// </summary>
		public async Task TagResourceAsync(TagResourceOperation operation, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=tag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified Amazon Chime SDK identity resource.
		/// UntagResource tags#operation=untag-resource
		/// </summary>
		public async Task UntagResourceAsync(UntagResourceOperation operation, UntagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=untag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateAppInstancePostBody
	{
		
		/// <summary>
		/// The name of the <code>AppInstance</code>.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metadata of the <code>AppInstance</code>. Limited to a 1KB string in UTF-8.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The unique ID of the request. Use different tokens to create different <code>AppInstances</code>.
		/// Required
		/// Min length: 2
		/// Max length: 64
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Tags assigned to the <code>AppInstance</code>.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateAppInstanceAdminPostBody
	{
		
		/// <summary>
		/// The ARN of the administrator of the current <code>AppInstance</code>.
		/// Required
		/// Min length: 5
		/// Max length: 1600
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}")]
		public string AppInstanceAdminArn { get; set; }
	}
	
	public class CreateAppInstanceBotPostBody
	{
		
		/// <summary>
		/// The ARN of the <code>AppInstance</code> request.
		/// Required
		/// Min length: 5
		/// Max length: 1600
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}")]
		public string AppInstanceArn { get; set; }
		
		/// <summary>
		/// The user's name.
		/// Min length: 0
		/// Max length: 256
		/// Pattern: [\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The request metadata. Limited to a 1KB string in UTF-8.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.
		/// Required
		/// Min length: 2
		/// Max length: 64
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tags assigned to the <code>AppInstanceBot</code>.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// A structure that contains configuration data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAppInstanceBotPostBodyConfiguration Configuration { get; set; }
	}
	
	public class CreateAppInstanceBotPostBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LexConfiguration Lex { get; set; }
	}
	
	public class CreateAppInstanceUserPostBody
	{
		
		/// <summary>
		/// The ARN of the <code>AppInstance</code> request.
		/// Required
		/// Min length: 5
		/// Max length: 1600
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}")]
		public string AppInstanceArn { get; set; }
		
		/// <summary>
		/// The user ID of the <code>AppInstance</code>.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// Pattern: [A-Za-z0-9]([A-Za-z0-9\:\-\_\.\@]{0,62}[A-Za-z0-9])?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9]([A-Za-z0-9\:\-\_\.\@]{0,62}[A-Za-z0-9])?")]
		public string AppInstanceUserId { get; set; }
		
		/// <summary>
		/// The user's name.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The request's metadata. Limited to a 1KB string in UTF-8.
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The unique ID of the request. Use different tokens to request additional <code>AppInstances</code>.
		/// Required
		/// Min length: 2
		/// Max length: 64
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Tags assigned to the <code>AppInstanceUser</code>.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Determines the interval after which an <code>AppInstanceUser</code> is automatically deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateAppInstanceUserPostBodyExpirationSettings ExpirationSettings { get; set; }
	}
	
	public class CreateAppInstanceUserPostBodyExpirationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpirationCriterion ExpirationCriterion { get; set; }
	}
	
	public class UpdateAppInstancePutBody
	{
		
		/// <summary>
		/// The name that you want to change.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// Pattern: [\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metadata that you want to change.
		/// Required
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Metadata { get; set; }
	}
	
	public class UpdateAppInstanceBotPutBody
	{
		
		/// <summary>
		/// The name of the <code>AppInstanceBot</code>.
		/// Required
		/// Min length: 0
		/// Max length: 256
		/// Pattern: [\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metadata of the <code>AppInstanceBot</code>.
		/// Required
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Metadata { get; set; }
		
		/// <summary>
		/// A structure that contains configuration data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAppInstanceBotPutBodyConfiguration Configuration { get; set; }
	}
	
	public class UpdateAppInstanceBotPutBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LexConfiguration Lex { get; set; }
	}
	
	public class UpdateAppInstanceUserPutBody
	{
		
		/// <summary>
		/// The name of the <code>AppInstanceUser</code>.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metadata of the <code>AppInstanceUser</code>.
		/// Required
		/// Min length: 0
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Metadata { get; set; }
	}
	
	public class UpdateAppInstanceUserEndpointPutBody
	{
		
		/// <summary>
		/// The name of the <code>AppInstanceUserEndpoint</code>.
		/// Min length: 0
		/// Max length: 1600
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Name { get; set; }
		
		/// <summary>
		/// Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetedMessages AllowMessages { get; set; }
	}
	
	public class PutAppInstanceRetentionSettingsPutBody
	{
		
		/// <summary>
		/// The details of the data-retention settings for an <code>AppInstance</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutAppInstanceRetentionSettingsPutBodyAppInstanceRetentionSettings AppInstanceRetentionSettings { get; set; }
	}
	
	public class PutAppInstanceRetentionSettingsPutBodyAppInstanceRetentionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelRetentionSettings ChannelRetentionSettings { get; set; }
	}
	
	public class RegisterAppInstanceUserEndpointPostBody
	{
		
		/// <summary>
		/// The name of the <code>AppInstanceUserEndpoint</code>.
		/// Min length: 0
		/// Max length: 1600
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p> <ul> <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li> <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li> <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li> </ul> <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppInstanceUserEndpointType Type { get; set; }
		
		/// <summary>
		/// The ARN of the resource to which the endpoint belongs.
		/// Required
		/// Min length: 5
		/// Max length: 1600
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The attributes of an <code>Endpoint</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegisterAppInstanceUserEndpointPostBodyEndpointAttributes EndpointAttributes { get; set; }
		
		/// <summary>
		/// The unique ID assigned to the request. Use different tokens to register other endpoints.
		/// Required
		/// Min length: 2
		/// Max length: 64
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-_a-zA-Z0-9]*")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetedMessages AllowMessages { get; set; }
	}
	
	public class RegisterAppInstanceUserEndpointPostBodyEndpointAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoipDeviceToken { get; set; }
	}
	
	public class PutAppInstanceUserExpirationSettingsPutBody
	{
		
		/// <summary>
		/// Determines the interval after which an <code>AppInstanceUser</code> is automatically deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutAppInstanceUserExpirationSettingsPutBodyExpirationSettings ExpirationSettings { get; set; }
	}
	
	public class PutAppInstanceUserExpirationSettingsPutBodyExpirationSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpirationDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpirationCriterion ExpirationCriterion { get; set; }
	}
	
	public enum TagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tag-resource")]
		tagMinusresource = 0,
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The resource ARN.
		/// Required
		/// Min length: 5
		/// Max length: 1600
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The tag key-value pairs.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public enum UntagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="untag-resource")]
		untagMinusresource = 0,
	}
	
	public class UntagResourcePostBody
	{
		
		/// <summary>
		/// The resource ARN.
		/// Required
		/// Min length: 5
		/// Max length: 1600
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(1600)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The tag keys.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] TagKeys { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
