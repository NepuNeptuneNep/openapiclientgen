//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Submission Model - Handles all the fields required to attach documents to an online maintenance job
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceDocumentModel
	{
		
		/// <summary>
		/// The document Mime Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The document URL (This has to be public)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string URL { get; set; }
	}
	
	/// <summary>
	/// Submission Model - Handles all fields required to submit an online maintenance job
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceIssueModel
	{
		
		/// <summary>
		/// Documents linked to a submitted maintenance job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceDocumentModel[] Documents { get; set; }
		
		/// <summary>
		/// ID used externally to manage jobs before sending to the system. This has a 10 character limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExternalID { get; set; }
		
		/// <summary>
		/// The fault title if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IssueFault { get; set; }
		
		/// <summary>
		/// Fault notes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IssueNotes { get; set; }
		
		/// <summary>
		/// The priority of the job (Defaults to 'Low' if incorrect value or empty)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<MaintenanceIssueModelIssuePriority> IssuePriority { get; set; }
		
		/// <summary>
		/// The title of the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IssueTitle { get; set; }
		
		/// <summary>
		/// The first line of the property address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyAddress1 { get; set; }
		
		/// <summary>
		/// The second line of the property address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyAddress2 { get; set; }
		
		/// <summary>
		/// The third line of the property address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyAddress3 { get; set; }
		
		/// <summary>
		/// The forth line of the property address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyAddress4 { get; set; }
		
		/// <summary>
		/// The country the property is located
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyCountry { get; set; }
		
		/// <summary>
		/// The property postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PropertyPostcode { get; set; }
		
		/// <summary>
		/// The date the job was reported
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReportedAt { get; set; }
		
		/// <summary>
		/// The email address of the Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantEMailAddress { get; set; }
		
		/// <summary>
		/// The forename of the Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantForename { get; set; }
		
		/// <summary>
		/// The primary phone number of the Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantPhonePrimary { get; set; }
		
		/// <summary>
		/// The secondary phone number of the Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantPhoneSecondary { get; set; }
		
		/// <summary>
		/// Is the Tenant’s presence requested during the maintenance visit? (Defaults to “false” if incorrect value or empty)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TenantPresenceRequested { get; set; }
		
		/// <summary>
		/// The surname of the Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantSurname { get; set; }
		
		/// <summary>
		/// The title of the Tenant
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantTitle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MaintenanceIssueModelIssuePriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Object
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a maintenance job for a specific branch
		/// MaintenanceController_CreateMaintenanceJob v3/maintenance/{shortName}/maintenance/{branchID}/createmaintenancejob
		/// </summary>
		/// <param name="shortName">The unique client short-name</param>
		/// <param name="branchID">The unique ID of the Branch</param>
		/// <param name="requestBody">A JSON object containing details of the maintenance job</param>
		/// <returns>OK</returns>
		public async Task<Object> MaintenanceController_CreateMaintenanceJobAsync(string shortName, string branchID, MaintenanceIssueModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/maintenance/"+ (shortName==null? "" : System.Uri.EscapeDataString(shortName))+"/maintenance/"+ (branchID==null? "" : System.Uri.EscapeDataString(branchID))+"/createmaintenancejob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
