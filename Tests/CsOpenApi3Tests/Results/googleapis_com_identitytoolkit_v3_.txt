//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Response of creating the IDP authentication URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAuthUriResponse
	{
		
		/// <summary>
		/// all providers the user has once used to do federated login
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allProviders")]
		public string[] AllProviders { get; set; }
		
		/// <summary>
		/// The URI used by the IDP to authenticate the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authUri")]
		public string AuthUri { get; set; }
		
		/// <summary>
		/// True if captcha is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaRequired")]
		public System.Nullable<System.Boolean> CaptchaRequired { get; set; }
		
		/// <summary>
		/// True if the authUri is for user's existing provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forExistingProvider")]
		public System.Nullable<System.Boolean> ForExistingProvider { get; set; }
		
		/// <summary>
		/// The fixed string identitytoolkit#CreateAuthUriResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#CreateAuthUriResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#CreateAuthUriResponse";
		
		/// <summary>
		/// The provider ID of the auth URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		/// <summary>
		/// Whether the user is registered if the identifier is an email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registered")]
		public System.Nullable<System.Boolean> Registered { get; set; }
		
		/// <summary>
		/// Session ID which should be passed in the following verifyAssertion request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// All sign-in methods this user has used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signinMethods")]
		public string[] SigninMethods { get; set; }
	}
	
	/// <summary>
	/// Respone of deleting account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAccountResponse
	{
		
		/// <summary>
		/// The fixed string "identitytoolkit#DeleteAccountResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#DeleteAccountResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#DeleteAccountResponse";
	}
	
	/// <summary>
	/// Response of downloading accounts in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadAccountResponse
	{
		
		/// <summary>
		/// The fixed string "identitytoolkit#DownloadAccountResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#DownloadAccountResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#DownloadAccountResponse";
		
		/// <summary>
		/// The next page token. To be used in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The user accounts data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserInfo[] Users { get; set; }
	}
	
	/// <summary>
	/// Template for an individual account info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserInfo
	{
		
		/// <summary>
		/// User creation timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// The custom attributes to be set in the user's id token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributes")]
		public string CustomAttributes { get; set; }
		
		/// <summary>
		/// Whether the user is authenticated by the developer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAuth")]
		public System.Nullable<System.Boolean> CustomAuth { get; set; }
		
		/// <summary>
		/// Whether the user is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Whether the email has been verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailVerified")]
		public System.Nullable<System.Boolean> EmailVerified { get; set; }
		
		/// <summary>
		/// last login timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginAt")]
		public string LastLoginAt { get; set; }
		
		/// <summary>
		/// The local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// The user's hashed password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordHash")]
		public string PasswordHash { get; set; }
		
		/// <summary>
		/// The timestamp when the password was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordUpdatedAt")]
		public System.Nullable<System.Double> PasswordUpdatedAt { get; set; }
		
		/// <summary>
		/// User's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The URL of the user profile photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The IDP of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerUserInfo")]
		public UserInfoProviderUserInfo[] UserInfoProviderUserInfo { get; set; }
		
		/// <summary>
		/// The user's plain text password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawPassword")]
		public string RawPassword { get; set; }
		
		/// <summary>
		/// The user's password salt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salt")]
		public string Salt { get; set; }
		
		/// <summary>
		/// User's screen name at Twitter or login name at Github.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenName")]
		public string ScreenName { get; set; }
		
		/// <summary>
		/// Timestamp in seconds for valid login token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validSince")]
		public string ValidSince { get; set; }
		
		/// <summary>
		/// Version of the user's password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class UserInfoProviderUserInfo
	{
		
		/// <summary>
		/// The user's display name at the IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// User's email at IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User's identifier at IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federatedId")]
		public string FederatedId { get; set; }
		
		/// <summary>
		/// User's phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The user's photo url at the IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		/// <summary>
		/// User's raw identifier directly returned from IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawId")]
		public string RawId { get; set; }
		
		/// <summary>
		/// User's screen name at Twitter or login name at Github.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenName")]
		public string ScreenName { get; set; }
	}
	
	/// <summary>
	/// Response of email signIn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailLinkSigninResponse
	{
		
		/// <summary>
		/// The user's email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Expiration time of STS id token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// The STS id token to login the newly signed in user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// Whether the user is new.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNewUser")]
		public System.Nullable<System.Boolean> IsNewUser { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#EmailLinkSigninResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#EmailLinkSigninResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#EmailLinkSigninResponse";
		
		/// <summary>
		/// The RP local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// The refresh token for the signed in user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	/// <summary>
	/// Template for an email template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailTemplate
	{
		
		/// <summary>
		/// Email body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Email body format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// From address of the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// From display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromDisplayName")]
		public string FromDisplayName { get; set; }
		
		/// <summary>
		/// Reply-to address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyTo")]
		public string ReplyTo { get; set; }
		
		/// <summary>
		/// Subject of the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	/// <summary>
	/// Response of getting account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAccountInfoResponse
	{
		
		/// <summary>
		/// The fixed string "identitytoolkit#GetAccountInfoResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#GetAccountInfoResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#GetAccountInfoResponse";
		
		/// <summary>
		/// The info of the users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserInfo[] Users { get; set; }
	}
	
	/// <summary>
	/// Response of getting a code for user confirmation (reset password, change email etc.).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetOobConfirmationCodeResponse
	{
		
		/// <summary>
		/// The email address that the email is sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#GetOobConfirmationCodeResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#GetOobConfirmationCodeResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#GetOobConfirmationCodeResponse";
		
		/// <summary>
		/// The code to be send to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oobCode")]
		public string OobCode { get; set; }
	}
	
	/// <summary>
	/// Response of getting recaptcha param.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRecaptchaParamResponse
	{
		
		/// <summary>
		/// The fixed string "identitytoolkit#GetRecaptchaParamResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#GetRecaptchaParamResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#GetRecaptchaParamResponse";
		
		/// <summary>
		/// Site key registered at recaptcha.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recaptchaSiteKey")]
		public string RecaptchaSiteKey { get; set; }
		
		/// <summary>
		/// The stoken field for the recaptcha widget, used to request captcha challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recaptchaStoken")]
		public string RecaptchaStoken { get; set; }
	}
	
	/// <summary>
	/// Request to get the IDP authentication URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyCreateAuthUriRequest
	{
		
		/// <summary>
		/// The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Explicitly specify the auth flow type. Currently only support "CODE_FLOW" type. The field is only used for Google provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authFlowType")]
		public string AuthFlowType { get; set; }
		
		/// <summary>
		/// The relying party OAuth client ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		/// <summary>
		/// The URI to which the IDP redirects the user after the federated login flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueUri")]
		public string ContinueUri { get; set; }
		
		/// <summary>
		/// The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customParameter")]
		public System.Collections.Generic.Dictionary<string, string> CustomParameter { get; set; }
		
		/// <summary>
		/// The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostedDomain")]
		public string HostedDomain { get; set; }
		
		/// <summary>
		/// The email or federated ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// The developer's consumer key for OpenId OAuth Extension
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthConsumerKey")]
		public string OauthConsumerKey { get; set; }
		
		/// <summary>
		/// Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthScope")]
		public string OauthScope { get; set; }
		
		/// <summary>
		/// Optional realm for OpenID protocol. The sub string "scheme://domain:port" of the param "continueUri" is used if this is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openidRealm")]
		public string OpenidRealm { get; set; }
		
		/// <summary>
		/// The native app package for OTA installation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otaApp")]
		public string OtaApp { get; set; }
		
		/// <summary>
		/// The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		/// <summary>
		/// The session_id passed by client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Tenant project number to be used for idp discovery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectNumber")]
		public string TenantProjectNumber { get; set; }
	}
	
	/// <summary>
	/// Request to delete account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyDeleteAccountRequest
	{
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// The GITKit token or STS id token of the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
	}
	
	/// <summary>
	/// Request to download user account in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyDownloadAccountRequest
	{
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// The max number of results to return in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.UInt32> MaxResults { get; set; }
		
		/// <summary>
		/// The token for the next page. This should be taken from the previous response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Specify which project (field value is actually project id) to operate. Only used when provided credential.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetProjectId")]
		public string TargetProjectId { get; set; }
	}
	
	/// <summary>
	/// Request to sign in with email.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyEmailLinkSigninRequest
	{
		
		/// <summary>
		/// The email address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Token for linking flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The confirmation code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oobCode")]
		public string OobCode { get; set; }
	}
	
	/// <summary>
	/// Request to get the account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyGetAccountInfoRequest
	{
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// The list of emails of the users to inquiry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string[] Email { get; set; }
		
		/// <summary>
		/// The GITKit token of the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The list of local ID's of the users to inquiry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string[] LocalId { get; set; }
		
		/// <summary>
		/// Privileged caller can query users by specified phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string[] PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Response of getting the project configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyGetProjectConfigResponse
	{
		
		/// <summary>
		/// Whether to allow password user sign in or sign up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPasswordUser")]
		public System.Nullable<System.Boolean> AllowPasswordUser { get; set; }
		
		/// <summary>
		/// Browser API key, needed when making http request to Apiary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Authorized domains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedDomains")]
		public string[] AuthorizedDomains { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeEmailTemplate")]
		public EmailTemplate ChangeEmailTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dynamicLinksDomain")]
		public string DynamicLinksDomain { get; set; }
		
		/// <summary>
		/// Whether anonymous user is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAnonymousUser")]
		public System.Nullable<System.Boolean> EnableAnonymousUser { get; set; }
		
		/// <summary>
		/// OAuth2 provider configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idpConfig")]
		public IdpConfig[] IdpConfig { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyResetPasswordTemplate")]
		public EmailTemplate LegacyResetPasswordTemplate { get; set; }
		
		/// <summary>
		/// Project ID of the relying party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetPasswordTemplate")]
		public EmailTemplate ResetPasswordTemplate { get; set; }
		
		/// <summary>
		/// Whether to use email sending provided by Firebear.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useEmailSending")]
		public System.Nullable<System.Boolean> UseEmailSending { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyEmailTemplate")]
		public EmailTemplate VerifyEmailTemplate { get; set; }
	}
	
	/// <summary>
	/// Template for a single idp configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdpConfig
	{
		
		/// <summary>
		/// OAuth2 client ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Whether this IDP is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Percent of users who will be prompted/redirected federated login for this IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experimentPercent")]
		public System.Nullable<System.Int32> ExperimentPercent { get; set; }
		
		/// <summary>
		/// OAuth2 provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// OAuth2 client secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// Whitelisted client IDs for audience check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whitelistedAudiences")]
		public string[] WhitelistedAudiences { get; set; }
	}
	
	/// <summary>
	/// Respone of getting public keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyGetPublicKeysResponse
	{
	}
	
	/// <summary>
	/// Request to reset the password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyResetPasswordRequest
	{
		
		/// <summary>
		/// The email address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The new password inputted by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// The old password inputted by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldPassword")]
		public string OldPassword { get; set; }
		
		/// <summary>
		/// The confirmation code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oobCode")]
		public string OobCode { get; set; }
	}
	
	/// <summary>
	/// Request for Identitytoolkit-SendVerificationCode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySendVerificationCodeRequest
	{
		
		/// <summary>
		/// Receipt of successful app token validation with APNS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosReceipt")]
		public string IosReceipt { get; set; }
		
		/// <summary>
		/// Secret delivered to iOS app via APNS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosSecret")]
		public string IosSecret { get; set; }
		
		/// <summary>
		/// The phone number to send the verification code to in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Recaptcha solution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recaptchaToken")]
		public string RecaptchaToken { get; set; }
	}
	
	/// <summary>
	/// Response for Identitytoolkit-SendVerificationCode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySendVerificationCodeResponse
	{
		
		/// <summary>
		/// Encrypted session information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionInfo")]
		public string SessionInfo { get; set; }
	}
	
	/// <summary>
	/// Request to set the account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySetAccountInfoRequest
	{
		
		/// <summary>
		/// The captcha challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaChallenge")]
		public string CaptchaChallenge { get; set; }
		
		/// <summary>
		/// Response to the captcha.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaResponse")]
		public string CaptchaResponse { get; set; }
		
		/// <summary>
		/// The timestamp when the account is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// The custom attributes to be set in the user's id token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributes")]
		public string CustomAttributes { get; set; }
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// The attributes users request to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteAttribute")]
		public string[] DeleteAttribute { get; set; }
		
		/// <summary>
		/// The IDPs the user request to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteProvider")]
		public string[] DeleteProvider { get; set; }
		
		/// <summary>
		/// Whether to disable the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableUser")]
		public System.Nullable<System.Boolean> DisableUser { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Mark the email as verified or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailVerified")]
		public System.Nullable<System.Boolean> EmailVerified { get; set; }
		
		/// <summary>
		/// The GITKit token of the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// Instance id token of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Last login timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginAt")]
		public string LastLoginAt { get; set; }
		
		/// <summary>
		/// The local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// The out-of-band code of the change email request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oobCode")]
		public string OobCode { get; set; }
		
		/// <summary>
		/// The new password of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Privileged caller can update user with specified phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The photo url of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The associated IDPs of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string[] Provider { get; set; }
		
		/// <summary>
		/// Whether return sts id token and refresh token instead of gitkit token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnSecureToken")]
		public System.Nullable<System.Boolean> ReturnSecureToken { get; set; }
		
		/// <summary>
		/// Mark the user to upgrade to federated login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeToFederatedLogin")]
		public System.Nullable<System.Boolean> UpgradeToFederatedLogin { get; set; }
		
		/// <summary>
		/// Timestamp in seconds for valid login token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validSince")]
		public string ValidSince { get; set; }
	}
	
	/// <summary>
	/// Request to set the project configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySetProjectConfigRequest
	{
		
		/// <summary>
		/// Whether to allow password user sign in or sign up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPasswordUser")]
		public System.Nullable<System.Boolean> AllowPasswordUser { get; set; }
		
		/// <summary>
		/// Browser API key, needed when making http request to Apiary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Authorized domains for widget redirect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedDomains")]
		public string[] AuthorizedDomains { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeEmailTemplate")]
		public EmailTemplate ChangeEmailTemplate { get; set; }
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// Whether to enable anonymous user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAnonymousUser")]
		public System.Nullable<System.Boolean> EnableAnonymousUser { get; set; }
		
		/// <summary>
		/// Oauth2 provider configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idpConfig")]
		public IdpConfig[] IdpConfig { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyResetPasswordTemplate")]
		public EmailTemplate LegacyResetPasswordTemplate { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetPasswordTemplate")]
		public EmailTemplate ResetPasswordTemplate { get; set; }
		
		/// <summary>
		/// Whether to use email sending provided by Firebear.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useEmailSending")]
		public System.Nullable<System.Boolean> UseEmailSending { get; set; }
		
		/// <summary>
		/// Template for an email template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyEmailTemplate")]
		public EmailTemplate VerifyEmailTemplate { get; set; }
	}
	
	/// <summary>
	/// Response of setting the project configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySetProjectConfigResponse
	{
		
		/// <summary>
		/// Project ID of the relying party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Request to sign out user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySignOutUserRequest
	{
		
		/// <summary>
		/// Instance id token of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// The local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
	}
	
	/// <summary>
	/// Response of signing out user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySignOutUserResponse
	{
		
		/// <summary>
		/// The local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
	}
	
	/// <summary>
	/// Request to signup new user, create anonymous user or anonymous user reauth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartySignupNewUserRequest
	{
		
		/// <summary>
		/// The captcha challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaChallenge")]
		public string CaptchaChallenge { get; set; }
		
		/// <summary>
		/// Response to the captcha.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaResponse")]
		public string CaptchaResponse { get; set; }
		
		/// <summary>
		/// Whether to disable the user. Only can be used by service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Mark the email as verified or not. Only can be used by service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailVerified")]
		public System.Nullable<System.Boolean> EmailVerified { get; set; }
		
		/// <summary>
		/// The GITKit token of the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// Instance id token of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Privileged caller can create user with specified user id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// The new password of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Privileged caller can create user with specified phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The photo url of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Tenant project number to be used for idp discovery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectNumber")]
		public string TenantProjectNumber { get; set; }
	}
	
	/// <summary>
	/// Request to upload user account in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyUploadAccountRequest
	{
		
		/// <summary>
		/// Whether allow overwrite existing account when user local_id exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowOverwrite")]
		public System.Nullable<System.Boolean> AllowOverwrite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockSize")]
		public System.Nullable<System.Int32> BlockSize { get; set; }
		
		/// <summary>
		/// The following 4 fields are for standard scrypt algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuMemCost")]
		public System.Nullable<System.Int32> CpuMemCost { get; set; }
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dkLen")]
		public System.Nullable<System.Int32> DkLen { get; set; }
		
		/// <summary>
		/// The password hash algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashAlgorithm")]
		public string HashAlgorithm { get; set; }
		
		/// <summary>
		/// Memory cost for hash calculation. Used by scrypt similar algorithms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryCost")]
		public System.Nullable<System.Int32> MemoryCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parallelization")]
		public System.Nullable<System.Int32> Parallelization { get; set; }
		
		/// <summary>
		/// Rounds for hash calculation. Used by scrypt and similar algorithms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounds")]
		public System.Nullable<System.Int32> Rounds { get; set; }
		
		/// <summary>
		/// The salt separator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saltSeparator")]
		public string SaltSeparator { get; set; }
		
		/// <summary>
		/// If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sanityCheck")]
		public System.Nullable<System.Boolean> SanityCheck { get; set; }
		
		/// <summary>
		/// The key for to hash the password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signerKey")]
		public string SignerKey { get; set; }
		
		/// <summary>
		/// Specify which project (field value is actually project id) to operate. Only used when provided credential.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetProjectId")]
		public string TargetProjectId { get; set; }
		
		/// <summary>
		/// The account info to be stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserInfo[] Users { get; set; }
	}
	
	/// <summary>
	/// Request to verify the IDP assertion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyVerifyAssertionRequest
	{
		
		/// <summary>
		/// When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoCreate")]
		public System.Nullable<System.Boolean> AutoCreate { get; set; }
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// The GITKit token of the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// Instance id token of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// The GITKit token for the non-trusted IDP pending to be confirmed by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingIdToken")]
		public string PendingIdToken { get; set; }
		
		/// <summary>
		/// The post body if the request is a HTTP POST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postBody")]
		public string PostBody { get; set; }
		
		/// <summary>
		/// The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestUri")]
		public string RequestUri { get; set; }
		
		/// <summary>
		/// Whether return 200 and IDP credential rather than throw exception when federated id is already linked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnIdpCredential")]
		public System.Nullable<System.Boolean> ReturnIdpCredential { get; set; }
		
		/// <summary>
		/// Whether to return refresh tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnRefreshToken")]
		public System.Nullable<System.Boolean> ReturnRefreshToken { get; set; }
		
		/// <summary>
		/// Whether return sts id token and refresh token instead of gitkit token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnSecureToken")]
		public System.Nullable<System.Boolean> ReturnSecureToken { get; set; }
		
		/// <summary>
		/// Session ID, which should match the one in previous createAuthUri request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Tenant project number to be used for idp discovery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectNumber")]
		public string TenantProjectNumber { get; set; }
	}
	
	/// <summary>
	/// Request to verify a custom token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyVerifyCustomTokenRequest
	{
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// Instance id token of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Whether return sts id token and refresh token instead of gitkit token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnSecureToken")]
		public System.Nullable<System.Boolean> ReturnSecureToken { get; set; }
		
		/// <summary>
		/// The custom token to verify
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Request to verify the password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyVerifyPasswordRequest
	{
		
		/// <summary>
		/// The captcha challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaChallenge")]
		public string CaptchaChallenge { get; set; }
		
		/// <summary>
		/// Response to the captcha.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaResponse")]
		public string CaptchaResponse { get; set; }
		
		/// <summary>
		/// GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedProjectNumber")]
		public string DelegatedProjectNumber { get; set; }
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The GITKit token of the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// Instance id token of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// The password inputed by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The GITKit token for the non-trusted IDP, which is to be confirmed by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingIdToken")]
		public string PendingIdToken { get; set; }
		
		/// <summary>
		/// Whether return sts id token and refresh token instead of gitkit token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnSecureToken")]
		public System.Nullable<System.Boolean> ReturnSecureToken { get; set; }
		
		/// <summary>
		/// For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantId")]
		public string TenantId { get; set; }
		
		/// <summary>
		/// Tenant project number to be used for idp discovery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectNumber")]
		public string TenantProjectNumber { get; set; }
	}
	
	/// <summary>
	/// Request for Identitytoolkit-VerifyPhoneNumber
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The session info previously returned by IdentityToolkit-SendVerificationCode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionInfo")]
		public string SessionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="temporaryProof")]
		public string TemporaryProof { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationProof")]
		public string VerificationProof { get; set; }
	}
	
	/// <summary>
	/// Response for Identitytoolkit-VerifyPhoneNumber
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNewUser")]
		public System.Nullable<System.Boolean> IsNewUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="temporaryProof")]
		public string TemporaryProof { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="temporaryProofExpiresIn")]
		public string TemporaryProofExpiresIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationProof")]
		public string VerificationProof { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationProofExpiresIn")]
		public string VerificationProofExpiresIn { get; set; }
	}
	
	/// <summary>
	/// Request of getting a code for user confirmation (reset password, change email etc.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Relyingparty
	{
		
		/// <summary>
		/// whether or not to install the android app on the device where the link is opened
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidInstallApp")]
		public System.Nullable<System.Boolean> AndroidInstallApp { get; set; }
		
		/// <summary>
		/// minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidMinimumVersion")]
		public string AndroidMinimumVersion { get; set; }
		
		/// <summary>
		/// android package name of the android app to handle the action code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidPackageName")]
		public string AndroidPackageName { get; set; }
		
		/// <summary>
		/// whether or not the app can handle the oob code without first going to web
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canHandleCodeInApp")]
		public System.Nullable<System.Boolean> CanHandleCodeInApp { get; set; }
		
		/// <summary>
		/// The recaptcha response from the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="captchaResp")]
		public string CaptchaResp { get; set; }
		
		/// <summary>
		/// The recaptcha challenge presented to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public string Challenge { get; set; }
		
		/// <summary>
		/// The url to continue to the Gitkit app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueUrl")]
		public string ContinueUrl { get; set; }
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// iOS app store id to download the app if it's not already installed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iOSAppStoreId")]
		public string IOSAppStoreId { get; set; }
		
		/// <summary>
		/// the iOS bundle id of iOS app to handle the action code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iOSBundleId")]
		public string IOSBundleId { get; set; }
		
		/// <summary>
		/// The user's Gitkit login token for email change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#relyingparty".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#relyingparty")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#relyingparty";
		
		/// <summary>
		/// The new email if the code is for email change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newEmail")]
		public string NewEmail { get; set; }
		
		/// <summary>
		/// The request type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestType")]
		public string RequestType { get; set; }
		
		/// <summary>
		/// The IP address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIp")]
		public string UserIp { get; set; }
	}
	
	/// <summary>
	/// Response of resetting the password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetPasswordResponse
	{
		
		/// <summary>
		/// The user's email. If the out-of-band code is for email recovery, the user's original email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#ResetPasswordResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#ResetPasswordResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#ResetPasswordResponse";
		
		/// <summary>
		/// If the out-of-band code is for email recovery, the user's new email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newEmail")]
		public string NewEmail { get; set; }
		
		/// <summary>
		/// The request type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestType")]
		public string RequestType { get; set; }
	}
	
	/// <summary>
	/// Respone of setting the account information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetAccountInfoResponse
	{
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// If email has been verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailVerified")]
		public System.Nullable<System.Boolean> EmailVerified { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// The Gitkit id token to login the newly sign up user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#SetAccountInfoResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#SetAccountInfoResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#SetAccountInfoResponse";
		
		/// <summary>
		/// The local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// The new email the user attempts to change to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newEmail")]
		public string NewEmail { get; set; }
		
		/// <summary>
		/// The user's hashed password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordHash")]
		public string PasswordHash { get; set; }
		
		/// <summary>
		/// The photo url of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The user's profiles at the associated IdPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerUserInfo")]
		public SetAccountInfoResponseProviderUserInfo[] SetAccountInfoResponseProviderUserInfo { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	public class SetAccountInfoResponseProviderUserInfo
	{
		
		/// <summary>
		/// The user's display name at the IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// User's identifier at IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federatedId")]
		public string FederatedId { get; set; }
		
		/// <summary>
		/// The user's photo url at the IDP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
	}
	
	/// <summary>
	/// Response of signing up new user, creating anonymous user or anonymous user reauth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignupNewUserResponse
	{
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The email of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// The Gitkit id token to login the newly sign up user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#SignupNewUserResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#SignupNewUserResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#SignupNewUserResponse";
		
		/// <summary>
		/// The RP local ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	/// <summary>
	/// Respone of uploading accounts in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadAccountResponse
	{
		
		/// <summary>
		/// The error encountered while processing the account info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public UploadAccountResponseError[] UploadAccountResponseError { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#UploadAccountResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#UploadAccountResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#UploadAccountResponse";
	}
	
	public class UploadAccountResponseError
	{
		
		/// <summary>
		/// The index of the malformed account, starting from 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Detailed error message for the account info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response of verifying the IDP assertion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyAssertionResponse
	{
		
		/// <summary>
		/// The action code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// URL for OTA app installation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInstallationUrl")]
		public string AppInstallationUrl { get; set; }
		
		/// <summary>
		/// The custom scheme used by mobile app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appScheme")]
		public string AppScheme { get; set; }
		
		/// <summary>
		/// The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		/// <summary>
		/// The birth date of the IdP account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// The display name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The email returned by the IdP. NOTE: The federated login user may not own the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// It's true if the email is recycled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailRecycled")]
		public System.Nullable<System.Boolean> EmailRecycled { get; set; }
		
		/// <summary>
		/// The value is true if the IDP is also the email provider. It means the user owns the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailVerified")]
		public System.Nullable<System.Boolean> EmailVerified { get; set; }
		
		/// <summary>
		/// Client error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// The unique ID identifies the IdP account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federatedId")]
		public string FederatedId { get; set; }
		
		/// <summary>
		/// The first name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The full name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// The ID token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputEmail")]
		public string InputEmail { get; set; }
		
		/// <summary>
		/// True if it's a new user sign-in, false if it's a returning user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNewUser")]
		public System.Nullable<System.Boolean> IsNewUser { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#VerifyAssertionResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#VerifyAssertionResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#VerifyAssertionResponse";
		
		/// <summary>
		/// The language preference of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The last name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// Whether the assertion is from a non-trusted IDP and need account linking confirmation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needConfirmation")]
		public System.Nullable<System.Boolean> NeedConfirmation { get; set; }
		
		/// <summary>
		/// Whether need client to supply email to complete the federated login flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needEmail")]
		public System.Nullable<System.Boolean> NeedEmail { get; set; }
		
		/// <summary>
		/// The nick name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickName")]
		public string NickName { get; set; }
		
		/// <summary>
		/// The OAuth2 access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthAccessToken")]
		public string OauthAccessToken { get; set; }
		
		/// <summary>
		/// The OAuth2 authorization code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthAuthorizationCode")]
		public string OauthAuthorizationCode { get; set; }
		
		/// <summary>
		/// The lifetime in seconds of the OAuth2 access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthExpireIn")]
		public System.Nullable<System.Int32> OauthExpireIn { get; set; }
		
		/// <summary>
		/// The OIDC id token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthIdToken")]
		public string OauthIdToken { get; set; }
		
		/// <summary>
		/// The user approved request token for the OpenID OAuth extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthRequestToken")]
		public string OauthRequestToken { get; set; }
		
		/// <summary>
		/// The scope for the OpenID OAuth extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthScope")]
		public string OauthScope { get; set; }
		
		/// <summary>
		/// The OAuth1 access token secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthTokenSecret")]
		public string OauthTokenSecret { get; set; }
		
		/// <summary>
		/// The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalEmail")]
		public string OriginalEmail { get; set; }
		
		/// <summary>
		/// The URI of the public accessible profiel picture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the "providerId" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the "identifier" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		/// <summary>
		/// Raw IDP-returned user info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawUserInfo")]
		public string RawUserInfo { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		/// The screen_name of a Twitter user or the login name at Github.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenName")]
		public string ScreenName { get; set; }
		
		/// <summary>
		/// The timezone of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// When action is 'map', contains the idps which can be used for confirmation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedProvider")]
		public string[] VerifiedProvider { get; set; }
	}
	
	/// <summary>
	/// Response from verifying a custom token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyCustomTokenResponse
	{
		
		/// <summary>
		/// If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// The GITKit token for authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// True if it's a new user sign-in, false if it's a returning user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNewUser")]
		public System.Nullable<System.Boolean> IsNewUser { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#VerifyCustomTokenResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#VerifyCustomTokenResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#VerifyCustomTokenResponse";
		
		/// <summary>
		/// If idToken is STS id token, then this field will be refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
	}
	
	/// <summary>
	/// Request of verifying the password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyPasswordResponse
	{
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The email returned by the IdP. NOTE: The federated login user may not own the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public string ExpiresIn { get; set; }
		
		/// <summary>
		/// The GITKit token for authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idToken")]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The fixed string "identitytoolkit#VerifyPasswordResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("identitytoolkit#VerifyPasswordResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "identitytoolkit#VerifyPasswordResponse";
		
		/// <summary>
		/// The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localId")]
		public string LocalId { get; set; }
		
		/// <summary>
		/// The OAuth2 access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthAccessToken")]
		public string OauthAccessToken { get; set; }
		
		/// <summary>
		/// The OAuth2 authorization code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthAuthorizationCode")]
		public string OauthAuthorizationCode { get; set; }
		
		/// <summary>
		/// The lifetime in seconds of the OAuth2 access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthExpireIn")]
		public System.Nullable<System.Int32> OauthExpireIn { get; set; }
		
		/// <summary>
		/// The URI of the user's photo at IdP
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
		
		/// <summary>
		/// If idToken is STS id token, then this field will be refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		/// Whether the email is registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registered")]
		public System.Nullable<System.Boolean> Registered { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates the URI used by the IdP to authenticate the user.
		/// Identitytoolkit_relyingparty_createAuthUri createAuthUri
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CreateAuthUriResponse> Identitytoolkit_relyingparty_createAuthUriAsync(IdentitytoolkitRelyingpartyCreateAuthUriRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createAuthUri";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateAuthUriResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete user account.
		/// Identitytoolkit_relyingparty_deleteAccount deleteAccount
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DeleteAccountResponse> Identitytoolkit_relyingparty_deleteAccountAsync(IdentitytoolkitRelyingpartyDeleteAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch download user accounts.
		/// Identitytoolkit_relyingparty_downloadAccount downloadAccount
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DownloadAccountResponse> Identitytoolkit_relyingparty_downloadAccountAsync(IdentitytoolkitRelyingpartyDownloadAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "downloadAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DownloadAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset password for a user.
		/// Identitytoolkit_relyingparty_emailLinkSignin emailLinkSignin
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<EmailLinkSigninResponse> Identitytoolkit_relyingparty_emailLinkSigninAsync(IdentitytoolkitRelyingpartyEmailLinkSigninRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "emailLinkSignin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmailLinkSigninResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the account info.
		/// Identitytoolkit_relyingparty_getAccountInfo getAccountInfo
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetAccountInfoResponse> Identitytoolkit_relyingparty_getAccountInfoAsync(IdentitytoolkitRelyingpartyGetAccountInfoRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getAccountInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAccountInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a code for user action confirmation.
		/// Identitytoolkit_relyingparty_getOobConfirmationCode getOobConfirmationCode
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetOobConfirmationCodeResponse> Identitytoolkit_relyingparty_getOobConfirmationCodeAsync(Relyingparty requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getOobConfirmationCode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetOobConfirmationCodeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project configuration.
		/// Identitytoolkit_relyingparty_getProjectConfig getProjectConfig
		/// </summary>
		/// <param name="delegatedProjectNumber">Delegated GCP project number of the request.</param>
		/// <param name="projectNumber">GCP project number of the request.</param>
		/// <returns>Successful response</returns>
		public async Task<IdentitytoolkitRelyingpartyGetProjectConfigResponse> Identitytoolkit_relyingparty_getProjectConfigAsync(string delegatedProjectNumber, string projectNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getProjectConfig?delegatedProjectNumber=" + (delegatedProjectNumber==null? "" : System.Uri.EscapeDataString(delegatedProjectNumber))+"&projectNumber=" + (projectNumber==null? "" : System.Uri.EscapeDataString(projectNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentitytoolkitRelyingpartyGetProjectConfigResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get recaptcha secure param.
		/// Identitytoolkit_relyingparty_getRecaptchaParam getRecaptchaParam
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GetRecaptchaParamResponse> Identitytoolkit_relyingparty_getRecaptchaParamAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getRecaptchaParam";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRecaptchaParamResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get token signing public key.
		/// Identitytoolkit_relyingparty_getPublicKeys publicKeys
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<IdentitytoolkitRelyingpartyGetPublicKeysResponse> Identitytoolkit_relyingparty_getPublicKeysAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "publicKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentitytoolkitRelyingpartyGetPublicKeysResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset password for a user.
		/// Identitytoolkit_relyingparty_resetPassword resetPassword
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ResetPasswordResponse> Identitytoolkit_relyingparty_resetPasswordAsync(IdentitytoolkitRelyingpartyResetPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resetPassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResetPasswordResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send SMS verification code.
		/// Identitytoolkit_relyingparty_sendVerificationCode sendVerificationCode
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<IdentitytoolkitRelyingpartySendVerificationCodeResponse> Identitytoolkit_relyingparty_sendVerificationCodeAsync(IdentitytoolkitRelyingpartySendVerificationCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sendVerificationCode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentitytoolkitRelyingpartySendVerificationCodeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set account info for a user.
		/// Identitytoolkit_relyingparty_setAccountInfo setAccountInfo
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SetAccountInfoResponse> Identitytoolkit_relyingparty_setAccountInfoAsync(IdentitytoolkitRelyingpartySetAccountInfoRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setAccountInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SetAccountInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set project configuration.
		/// Identitytoolkit_relyingparty_setProjectConfig setProjectConfig
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<IdentitytoolkitRelyingpartySetProjectConfigResponse> Identitytoolkit_relyingparty_setProjectConfigAsync(IdentitytoolkitRelyingpartySetProjectConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setProjectConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentitytoolkitRelyingpartySetProjectConfigResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sign out user.
		/// Identitytoolkit_relyingparty_signOutUser signOutUser
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<IdentitytoolkitRelyingpartySignOutUserResponse> Identitytoolkit_relyingparty_signOutUserAsync(IdentitytoolkitRelyingpartySignOutUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signOutUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentitytoolkitRelyingpartySignOutUserResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Signup new user.
		/// Identitytoolkit_relyingparty_signupNewUser signupNewUser
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SignupNewUserResponse> Identitytoolkit_relyingparty_signupNewUserAsync(IdentitytoolkitRelyingpartySignupNewUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signupNewUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SignupNewUserResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch upload existing user accounts.
		/// Identitytoolkit_relyingparty_uploadAccount uploadAccount
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<UploadAccountResponse> Identitytoolkit_relyingparty_uploadAccountAsync(IdentitytoolkitRelyingpartyUploadAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploadAccount";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UploadAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies the assertion returned by the IdP.
		/// Identitytoolkit_relyingparty_verifyAssertion verifyAssertion
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<VerifyAssertionResponse> Identitytoolkit_relyingparty_verifyAssertionAsync(IdentitytoolkitRelyingpartyVerifyAssertionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verifyAssertion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VerifyAssertionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies the developer asserted ID token.
		/// Identitytoolkit_relyingparty_verifyCustomToken verifyCustomToken
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<VerifyCustomTokenResponse> Identitytoolkit_relyingparty_verifyCustomTokenAsync(IdentitytoolkitRelyingpartyVerifyCustomTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verifyCustomToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VerifyCustomTokenResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies the user entered password.
		/// Identitytoolkit_relyingparty_verifyPassword verifyPassword
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<VerifyPasswordResponse> Identitytoolkit_relyingparty_verifyPasswordAsync(IdentitytoolkitRelyingpartyVerifyPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verifyPassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VerifyPasswordResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies ownership of a phone number and creates/updates the user account accordingly.
		/// Identitytoolkit_relyingparty_verifyPhoneNumber verifyPhoneNumber
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse> Identitytoolkit_relyingparty_verifyPhoneNumberAsync(IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verifyPhoneNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
