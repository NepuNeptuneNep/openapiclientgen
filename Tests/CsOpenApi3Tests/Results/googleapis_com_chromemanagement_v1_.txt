//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Android app information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1AndroidAppInfo
	{
		
		/// <summary>
		/// Output only. Permissions requested by an Android app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public GoogleChromeManagementV1AndroidAppPermission[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Permission requested by an Android app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1AndroidAppPermission
	{
		
		/// <summary>
		/// Output only. The type of the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Resource representing app details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1AppDetails
	{
		
		/// <summary>
		/// Android app information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidAppInfo")]
		public GoogleChromeManagementV1AndroidAppInfo AndroidAppInfo { get; set; }
		
		/// <summary>
		/// Output only. Unique store identifier for the item. Examples: "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome extension, "com.google.android.apps.docs" for the Google Drive Android app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Chrome Web Store app information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chromeAppInfo")]
		public GoogleChromeManagementV1ChromeAppInfo ChromeAppInfo { get; set; }
		
		/// <summary>
		/// Output only. App's description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The uri for the detail page of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUri")]
		public string DetailUri { get; set; }
		
		/// <summary>
		/// Output only. App's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. First published time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPublishTime")]
		public string FirstPublishTime { get; set; }
		
		/// <summary>
		/// Output only. Home page or Website uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public string HomepageUri { get; set; }
		
		/// <summary>
		/// Output only. A link to an image that can be used as an icon for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUri")]
		public string IconUri { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the app has to be paid for OR has paid content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPaidApp")]
		public System.Nullable<System.Boolean> IsPaidApp { get; set; }
		
		/// <summary>
		/// Output only. Latest published time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestPublishTime")]
		public string LatestPublishTime { get; set; }
		
		/// <summary>
		/// Output only. Format: name=customers/{customer_id}/apps/{chrome|android|web}/{app_id}@{version}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The URI pointing to the privacy policy of the app, if it was provided by the developer. Version-specific field that will only be set when the requested app version is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacyPolicyUri")]
		public string PrivacyPolicyUri { get; set; }
		
		/// <summary>
		/// Output only. The publisher of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Output only. Number of reviews received. Chrome Web Store review information will always be for the latest version of an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewNumber")]
		public string ReviewNumber { get; set; }
		
		/// <summary>
		/// Output only. The rating of the app (on 5 stars). Chrome Web Store review information will always be for the latest version of an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewRating")]
		public System.Nullable<System.Single> ReviewRating { get; set; }
		
		/// <summary>
		/// Output only. App version. A new revision is committed whenever a new version of the app is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceError")]
		public GoogleRpcStatus ServiceError { get; set; }
		
		/// <summary>
		/// Output only. App type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleChromeManagementV1AppDetailsType> Type { get; set; }
	}
	
	/// <summary>
	/// Chrome Web Store app information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ChromeAppInfo
	{
		
		/// <summary>
		/// Output only. Whether the app or extension is built and maintained by Google. Version-specific field that will only be set when the requested app version is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleOwned")]
		public System.Nullable<System.Boolean> GoogleOwned { get; set; }
		
		/// <summary>
		/// Output only. Whether the app or extension is in a published state in the Chrome Web Store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCwsHosted")]
		public System.Nullable<System.Boolean> IsCwsHosted { get; set; }
		
		/// <summary>
		/// Output only. Whether an app supports policy for extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isExtensionPolicySupported")]
		public System.Nullable<System.Boolean> IsExtensionPolicySupported { get; set; }
		
		/// <summary>
		/// Output only. Whether the app is only for Kiosk mode on ChromeOS devices
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isKioskOnly")]
		public System.Nullable<System.Boolean> IsKioskOnly { get; set; }
		
		/// <summary>
		/// Output only. Whether the app or extension is a theme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTheme")]
		public System.Nullable<System.Boolean> IsTheme { get; set; }
		
		/// <summary>
		/// Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kioskEnabled")]
		public System.Nullable<System.Boolean> KioskEnabled { get; set; }
		
		/// <summary>
		/// Output only. The minimum number of users using this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minUserCount")]
		public System.Nullable<System.Int32> MinUserCount { get; set; }
		
		/// <summary>
		/// Output only. Every custom permission requested by the app. Version-specific field that will only be set when the requested app version is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public GoogleChromeManagementV1ChromeAppPermission[] Permissions { get; set; }
		
		/// <summary>
		/// Output only. Every permission giving access to domains or broad host patterns. ( e.g. www.google.com). This includes the matches from content scripts as well as hosts in the permissions node of the manifest. Version-specific field that will only be set when the requested app version is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteAccess")]
		public GoogleChromeManagementV1ChromeAppSiteAccess[] SiteAccess { get; set; }
		
		/// <summary>
		/// Output only. The app developer has enabled support for their app. Version-specific field that will only be set when the requested app version is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportEnabled")]
		public System.Nullable<System.Boolean> SupportEnabled { get; set; }
		
		/// <summary>
		/// Output only. Types of an item in the Chrome Web Store
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleChromeManagementV1ChromeAppInfoType> Type { get; set; }
	}
	
	/// <summary>
	/// Permission requested by a Chrome app or extension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ChromeAppPermission
	{
		
		/// <summary>
		/// Output only. If available, whether this permissions grants the app/extension access to user data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessUserData")]
		public System.Nullable<System.Boolean> AccessUserData { get; set; }
		
		/// <summary>
		/// Output only. If available, a URI to a page that has documentation for the current permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationUri")]
		public string DocumentationUri { get; set; }
		
		/// <summary>
		/// Output only. The type of the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represent one host permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ChromeAppSiteAccess
	{
		
		/// <summary>
		/// Output only. This can contain very specific hosts, or patterns like "*.com" for instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostMatch")]
		public string HostMatch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1ChromeAppInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTENSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHERS = 2,
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleRpcStatus
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1AppDetailsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_ITEM_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHROME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 3,
	}
	
	/// <summary>
	/// Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceAudioStatus](https://chromeenterprise.google/policies/#ReportDeviceAudioStatus) * Data Collection Frequency: 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1AudioStatusReport
	{
		
		/// <summary>
		/// Output only. Active input device's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputDevice")]
		public string InputDevice { get; set; }
		
		/// <summary>
		/// Output only. Active input device's gain in [0, 100].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputGain")]
		public System.Nullable<System.Int32> InputGain { get; set; }
		
		/// <summary>
		/// Output only. Is active input device mute or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputMute")]
		public System.Nullable<System.Boolean> InputMute { get; set; }
		
		/// <summary>
		/// Output only. Active output device's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputDevice")]
		public string OutputDevice { get; set; }
		
		/// <summary>
		/// Output only. Is active output device mute or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputMute")]
		public System.Nullable<System.Boolean> OutputMute { get; set; }
		
		/// <summary>
		/// Output only. Active output device's volume in [0, 100].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputVolume")]
		public System.Nullable<System.Int32> OutputVolume { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of when the sample was collected on device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
	}
	
	/// <summary>
	/// Information about the battery. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_BATTERY_INFO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1BatteryInfo
	{
		
		/// <summary>
		/// Output only. Design capacity (mAmpere-hours).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designCapacity")]
		public string DesignCapacity { get; set; }
		
		/// <summary>
		/// Output only. Designed minimum output voltage (mV)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designMinVoltage")]
		public System.Nullable<System.Int32> DesignMinVoltage { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufactureDate")]
		public GoogleTypeDate ManufactureDate { get; set; }
		
		/// <summary>
		/// Output only. Battery manufacturer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Output only. Battery serial number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Output only. Technology of the battery. Example: Li-ion
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="technology")]
		public string Technology { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleTypeDate
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Sampling data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1BatterySampleReport
	{
		
		/// <summary>
		/// Output only. Battery charge percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargeRate")]
		public System.Nullable<System.Int32> ChargeRate { get; set; }
		
		/// <summary>
		/// Output only. Battery current (mA).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public string Current { get; set; }
		
		/// <summary>
		/// Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dischargeRate")]
		public System.Nullable<System.Int32> DischargeRate { get; set; }
		
		/// <summary>
		/// Output only. Battery remaining capacity (mAmpere-hours).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingCapacity")]
		public string RemainingCapacity { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of when the sample was collected on device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Output only. Battery status read from sysfs. Example: Discharging
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Output only. Temperature in Celsius degrees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperature")]
		public System.Nullable<System.Int32> Temperature { get; set; }
		
		/// <summary>
		/// Output only. Battery voltage (millivolt).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voltage")]
		public string Voltage { get; set; }
	}
	
	/// <summary>
	/// Status data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_BATTERY_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1BatteryStatusReport
	{
		
		/// <summary>
		/// Output only. Battery health.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryHealth")]
		public System.Nullable<GoogleChromeManagementV1BatteryStatusReportBatteryHealth> BatteryHealth { get; set; }
		
		/// <summary>
		/// Output only. Cycle count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycleCount")]
		public System.Nullable<System.Int32> CycleCount { get; set; }
		
		/// <summary>
		/// Output only. Full charge capacity (mAmpere-hours).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullChargeCapacity")]
		public string FullChargeCapacity { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of when the sample was collected on device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Output only. Sampling data for the battery sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sample")]
		public GoogleChromeManagementV1BatterySampleReport[] Sample { get; set; }
		
		/// <summary>
		/// Output only. Battery serial number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1BatteryStatusReportBatteryHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATTERY_HEALTH_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATTERY_HEALTH_NORMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATTERY_REPLACE_SOON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATTERY_REPLACE_NOW = 3,
	}
	
	/// <summary>
	/// Boot performance report of a device. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceBootMode](https://chromeenterprise.google/policies/#ReportDeviceBootMode) * Data Collection Frequency: On every boot up event * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_OS_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1BootPerformanceReport
	{
		
		/// <summary>
		/// Total time to boot up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootUpDuration")]
		public string BootUpDuration { get; set; }
		
		/// <summary>
		/// The timestamp when power came on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootUpTime")]
		public string BootUpTime { get; set; }
		
		/// <summary>
		/// Timestamp when the report was collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Total time since shutdown start to power off.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shutdownDuration")]
		public string ShutdownDuration { get; set; }
		
		/// <summary>
		/// The shutdown reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shutdownReason")]
		public System.Nullable<GoogleChromeManagementV1BootPerformanceReportShutdownReason> ShutdownReason { get; set; }
		
		/// <summary>
		/// The timestamp when shutdown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shutdownTime")]
		public string ShutdownTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1BootPerformanceReportShutdownReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUTDOWN_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_UPDATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW_BATTERY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 4,
	}
	
	/// <summary>
	/// Describes a browser version and its install count.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1BrowserVersion
	{
		
		/// <summary>
		/// Output only. The release channel of the installed browser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<GoogleChromeManagementV1BrowserVersionChannel> Channel { get; set; }
		
		/// <summary>
		/// Output only. Count grouped by device_system and major version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Output only. Version of the system-specified operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceOsVersion")]
		public string DeviceOsVersion { get; set; }
		
		/// <summary>
		/// Output only. The device operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="system")]
		public System.Nullable<GoogleChromeManagementV1BrowserVersionSystem> System { get; set; }
		
		/// <summary>
		/// Output only. The full version of the installed browser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1BrowserVersionChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_CHANNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STABLE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1BrowserVersionSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SYSTEM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_OTHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ANDROID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_IOS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_CROS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_WINDOWS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_MAC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_LINUX = 7,
	}
	
	/// <summary>
	/// Details of an app installation request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ChromeAppRequest
	{
		
		/// <summary>
		/// Output only. Format: app_details=customers/{customer_id}/apps/chrome/{app_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appDetails")]
		public string AppDetails { get; set; }
		
		/// <summary>
		/// Output only. Unique store identifier for the app. Example: "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Output only. The uri for the detail page of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailUri")]
		public string DetailUri { get; set; }
		
		/// <summary>
		/// Output only. App's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. A link to an image that can be used as an icon for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUri")]
		public string IconUri { get; set; }
		
		/// <summary>
		/// Output only. The timestamp of the most recently made request for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestRequestTime")]
		public string LatestRequestTime { get; set; }
		
		/// <summary>
		/// Output only. Total count of requests for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestCount")]
		public string RequestCount { get; set; }
	}
	
	/// <summary>
	/// Response containing summary of requested app installations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountChromeAppRequestsResponse
	{
		
		/// <summary>
		/// Token to specify the next page in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Count of requested apps matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedApps")]
		public GoogleChromeManagementV1ChromeAppRequest[] RequestedApps { get; set; }
		
		/// <summary>
		/// Total number of matching app requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response containing counts for browsers that need attention.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse
	{
		
		/// <summary>
		/// Number of browsers that haven’t had any recent activity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRecentActivityCount")]
		public string NoRecentActivityCount { get; set; }
		
		/// <summary>
		/// Number of browsers that are pending an OS update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingBrowserUpdateCount")]
		public string PendingBrowserUpdateCount { get; set; }
		
		/// <summary>
		/// Number of browsers that have been recently enrolled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentlyEnrolledCount")]
		public string RecentlyEnrolledCount { get; set; }
	}
	
	/// <summary>
	/// Response containing a list of devices expiring in each month of a selected time frame. Counts are grouped by model and Auto Update Expiration date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse
	{
		
		/// <summary>
		/// The list of reports sorted by auto update expiration date in ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceAueCountReports")]
		public GoogleChromeManagementV1DeviceAueCountReport[] DeviceAueCountReports { get; set; }
	}
	
	/// <summary>
	/// Report for CountChromeDevicesPerAueDateResponse, contains the count of devices of a specific model and auto update expiration range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1DeviceAueCountReport
	{
		
		/// <summary>
		/// Enum value of month corresponding to the auto update expiration date in UTC time zone. If the device is already expired, this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aueMonth")]
		public System.Nullable<GoogleChromeManagementV1DeviceAueCountReportAueMonth> AueMonth { get; set; }
		
		/// <summary>
		/// Int value of year corresponding to the Auto Update Expiration date in UTC time zone. If the device is already expired, this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aueYear")]
		public string AueYear { get; set; }
		
		/// <summary>
		/// Count of devices of this model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Boolean value for whether or not the device has already expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expired")]
		public System.Nullable<System.Boolean> Expired { get; set; }
		
		/// <summary>
		/// Public model name of the devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1DeviceAueCountReportAueMonth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JANUARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEBRUARY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APRIL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUNE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JULY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUGUST = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEPTEMBER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCTOBER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOVEMBER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECEMBER = 12,
	}
	
	/// <summary>
	/// Response containing counts for devices that need attention.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse
	{
		
		/// <summary>
		/// Number of ChromeOS devices have not synced policies in the past 28 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRecentPolicySyncCount")]
		public string NoRecentPolicySyncCount { get; set; }
		
		/// <summary>
		/// Number of ChromeOS devices that have not seen any user activity in the past 28 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRecentUserActivityCount")]
		public string NoRecentUserActivityCount { get; set; }
		
		/// <summary>
		/// Number of devices whose OS version is not compliant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersionNotCompliantCount")]
		public string OsVersionNotCompliantCount { get; set; }
		
		/// <summary>
		/// Number of devices that are pending an OS update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingUpdate")]
		public string PendingUpdate { get; set; }
		
		/// <summary>
		/// Number of devices that are unable to apply a policy due to an OS version mismatch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsupportedPolicyCount")]
		public string UnsupportedPolicyCount { get; set; }
	}
	
	/// <summary>
	/// Response containing a list of devices with a specific type of hardware specification from the requested hardware type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse
	{
		
		/// <summary>
		/// The DeviceHardwareCountReport for device cpu type (for example Intel(R) Core(TM) i7-10610U CPU @ 1.80GHz).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuReports")]
		public GoogleChromeManagementV1DeviceHardwareCountReport[] CpuReports { get; set; }
		
		/// <summary>
		/// The DeviceHardwareCountReport for device memory amount in gigabytes (for example 16).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryReports")]
		public GoogleChromeManagementV1DeviceHardwareCountReport[] MemoryReports { get; set; }
		
		/// <summary>
		/// The DeviceHardwareCountReport for device model type (for example Acer C7 Chromebook).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelReports")]
		public GoogleChromeManagementV1DeviceHardwareCountReport[] ModelReports { get; set; }
		
		/// <summary>
		/// The DeviceHardwareCountReport for device storage amount in gigabytes (for example 128).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageReports")]
		public GoogleChromeManagementV1DeviceHardwareCountReport[] StorageReports { get; set; }
	}
	
	/// <summary>
	/// Report for CountChromeDevicesPerHardwareSpecResponse, contains the count of devices with a unique hardware specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1DeviceHardwareCountReport
	{
		
		/// <summary>
		/// Public name of the hardware specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Count of devices with a unique hardware specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
	}
	
	/// <summary>
	/// Response containing requested browser versions details and counts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountChromeVersionsResponse
	{
		
		/// <summary>
		/// List of all browser versions and their install counts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browserVersions")]
		public GoogleChromeManagementV1BrowserVersion[] BrowserVersions { get; set; }
		
		/// <summary>
		/// Token to specify the next page of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Total number browser versions matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response containing details of queried installed apps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountInstalledAppsResponse
	{
		
		/// <summary>
		/// List of installed apps matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installedApps")]
		public GoogleChromeManagementV1InstalledApp[] InstalledApps { get; set; }
		
		/// <summary>
		/// Token to specify the next page of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Total number of installed apps matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Describes an installed app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1InstalledApp
	{
		
		/// <summary>
		/// Output only. Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Output only. How the app was installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInstallType")]
		public System.Nullable<GoogleChromeManagementV1InstalledAppAppInstallType> AppInstallType { get; set; }
		
		/// <summary>
		/// Output only. Source of the installed app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appSource")]
		public System.Nullable<GoogleChromeManagementV1InstalledAppAppSource> AppSource { get; set; }
		
		/// <summary>
		/// Output only. Type of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appType")]
		public System.Nullable<GoogleChromeManagementV1InstalledAppAppType> AppType { get; set; }
		
		/// <summary>
		/// Output only. Count of browser devices with this app installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browserDeviceCount")]
		public string BrowserDeviceCount { get; set; }
		
		/// <summary>
		/// Output only. Description of the installed app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. Whether the app is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Output only. Name of the installed app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Homepage uri of the installed app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepageUri")]
		public string HomepageUri { get; set; }
		
		/// <summary>
		/// Output only. Count of ChromeOS users with this app installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osUserCount")]
		public string OsUserCount { get; set; }
		
		/// <summary>
		/// Output only. Permissions of the installed app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1InstalledAppAppInstallType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_INSTALL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIDELOAD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1InstalledAppAppSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHROME_WEBSTORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAY_STORE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1InstalledAppAppType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTENSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THEME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTED_APP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_APP = 5,
	}
	
	/// <summary>
	/// Response containing a summary printing report for each printer from the specified organizational unit for the requested time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountPrintJobsByPrinterResponse
	{
		
		/// <summary>
		/// Pagination token for requesting the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of PrinterReports matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerReports")]
		public GoogleChromeManagementV1PrinterReport[] PrinterReports { get; set; }
		
		/// <summary>
		/// Total number of printers matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public string TotalSize { get; set; }
	}
	
	/// <summary>
	/// Report for CountPrintJobsByPrinter, contains statistics on printer usage. Contains the total number of print jobs initiated with this printer, the number of users and the number of devices that have initiated at least one print job with this printer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1PrinterReport
	{
		
		/// <summary>
		/// Number of chrome devices that have been used to send print jobs to the specified printer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCount")]
		public string DeviceCount { get; set; }
		
		/// <summary>
		/// Number of print jobs sent to the printer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCount")]
		public string JobCount { get; set; }
		
		/// <summary>
		/// Printer name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printer")]
		public string Printer { get; set; }
		
		/// <summary>
		/// Printer API ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerId")]
		public string PrinterId { get; set; }
		
		/// <summary>
		/// Printer model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerModel")]
		public string PrinterModel { get; set; }
		
		/// <summary>
		/// Number of users that have sent print jobs to the printer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCount")]
		public string UserCount { get; set; }
	}
	
	/// <summary>
	/// Response containing a summary printing report for each user that has initiated a print job with a printer from the specified organizational unit during the requested time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CountPrintJobsByUserResponse
	{
		
		/// <summary>
		/// Pagination token for requesting the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Total number of users matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public string TotalSize { get; set; }
		
		/// <summary>
		/// List of UserPrintReports matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userPrintReports")]
		public GoogleChromeManagementV1UserPrintReport[] UserPrintReports { get; set; }
	}
	
	/// <summary>
	/// Report for CountPrintJobsByUser, contains printing statistics for a user. Contains the number of printers, the number of devices used to initiate print jobs, and the number of print jobs initiated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1UserPrintReport
	{
		
		/// <summary>
		/// Number of chrome devices that have been used to initiate print jobs by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceCount")]
		public string DeviceCount { get; set; }
		
		/// <summary>
		/// Number of print jobs initiated by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCount")]
		public string JobCount { get; set; }
		
		/// <summary>
		/// Number of printers used by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerCount")]
		public string PrinterCount { get; set; }
		
		/// <summary>
		/// The primary e-mail address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// The unique Directory API ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// CPU specifications for the device * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_CPU_INFO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CpuInfo
	{
		
		/// <summary>
		/// Output only. Architecture type for the CPU. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public System.Nullable<GoogleChromeManagementV1CpuInfoArchitecture> Architecture { get; set; }
		
		/// <summary>
		/// Output only. Whether keylocker is configured.`TRUE` = Enabled; `FALSE` = disabled. Only reported if keylockerSupported = `TRUE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keylockerConfigured")]
		public System.Nullable<System.Boolean> KeylockerConfigured { get; set; }
		
		/// <summary>
		/// Output only. Whether keylocker is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keylockerSupported")]
		public System.Nullable<System.Boolean> KeylockerSupported { get; set; }
		
		/// <summary>
		/// Output only. The max CPU clock speed in kHz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxClockSpeed")]
		public System.Nullable<System.Int32> MaxClockSpeed { get; set; }
		
		/// <summary>
		/// Output only. The CPU model name. Example: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1CpuInfoArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHITECTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X64 = 1,
	}
	
	/// <summary>
	/// Provides information about the status of the CPU. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Every 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_CPU_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CpuStatusReport
	{
		
		/// <summary>
		/// Output only. CPU temperature sample info per CPU core in Celsius
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuTemperatureInfo")]
		public GoogleChromeManagementV1CpuTemperatureInfo[] CpuTemperatureInfo { get; set; }
		
		/// <summary>
		/// Output only. Sample of CPU utilization (0-100 percent).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuUtilizationPct")]
		public System.Nullable<System.Int32> CpuUtilizationPct { get; set; }
		
		/// <summary>
		/// Output only. The timestamp in milliseconds representing time at which this report was sampled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Output only. Frequency the report is sampled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleFrequency")]
		public string SampleFrequency { get; set; }
	}
	
	/// <summary>
	/// CPU temperature of a device. Sampled per CPU core in Celsius. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Every 10 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1CpuTemperatureInfo
	{
		
		/// <summary>
		/// Output only. CPU label. Example: Core 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Output only. CPU temperature in Celsius.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temperatureCelsius")]
		public System.Nullable<System.Int32> TemperatureCelsius { get; set; }
	}
	
	/// <summary>
	/// Describes a device reporting Chrome browser information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1Device
	{
		
		/// <summary>
		/// Output only. The ID of the device that reported this Chrome browser information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Output only. The name of the machine within its local network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machine")]
		public string Machine { get; set; }
	}
	
	/// <summary>
	/// Device activity report. * Granular permission needed: TELEMETRY_API_DEVICE_ACTIVITY_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1DeviceActivityReport
	{
		
		/// <summary>
		/// Output only. Device activity state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceActivityState")]
		public System.Nullable<GoogleChromeManagementV1DeviceActivityReportDeviceActivityState> DeviceActivityState { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of when the report was collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1DeviceActivityReportDeviceActivityState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_ACTIVITY_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCKED = 3,
	}
	
	/// <summary>
	/// Status of the single storage device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1DiskInfo
	{
		
		/// <summary>
		/// Output only. Number of bytes read since last boot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesReadThisSession")]
		public string BytesReadThisSession { get; set; }
		
		/// <summary>
		/// Output only. Number of bytes written since last boot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesWrittenThisSession")]
		public string BytesWrittenThisSession { get; set; }
		
		/// <summary>
		/// Output only. Time spent discarding since last boot. Discarding is writing to clear blocks which are no longer in use. Supported on kernels 4.18+.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discardTimeThisSession")]
		public string DiscardTimeThisSession { get; set; }
		
		/// <summary>
		/// Output only. Disk health.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="health")]
		public string Health { get; set; }
		
		/// <summary>
		/// Output only. Counts the time the disk and queue were busy, so unlike the fields above, parallel requests are not counted multiple times.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ioTimeThisSession")]
		public string IoTimeThisSession { get; set; }
		
		/// <summary>
		/// Output only. Disk manufacturer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Output only. Disk model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Output only. Time spent reading from disk since last boot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTimeThisSession")]
		public string ReadTimeThisSession { get; set; }
		
		/// <summary>
		/// Output only. Disk serial number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Output only. Disk size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeBytes")]
		public string SizeBytes { get; set; }
		
		/// <summary>
		/// Output only. Disk type: eMMC / NVMe / ATA / SCSI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Output only. Disk volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeIds")]
		public string[] VolumeIds { get; set; }
		
		/// <summary>
		/// Output only. Time spent writing to disk since last boot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeTimeThisSession")]
		public string WriteTimeThisSession { get; set; }
	}
	
	/// <summary>
	/// Information of a display device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1DisplayDevice
	{
		
		/// <summary>
		/// Output only. Display height in millimeters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayHeightMm")]
		public System.Nullable<System.Int32> DisplayHeightMm { get; set; }
		
		/// <summary>
		/// Output only. Display device name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Display width in millimeters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayWidthMm")]
		public System.Nullable<System.Int32> DisplayWidthMm { get; set; }
		
		/// <summary>
		/// Output only. Is display internal or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internal")]
		public System.Nullable<System.Boolean> Internal { get; set; }
		
		/// <summary>
		/// Output only. Year of manufacture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufactureYear")]
		public System.Nullable<System.Int32> ManufactureYear { get; set; }
		
		/// <summary>
		/// Output only. Three letter manufacturer ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerId")]
		public string ManufacturerId { get; set; }
		
		/// <summary>
		/// Output only. Manufacturer product code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public System.Nullable<System.Int32> ModelId { get; set; }
	}
	
	/// <summary>
	/// Information for a display.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1DisplayInfo
	{
		
		/// <summary>
		/// Output only. Represents the graphics card device id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Output only. Display device name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Indicates if display is internal or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInternal")]
		public System.Nullable<System.Boolean> IsInternal { get; set; }
		
		/// <summary>
		/// Output only. Refresh rate in Hz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshRate")]
		public System.Nullable<System.Int32> RefreshRate { get; set; }
		
		/// <summary>
		/// Output only. Resolution height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolutionHeight")]
		public System.Nullable<System.Int32> ResolutionHeight { get; set; }
		
		/// <summary>
		/// Output only. Resolution width in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolutionWidth")]
		public System.Nullable<System.Int32> ResolutionWidth { get; set; }
	}
	
	/// <summary>
	/// Response containing a list of print jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1EnumeratePrintJobsResponse
	{
		
		/// <summary>
		/// A token, which can be used in a subsequent request to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of requested print jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printJobs")]
		public GoogleChromeManagementV1PrintJob[] PrintJobs { get; set; }
		
		/// <summary>
		/// Total number of print jobs matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public string TotalSize { get; set; }
	}
	
	/// <summary>
	/// Represents a request to print a document that has been submitted to a printer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1PrintJob
	{
		
		/// <summary>
		/// Color mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorMode")]
		public System.Nullable<GoogleChromeManagementV1PrintJobColorMode> ColorMode { get; set; }
		
		/// <summary>
		/// Print job completion timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Number of copies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyCount")]
		public System.Nullable<System.Int32> CopyCount { get; set; }
		
		/// <summary>
		/// Print job creation timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Number of pages in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentPageCount")]
		public System.Nullable<System.Int32> DocumentPageCount { get; set; }
		
		/// <summary>
		/// Duplex mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplexMode")]
		public System.Nullable<GoogleChromeManagementV1PrintJobDuplexMode> DuplexMode { get; set; }
		
		/// <summary>
		/// Unique ID of the print job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the printer used for printing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printer")]
		public string Printer { get; set; }
		
		/// <summary>
		/// API ID of the printer used for printing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="printerId")]
		public string PrinterId { get; set; }
		
		/// <summary>
		/// The final state of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleChromeManagementV1PrintJobState> State { get; set; }
		
		/// <summary>
		/// The title of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The primary e-mail address of the user who submitted the print job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// The unique Directory API ID of the user who submitted the print job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1PrintJobColorMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLOR_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK_AND_WHITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLOR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1PrintJobDuplexMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLEX_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_SIDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWO_SIDED_LONG_EDGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWO_SIDED_SHORT_EDGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1PrintJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Response containing a list of devices with queried app installed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1FindInstalledAppDevicesResponse
	{
		
		/// <summary>
		/// A list of devices which have the app installed. Sorted in ascending alphabetical order on the Device.machine field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public GoogleChromeManagementV1Device[] Devices { get; set; }
		
		/// <summary>
		/// Token to specify the next page of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Total number of devices matching request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Information of a graphics adapter (GPU).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1GraphicsAdapterInfo
	{
		
		/// <summary>
		/// Output only. Adapter name. Example: Mesa DRI Intel(R) UHD Graphics 620 (Kabylake GT2).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapter")]
		public string Adapter { get; set; }
		
		/// <summary>
		/// Output only. Represents the graphics card device id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Output only. Version of the GPU driver.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driverVersion")]
		public string DriverVersion { get; set; }
	}
	
	/// <summary>
	/// Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1GraphicsInfo
	{
		
		/// <summary>
		/// Information of a graphics adapter (GPU).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterInfo")]
		public GoogleChromeManagementV1GraphicsAdapterInfo AdapterInfo { get; set; }
		
		/// <summary>
		/// Output only. Information about the display(s) of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDevices")]
		public GoogleChromeManagementV1DisplayDevice[] DisplayDevices { get; set; }
		
		/// <summary>
		/// Output only. Is ePrivacy screen supported or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eprivacySupported")]
		public System.Nullable<System.Boolean> EprivacySupported { get; set; }
		
		/// <summary>
		/// Information on the device touch screen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="touchScreenInfo")]
		public GoogleChromeManagementV1TouchScreenInfo TouchScreenInfo { get; set; }
	}
	
	/// <summary>
	/// Information on the device touch screen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TouchScreenInfo
	{
		
		/// <summary>
		/// Output only. List of the internal touch screen devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public GoogleChromeManagementV1TouchScreenDevice[] Devices { get; set; }
		
		/// <summary>
		/// Output only. Touchpad library name used by the input stack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="touchpadLibrary")]
		public string TouchpadLibrary { get; set; }
	}
	
	/// <summary>
	/// Information of an internal touch screen device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TouchScreenDevice
	{
		
		/// <summary>
		/// Output only. Touch screen device display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Touch screen device is stylus capable or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stylusCapable")]
		public System.Nullable<System.Boolean> StylusCapable { get; set; }
		
		/// <summary>
		/// Output only. Number of touch points supported on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="touchPointCount")]
		public System.Nullable<System.Int32> TouchPointCount { get; set; }
	}
	
	/// <summary>
	/// Information of the graphics subsystem. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceGraphicsInfo](https://chromeenterprise.google/policies/#ReportDeviceGraphicsInfo) * Data Collection Frequency: 3 hours. * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1GraphicsStatusReport
	{
		
		/// <summary>
		/// Output only. Information about the displays for the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displays")]
		public GoogleChromeManagementV1DisplayInfo[] Displays { get; set; }
		
		/// <summary>
		/// Output only. Time at which the graphics data was reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
	}
	
	/// <summary>
	/// Heartbeat status report of a device. * Available for Kiosks * This field provides online/offline/unknown status of a device and will only be included if the status has changed (e.g. Online -> Offline) * Data for this field is controlled via policy: [HeartbeatEnabled](https://chromeenterprise.google/policies/#HeartbeatEnabled) [More Info](https://support.google.com/chrome/a/answer/6179663#:~:text=On%20the%20Chrome,device%20status%20alerts) * Heartbeat Frequency: 2 mins * Note: If a device goes offline, it can take up to 12 minutes for the online status of the device to be updated * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: N/A * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_DEVICE_ACTIVITY_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1HeartbeatStatusReport
	{
		
		/// <summary>
		/// Timestamp of when status changed was detected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// State the device changed to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleChromeManagementV1HeartbeatStatusReportState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1HeartbeatStatusReportState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFLINE = 3,
	}
	
	/// <summary>
	/// Data that describes the result of the HTTPS latency diagnostics routine, with the HTTPS requests issued to Google websites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1HttpsLatencyRoutineData
	{
		
		/// <summary>
		/// Output only. HTTPS latency if routine succeeded or failed because of HIGH_LATENCY or VERY_HIGH_LATENCY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency")]
		public string Latency { get; set; }
		
		/// <summary>
		/// Output only. HTTPS latency routine problem if a problem occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="problem")]
		public System.Nullable<GoogleChromeManagementV1HttpsLatencyRoutineDataProblem> Problem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1HttpsLatencyRoutineDataProblem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS_LATENCY_PROBLEM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_DNS_RESOLUTIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_HTTPS_REQUESTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_LATENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERY_HIGH_LATENCY = 4,
	}
	
	/// <summary>
	/// Kiosk app status report of a device. * Available for Kiosks * This field provides the app id and version number running on a kiosk device and the timestamp of when the report was last updated * Data for this field is controlled via policy: [ReportDeviceSessionStatus](https://chromeenterprise.google/policies/#ReportDeviceSessionStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_APPS_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1KioskAppStatusReport
	{
		
		/// <summary>
		/// App id of kiosk app for example "mdmkkicfmmkgmpkmkdikhlbggogpicma"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// App version number of kiosk app for example "1.10.118"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appVersion")]
		public string AppVersion { get; set; }
		
		/// <summary>
		/// Timestamp of when report was collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ListTelemetryDevicesResponse
	{
		
		/// <summary>
		/// Telemetry devices returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public GoogleChromeManagementV1TelemetryDevice[] Devices { get; set; }
		
		/// <summary>
		/// Token to specify next page in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Telemetry data collected from a managed device. * Granular permission needed: TELEMETRY_API_DEVICE
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryDevice
	{
		
		/// <summary>
		/// Output only. Audio reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioStatusReport")]
		public GoogleChromeManagementV1AudioStatusReport[] AudioStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Information on battery specs for the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryInfo")]
		public GoogleChromeManagementV1BatteryInfo[] BatteryInfo { get; set; }
		
		/// <summary>
		/// Output only. Battery reports collected periodically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryStatusReport")]
		public GoogleChromeManagementV1BatteryStatusReport[] BatteryStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Boot performance reports of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootPerformanceReport")]
		public GoogleChromeManagementV1BootPerformanceReport[] BootPerformanceReport { get; set; }
		
		/// <summary>
		/// Output only. Information regarding CPU specs for the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuInfo")]
		public GoogleChromeManagementV1CpuInfo[] CpuInfo { get; set; }
		
		/// <summary>
		/// Output only. CPU status reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuStatusReport")]
		public GoogleChromeManagementV1CpuStatusReport[] CpuStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Google Workspace Customer whose enterprise enrolled the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public string Customer { get; set; }
		
		/// <summary>
		/// Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Information of the graphics subsystem. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceGraphicsStatus](https://chromeenterprise.google/policies/#ReportDeviceGraphicsStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_GRAPHICS_INFO
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graphicsInfo")]
		public GoogleChromeManagementV1GraphicsInfo GraphicsInfo { get; set; }
		
		/// <summary>
		/// Output only. Graphics reports collected periodically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graphicsStatusReport")]
		public GoogleChromeManagementV1GraphicsStatusReport[] GraphicsStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Heartbeat status report containing timestamps periodically sorted in decreasing order of report_time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heartbeatStatusReport")]
		public GoogleChromeManagementV1HeartbeatStatusReport[] HeartbeatStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Kiosk app status report for the kiosk device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kioskAppStatusReport")]
		public GoogleChromeManagementV1KioskAppStatusReport[] KioskAppStatusReport { get; set; }
		
		/// <summary>
		/// Memory information of a device. * This field has both telemetry and device information: - `totalRamBytes` - Device information - `availableRamBytes` - Telemetry information - `totalMemoryEncryption` - Device information * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: - `totalRamBytes` - Only at upload - `availableRamBytes` - Every 10 minutes - `totalMemoryEncryption` - at device startup * Default Data Reporting Frequency: - `totalRamBytes` - 3 hours - `availableRamBytes` - 3 hours - `totalMemoryEncryption` - at device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: only for `totalMemoryEncryption` * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_MEMORY_INFO
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryInfo")]
		public GoogleChromeManagementV1MemoryInfo MemoryInfo { get; set; }
		
		/// <summary>
		/// Output only. Memory status reports collected periodically sorted decreasing by report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryStatusReport")]
		public GoogleChromeManagementV1MemoryStatusReport[] MemoryStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkBandwidthReport")]
		public GoogleChromeManagementV1NetworkBandwidthReport[] NetworkBandwidthReport { get; set; }
		
		/// <summary>
		/// Output only. Network diagnostics collected periodically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkDiagnosticsReport")]
		public GoogleChromeManagementV1NetworkDiagnosticsReport[] NetworkDiagnosticsReport { get; set; }
		
		/// <summary>
		/// Network device information. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_NETWORK_INFO
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInfo")]
		public GoogleChromeManagementV1NetworkInfo NetworkInfo { get; set; }
		
		/// <summary>
		/// Output only. Network specs collected periodically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkStatusReport")]
		public GoogleChromeManagementV1NetworkStatusReport[] NetworkStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Organization unit ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// Output only. Contains relevant information regarding ChromeOS update status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osUpdateStatus")]
		public GoogleChromeManagementV1OsUpdateStatus[] OsUpdateStatus { get; set; }
		
		/// <summary>
		/// Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peripheralsReport")]
		public GoogleChromeManagementV1PeripheralsReport[] PeripheralsReport { get; set; }
		
		/// <summary>
		/// Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_STORAGE_INFO
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageInfo")]
		public GoogleChromeManagementV1StorageInfo StorageInfo { get; set; }
		
		/// <summary>
		/// Output only. Storage reports collected periodically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageStatusReport")]
		public GoogleChromeManagementV1StorageStatusReport[] StorageStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Information on Thunderbolt bus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thunderboltInfo")]
		public GoogleChromeManagementV1ThunderboltInfo[] ThunderboltInfo { get; set; }
	}
	
	/// <summary>
	/// Memory information of a device. * This field has both telemetry and device information: - `totalRamBytes` - Device information - `availableRamBytes` - Telemetry information - `totalMemoryEncryption` - Device information * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: - `totalRamBytes` - Only at upload - `availableRamBytes` - Every 10 minutes - `totalMemoryEncryption` - at device startup * Default Data Reporting Frequency: - `totalRamBytes` - 3 hours - `availableRamBytes` - 3 hours - `totalMemoryEncryption` - at device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: only for `totalMemoryEncryption` * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_MEMORY_INFO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1MemoryInfo
	{
		
		/// <summary>
		/// Output only. Amount of available RAM in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableRamBytes")]
		public string AvailableRamBytes { get; set; }
		
		/// <summary>
		/// Memory encryption information of a device. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMemoryEncryption")]
		public GoogleChromeManagementV1TotalMemoryEncryptionInfo TotalMemoryEncryption { get; set; }
		
		/// <summary>
		/// Output only. Total RAM in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRamBytes")]
		public string TotalRamBytes { get; set; }
	}
	
	/// <summary>
	/// Memory encryption information of a device. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TotalMemoryEncryptionInfo
	{
		
		/// <summary>
		/// Memory encryption algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionAlgorithm")]
		public System.Nullable<GoogleChromeManagementV1TotalMemoryEncryptionInfoEncryptionAlgorithm> EncryptionAlgorithm { get; set; }
		
		/// <summary>
		/// The state of memory encryption on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionState")]
		public System.Nullable<GoogleChromeManagementV1TotalMemoryEncryptionInfoEncryptionState> EncryptionState { get; set; }
		
		/// <summary>
		/// The length of the encryption keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyLength")]
		public string KeyLength { get; set; }
		
		/// <summary>
		/// The maximum number of keys that can be used for encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxKeys")]
		public string MaxKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1TotalMemoryEncryptionInfoEncryptionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_ALGORITHM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_ALGORITHM_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_128 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_ALGORITHM_AES_XTS_256 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1TotalMemoryEncryptionInfoEncryptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_STATE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_STATE_DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_STATE_TME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY_ENCRYPTION_STATE_MKTME = 4,
	}
	
	/// <summary>
	/// Contains samples of memory status reports. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceMemoryInfo](https://chromeenterprise.google/policies/#ReportDeviceMemoryInfo) * Data Collection Frequency: Only at upload, SystemRamFreeByes is collected every 10 minutes * Default Data Reporting Frequency: Every 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_MEMORY_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1MemoryStatusReport
	{
		
		/// <summary>
		/// Output only. Number of page faults during this collection
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageFaults")]
		public System.Nullable<System.Int32> PageFaults { get; set; }
		
		/// <summary>
		/// Output only. The timestamp in milliseconds representing time at which this report was sampled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Output only. Frequency the report is sampled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleFrequency")]
		public string SampleFrequency { get; set; }
		
		/// <summary>
		/// Output only. Amount of free RAM in bytes (unreliable due to Garbage Collection).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemRamFreeBytes")]
		public string SystemRamFreeBytes { get; set; }
	}
	
	/// <summary>
	/// Network bandwidth report. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1NetworkBandwidthReport
	{
		
		/// <summary>
		/// Output only. Download speed in kilobits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadSpeedKbps")]
		public string DownloadSpeedKbps { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of when the report was collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
	}
	
	/// <summary>
	/// Network testing results to determine the health of the device's network connection, for example whether the HTTPS latency is high or normal. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1NetworkDiagnosticsReport
	{
		
		/// <summary>
		/// Data that describes the result of the HTTPS latency diagnostics routine, with the HTTPS requests issued to Google websites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpsLatencyData")]
		public GoogleChromeManagementV1HttpsLatencyRoutineData HttpsLatencyData { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of when the diagnostics were collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
	}
	
	/// <summary>
	/// Network device information. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_NETWORK_INFO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1NetworkInfo
	{
		
		/// <summary>
		/// Output only. List of network devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkDevices")]
		public GoogleChromeManagementV1NetworkDevice[] NetworkDevices { get; set; }
	}
	
	/// <summary>
	/// Details about the network device. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportNetworkDeviceConfiguration](https://chromeenterprise.google/policies/#ReportNetworkDeviceConfiguration) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1NetworkDevice
	{
		
		/// <summary>
		/// Output only. The integrated circuit card ID associated with the device's sim card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iccid")]
		public string Iccid { get; set; }
		
		/// <summary>
		/// Output only. IMEI (if applicable) of the corresponding network device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imei")]
		public string Imei { get; set; }
		
		/// <summary>
		/// Output only. MAC address (if applicable) of the corresponding network device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Output only. The mobile directory number associated with the device's sim card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mdn")]
		public string Mdn { get; set; }
		
		/// <summary>
		/// Output only. MEID (if applicable) of the corresponding network device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meid")]
		public string Meid { get; set; }
		
		/// <summary>
		/// Output only. Network device type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleChromeManagementV1NetworkDeviceType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1NetworkDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_DEVICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CELLULAR_DEVICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETHERNET_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIFI_DEVICE = 3,
	}
	
	/// <summary>
	/// State of visible/configured networks. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportNetworkStatus](https://chromeenterprise.google/policies/#ReportNetworkStatus) * Data Collection Frequency: 60 minutes * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: Yes * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1NetworkStatusReport
	{
		
		/// <summary>
		/// Output only. Current connection state of the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionState")]
		public System.Nullable<GoogleChromeManagementV1NetworkStatusReportConnectionState> ConnectionState { get; set; }
		
		/// <summary>
		/// Output only. Network connection type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionType")]
		public System.Nullable<GoogleChromeManagementV1NetworkStatusReportConnectionType> ConnectionType { get; set; }
		
		/// <summary>
		/// Output only. Whether the wifi encryption key is turned off.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionOn")]
		public System.Nullable<System.Boolean> EncryptionOn { get; set; }
		
		/// <summary>
		/// Output only. Gateway IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gatewayIpAddress")]
		public string GatewayIpAddress { get; set; }
		
		/// <summary>
		/// Output only. Network connection guid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Output only. LAN IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lanIpAddress")]
		public string LanIpAddress { get; set; }
		
		/// <summary>
		/// Output only. Receiving bit rate measured in Megabits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receivingBitRateMbps")]
		public string ReceivingBitRateMbps { get; set; }
		
		/// <summary>
		/// Output only. Time at which the network state was reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Output only. Frequency the report is sampled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleFrequency")]
		public string SampleFrequency { get; set; }
		
		/// <summary>
		/// Output only. Signal strength for wireless networks measured in decibels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalStrengthDbm")]
		public System.Nullable<System.Int32> SignalStrengthDbm { get; set; }
		
		/// <summary>
		/// Output only. Transmission bit rate measured in Megabits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transmissionBitRateMbps")]
		public string TransmissionBitRateMbps { get; set; }
		
		/// <summary>
		/// Output only. Transmission power measured in decibels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transmissionPowerDbm")]
		public System.Nullable<System.Int32> TransmissionPowerDbm { get; set; }
		
		/// <summary>
		/// Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiLinkQuality")]
		public string WifiLinkQuality { get; set; }
		
		/// <summary>
		/// Output only. Wifi power management enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiPowerManagementEnabled")]
		public System.Nullable<System.Boolean> WifiPowerManagementEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1NetworkStatusReportConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_CONNECTION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PORTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CONNECTED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1NetworkStatusReportConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CELLULAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETHERNET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TETHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIFI = 5,
	}
	
	/// <summary>
	/// Contains information regarding the current OS update status. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceOsUpdateStatus](https://chromeenterprise.google/policies/#ReportDeviceOsUpdateStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_OS_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1OsUpdateStatus
	{
		
		/// <summary>
		/// Output only. Timestamp of the last reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRebootTime")]
		public string LastRebootTime { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of the last update check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateCheckTime")]
		public string LastUpdateCheckTime { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of the last successful update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public string LastUpdateTime { get; set; }
		
		/// <summary>
		/// Output only. New platform version of the os image being downloaded and applied. It is only set when update status is OS_IMAGE_DOWNLOAD_IN_PROGRESS or OS_UPDATE_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for OS_UPDATE_NEED_REBOOT status for some edge cases, e.g. update engine is restarted without a reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPlatformVersion")]
		public string NewPlatformVersion { get; set; }
		
		/// <summary>
		/// Output only. New requested platform version from the pending updated kiosk app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newRequestedPlatformVersion")]
		public string NewRequestedPlatformVersion { get; set; }
		
		/// <summary>
		/// Output only. Current state of the os update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateState")]
		public System.Nullable<GoogleChromeManagementV1OsUpdateStatusUpdateState> UpdateState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1OsUpdateStatusUpdateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_IMAGE_DOWNLOAD_NOT_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_IMAGE_DOWNLOAD_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_UPDATE_NEED_REBOOT = 3,
	}
	
	/// <summary>
	/// Peripherals report. * Granular permission needed: TELEMETRY_API_PERIPHERALS_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1PeripheralsReport
	{
		
		/// <summary>
		/// Output only. Timestamp of when the report was collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// Reports of all usb connected devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usbPeripheralReport")]
		public GoogleChromeManagementV1UsbPeripheralReport[] UsbPeripheralReport { get; set; }
	}
	
	/// <summary>
	/// USB connected peripheral report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1UsbPeripheralReport
	{
		
		/// <summary>
		/// Output only. Categories the device belongs to https://www.usb.org/defined-class-codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Output only. Class ID https://www.usb.org/defined-class-codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classId")]
		public System.Nullable<System.Int32> ClassId { get; set; }
		
		/// <summary>
		/// Output only. Firmware version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmwareVersion")]
		public string FirmwareVersion { get; set; }
		
		/// <summary>
		/// Output only. Device name, model name, or product name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Product ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public System.Nullable<System.Int32> Pid { get; set; }
		
		/// <summary>
		/// Output only. Subclass ID https://www.usb.org/defined-class-codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subclassId")]
		public System.Nullable<System.Int32> SubclassId { get; set; }
		
		/// <summary>
		/// Output only. Vendor name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
		
		/// <summary>
		/// Output only. Vendor ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vid")]
		public System.Nullable<System.Int32> Vid { get; set; }
	}
	
	/// <summary>
	/// Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_STORAGE_INFO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1StorageInfo
	{
		
		/// <summary>
		/// The available space for user data storage in the device in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableDiskBytes")]
		public string AvailableDiskBytes { get; set; }
		
		/// <summary>
		/// The total space for user data storage in the device in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDiskBytes")]
		public string TotalDiskBytes { get; set; }
		
		/// <summary>
		/// Information for disk volumes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public GoogleChromeManagementV1StorageInfoDiskVolume[] Volume { get; set; }
	}
	
	/// <summary>
	/// Information for disk volumes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1StorageInfoDiskVolume
	{
		
		/// <summary>
		/// Free storage space in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageFreeBytes")]
		public string StorageFreeBytes { get; set; }
		
		/// <summary>
		/// Total storage space in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageTotalBytes")]
		public string StorageTotalBytes { get; set; }
		
		/// <summary>
		/// Disk volume id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeId")]
		public string VolumeId { get; set; }
	}
	
	/// <summary>
	/// Status data for storage. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDeviceStorageStatus](https://chromeenterprise.google/policies/#ReportDeviceStorageStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_STORAGE_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1StorageStatusReport
	{
		
		/// <summary>
		/// Output only. Reports on disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public GoogleChromeManagementV1DiskInfo[] Disk { get; set; }
		
		/// <summary>
		/// Output only. Timestamp of when the sample was collected on device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
	}
	
	/// <summary>
	/// Thunderbolt bus info. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceSecurityStatus](https://chromeenterprise.google/policies/#ReportDeviceSecurityStatus) * Data Collection Frequency: At device startup * Default Data Reporting Frequency: At device startup - Policy Controlled: No * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: Yes * Reported for affiliated users only: N/A * Granular permission needed: TELEMETRY_API_BUS_DEVICE_INFO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ThunderboltInfo
	{
		
		/// <summary>
		/// Security level of the Thunderbolt bus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityLevel")]
		public System.Nullable<GoogleChromeManagementV1ThunderboltInfoSecurityLevel> SecurityLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1ThunderboltInfoSecurityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUNDERBOLT_SECURITY_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUNDERBOLT_SECURITY_NONE_LEVEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUNDERBOLT_SECURITY_USER_LEVEL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUNDERBOLT_SECURITY_SECURE_LEVEL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUNDERBOLT_SECURITY_DP_ONLY_LEVEL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUNDERBOLT_SECURITY_USB_ONLY_LEVEL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THUNDERBOLT_SECURITY_NO_PCIE_LEVEL = 6,
	}
	
	/// <summary>
	/// Response message for listing telemetry events for a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ListTelemetryEventsResponse
	{
		
		/// <summary>
		/// Token to specify next page in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Telemetry events returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telemetryEvents")]
		public GoogleChromeManagementV1TelemetryEvent[] TelemetryEvents { get; set; }
	}
	
	/// <summary>
	/// Telemetry data reported by a managed device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryEvent
	{
		
		/// <summary>
		/// `TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioSevereUnderrunEvent")]
		public GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent AudioSevereUnderrunEvent { get; set; }
		
		/// <summary>
		/// Information about a device associated with telemetry data. * Granular Permission needed: TELEMETRY_API_DEVICE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public GoogleChromeManagementV1TelemetryDeviceInfo Device { get; set; }
		
		/// <summary>
		/// The event type of the current event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<GoogleChromeManagementV1TelemetryEventEventType> EventType { get; set; }
		
		/// <summary>
		/// Https latency routine is run periodically and `TelemetryHttpsLatencyChangeEvent` is triggered if a latency problem was detected or if the device has recovered from a latency problem. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpsLatencyChangeEvent")]
		public GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent HttpsLatencyChangeEvent { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// `TelemetryNetworkConnectionStateChangeEvent` is triggered on network connection state changes. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkStateChangeEvent")]
		public GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent NetworkStateChangeEvent { get; set; }
		
		/// <summary>
		/// Timestamp that represents when the event was reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTime")]
		public string ReportTime { get; set; }
		
		/// <summary>
		/// `TelemetryUsbPeripheralsEvent` is triggered USB devices are either added or removed. * Granular permission needed: TELEMETRY_API_PERIPHERALS_REPORT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usbPeripheralsEvent")]
		public GoogleChromeManagementV1TelemetryUsbPeripheralsEvent UsbPeripheralsEvent { get; set; }
		
		/// <summary>
		/// Information about a user associated with telemetry data. * Granular permission needed: TELEMETRY_API_USER
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public GoogleChromeManagementV1TelemetryUserInfo User { get; set; }
		
		/// <summary>
		/// `TelemetryNetworkConnectionStateChangeEvent` is triggered on network connection state changes. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpnConnectionStateChangeEvent")]
		public GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent VpnConnectionStateChangeEvent { get; set; }
		
		/// <summary>
		/// `TelemetryNetworkSignalStrengthEvent` is triggered on WiFi signal strength events. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiSignalStrengthEvent")]
		public GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent WifiSignalStrengthEvent { get; set; }
	}
	
	/// <summary>
	/// `TelemetryAudioSevereUnderrunEvent` is triggered when a audio devices run out of buffer data for more than 5 seconds. * Granular permission needed: TELEMETRY_API_AUDIO_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent
	{
	}
	
	/// <summary>
	/// Information about a device associated with telemetry data. * Granular Permission needed: TELEMETRY_API_DEVICE
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryDeviceInfo
	{
		
		/// <summary>
		/// Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Output only. Organization unit ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1TelemetryEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_SEVERE_UNDERRUN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_STATE_CHANGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USB_ADDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USB_REMOVED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_HTTPS_LATENCY_CHANGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIFI_SIGNAL_STRENGTH_LOW = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIFI_SIGNAL_STRENGTH_RECOVERED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPN_CONNECTION_STATE_CHANGE = 8,
	}
	
	/// <summary>
	/// Https latency routine is run periodically and `TelemetryHttpsLatencyChangeEvent` is triggered if a latency problem was detected or if the device has recovered from a latency problem. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent
	{
		
		/// <summary>
		/// Data that describes the result of the HTTPS latency diagnostics routine, with the HTTPS requests issued to Google websites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpsLatencyRoutineData")]
		public GoogleChromeManagementV1HttpsLatencyRoutineData HttpsLatencyRoutineData { get; set; }
		
		/// <summary>
		/// Current HTTPS latency state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpsLatencyState")]
		public System.Nullable<GoogleChromeManagementV1TelemetryHttpsLatencyChangeEventHttpsLatencyState> HttpsLatencyState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromeManagementV1TelemetryHttpsLatencyChangeEventHttpsLatencyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS_LATENCY_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROBLEM = 2,
	}
	
	/// <summary>
	/// `TelemetryNetworkConnectionStateChangeEvent` is triggered on network connection state changes. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent
	{
		
		/// <summary>
		/// Current connection state of the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionState")]
		public GoogleChromeManagementV1NetworkStatusReportConnectionState ConnectionState { get; set; }
		
		/// <summary>
		/// Unique identifier of the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
	}
	
	/// <summary>
	/// `TelemetryUsbPeripheralsEvent` is triggered USB devices are either added or removed. * Granular permission needed: TELEMETRY_API_PERIPHERALS_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryUsbPeripheralsEvent
	{
		
		/// <summary>
		/// List of usb devices that were either added or removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usbPeripheralReport")]
		public GoogleChromeManagementV1UsbPeripheralReport[] UsbPeripheralReport { get; set; }
	}
	
	/// <summary>
	/// Information about a user associated with telemetry data. * Granular permission needed: TELEMETRY_API_USER
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryUserInfo
	{
		
		/// <summary>
		/// Output only. User's email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Output only. Organization unit ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
	}
	
	/// <summary>
	/// `TelemetryNetworkSignalStrengthEvent` is triggered on WiFi signal strength events. * Granular permission needed: TELEMETRY_API_NETWORK_REPORT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent
	{
		
		/// <summary>
		/// Unique identifier of the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Signal strength RSSI value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signalStrengthDbm")]
		public System.Nullable<System.Int32> SignalStrengthDbm { get; set; }
	}
	
	/// <summary>
	/// Response message for listing notification configs for a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The telemetry notification configs from the specified customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telemetryNotificationConfigs")]
		public GoogleChromeManagementV1TelemetryNotificationConfig[] TelemetryNotificationConfigs { get; set; }
	}
	
	/// <summary>
	/// Configuration to receive notifications of telemetry data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryNotificationConfig
	{
		
		/// <summary>
		/// Output only. Google Workspace customer that owns the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public string Customer { get; set; }
		
		/// <summary>
		/// Configures how the telemetry data should be filtered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public GoogleChromeManagementV1TelemetryNotificationFilter Filter { get; set; }
		
		/// <summary>
		/// The pubsub topic to which notifications are published to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleCloudPubsubTopic")]
		public string GoogleCloudPubsubTopic { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the notification configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Configures how the telemetry data should be filtered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryNotificationFilter
	{
		
		/// <summary>
		/// If set, only sends notifications for telemetry data coming from this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// If set, only sends notifications for telemetry data coming from devices in this org unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceOrgUnitId")]
		public string DeviceOrgUnitId { get; set; }
		
		/// <summary>
		/// Configures how the telemetry events should be filtered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telemetryEventNotificationFilter")]
		public GoogleChromeManagementV1TelemetryEventNotificationFilter TelemetryEventNotificationFilter { get; set; }
		
		/// <summary>
		/// If set, only sends notifications for telemetry data coming from devices owned by this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// If set, only sends notifications for telemetry data coming from devices owned by users in this org unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userOrgUnitId")]
		public string UserOrgUnitId { get; set; }
	}
	
	/// <summary>
	/// Configures how the telemetry events should be filtered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryEventNotificationFilter
	{
		
		/// <summary>
		/// Only sends the notifications for events of these types. Must not be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTypes")]
		public GoogleChromeManagementV1TelemetryEventEventType[] EventTypes { get; set; }
	}
	
	/// <summary>
	/// Response message for listing telemetry users for a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1ListTelemetryUsersResponse
	{
		
		/// <summary>
		/// Token to specify next page in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Telemetry users returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telemetryUsers")]
		public GoogleChromeManagementV1TelemetryUser[] TelemetryUsers { get; set; }
	}
	
	/// <summary>
	/// Telemetry data collected from a managed user. * Granular permission needed: TELEMETRY_API_USER
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryUser
	{
		
		/// <summary>
		/// G Suite Customer whose enterprise enrolled the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public string Customer { get; set; }
		
		/// <summary>
		/// Resource name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Organization unit of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// Telemetry data collected from a managed user and device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDevice")]
		public GoogleChromeManagementV1TelemetryUserDevice[] UserDevice { get; set; }
		
		/// <summary>
		/// Email address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// Directory ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Telemetry data collected for a managed user and device. * Granular permission needed: TELEMETRY_API_DEVICE
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromeManagementV1TelemetryUserDevice
	{
		
		/// <summary>
		/// Output only. Audio reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioStatusReport")]
		public GoogleChromeManagementV1AudioStatusReport[] AudioStatusReport { get; set; }
		
		/// <summary>
		/// Output only. Device activity reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceActivityReport")]
		public GoogleChromeManagementV1DeviceActivityReport[] DeviceActivityReport { get; set; }
		
		/// <summary>
		/// The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkBandwidthReport")]
		public GoogleChromeManagementV1NetworkBandwidthReport[] NetworkBandwidthReport { get; set; }
		
		/// <summary>
		/// Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peripheralsReport")]
		public GoogleChromeManagementV1PeripheralsReport[] PeripheralsReport { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Generate summary of app installation requests.
		/// Chromemanagement_customers_apps_countChromeAppRequests v1/{customer}/apps:countChromeAppRequests
		/// </summary>
		/// <param name="customer">Required. Customer id or "my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="orderBy">Field used to order results. Supported fields: * request_count * latest_request_time</param>
		/// <param name="orgUnitId">The ID of the organizational unit.</param>
		/// <param name="pageSize">Maximum number of results to return. Maximum and default are 50, anything above will be coerced to 50.</param>
		/// <param name="pageToken">Token to specify the page of the request to be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountChromeAppRequestsResponse> Chromemanagement_customers_apps_countChromeAppRequestsAsync(string customer, string orderBy, string orgUnitId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/apps:countChromeAppRequests&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountChromeAppRequestsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity.
		/// Chromemanagement_customers_reports_countChromeBrowsersNeedingAttention v1/{customer}/reports:countChromeBrowsersNeedingAttention
		/// </summary>
		/// <param name="customer">Required. The customer ID or "my_customer" prefixed with "customers/".</param>
		/// <param name="orgUnitId">Optional. The ID of the organizational unit. If omitted, all data will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse> Chromemanagement_customers_reports_countChromeBrowsersNeedingAttentionAsync(string customer, string orgUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countChromeBrowsersNeedingAttention&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947).
		/// Chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDate v1/{customer}/reports:countChromeDevicesReachingAutoExpirationDate
		/// </summary>
		/// <param name="customer">Required. The customer ID or "my_customer" prefixed with "customers/".</param>
		/// <param name="maxAueDate">Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If included returns all devices that have already expired and devices with auto expiration date equal to or earlier than the maximum date.</param>
		/// <param name="minAueDate">Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If included returns all devices that have already expired and devices with auto expiration date equal to or later than the minimum date.</param>
		/// <param name="orgUnitId">Optional. The organizational unit ID, if omitted, will return data for all organizational units.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse> Chromemanagement_customers_reports_countChromeDevicesReachingAutoExpirationDateAsync(string customer, string maxAueDate, string minAueDate, string orgUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countChromeDevicesReachingAutoExpirationDate&maxAueDate=" + (maxAueDate==null? "" : System.Uri.EscapeDataString(maxAueDate))+"&minAueDate=" + (minAueDate==null? "" : System.Uri.EscapeDataString(minAueDate))+"&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947
		/// Chromemanagement_customers_reports_countChromeDevicesThatNeedAttention v1/{customer}/reports:countChromeDevicesThatNeedAttention
		/// </summary>
		/// <param name="customer">Required. The customer ID or "my_customer" prefixed with "customers/".</param>
		/// <param name="orgUnitId">Optional. The ID of the organizational unit. If omitted, all data will be returned.</param>
		/// <param name="readMask">Required. Mask of the fields that should be populated in the returned report.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse> Chromemanagement_customers_reports_countChromeDevicesThatNeedAttentionAsync(string customer, string orgUnitId, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countChromeDevicesThatNeedAttention&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947
		/// Chromemanagement_customers_reports_countChromeHardwareFleetDevices v1/{customer}/reports:countChromeHardwareFleetDevices
		/// </summary>
		/// <param name="customer">Required. The customer ID or "my_customer".</param>
		/// <param name="orgUnitId">Optional. The ID of the organizational unit. If omitted, all data will be returned.</param>
		/// <param name="readMask">Required. Mask of the fields that should be populated in the returned report.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse> Chromemanagement_customers_reports_countChromeHardwareFleetDevicesAsync(string customer, string orgUnitId, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countChromeHardwareFleetDevices&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate report of installed Chrome versions.
		/// Chromemanagement_customers_reports_countChromeVersions v1/{customer}/reports:countChromeVersions
		/// </summary>
		/// <param name="customer">Required. Customer id or "my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * last_active_date</param>
		/// <param name="orgUnitId">The ID of the organizational unit.</param>
		/// <param name="pageSize">Maximum number of results to return. Maximum and default are 100.</param>
		/// <param name="pageToken">Token to specify the page of the request to be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountChromeVersionsResponse> Chromemanagement_customers_reports_countChromeVersionsAsync(string customer, string filter, string orgUnitId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countChromeVersions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountChromeVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate report of app installations.
		/// Chromemanagement_customers_reports_countInstalledApps v1/{customer}/reports:countInstalledApps
		/// </summary>
		/// <param name="customer">Required. Customer id or "my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * app_name * app_type * install_type * number_of_permissions * total_install_count * latest_profile_active_date * permission_name * app_id</param>
		/// <param name="orderBy">Field used to order results. Supported order by fields: * app_name * app_type * install_type * number_of_permissions * total_install_count * app_id</param>
		/// <param name="orgUnitId">The ID of the organizational unit.</param>
		/// <param name="pageSize">Maximum number of results to return. Maximum and default are 100.</param>
		/// <param name="pageToken">Token to specify the page of the request to be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountInstalledAppsResponse> Chromemanagement_customers_reports_countInstalledAppsAsync(string customer, string filter, string orderBy, string orgUnitId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countInstalledApps&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountInstalledAppsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a summary of printing done by each printer.
		/// Chromemanagement_customers_reports_countPrintJobsByPrinter v1/{customer}/reports:countPrintJobsByPrinter
		/// </summary>
		/// <param name="customer">Required. Customer ID prefixed with "customers/" or "customers/my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported in this filter. Supported filter fields: * complete_time</param>
		/// <param name="orderBy">Field used to order results. If omitted, results will be ordered in ascending order of the 'printer' field. Supported order_by fields: * printer * job_count * device_count * user_count</param>
		/// <param name="pageSize">Maximum number of results to return. Maximum and default are 100.</param>
		/// <param name="pageToken">Token to specify the page of the response to be returned.</param>
		/// <param name="printerOrgUnitId">The ID of the organizational unit for printers. If specified, only data for printers from the specified organizational unit will be returned. If omitted, data for printers from all organizational units will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountPrintJobsByPrinterResponse> Chromemanagement_customers_reports_countPrintJobsByPrinterAsync(string customer, string filter, string orderBy, int pageSize, string pageToken, string printerOrgUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countPrintJobsByPrinter&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&printerOrgUnitId=" + (printerOrgUnitId==null? "" : System.Uri.EscapeDataString(printerOrgUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountPrintJobsByPrinterResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a summary of printing done by each user.
		/// Chromemanagement_customers_reports_countPrintJobsByUser v1/{customer}/reports:countPrintJobsByUser
		/// </summary>
		/// <param name="customer">Required. Customer ID prefixed with "customers/" or "customers/my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported in this filter. Supported filter fields: * complete_time</param>
		/// <param name="orderBy">Field used to order results. If omitted, results will be ordered in ascending order of the 'user_email' field. Supported order_by fields: * user_email * job_count * printer_count * device_count</param>
		/// <param name="pageSize">Maximum number of results to return. Maximum and default are 100.</param>
		/// <param name="pageToken">Token to specify the page of the response to be returned.</param>
		/// <param name="printerOrgUnitId">The ID of the organizational unit for printers. If specified, only print jobs initiated with printers from the specified organizational unit will be counted. If omitted, all print jobs will be counted.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1CountPrintJobsByUserResponse> Chromemanagement_customers_reports_countPrintJobsByUserAsync(string customer, string filter, string orderBy, int pageSize, string pageToken, string printerOrgUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:countPrintJobsByUser&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&printerOrgUnitId=" + (printerOrgUnitId==null? "" : System.Uri.EscapeDataString(printerOrgUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1CountPrintJobsByUserResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of print jobs.
		/// Chromemanagement_customers_reports_enumeratePrintJobs v1/{customer}/reports:enumeratePrintJobs
		/// </summary>
		/// <param name="customer">Required. Customer ID prefixed with "customers/" or "customers/my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported for `complete_time`. Note: Only = comparator supported for `user_id` and `printer_id`. Supported filter fields: * complete_time * printer_id * user_id</param>
		/// <param name="orderBy">Field used to order results. If not specified, results will be ordered in descending order of the `complete_time` field. Supported order by fields: * title * state * create_time * complete_time * document_page_count * color_mode * duplex_mode * printer * user_email</param>
		/// <param name="pageSize">The number of print jobs in the page from 0 to 100 inclusive, if page_size is not specified or zero, the size will be 50.</param>
		/// <param name="pageToken">A page token received from a previous `EnumeratePrintJobs` call. Provide this to retrieve the subsequent page. If omitted, the first page of results will be returned. When paginating, all other parameters provided to `EnumeratePrintJobs` must match the call that provided the page token.</param>
		/// <param name="printerOrgUnitId">The ID of the organizational unit for printers. If specified, only print jobs submitted to printers from the specified organizational unit will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1EnumeratePrintJobsResponse> Chromemanagement_customers_reports_enumeratePrintJobsAsync(string customer, string filter, string orderBy, int pageSize, string pageToken, string printerOrgUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:enumeratePrintJobs&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&printerOrgUnitId=" + (printerOrgUnitId==null? "" : System.Uri.EscapeDataString(printerOrgUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1EnumeratePrintJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate report of managed Chrome browser devices that have a specified app installed.
		/// Chromemanagement_customers_reports_findInstalledAppDevices v1/{customer}/reports:findInstalledAppDevices
		/// </summary>
		/// <param name="customer">Required. Customer id or "my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="appId">Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote).</param>
		/// <param name="appType">Type of the app.</param>
		/// <param name="filter">Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * last_active_date</param>
		/// <param name="orderBy">Field used to order results. Supported order by fields: * machine * device_id</param>
		/// <param name="orgUnitId">The ID of the organizational unit.</param>
		/// <param name="pageSize">Maximum number of results to return. Maximum and default are 100.</param>
		/// <param name="pageToken">Token to specify the page of the request to be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1FindInstalledAppDevicesResponse> Chromemanagement_customers_reports_findInstalledAppDevicesAsync(string customer, string appId, GoogleChromeManagementV1InstalledAppAppType appType, string filter, string orderBy, string orgUnitId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/reports:findInstalledAppDevices&appId=" + (appId==null? "" : System.Uri.EscapeDataString(appId))+"&appType=" + appType+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&orgUnitId=" + (orgUnitId==null? "" : System.Uri.EscapeDataString(orgUnitId))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1FindInstalledAppDevicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a telemetry notification config.
		/// Chromemanagement_customers_telemetry_notificationConfigs_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the notification config to delete. Format: `customers/{customer}/telemetry/notificationConfigs/{notification_config}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Chromemanagement_customers_telemetry_notificationConfigs_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get telemetry user.
		/// Chromemanagement_customers_telemetry_users_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the `TelemetryUser` to return.</param>
		/// <param name="readMask">Read mask to specify which fields to return.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1TelemetryUser> Chromemanagement_customers_telemetry_users_getAsync(string name, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1TelemetryUser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all telemetry devices.
		/// Chromemanagement_customers_telemetry_devices_list v1/{parent}/telemetry/devices
		/// </summary>
		/// <param name="parent">Required. Customer id or "my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Optional. Only include resources that match the filter. Supported filter fields: - org_unit_id - serial_number - device_id - reports_timestamp The "reports_timestamp" filter accepts either the Unix Epoch milliseconds format or the RFC3339 UTC "Zulu" format with nanosecond resolution and up to nine fractional digits. Both formats should be surrounded by simple double quotes. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z", "1679283943823".</param>
		/// <param name="pageSize">Maximum number of results to return. Default value is 100. Maximum value is 1000.</param>
		/// <param name="pageToken">Token to specify next page in the list.</param>
		/// <param name="readMask">Required. Read mask to specify which fields to return.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1ListTelemetryDevicesResponse> Chromemanagement_customers_telemetry_devices_listAsync(string parent, string filter, int pageSize, string pageToken, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/telemetry/devices&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1ListTelemetryDevicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List telemetry events.
		/// Chromemanagement_customers_telemetry_events_list v1/{parent}/telemetry/events
		/// </summary>
		/// <param name="parent">Required. Customer id or "my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Optional. Only include resources that match the filter. Although this parameter is currently optional, this parameter will be required- please specify at least 1 event type. Supported filter fields: - device_id - user_id - device_org_unit_id - user_org_unit_id - timestamp - event_type The "timestamp" filter accepts either the Unix Epoch milliseconds format or the RFC3339 UTC "Zulu" format with nanosecond resolution and up to nine fractional digits. Both formats should be surrounded by simple double quotes. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z", "1679283943823".</param>
		/// <param name="pageSize">Optional. Maximum number of results to return. Default value is 100. Maximum value is 1000.</param>
		/// <param name="pageToken">Optional. Token to specify next page in the list.</param>
		/// <param name="readMask">Required. Read mask to specify which fields to return. Although currently required, this field will become optional, while the filter parameter with an event type will be come required.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1ListTelemetryEventsResponse> Chromemanagement_customers_telemetry_events_listAsync(string parent, string filter, int pageSize, string pageToken, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/telemetry/events&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1ListTelemetryEventsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all telemetry notification configs.
		/// Chromemanagement_customers_telemetry_notificationConfigs_list v1/{parent}/telemetry/notificationConfigs
		/// </summary>
		/// <param name="parent">Required. The parent which owns the notification configs.</param>
		/// <param name="pageSize">The maximum number of notification configs to return. The service may return fewer than this value. If unspecified, at most 100 notification configs will be returned. The maximum value is 100; values above 100 will be coerced to 100.</param>
		/// <param name="pageToken">A page token, received from a previous `ListTelemetryNotificationConfigs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTelemetryNotificationConfigs` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse> Chromemanagement_customers_telemetry_notificationConfigs_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/telemetry/notificationConfigs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a telemetry notification config.
		/// Chromemanagement_customers_telemetry_notificationConfigs_create v1/{parent}/telemetry/notificationConfigs
		/// </summary>
		/// <param name="parent">Required. The parent resource where this notification config will be created. Format: `customers/{customer}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1TelemetryNotificationConfig> Chromemanagement_customers_telemetry_notificationConfigs_createAsync(string parent, GoogleChromeManagementV1TelemetryNotificationConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/telemetry/notificationConfigs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1TelemetryNotificationConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all telemetry users.
		/// Chromemanagement_customers_telemetry_users_list v1/{parent}/telemetry/users
		/// </summary>
		/// <param name="parent">Required. Customer id or "my_customer" to use the customer associated to the account making the request.</param>
		/// <param name="filter">Only include resources that match the filter. Supported filter fields: - user_id - user_org_unit_id </param>
		/// <param name="pageSize">Maximum number of results to return. Default value is 100. Maximum value is 1000.</param>
		/// <param name="pageToken">Token to specify next page in the list.</param>
		/// <param name="readMask">Read mask to specify which fields to return.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromeManagementV1ListTelemetryUsersResponse> Chromemanagement_customers_telemetry_users_listAsync(string parent, string filter, int pageSize, string pageToken, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/telemetry/users&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromeManagementV1ListTelemetryUsersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
