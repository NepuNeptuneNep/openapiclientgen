//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// URLs where a CertificateAuthority will publish content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessUrls
	{
		
		/// <summary>
		/// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertificateAccessUrl")]
		public string CaCertificateAccessUrl { get; set; }
		
		/// <summary>
		/// The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crlAccessUrls")]
		public string[] CrlAccessUrls { get; set; }
	}
	
	/// <summary>
	/// Request message for CertificateAuthorityService.ActivateCertificateAuthority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActivateCertificateAuthorityRequest
	{
		
		/// <summary>
		/// Required. The signed CA certificate issued from FetchCertificateAuthorityCsrResponse.pem_csr.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCaCertificate")]
		public string PemCaCertificate { get; set; }
		
		/// <summary>
		/// Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subordinateConfig")]
		public SubordinateConfig SubordinateConfig { get; set; }
	}
	
	/// <summary>
	/// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubordinateConfig
	{
		
		/// <summary>
		/// Required. This can refer to a CertificateAuthority that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateAuthority")]
		public string CertificateAuthority { get; set; }
		
		/// <summary>
		/// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemIssuerChain")]
		public SubordinateConfigChain PemIssuerChain { get; set; }
	}
	
	/// <summary>
	/// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubordinateConfigChain
	{
		
		/// <summary>
		/// Required. Expected to be in leaf-to-root order according to RFC 5246.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCertificates")]
		public string[] PemCertificates { get; set; }
	}
	
	/// <summary>
	/// Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllowedKeyType
	{
		
		/// <summary>
		/// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ellipticCurve")]
		public EcKeyType EllipticCurve { get; set; }
		
		/// <summary>
		/// Describes an RSA key that may be used in a Certificate issued from a CaPool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rsa")]
		public RsaKeyType Rsa { get; set; }
	}
	
	/// <summary>
	/// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EcKeyType
	{
		
		/// <summary>
		/// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureAlgorithm")]
		public System.Nullable<EcKeyTypeSignatureAlgorithm> SignatureAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EcKeyTypeSignatureAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_SIGNATURE_ALGORITHM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECDSA_P256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECDSA_P384 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDDSA_25519 = 3,
	}
	
	/// <summary>
	/// Describes an RSA key that may be used in a Certificate issued from a CaPool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RsaKeyType
	{
		
		/// <summary>
		/// Optional. The maximum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxModulusSize")]
		public string MaxModulusSize { get; set; }
		
		/// <summary>
		/// Optional. The minimum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minModulusSize")]
		public string MinModulusSize { get; set; }
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Describes values that are relevant in a CA certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaOptions
	{
		
		/// <summary>
		/// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCa")]
		public System.Nullable<System.Boolean> IsCa { get; set; }
		
		/// <summary>
		/// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxIssuerPathLength")]
		public System.Nullable<System.Int32> MaxIssuerPathLength { get; set; }
	}
	
	/// <summary>
	/// A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the trust anchor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaPool
	{
		
		/// <summary>
		/// Defines controls over all certificate issuance within a CaPool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuancePolicy")]
		public IssuancePolicy IssuancePolicy { get; set; }
		
		/// <summary>
		/// Optional. Labels with user-defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishingOptions")]
		public PublishingOptions PublishingOptions { get; set; }
		
		/// <summary>
		/// Required. Immutable. The Tier of this CaPool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<CaPoolTier> Tier { get; set; }
	}
	
	/// <summary>
	/// Defines controls over all certificate issuance within a CaPool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssuancePolicy
	{
		
		/// <summary>
		/// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedIssuanceModes")]
		public IssuanceModes AllowedIssuanceModes { get; set; }
		
		/// <summary>
		/// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedKeyTypes")]
		public AllowedKeyType[] AllowedKeyTypes { get; set; }
		
		/// <summary>
		/// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baselineValues")]
		public X509Parameters BaselineValues { get; set; }
		
		/// <summary>
		/// Describes constraints on a Certificate's Subject and SubjectAltNames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityConstraints")]
		public CertificateIdentityConstraints IdentityConstraints { get; set; }
		
		/// <summary>
		/// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumLifetime")]
		public string MaximumLifetime { get; set; }
		
		/// <summary>
		/// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passthroughExtensions")]
		public CertificateExtensionConstraints PassthroughExtensions { get; set; }
	}
	
	/// <summary>
	/// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssuanceModes
	{
		
		/// <summary>
		/// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowConfigBasedIssuance")]
		public System.Nullable<System.Boolean> AllowConfigBasedIssuance { get; set; }
		
		/// <summary>
		/// Optional. When true, allows callers to create Certificates by specifying a CSR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowCsrBasedIssuance")]
		public System.Nullable<System.Boolean> AllowCsrBasedIssuance { get; set; }
	}
	
	/// <summary>
	/// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class X509Parameters
	{
		
		/// <summary>
		/// Optional. Describes custom X.509 extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalExtensions")]
		public X509Extension[] AdditionalExtensions { get; set; }
		
		/// <summary>
		/// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aiaOcspServers")]
		public string[] AiaOcspServers { get; set; }
		
		/// <summary>
		/// Describes values that are relevant in a CA certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caOptions")]
		public CaOptions CaOptions { get; set; }
		
		/// <summary>
		/// A KeyUsage describes key usage values that may appear in an X.509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyUsage")]
		public KeyUsage KeyUsage { get; set; }
		
		/// <summary>
		/// Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameConstraints")]
		public NameConstraints NameConstraints { get; set; }
		
		/// <summary>
		/// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyIds")]
		public ObjectId[] PolicyIds { get; set; }
	}
	
	/// <summary>
	/// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class X509Extension
	{
		
		/// <summary>
		/// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Boolean> Critical { get; set; }
		
		/// <summary>
		/// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public ObjectId ObjectId { get; set; }
		
		/// <summary>
		/// Required. The value of this X.509 extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObjectId
	{
		
		/// <summary>
		/// Required. The parts of an OID path. The most significant parts of the path come first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectIdPath")]
		public int[] ObjectIdPath { get; set; }
	}
	
	/// <summary>
	/// A KeyUsage describes key usage values that may appear in an X.509 certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyUsage
	{
		
		/// <summary>
		/// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseKeyUsage")]
		public KeyUsageOptions BaseKeyUsage { get; set; }
		
		/// <summary>
		/// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedKeyUsage")]
		public ExtendedKeyUsageOptions ExtendedKeyUsage { get; set; }
		
		/// <summary>
		/// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unknownExtendedKeyUsages")]
		public ObjectId[] UnknownExtendedKeyUsages { get; set; }
	}
	
	/// <summary>
	/// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyUsageOptions
	{
		
		/// <summary>
		/// The key may be used to sign certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certSign")]
		public System.Nullable<System.Boolean> CertSign { get; set; }
		
		/// <summary>
		/// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentCommitment")]
		public System.Nullable<System.Boolean> ContentCommitment { get; set; }
		
		/// <summary>
		/// The key may be used sign certificate revocation lists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crlSign")]
		public System.Nullable<System.Boolean> CrlSign { get; set; }
		
		/// <summary>
		/// The key may be used to encipher data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataEncipherment")]
		public System.Nullable<System.Boolean> DataEncipherment { get; set; }
		
		/// <summary>
		/// The key may be used to decipher only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decipherOnly")]
		public System.Nullable<System.Boolean> DecipherOnly { get; set; }
		
		/// <summary>
		/// The key may be used for digital signatures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digitalSignature")]
		public System.Nullable<System.Boolean> DigitalSignature { get; set; }
		
		/// <summary>
		/// The key may be used to encipher only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encipherOnly")]
		public System.Nullable<System.Boolean> EncipherOnly { get; set; }
		
		/// <summary>
		/// The key may be used in a key agreement protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyAgreement")]
		public System.Nullable<System.Boolean> KeyAgreement { get; set; }
		
		/// <summary>
		/// The key may be used to encipher other keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyEncipherment")]
		public System.Nullable<System.Boolean> KeyEncipherment { get; set; }
	}
	
	/// <summary>
	/// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExtendedKeyUsageOptions
	{
		
		/// <summary>
		/// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientAuth")]
		public System.Nullable<System.Boolean> ClientAuth { get; set; }
		
		/// <summary>
		/// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeSigning")]
		public System.Nullable<System.Boolean> CodeSigning { get; set; }
		
		/// <summary>
		/// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailProtection")]
		public System.Nullable<System.Boolean> EmailProtection { get; set; }
		
		/// <summary>
		/// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ocspSigning")]
		public System.Nullable<System.Boolean> OcspSigning { get; set; }
		
		/// <summary>
		/// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverAuth")]
		public System.Nullable<System.Boolean> ServerAuth { get; set; }
		
		/// <summary>
		/// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStamping")]
		public System.Nullable<System.Boolean> TimeStamping { get; set; }
	}
	
	/// <summary>
	/// Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameConstraints
	{
		
		/// <summary>
		/// Indicates whether or not the name constraints are marked critical.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="critical")]
		public System.Nullable<System.Boolean> Critical { get; set; }
		
		/// <summary>
		/// Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedDnsNames")]
		public string[] ExcludedDnsNames { get; set; }
		
		/// <summary>
		/// Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedEmailAddresses")]
		public string[] ExcludedEmailAddresses { get; set; }
		
		/// <summary>
		/// Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedIpRanges")]
		public string[] ExcludedIpRanges { get; set; }
		
		/// <summary>
		/// Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedUris")]
		public string[] ExcludedUris { get; set; }
		
		/// <summary>
		/// Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permittedDnsNames")]
		public string[] PermittedDnsNames { get; set; }
		
		/// <summary>
		/// Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permittedEmailAddresses")]
		public string[] PermittedEmailAddresses { get; set; }
		
		/// <summary>
		/// Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permittedIpRanges")]
		public string[] PermittedIpRanges { get; set; }
		
		/// <summary>
		/// Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permittedUris")]
		public string[] PermittedUris { get; set; }
	}
	
	/// <summary>
	/// Describes constraints on a Certificate's Subject and SubjectAltNames.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateIdentityConstraints
	{
		
		/// <summary>
		/// Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowSubjectAltNamesPassthrough")]
		public System.Nullable<System.Boolean> AllowSubjectAltNamesPassthrough { get; set; }
		
		/// <summary>
		/// Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowSubjectPassthrough")]
		public System.Nullable<System.Boolean> AllowSubjectPassthrough { get; set; }
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="celExpression")]
		public Expr CelExpression { get; set; }
	}
	
	/// <summary>
	/// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateExtensionConstraints
	{
		
		/// <summary>
		/// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalExtensions")]
		public ObjectId[] AdditionalExtensions { get; set; }
		
		/// <summary>
		/// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="knownExtensions")]
		public string[] KnownExtensions { get; set; }
	}
	
	/// <summary>
	/// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishingOptions
	{
		
		/// <summary>
		/// Optional. Specifies the encoding format of each CertificateAuthority's CA certificate and CRLs. If this is omitted, CA certificates and CRLs will be published in PEM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encodingFormat")]
		public System.Nullable<PublishingOptionsEncodingFormat> EncodingFormat { get; set; }
		
		/// <summary>
		/// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishCaCert")]
		public System.Nullable<System.Boolean> PublishCaCert { get; set; }
		
		/// <summary>
		/// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishCrl")]
		public System.Nullable<System.Boolean> PublishCrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublishingOptionsEncodingFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCODING_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CaPoolTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVOPS = 2,
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelOperationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertChain
	{
		
		/// <summary>
		/// The certificates that form the CA chain, from leaf to root order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public string[] Certificates { get; set; }
	}
	
	/// <summary>
	/// A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Certificate
	{
		
		/// <summary>
		/// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateDescription")]
		public CertificateDescription CertificateDescription { get; set; }
		
		/// <summary>
		/// Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateTemplate")]
		public string CertificateTemplate { get; set; }
		
		/// <summary>
		/// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public CertificateConfig Config { get; set; }
		
		/// <summary>
		/// Output only. The time at which this Certificate was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the issuing CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuerCertificateAuthority")]
		public string IssuerCertificateAuthority { get; set; }
		
		/// <summary>
		/// Optional. Labels with user-defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetime")]
		public string Lifetime { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The pem-encoded, signed X.509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCertificate")]
		public string PemCertificate { get; set; }
		
		/// <summary>
		/// Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCertificateChain")]
		public string[] PemCertificateChain { get; set; }
		
		/// <summary>
		/// Immutable. A pem-encoded X.509 certificate signing request (CSR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCsr")]
		public string PemCsr { get; set; }
		
		/// <summary>
		/// Describes fields that are relavent to the revocation of a Certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocationDetails")]
		public RevocationDetails RevocationDetails { get; set; }
		
		/// <summary>
		/// Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectMode")]
		public System.Nullable<CertificateSubjectMode> SubjectMode { get; set; }
		
		/// <summary>
		/// Output only. The time at which this Certificate was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateDescription
	{
		
		/// <summary>
		/// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aiaIssuingCertificateUrls")]
		public string[] AiaIssuingCertificateUrls { get; set; }
		
		/// <summary>
		/// A KeyId identifies a specific public key, usually by hashing the public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorityKeyId")]
		public KeyId AuthorityKeyId { get; set; }
		
		/// <summary>
		/// A group of fingerprints for the x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certFingerprint")]
		public CertificateFingerprint CertFingerprint { get; set; }
		
		/// <summary>
		/// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crlDistributionPoints")]
		public string[] CrlDistributionPoints { get; set; }
		
		/// <summary>
		/// A PublicKey describes a public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public PublicKey PublicKey { get; set; }
		
		/// <summary>
		/// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectDescription")]
		public SubjectDescription SubjectDescription { get; set; }
		
		/// <summary>
		/// A KeyId identifies a specific public key, usually by hashing the public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectKeyId")]
		public KeyId SubjectKeyId { get; set; }
		
		/// <summary>
		/// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x509Description")]
		public X509Parameters X509Description { get; set; }
	}
	
	/// <summary>
	/// A KeyId identifies a specific public key, usually by hashing the public key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyId
	{
		
		/// <summary>
		/// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyId")]
		public string KeyId1 { get; set; }
	}
	
	/// <summary>
	/// A group of fingerprints for the x509 certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateFingerprint
	{
		
		/// <summary>
		/// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Hash")]
		public string Sha256Hash { get; set; }
	}
	
	/// <summary>
	/// A PublicKey describes a public key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicKey
	{
		
		/// <summary>
		/// Required. The format of the public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<PublicKeyFormat> Format { get; set; }
		
		/// <summary>
		/// Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PublicKeyFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEM = 1,
	}
	
	/// <summary>
	/// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubjectDescription
	{
		
		/// <summary>
		/// The serial number encoded in lowercase hexadecimal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexSerialNumber")]
		public string HexSerialNumber { get; set; }
		
		/// <summary>
		/// For convenience, the actual lifetime of an issued certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetime")]
		public string Lifetime { get; set; }
		
		/// <summary>
		/// The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notAfterTime")]
		public string NotAfterTime { get; set; }
		
		/// <summary>
		/// The time at which the certificate becomes valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notBeforeTime")]
		public string NotBeforeTime { get; set; }
		
		/// <summary>
		/// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject Subject { get; set; }
		
		/// <summary>
		/// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectAltName")]
		public SubjectAltNames SubjectAltName { get; set; }
	}
	
	/// <summary>
	/// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subject
	{
		
		/// <summary>
		/// The "common name" of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		/// <summary>
		/// The country code of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The locality or city of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// The organization of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// The organizational_unit of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationalUnit")]
		public string OrganizationalUnit { get; set; }
		
		/// <summary>
		/// The postal code of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The province, territory, or regional state of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="province")]
		public string Province { get; set; }
		
		/// <summary>
		/// The street address of the subject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
	}
	
	/// <summary>
	/// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubjectAltNames
	{
		
		/// <summary>
		/// Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSans")]
		public X509Extension[] CustomSans { get; set; }
		
		/// <summary>
		/// Contains only valid, fully-qualified host names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsNames")]
		public string[] DnsNames { get; set; }
		
		/// <summary>
		/// Contains only valid RFC 2822 E-mail addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddresses")]
		public string[] EmailAddresses { get; set; }
		
		/// <summary>
		/// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddresses")]
		public string[] IpAddresses { get; set; }
		
		/// <summary>
		/// Contains only valid RFC 3986 URIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public string[] Uris { get; set; }
	}
	
	/// <summary>
	/// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateConfig
	{
		
		/// <summary>
		/// A PublicKey describes a public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public PublicKey PublicKey { get; set; }
		
		/// <summary>
		/// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectConfig")]
		public SubjectConfig SubjectConfig { get; set; }
		
		/// <summary>
		/// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="x509Config")]
		public X509Parameters X509Config { get; set; }
	}
	
	/// <summary>
	/// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubjectConfig
	{
		
		/// <summary>
		/// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject Subject { get; set; }
		
		/// <summary>
		/// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectAltName")]
		public SubjectAltNames SubjectAltName { get; set; }
	}
	
	/// <summary>
	/// Describes fields that are relavent to the revocation of a Certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevocationDetails
	{
		
		/// <summary>
		/// Indicates why a Certificate was revoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocationState")]
		public System.Nullable<RevocationDetailsRevocationState> RevocationState { get; set; }
		
		/// <summary>
		/// The time at which this Certificate was revoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocationTime")]
		public string RevocationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RevocationDetailsRevocationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOCATION_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_COMPROMISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_AUTHORITY_COMPROMISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFFILIATION_CHANGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERSEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CESSATION_OF_OPERATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGE_WITHDRAWN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTRIBUTE_AUTHORITY_COMPROMISE = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CertificateSubjectMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBJECT_REQUEST_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFLECTED_SPIFFE = 2,
	}
	
	/// <summary>
	/// A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateAuthority
	{
		
		/// <summary>
		/// URLs where a CertificateAuthority will publish content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessUrls")]
		public AccessUrls AccessUrls { get; set; }
		
		/// <summary>
		/// Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertificateDescriptions")]
		public CertificateDescription[] CaCertificateDescriptions { get; set; }
		
		/// <summary>
		/// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public CertificateConfig Config { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CertificateAuthority was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsBucket")]
		public string GcsBucket { get; set; }
		
		/// <summary>
		/// A Cloud KMS key configuration that a CertificateAuthority will use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keySpec")]
		public KeyVersionSpec KeySpec { get; set; }
		
		/// <summary>
		/// Optional. Labels with user-defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetime")]
		public string Lifetime { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCaCertificates")]
		public string[] PemCaCertificates { get; set; }
		
		/// <summary>
		/// Output only. The State for this CertificateAuthority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CertificateAuthorityState> State { get; set; }
		
		/// <summary>
		/// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subordinateConfig")]
		public SubordinateConfig SubordinateConfig { get; set; }
		
		/// <summary>
		/// Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public CaPoolTier Tier { get; set; }
		
		/// <summary>
		/// Required. Immutable. The Type of this CertificateAuthority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CertificateAuthorityType> Type { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CertificateAuthority was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A Cloud KMS key configuration that a CertificateAuthority will use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyVersionSpec
	{
		
		/// <summary>
		/// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public System.Nullable<KeyVersionSpecAlgorithm> Algorithm { get; set; }
		
		/// <summary>
		/// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudKmsKeyVersion")]
		public string CloudKmsKeyVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum KeyVersionSpecAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN_HASH_ALGORITHM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_PSS_2048_SHA256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_PSS_3072_SHA256 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_PSS_4096_SHA256 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_PKCS1_2048_SHA256 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_PKCS1_3072_SHA256 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_PKCS1_4096_SHA256 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_P256_SHA256 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_P384_SHA384 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CertificateAuthorityState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_USER_ACTIVATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CertificateAuthorityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF_SIGNED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBORDINATE = 2,
	}
	
	/// <summary>
	/// A CertificateRevocationList corresponds to a signed X.509 certificate Revocation List (CRL). A CRL contains the serial numbers of certificates that should no longer be trusted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateRevocationList
	{
		
		/// <summary>
		/// Output only. The location where 'pem_crl' can be accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessUrl")]
		public string AccessUrl { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CertificateRevocationList was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. Labels with user-defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this CertificateRevocationList in the format `projects/*/locations/*/caPools/*certificateAuthorities/*/ certificateRevocationLists/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The PEM-encoded X.509 CRL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCrl")]
		public string PemCrl { get; set; }
		
		/// <summary>
		/// Output only. The revision ID of this CertificateRevocationList. A new revision is committed whenever a new CRL is published. The format is an 8-character hexadecimal string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Output only. The revoked serial numbers that appear in pem_crl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revokedCertificates")]
		public RevokedCertificate[] RevokedCertificates { get; set; }
		
		/// <summary>
		/// Output only. The CRL sequence number that appears in pem_crl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequenceNumber")]
		public string SequenceNumber { get; set; }
		
		/// <summary>
		/// Output only. The State for this CertificateRevocationList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CertificateRevocationListState> State { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CertificateRevocationList was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Describes a revoked Certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokedCertificate
	{
		
		/// <summary>
		/// The resource name for the Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// The serial number of the Certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hexSerialNumber")]
		public string HexSerialNumber { get; set; }
		
		/// <summary>
		/// The reason the Certificate was revoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocationReason")]
		public RevocationDetailsRevocationState RevocationReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CertificateRevocationListState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERSEDED = 2,
	}
	
	/// <summary>
	/// A CertificateTemplate refers to a managed template for certificate issuance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateTemplate
	{
		
		/// <summary>
		/// Output only. The time at which this CertificateTemplate was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. A human-readable description of scenarios this template is intended for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes constraints on a Certificate's Subject and SubjectAltNames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityConstraints")]
		public CertificateIdentityConstraints IdentityConstraints { get; set; }
		
		/// <summary>
		/// Optional. Labels with user-defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. The maximum lifetime allowed for issued Certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum_lifetime the minimum of the two durations will be the maximum lifetime for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumLifetime")]
		public string MaximumLifetime { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passthroughExtensions")]
		public CertificateExtensionConstraints PassthroughExtensions { get; set; }
		
		/// <summary>
		/// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predefinedValues")]
		public X509Parameters PredefinedValues { get; set; }
		
		/// <summary>
		/// Output only. The time at which this CertificateTemplate was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Request message for CertificateAuthorityService.DisableCertificateAuthority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableCertificateAuthorityRequest
	{
		
		/// <summary>
		/// Optional. This field allows this CA to be disabled even if it's being depended on by another resource. However, doing so may result in unintended and unrecoverable effects on any dependent resource(s) since the CA will no longer be able to issue certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreDependentResources")]
		public System.Nullable<System.Boolean> IgnoreDependentResources { get; set; }
		
		/// <summary>
		/// Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Request message for CertificateAuthorityService.EnableCertificateAuthority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableCertificateAuthorityRequest
	{
		
		/// <summary>
		/// Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request message for CertificateAuthorityService.FetchCaCerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FetchCaCertsRequest
	{
		
		/// <summary>
		/// Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Response message for CertificateAuthorityService.FetchCaCerts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FetchCaCertsResponse
	{
		
		/// <summary>
		/// The PEM encoded CA certificate chains of all Certificate Authorities in this CaPool in the ENABLED, DISABLED, or STAGED states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCerts")]
		public CertChain[] CaCerts { get; set; }
	}
	
	/// <summary>
	/// Response message for CertificateAuthorityService.FetchCertificateAuthorityCsr.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FetchCertificateAuthorityCsrResponse
	{
		
		/// <summary>
		/// Output only. The PEM-encoded signed certificate signing request (CSR).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pemCsr")]
		public string PemCsr { get; set; }
	}
	
	/// <summary>
	/// Response message for CertificateAuthorityService.ListCaPools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCaPoolsResponse
	{
		
		/// <summary>
		/// The list of CaPools.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caPools")]
		public CaPool[] CaPools { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListCertificateAuthoritiesRequest.next_page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of locations (e.g. "us-west1") that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message for CertificateAuthorityService.ListCertificateAuthorities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificateAuthoritiesResponse
	{
		
		/// <summary>
		/// The list of CertificateAuthorities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateAuthorities")]
		public CertificateAuthority[] CertificateAuthorities { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListCertificateAuthoritiesRequest.next_page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of locations (e.g. "us-west1") that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message for CertificateAuthorityService.ListCertificateRevocationLists.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificateRevocationListsResponse
	{
		
		/// <summary>
		/// The list of CertificateRevocationLists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateRevocationLists")]
		public CertificateRevocationList[] CertificateRevocationLists { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListCertificateRevocationListsRequest.next_page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of locations (e.g. "us-west1") that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message for CertificateAuthorityService.ListCertificateTemplates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificateTemplatesResponse
	{
		
		/// <summary>
		/// The list of CertificateTemplates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateTemplates")]
		public CertificateTemplate[] CertificateTemplates { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListCertificateTemplatesRequest.next_page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of locations (e.g. "us-west1") that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message for CertificateAuthorityService.ListCertificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCertificatesResponse
	{
		
		/// <summary>
		/// The list of Certificates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public Certificate[] Certificates { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in ListCertificatesRequest.next_page_token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of locations (e.g. "us-west1") that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Operation metadata returned by the CLH during resource state reconciliation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReconciliationOperationMetadata
	{
		
		/// <summary>
		/// DEPRECATED. Use exclusive_action instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteResource")]
		public System.Nullable<System.Boolean> DeleteResource { get; set; }
		
		/// <summary>
		/// Excluisive action returned by the CLH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusiveAction")]
		public System.Nullable<ReconciliationOperationMetadataExclusiveAction> ExclusiveAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReconciliationOperationMetadataExclusiveAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_REPAIR_ACTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 2,
	}
	
	/// <summary>
	/// Request message for CertificateAuthorityService.RevokeCertificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevokeCertificateRequest
	{
		
		/// <summary>
		/// Required. The RevocationReason for revoking this certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public RevocationDetailsRevocationState Reason { get; set; }
		
		/// <summary>
		/// Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Request message for CertificateAuthorityService.UndeleteCertificateAuthority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UndeleteCertificateAuthorityRequest
	{
		
		/// <summary>
		/// Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// FetchCaCerts returns the current trust anchor for the CaPool. This will include CA certificate chains for all Certificate Authorities in the ENABLED, DISABLED, or STAGED states.
		/// Privateca_projects_locations_caPools_fetchCaCerts v1/{caPool}:fetchCaCerts
		/// </summary>
		/// <param name="caPool">Required. The resource name for the CaPool in the format `projects/*/locations/*/caPools/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchCaCertsResponse> Privateca_projects_locations_caPools_fetchCaCertsAsync(string caPool, FetchCaCertsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (caPool==null? "" : System.Uri.EscapeDataString(caPool))+":fetchCaCerts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FetchCaCertsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
		/// Privateca_projects_locations_operations_delete v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource to be deleted.</param>
		/// <param name="requestId">Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="ignoreDependentResources">Optional. This field allows this ca to be deleted even if it's being depended on by another resource. However, doing so may result in unintended and unrecoverable effects on any dependent resource(s) since the CA will no longer be able to issue certificates.</param>
		/// <param name="skipGracePeriod">Optional. If this flag is set, the Certificate Authority will be deleted as soon as possible without a 30-day grace period where undeletion would have been allowed. If you proceed, there will be no way to recover this CA.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Privateca_projects_locations_operations_deleteAsync(string name, string requestId, bool ignoreDependentResources, bool skipGracePeriod, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&ignoreDependentResources="+ignoreDependentResources+"&skipGracePeriod="+skipGracePeriod;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Privateca_projects_locations_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a CertificateTemplate.
		/// Privateca_projects_locations_certificateTemplates_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.</param>
		/// <param name="requestId">Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="updateMask">Required. A list of fields to be updated in this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_certificateTemplates_patchAsync(string name, string requestId, string updateMask, CertificateTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Privateca_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Privateca_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Privateca_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Privateca_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. After the parent Certificate Authority signs a certificate signing request from FetchCertificateAuthorityCsr, this method can complete the activation process.
		/// Privateca_projects_locations_caPools_certificateAuthorities_activate v1/{name}:activate
		/// </summary>
		/// <param name="name">Required. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_caPools_certificateAuthorities_activateAsync(string name, ActivateCertificateAuthorityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Privateca_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Privateca_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disable a CertificateAuthority.
		/// Privateca_projects_locations_caPools_certificateAuthorities_disable v1/{name}:disable
		/// </summary>
		/// <param name="name">Required. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_caPools_certificateAuthorities_disableAsync(string name, DisableCertificateAuthorityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enable a CertificateAuthority.
		/// Privateca_projects_locations_caPools_certificateAuthorities_enable v1/{name}:enable
		/// </summary>
		/// <param name="name">Required. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_caPools_certificateAuthorities_enableAsync(string name, EnableCertificateAuthorityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Fetch a certificate signing request (CSR) from a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. The CSR must then be signed by the desired parent Certificate Authority, which could be another CertificateAuthority resource, or could be an on-prem certificate authority. See also ActivateCertificateAuthority.
		/// Privateca_projects_locations_caPools_certificateAuthorities_fetch v1/{name}:fetch
		/// </summary>
		/// <param name="name">Required. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchCertificateAuthorityCsrResponse> Privateca_projects_locations_caPools_certificateAuthorities_fetchAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":fetch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FetchCertificateAuthorityCsrResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke a Certificate.
		/// Privateca_projects_locations_caPools_certificates_revoke v1/{name}:revoke
		/// </summary>
		/// <param name="name">Required. The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Certificate> Privateca_projects_locations_caPools_certificates_revokeAsync(string name, RevokeCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":revoke";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Certificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Undelete a CertificateAuthority that has been deleted.
		/// Privateca_projects_locations_caPools_certificateAuthorities_undelete v1/{name}:undelete
		/// </summary>
		/// <param name="name">Required. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_caPools_certificateAuthorities_undeleteAsync(string name, UndeleteCertificateAuthorityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":undelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists CaPools.
		/// Privateca_projects_locations_caPools_list v1/{parent}/caPools
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the CaPools, in the format `projects/*/locations/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response.</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted.</param>
		/// <param name="pageSize">Optional. Limit on the number of CaPools to include in the response. Further CaPools can subsequently be obtained by including the ListCaPoolsResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Pagination token, returned earlier via ListCaPoolsResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCaPoolsResponse> Privateca_projects_locations_caPools_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/caPools&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCaPoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a CaPool.
		/// Privateca_projects_locations_caPools_create v1/{parent}/caPools
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the CaPool, in the format `projects/*/locations/*`.</param>
		/// <param name="caPoolId">Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`</param>
		/// <param name="requestId">Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_caPools_createAsync(string parent, string caPoolId, string requestId, CaPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/caPools&caPoolId=" + (caPoolId==null? "" : System.Uri.EscapeDataString(caPoolId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists CertificateAuthorities.
		/// Privateca_projects_locations_caPools_certificateAuthorities_list v1/{parent}/certificateAuthorities
		/// </summary>
		/// <param name="parent">Required. The resource name of the CaPool associated with the CertificateAuthorities, in the format `projects/*/locations/*/caPools/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response.</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted.</param>
		/// <param name="pageSize">Optional. Limit on the number of CertificateAuthorities to include in the response. Further CertificateAuthorities can subsequently be obtained by including the ListCertificateAuthoritiesResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Pagination token, returned earlier via ListCertificateAuthoritiesResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCertificateAuthoritiesResponse> Privateca_projects_locations_caPools_certificateAuthorities_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/certificateAuthorities&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCertificateAuthoritiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CertificateAuthority in a given Project and Location.
		/// Privateca_projects_locations_caPools_certificateAuthorities_create v1/{parent}/certificateAuthorities
		/// </summary>
		/// <param name="parent">Required. The resource name of the CaPool associated with the CertificateAuthorities, in the format `projects/*/locations/*/caPools/*`.</param>
		/// <param name="certificateAuthorityId">Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`</param>
		/// <param name="requestId">Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_caPools_certificateAuthorities_createAsync(string parent, string certificateAuthorityId, string requestId, CertificateAuthority requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/certificateAuthorities&certificateAuthorityId=" + (certificateAuthorityId==null? "" : System.Uri.EscapeDataString(certificateAuthorityId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists CertificateRevocationLists.
		/// Privateca_projects_locations_caPools_certificateAuthorities_certificateRevocationLists_list v1/{parent}/certificateRevocationLists
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the CertificateRevocationLists, in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response.</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted.</param>
		/// <param name="pageSize">Optional. Limit on the number of CertificateRevocationLists to include in the response. Further CertificateRevocationLists can subsequently be obtained by including the ListCertificateRevocationListsResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Pagination token, returned earlier via ListCertificateRevocationListsResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCertificateRevocationListsResponse> Privateca_projects_locations_caPools_certificateAuthorities_certificateRevocationLists_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/certificateRevocationLists&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCertificateRevocationListsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists CertificateTemplates.
		/// Privateca_projects_locations_certificateTemplates_list v1/{parent}/certificateTemplates
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the CertificateTemplates, in the format `projects/*/locations/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response.</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted.</param>
		/// <param name="pageSize">Optional. Limit on the number of CertificateTemplates to include in the response. Further CertificateTemplates can subsequently be obtained by including the ListCertificateTemplatesResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Pagination token, returned earlier via ListCertificateTemplatesResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCertificateTemplatesResponse> Privateca_projects_locations_certificateTemplates_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/certificateTemplates&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCertificateTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CertificateTemplate in a given Project and Location.
		/// Privateca_projects_locations_certificateTemplates_create v1/{parent}/certificateTemplates
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the CertificateTemplate, in the format `projects/*/locations/*`.</param>
		/// <param name="certificateTemplateId">Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`</param>
		/// <param name="requestId">Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Privateca_projects_locations_certificateTemplates_createAsync(string parent, string certificateTemplateId, string requestId, CertificateTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/certificateTemplates&certificateTemplateId=" + (certificateTemplateId==null? "" : System.Uri.EscapeDataString(certificateTemplateId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Certificates.
		/// Privateca_projects_locations_caPools_certificates_list v1/{parent}/certificates
		/// </summary>
		/// <param name="parent">Required. The resource name of the location associated with the Certificates, in the format `projects/*/locations/*/caPools/*`.</param>
		/// <param name="filter">Optional. Only include resources that match the filter in the response. For details on supported filters and syntax, see [Certificates Filtering documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).</param>
		/// <param name="orderBy">Optional. Specify how the results should be sorted. For details on supported fields and syntax, see [Certificates Sorting documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).</param>
		/// <param name="pageSize">Optional. Limit on the number of Certificates to include in the response. Further Certificates can subsequently be obtained by including the ListCertificatesResponse.next_page_token in a subsequent request. If unspecified, the server will pick an appropriate default.</param>
		/// <param name="pageToken">Optional. Pagination token, returned earlier via ListCertificatesResponse.next_page_token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCertificatesResponse> Privateca_projects_locations_caPools_certificates_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/certificates&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Certificate in a given Project, Location from a particular CaPool.
		/// Privateca_projects_locations_caPools_certificates_create v1/{parent}/certificates
		/// </summary>
		/// <param name="parent">Required. The resource name of the CaPool associated with the Certificate, in the format `projects/*/locations/*/caPools/*`.</param>
		/// <param name="certificateId">Optional. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a CertificateAuthority in the Enterprise CertificateAuthority.Tier, but is optional and its value is ignored otherwise.</param>
		/// <param name="issuingCertificateAuthorityId">Optional. The resource ID of the CertificateAuthority that should issue the certificate. This optional field will ignore the load-balancing scheme of the Pool and directly issue the certificate from the CA with the specified ID, contained in the same CaPool referenced by `parent`. Per-CA quota rules apply. If left empty, a CertificateAuthority will be chosen from the CaPool by the service. For example, to issue a Certificate from a Certificate Authority with resource name "projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca", you can set the parent to "projects/my-project/locations/us-central1/caPools/my-pool" and the issuing_certificate_authority_id to "my-ca".</param>
		/// <param name="requestId">Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).</param>
		/// <param name="validateOnly">Optional. If this is true, no Certificate resource will be persisted regardless of the CaPool's tier, and the returned Certificate will not contain the pem_certificate field.</param>
		/// <returns>Successful response</returns>
		public async Task<Certificate> Privateca_projects_locations_caPools_certificates_createAsync(string parent, string certificateId, string issuingCertificateAuthorityId, string requestId, bool validateOnly, Certificate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/certificates&certificateId=" + (certificateId==null? "" : System.Uri.EscapeDataString(certificateId))+"&issuingCertificateAuthorityId=" + (issuingCertificateAuthorityId==null? "" : System.Uri.EscapeDataString(issuingCertificateAuthorityId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Certificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Privateca_projects_locations_certificateTemplates_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Privateca_projects_locations_certificateTemplates_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Privateca_projects_locations_certificateTemplates_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Privateca_projects_locations_certificateTemplates_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Privateca_projects_locations_certificateTemplates_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Privateca_projects_locations_certificateTemplates_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestIamPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
