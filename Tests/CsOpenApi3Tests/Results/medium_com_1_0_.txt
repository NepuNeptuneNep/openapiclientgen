//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Welcome
		/// **Test Endpoint**
		/// Returns the information about the Medium API
		/// 
		/// Get 
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetReturn> GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Article Info
		/// Returns the article related information such as *Title, Subtitle, Tags,  Topics* (assigned by Medium), *Publication, Published date and time,  Clap Count, Voter Count, Word Count, Reading Time, Language, etcâ€¦*
		/// 
		/// Article_article_idGet article/{article_id}
		/// </summary>
		/// <param name="article_id">It's a unique hash id assigned to every Medium Article.</param>
		/// <returns>OK</returns>
		public async Task<Article_article_idGetReturn> Article_article_idGetAsync(string article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "article/"+ (article_id==null? "" : System.Uri.EscapeDataString(article_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article_article_idGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Article's Content
		/// Returns the content of an article/story, for the corresponding `article_id`
		/// 
		/// Article_article_idContentGet article/{article_id}/content
		/// </summary>
		/// <param name="article_id">It's a unique hash id assigned to every Medium Article.</param>
		/// <returns>OK</returns>
		public async Task<Article_article_idContentGetReturn> Article_article_idContentGetAsync(string article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "article/"+ (article_id==null? "" : System.Uri.EscapeDataString(article_id))+"/content";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article_article_idContentGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Article Fans
		/// Returns a list of `user_ids` of the people who clapped on the article (a.k.a `voters`).
		/// 
		/// Article_article_idFansGet article/{article_id}/fans
		/// </summary>
		/// <param name="article_id">It's a unique hash id assigned to every Medium Article.</param>
		/// <returns>OK</returns>
		public async Task<Article_article_idFansGetReturn> Article_article_idFansGetAsync(string article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "article/"+ (article_id==null? "" : System.Uri.EscapeDataString(article_id))+"/fans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article_article_idFansGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Article's Markdown
		/// Returns the markdown of an article/story from Medium, for the corresponding `article_id`
		/// 
		/// Article_article_idMarkdownGet article/{article_id}/markdown
		/// </summary>
		/// <param name="article_id">It's a unique hash id assigned to every Medium Article.</param>
		/// <returns>OK</returns>
		public async Task<Article_article_idMarkdownGetReturn> Article_article_idMarkdownGetAsync(string article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "article/"+ (article_id==null? "" : System.Uri.EscapeDataString(article_id))+"/markdown";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article_article_idMarkdownGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Related Articles
		/// Returns a list of `article_ids` of the related posts. (Length = 5)
		/// 
		/// **Note:** If the given article is self-published, related posts will belong to the same author,  else related posts will belong to the publication in which the article is published.
		/// 
		/// Article_article_idRelatedGet article/{article_id}/related
		/// </summary>
		/// <param name="article_id">It's a unique hash id assigned to every Medium Article.</param>
		/// <returns>OK</returns>
		public async Task<Article_article_idRelatedGetReturn> Article_article_idRelatedGetAsync(string article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "article/"+ (article_id==null? "" : System.Uri.EscapeDataString(article_id))+"/related";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article_article_idRelatedGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Article Responses
		/// Returns a list of responses (`response_ids`, same as `article_ids`) for a given article (`article_id`)
		/// Note: To see the content of the response, use the "Get Article's Content" endpoint
		/// 
		/// Article_article_idResponsesGet article/{article_id}/responses
		/// </summary>
		/// <param name="article_id">It's a unique hash id assigned to every Medium Article.</param>
		/// <returns>OK</returns>
		public async Task<Article_article_idResponsesGetReturn> Article_article_idResponsesGetAsync(string article_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "article/"+ (article_id==null? "" : System.Uri.EscapeDataString(article_id))+"/responses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article_article_idResponsesGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Latest Posts
		/// Returns a list of latest posts (`article_ids`) for a topic/niche (as classified by the Medium platform). Example of a topic/niche can be:
		/// * blockchain
		/// * relationships
		/// * mental-health, etc â€¦
		/// 
		/// These are known as `topic_slugs`. At any given moment, this endpoint will return a list of 25 articles (`article_ids`).
		/// 
		/// Latestposts_topic_slugGet latestposts/{topic_slug}
		/// </summary>
		/// <param name="topic_slug">It's a unique string, usually hyphen-separated, representing a topic/niche, as classified by Medium.</param>
		/// <returns>OK</returns>
		public async Task<Latestposts_topic_slugGetReturn> Latestposts_topic_slugGetAsync(string topic_slug, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "latestposts/"+ (topic_slug==null? "" : System.Uri.EscapeDataString(topic_slug));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Latestposts_topic_slugGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get List Info
		/// Returns the list-related information such as *id, name, author, description,  thumbnail image url, creation datetime, last article inserted datetime,  number of articles in the list, claps, voters, and comments/responses*.
		/// 
		/// List_list_idGet list/{list_id}
		/// </summary>
		/// <param name="list_id">It's a unique hash id assigned to every Medium List.</param>
		/// <returns>OK</returns>
		public async Task<List_list_idGetReturn> List_list_idGetAsync(string list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list/"+ (list_id==null? "" : System.Uri.EscapeDataString(list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<List_list_idGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get List Articles
		/// Returns an array of `articles_ids` present in the given Medium List.
		/// 
		/// List_list_idArticlesGet list/{list_id}/articles
		/// </summary>
		/// <param name="list_id">It's a unique hash id assigned to every Medium List.</param>
		/// <returns>OK</returns>
		public async Task<List_list_idArticlesGetReturn> List_list_idArticlesGetAsync(string list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list/"+ (list_id==null? "" : System.Uri.EscapeDataString(list_id))+"/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<List_list_idArticlesGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get List Responses
		/// Returns an array of `response_ids` of the comments (same as `article_ids`) on the given Medium List.
		/// 
		/// List_list_idResponsesGet list/{list_id}/responses
		/// </summary>
		/// <param name="list_id">It's a unique hash id assigned to every Medium List.</param>
		/// <returns>OK</returns>
		public async Task<List_list_idResponsesGetReturn> List_list_idResponsesGetAsync(string list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list/"+ (list_id==null? "" : System.Uri.EscapeDataString(list_id))+"/responses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<List_list_idResponsesGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Publication ID
		/// Returns the unique `publication_id` for the given `publication_slug`.
		/// 
		/// **Note:** You can find the `publication_slug` from the publication's homepage URL.
		/// - medium.com/**publication_slug**
		/// 
		/// PublicationId_for_publication_slugGet publication/id_for/{publication_slug}
		/// </summary>
		/// <param name="publication_slug">It's a lowercased hyphen-separated unique string alloted to each Medium Publication.</param>
		/// <returns>OK</returns>
		public async Task<PublicationId_for_publication_slugGetReturn> PublicationId_for_publication_slugGetAsync(string publication_slug, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "publication/id_for/"+ (publication_slug==null? "" : System.Uri.EscapeDataString(publication_slug));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicationId_for_publication_slugGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Publication Info
		/// Returns the publication related information such as *Publication name, Tagline, Description, Tags, Followers Count, Twitter username, Instagram username, Facebook Page name, etc â€¦*
		/// 
		/// **Note:** If you don't know the `publication_id`, you can get it from any article published by it. Use endpoint "/article/{article_id}" to retrieve the `publication_id`.
		/// 
		/// Publication_publication_idGet publication/{publication_id}
		/// </summary>
		/// <param name="publication_id">It's a unique hash id assigned to every Medium Publication.</param>
		/// <returns>OK</returns>
		public async Task<Publication_publication_idGetReturn> Publication_publication_idGetAsync(string publication_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "publication/"+ (publication_id==null? "" : System.Uri.EscapeDataString(publication_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Publication_publication_idGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Publication Articles
		/// Returns the list of `articles_ids`, of the latest 25 articles, posted in that publication.
		/// 
		/// Publication_publication_idArticlesGetByFrom publication/{publication_id}/articles
		/// </summary>
		/// <param name="publication_id">It's a unique hash id assigned to every Medium Publication.</param>
		/// <param name="from">To get the articles before specified date and time.</param>
		/// <returns>OK</returns>
		public async Task<Publication_publication_idArticlesGetByFromReturn> Publication_publication_idArticlesGetByFromAsync(string publication_id, string from, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "publication/"+ (publication_id==null? "" : System.Uri.EscapeDataString(publication_id))+"/articles&from=" + (from==null? "" : System.Uri.EscapeDataString(from));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Publication_publication_idArticlesGetByFromReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Publication Newsletter
		/// Returns the newsletter related information such as *id, name, description, slug, creator_id, subscribers, image_url, etc â€¦*
		/// 
		/// **Note:** If you don't know the `publication_id`, you can get it from any article published by it. Use endpoint "/article/{article_id}" to retrieve the `publication_id`.
		/// 
		/// Publication_publication_idNewsletterGet publication/{publication_id}/newsletter
		/// </summary>
		/// <param name="publication_id">It's a unique hash id assigned to every Medium Publication.</param>
		/// <returns>OK</returns>
		public async Task<Publication_publication_idNewsletterGetReturn> Publication_publication_idNewsletterGetAsync(string publication_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "publication/"+ (publication_id==null? "" : System.Uri.EscapeDataString(publication_id))+"/newsletter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Publication_publication_idNewsletterGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Related Tags
		/// Returns a list of `related_tags` for the given `tag`.
		/// 
		/// Related_tags_tagGet related_tags/{tag}
		/// </summary>
		/// <param name="tag">It's a unique string, usually hyphen-separated, representing a class of content.</param>
		/// <returns>OK</returns>
		public async Task<Related_tags_tagGetReturn> Related_tags_tagGetAsync(string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "related_tags/"+ (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Related_tags_tagGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search Articles
		/// Returns the list of `articles_ids` for the given search query results. (Max Length = 1000)
		/// 
		/// SearchArticlesGetByQuery search/articles?query={query}
		/// </summary>
		/// <param name="query">Search query</param>
		/// <returns>OK</returns>
		public async Task<SearchArticlesGetByQueryReturn> SearchArticlesGetByQueryAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/articles?query={query}&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchArticlesGetByQueryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search Lists
		/// Returns an array of `list_ids` for the given search query results. (Max Length = 1000)
		/// 
		/// SearchListsGetByQuery search/lists?query={query}
		/// </summary>
		/// <param name="query">Search query</param>
		/// <returns>OK</returns>
		public async Task<SearchListsGetByQueryReturn> SearchListsGetByQueryAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/lists?query={query}&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchListsGetByQueryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search Publications
		/// Returns the list of `publication_ids` for the given search query results. (Max Length = 1000)
		/// 
		/// SearchPublicationsGetByQuery search/publications?query={query}
		/// </summary>
		/// <param name="query">Search query</param>
		/// <returns>OK</returns>
		public async Task<SearchPublicationsGetByQueryReturn> SearchPublicationsGetByQueryAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/publications?query={query}&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchPublicationsGetByQueryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search Tags
		/// Returns a list of `tags` for the given search query results. (Max Length = 1000)
		/// 
		/// SearchTagsGetByQuery search/tags?query={query}
		/// </summary>
		/// <param name="query">Search query</param>
		/// <returns>OK</returns>
		public async Task<SearchTagsGetByQueryReturn> SearchTagsGetByQueryAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/tags?query={query}&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchTagsGetByQueryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search Users
		/// Returns a list of `user_ids` for the given search query results. (Max Length = 1000)
		/// 
		/// SearchUsersGetByQuery search/users?query={query}
		/// </summary>
		/// <param name="query">Search query</param>
		/// <returns>OK</returns>
		public async Task<SearchUsersGetByQueryReturn> SearchUsersGetByQueryAsync(string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/users?query={query}&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchUsersGetByQueryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Top Writers
		/// Returns a list of top writers (`user_ids`) within a particular topic/niche (`topic_slug`).
		/// e.g.
		/// - blockchain
		/// - relationships
		/// - artificial-intelligence, etc ...
		/// 
		/// **Note:** You can use optional `count` query parameter to limit the number of results.  The maximum number of top writers within a topic/niche will be 250.
		/// 
		/// Top_writer_topic_slugGetByCount top_writer/{topic_slug}
		/// </summary>
		/// <param name="topic_slug">It's a unique string, usually hyphen-separated, representing a topic/niche, as classified by Medium.</param>
		/// <param name="count">Limits the number of `article_ids` in the result.</param>
		/// <returns>OK</returns>
		public async Task<Top_writer_topic_slugGetByCountReturn> Top_writer_topic_slugGetByCountAsync(string topic_slug, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "top_writer/"+ (topic_slug==null? "" : System.Uri.EscapeDataString(topic_slug))+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Top_writer_topic_slugGetByCountReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Topfeeds
		/// Returns a list of `article_ids` (length: 25) for the given `tag` and `mode`.
		/// 
		/// Topfeeds_tag_modeGetByAfterAndCount topfeeds/{tag}/{mode}
		/// </summary>
		/// <param name="tag">It's a unique string, usually hyphen-separated, representing a class of content.</param>
		/// <param name="mode">Mode:
		///
		///  - `hot` : For getting trending articles
		///  - `new` : For getting latest articles
		///  - `top_year` : For getting best articles of the year
		///  - `top_month` : For getting best articles of the month
		///  - `top_week` : For getting best articles of the week
		///  - `top_all_time`: For getting best article of all time
		///</param>
		/// <param name="after">To get the subsequent top feeds. (`after` &lt; 250)</param>
		/// <param name="count">To limit the number of top feeds. (`count` &lt; 25)</param>
		/// <returns>OK</returns>
		public async Task<Topfeeds_tag_modeGetByAfterAndCountReturn> Topfeeds_tag_modeGetByAfterAndCountAsync(string tag, string mode, int after, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "topfeeds/"+ (tag==null? "" : System.Uri.EscapeDataString(tag))+"/"+ (mode==null? "" : System.Uri.EscapeDataString(mode))+"&after="+after+"&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Topfeeds_tag_modeGetByAfterAndCountReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User ID
		/// Returns the unique `user_id` for the given `username`.
		/// 
		/// **Note:** You can find the `username` from the user's/author's profile page URL.
		/// - **username**.medium.com
		/// - medium.com/@**username**
		/// 
		/// UserId_for_usernameGet user/id_for/{username}
		/// </summary>
		/// <param name="username">It's a unique string chosen by every single Medium user.</param>
		/// <returns>OK</returns>
		public async Task<UserId_for_usernameGetReturn> UserId_for_usernameGetAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/id_for/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserId_for_usernameGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User Info
		/// Returns user related information like *Full name, Bio, Followers count, Following count, Twitter username, Profile-image URL, User ID, etc...*
		/// 
		/// It takes `user_id` as the path parameter.
		/// 
		/// **Note:** If you don't know the `user_id`, then you can get it from the endpoint\
		/// '/user/id_for/{`username`}'.
		/// 
		/// User_user_idGet user/{user_id}
		/// </summary>
		/// <param name="user_id">It's a unique hash id assigned to every single Medium user.</param>
		/// <returns>OK</returns>
		public async Task<User_user_idGetReturn> User_user_idGetAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Articles
		/// Returns the list of articles (`article_ids`) written by the user.
		/// 
		/// User_user_idArticlesGet user/{user_id}/articles
		/// </summary>
		/// <param name="user_id">Unique hash id assigned to every single Medium user.</param>
		/// <returns>OK</returns>
		public async Task<User_user_idArticlesGetReturn> User_user_idArticlesGetAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idArticlesGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User Followers
		/// Returns the list of `user_ids` of the user's followers.
		/// 
		/// **Note:** The length of this followers' list might be different from what you get in  the "Get User Info" Endpoint. It's because, this list doesn't include Medium Users who  left the platform.
		/// If you really need the exact followers' count, use this endpoint to get the followers'  list and take its length as the exact followers' count
		/// 
		/// User_user_idFollowersGetByCount user/{user_id}/followers
		/// </summary>
		/// <param name="user_id">Unique hash id assigned to every single Medium user.</param>
		/// <param name="count">To limit the number of results. (count &lt; 1500)</param>
		/// <returns>OK</returns>
		public async Task<User_user_idFollowersGetByCountReturn> User_user_idFollowersGetByCountAsync(string user_id, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/followers&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idFollowersGetByCountReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User Following
		/// Returns the list of `user_ids` of the user's followings.
		/// 
		/// **Note:** Currently, this list does not contain the `publication_ids` of the publications that the user is following.
		/// 
		/// User_user_idFollowingGetByCount user/{user_id}/following
		/// </summary>
		/// <param name="user_id">Unique hash id assigned to every single Medium user.</param>
		/// <param name="count">To limit the number of results. (count &lt; 1500)</param>
		/// <returns>OK</returns>
		public async Task<User_user_idFollowingGetByCountReturn> User_user_idFollowingGetByCountAsync(string user_id, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/following&count="+count;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idFollowingGetByCountReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Interests
		/// Returns a list of tags that the given user follows.
		/// 
		/// User_user_idInterestsGet user/{user_id}/interests
		/// </summary>
		/// <param name="user_id">Unique hash id assigned to every single Medium user.</param>
		/// <returns>OK</returns>
		public async Task<User_user_idInterestsGetReturn> User_user_idInterestsGetAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/interests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idInterestsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Lists
		/// Returns an array of `list_ids` created by the user.
		/// 
		/// **Note:** You can check whether the use has created lists or not beforehand. Check the  `has_list` attribute in the "Article Info" endpoint.
		/// 
		/// User_user_idListsGet user/{user_id}/lists
		/// </summary>
		/// <param name="user_id">Unique hash id assigned to every single Medium user.</param>
		/// <returns>OK</returns>
		public async Task<User_user_idListsGetReturn> User_user_idListsGetAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idListsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Publications
		/// Returns a list of `publication_ids` where the user is the editor and/or creator.
		/// 
		/// User_user_idPublicationsGet user/{user_id}/publications
		/// </summary>
		/// <param name="user_id">Unique hash id assigned to every single Medium user.</param>
		/// <returns>OK</returns>
		public async Task<User_user_idPublicationsGetReturn> User_user_idPublicationsGetAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/publications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idPublicationsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Top Articles
		/// Returns a list of `article_ids` of the top 10 articles on the user's profile, for a given `user_id`.
		/// 
		/// User_user_idTop_articlesGet user/{user_id}/top_articles
		/// </summary>
		/// <param name="user_id">Unique hash id assigned to every single Medium user.</param>
		/// <returns>OK</returns>
		public async Task<User_user_idTop_articlesGetReturn> User_user_idTop_articlesGetAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/top_articles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User_user_idTop_articlesGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetReturn
	{
		
		/// <summary>
		/// Full name of the API's developer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developer")]
		public string Developer { get; set; }
		
		/// <summary>
		/// Link to the Medium API's documentation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string Documentation { get; set; }
		
		/// <summary>
		/// Email ID of the developer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// LinkedIn Page URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedin")]
		public string Linkedin { get; set; }
		
		/// <summary>
		/// Full name of the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Twitter Profile URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twitter")]
		public string Twitter { get; set; }
		
		/// <summary>
		/// Link to the Medium API's website
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	public class Article_article_idGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claps")]
		public System.Nullable<System.Int32> Claps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_locked")]
		public System.Nullable<System.Boolean> Is_locked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_series")]
		public System.Nullable<System.Boolean> Is_series { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified_at")]
		public string Last_modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publication_id")]
		public string Publication_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="published_at")]
		public string Published_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reading_time")]
		public System.Nullable<System.Double> Reading_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses_count")]
		public System.Nullable<System.Int32> Responses_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public string[] Topics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voters")]
		public System.Nullable<System.Int32> Voters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_count")]
		public System.Nullable<System.Int32> Word_count { get; set; }
	}
	
	public class Article_article_idContentGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	public class Article_article_idFansGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="article_id")]
		public string Article_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voters")]
		public string[] Voters { get; set; }
	}
	
	public class Article_article_idMarkdownGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="markdown")]
		public string Markdown { get; set; }
	}
	
	public class Article_article_idRelatedGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_articles")]
		public string[] Related_articles { get; set; }
	}
	
	public class Article_article_idResponsesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public string[] Responses { get; set; }
	}
	
	public class Latestposts_topic_slugGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="latestposts")]
		public string[] Latestposts { get; set; }
	}
	
	public class List_list_idGetReturn
	{
		
		/// <summary>
		/// `user_id` of the author
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claps")]
		public System.Nullable<System.Int32> Claps { get; set; }
		
		/// <summary>
		/// Number of articles in the list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_item_inserted_at")]
		public string Last_item_inserted_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses_count")]
		public System.Nullable<System.Int32> Responses_count { get; set; }
		
		/// <summary>
		/// Image URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voters")]
		public System.Nullable<System.Int32> Voters { get; set; }
	}
	
	public class List_list_idArticlesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="list_articles")]
		public string[] List_articles { get; set; }
	}
	
	public class List_list_idResponsesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public string[] Responses { get; set; }
	}
	
	public class PublicationId_for_publication_slugGetReturn
	{
		
		/// <summary>
		/// Unique hash id of the publication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publication_id")]
		public string Publication_id { get; set; }
		
		/// <summary>
		/// Same publication slug that you passed in the path parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publication_slug")]
		public string Publication_slug { get; set; }
	}
	
	public class Publication_publication_idGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public string[] Editors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facebook_pagename")]
		public string Facebook_pagename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public System.Nullable<System.Int32> Followers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instagram_username")]
		public string Instagram_username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagline")]
		public string Tagline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitter_username")]
		public string Twitter_username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class Publication_publication_idArticlesGetByFromReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="publication_articles")]
		public string[] Publication_articles { get; set; }
	}
	
	public class Publication_publication_idNewsletterGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="creator_id")]
		public string Creator_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscribers")]
		public System.Nullable<System.Int32> Subscribers { get; set; }
	}
	
	public class Related_tags_tagGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="given_tag")]
		public string Given_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_tags")]
		public string[] Related_tags { get; set; }
	}
	
	public class SearchArticlesGetByQueryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="articles")]
		public string[] Articles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search_query")]
		public string Search_query { get; set; }
	}
	
	public class SearchListsGetByQueryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="lists")]
		public string[] Lists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search_query")]
		public string Search_query { get; set; }
	}
	
	public class SearchPublicationsGetByQueryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="publications")]
		public string[] Publications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search_query")]
		public string Search_query { get; set; }
	}
	
	public class SearchTagsGetByQueryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="search_query")]
		public string Search_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	public class SearchUsersGetByQueryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="search_query")]
		public string Search_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public string[] Users { get; set; }
	}
	
	public class Top_writer_topic_slugGetByCountReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="top_writers")]
		public string[] Top_writers { get; set; }
	}
	
	public class Topfeeds_tag_modeGetByAfterAndCountReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="topfeeds")]
		public string[] Topfeeds { get; set; }
	}
	
	public class UserId_for_usernameGetReturn
	{
		
		/// <summary>
		/// Unique hash id of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class User_user_idGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="allow_notes")]
		public System.Nullable<System.Boolean> Allow_notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public string Bio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followers_count")]
		public System.Nullable<System.Int32> Followers_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="following_count")]
		public System.Nullable<System.Int32> Following_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullname")]
		public string Fullname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_list")]
		public System.Nullable<System.Boolean> Has_list { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_book_author")]
		public System.Nullable<System.Boolean> Is_book_author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_suspended")]
		public System.Nullable<System.Boolean> Is_suspended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_writer_program_enrolled")]
		public System.Nullable<System.Boolean> Is_writer_program_enrolled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medium_member_at")]
		public string Medium_member_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top_writer_in")]
		public string[] Top_writer_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitter_username")]
		public string Twitter_username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class User_user_idArticlesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="associated_articles")]
		public string[] Associated_articles { get; set; }
	}
	
	public class User_user_idFollowersGetByCountReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string[] Followers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class User_user_idFollowingGetByCountReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="following")]
		public string[] Following { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class User_user_idInterestsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags_followed")]
		public string[] Tags_followed { get; set; }
	}
	
	public class User_user_idListsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="lists")]
		public string[] Lists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	public class User_user_idPublicationsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="publications")]
		public string[] Publications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	public class User_user_idTop_articlesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="associated_articles")]
		public string[] Associated_articles { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
