//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Find User
		/// Find User
		/// FindUser api/v1/users
		/// </summary>
		public async Task FindUserAsync(string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users?q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create User in Group
		/// Create User in Group
		/// CreateUserInGroup api/v1/users
		/// </summary>
		public async Task CreateUserInGroupAsync(string activate, CreateUserInGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users?activate=" + (activate==null? "" : System.Uri.EscapeDataString(activate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Current User
		/// Get Current User
		/// GetCurrentUser api/v1/users/me
		/// </summary>
		public async Task GetCurrentUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User
		/// Get User
		/// GetUser api/v1/users/{userId}
		/// </summary>
		public async Task GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/{userId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set Recovery Credential
		/// Set Recovery Credential
		/// SetRecoveryCredential api/v1/users/{userId}
		/// </summary>
		public async Task SetRecoveryCredentialAsync(SetRecoveryCredentialPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/{userId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Assigned App Links
		/// Get Assigned App Links
		/// GetAssignedAppLinks api/v1/users/{userId}/appLinks
		/// </summary>
		public async Task GetAssignedAppLinksAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/{userId}/appLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change Password
		/// Change Password
		/// ChangePassword api/v1/users/{userId}/credentials/change_password
		/// </summary>
		public async Task ChangePasswordAsync(ChangePasswordPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/{userId}/credentials/change_password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change Recovery Question
		/// Change Recovery Question
		/// ChangeRecoveryQuestion api/v1/users/{userId}/credentials/change_recovery_question
		/// </summary>
		public async Task ChangeRecoveryQuestionAsync(ChangeRecoveryQuestionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/{userId}/credentials/change_recovery_question";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Groups for User
		/// Get Groups for User
		/// GetGroupsForUser api/v1/users/{userId}/groups
		/// </summary>
		public async Task GetGroupsForUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/{userId}/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear User Sessions
		/// Clear User Sessions
		/// ClearUserSessions api/v1/users/{userId}/sessions
		/// </summary>
		public async Task ClearUserSessionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/users/{userId}/sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateUserInGroupPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupIds")]
		public string[] GroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public CreateUserInGroupPostBodyProfile Profile { get; set; }
	}
	
	public class CreateUserInGroupPostBodyProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
	}
	
	public class SetRecoveryCredentialPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public SetRecoveryCredentialPutBodyCredentials Credentials { get; set; }
	}
	
	public class SetRecoveryCredentialPutBodyCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="recovery_question")]
		public SetRecoveryCredentialPutBodyCredentialsRecovery_question Recovery_question { get; set; }
	}
	
	public class SetRecoveryCredentialPutBodyCredentialsRecovery_question
	{
		
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question")]
		public string Question { get; set; }
	}
	
	public class ChangePasswordPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public ChangePasswordPostBodyNewPassword NewPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oldPassword")]
		public ChangePasswordPostBodyOldPassword OldPassword { get; set; }
	}
	
	public class ChangePasswordPostBodyNewPassword
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ChangePasswordPostBodyOldPassword
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ChangeRecoveryQuestionPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public ChangeRecoveryQuestionPostBodyPassword Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recovery_question")]
		public ChangeRecoveryQuestionPostBodyRecovery_question Recovery_question { get; set; }
	}
	
	public class ChangeRecoveryQuestionPostBodyPassword
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class ChangeRecoveryQuestionPostBodyRecovery_question
	{
		
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="question")]
		public string Question { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
