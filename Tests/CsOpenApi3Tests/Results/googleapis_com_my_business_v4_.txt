//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request message for AccessControl.AcceptInvitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptInvitationRequest
	{
	}
	
	/// <summary>
	/// Physical adaptations made to the property in consideration of varying levels of human physical ability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Accessibility
	{
		
		/// <summary>
		/// Mobility accessible. Throughout the property there are physical adaptations to ease the stay of a person in a wheelchair, such as auto-opening doors, wide elevators, wide bathrooms or ramps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessible")]
		public System.Nullable<System.Boolean> MobilityAccessible { get; set; }
		
		/// <summary>
		/// Mobility accessible elevator. A lift that transports people from one level to another and is built to accommodate a wheelchair-using passenger owing to the width of its doors and placement of call buttons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleElevator")]
		public System.Nullable<System.Boolean> MobilityAccessibleElevator { get; set; }
		
		/// <summary>
		/// Mobility accessible elevator exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleElevatorException")]
		public System.Nullable<AccessibilityMobilityAccessibleElevatorException> MobilityAccessibleElevatorException { get; set; }
		
		/// <summary>
		/// Mobility accessible exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleException { get; set; }
		
		/// <summary>
		/// Mobility accessible parking. The presence of a marked, designated area of prescribed size in which only registered, labeled vehicles transporting a person with physical challenges may park.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleParking")]
		public System.Nullable<System.Boolean> MobilityAccessibleParking { get; set; }
		
		/// <summary>
		/// Mobility accessible parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleParkingException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleParkingException { get; set; }
		
		/// <summary>
		/// Mobility accessible pool. A swimming pool equipped with a mechanical chair that can be lowered and raised for the purpose of moving physically challenged guests into and out of the pool. May be powered by electricity or water. Also known as pool lift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessiblePool")]
		public System.Nullable<System.Boolean> MobilityAccessiblePool { get; set; }
		
		/// <summary>
		/// Mobility accessible pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessiblePoolException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessiblePoolException { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccessibilityMobilityAccessibleElevatorException
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCEPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDER_CONSTRUCTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPENDENT_ON_SEASON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPENDENT_ON_DAY_OF_WEEK = 3,
	}
	
	/// <summary>
	/// An account is a container for your business's locations. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// The name of the account. *Note:* For an account with AccountType `PERSONAL`, this is the first and last name of the user account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Account reference number if provisioned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The resource name, in the format `accounts/{account_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional Info stored for an organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizationInfo")]
		public OrganizationInfo OrganizationInfo { get; set; }
		
		/// <summary>
		/// Output only. Specifies the PermissionLevel the caller has for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionLevel")]
		public System.Nullable<AccountPermissionLevel> PermissionLevel { get; set; }
		
		/// <summary>
		/// Output only. Specifies the AccountRole the caller has for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<AccountRole> Role { get; set; }
		
		/// <summary>
		/// Indicates status of the account, such as whether the account has been verified by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AccountState State { get; set; }
		
		/// <summary>
		/// Output only. Specifies the AccountType of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AccountType> Type { get; set; }
	}
	
	/// <summary>
	/// Additional Info stored for an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationInfo
	{
		
		/// <summary>
		/// The contact number for the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalAddress")]
		public PostalAddress PostalAddress { get; set; }
		
		/// <summary>
		/// The registered domain for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registeredDomain")]
		public string RegisteredDomain { get; set; }
	}
	
	/// <summary>
	/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostalAddress
	{
		
		/// <summary>
		/// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLines")]
		public string[] AddressLines { get; set; }
		
		/// <summary>
		/// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional. The name of the organization at the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		/// <summary>
		/// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortingCode")]
		public string SortingCode { get; set; }
		
		/// <summary>
		/// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountPermissionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNER_LEVEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMBER_LEVEL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO_OWNER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMUNITY_MANAGER = 4,
	}
	
	/// <summary>
	/// Indicates status of the account, such as whether the account has been verified by Google.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountState
	{
		
		/// <summary>
		/// If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AccountStateStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountStateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNVERIFIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFICATION_REQUESTED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATION_GROUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_GROUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIZATION = 4,
	}
	
	/// <summary>
	/// Amenities and features related to leisure and play.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Activities
	{
		
		/// <summary>
		/// Beach access. The hotel property is in close proximity to a beach and offers a way to get to that beach. This can include a route to the beach such as stairs down if hotel is on a bluff, or a short trail. Not the same as beachfront (with beach access, the hotel's proximity is close to but not right on the beach).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachAccess")]
		public System.Nullable<System.Boolean> BeachAccess { get; set; }
		
		/// <summary>
		/// Beach access exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachAccessException")]
		public AccessibilityMobilityAccessibleElevatorException BeachAccessException { get; set; }
		
		/// <summary>
		/// Breach front. The hotel property is physically located on the beach alongside an ocean, sea, gulf, or bay. It is not on a lake, river, stream, or pond. The hotel is not separated from the beach by a public road allowing vehicular, pedestrian, or bicycle traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachFront")]
		public System.Nullable<System.Boolean> BeachFront { get; set; }
		
		/// <summary>
		/// Beach front exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachFrontException")]
		public AccessibilityMobilityAccessibleElevatorException BeachFrontException { get; set; }
		
		/// <summary>
		/// Bicycle rental. The hotel owns bicycles that it permits guests to borrow and use. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bicycleRental")]
		public System.Nullable<System.Boolean> BicycleRental { get; set; }
		
		/// <summary>
		/// Bicycle rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bicycleRentalException")]
		public AccessibilityMobilityAccessibleElevatorException BicycleRentalException { get; set; }
		
		/// <summary>
		/// Boutique stores. There are stores selling clothing, jewelry, art and decor either on hotel premises or very close by. Does not refer to the hotel gift shop or convenience store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boutiqueStores")]
		public System.Nullable<System.Boolean> BoutiqueStores { get; set; }
		
		/// <summary>
		/// Boutique stores exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boutiqueStoresException")]
		public AccessibilityMobilityAccessibleElevatorException BoutiqueStoresException { get; set; }
		
		/// <summary>
		/// Casino. A space designated for gambling and gaming featuring croupier-run table and card games, as well as electronic slot machines. May be on hotel premises or located nearby.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="casino")]
		public System.Nullable<System.Boolean> Casino { get; set; }
		
		/// <summary>
		/// Casino exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="casinoException")]
		public AccessibilityMobilityAccessibleElevatorException CasinoException { get; set; }
		
		/// <summary>
		/// Free bicycle rental. The hotel owns bicycles that it permits guests to borrow and use for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBicycleRental")]
		public System.Nullable<System.Boolean> FreeBicycleRental { get; set; }
		
		/// <summary>
		/// Free bicycle rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBicycleRentalException")]
		public AccessibilityMobilityAccessibleElevatorException FreeBicycleRentalException { get; set; }
		
		/// <summary>
		/// Free watercraft rental. The hotel owns watercraft that it permits guests to borrow and use for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWatercraftRental")]
		public System.Nullable<System.Boolean> FreeWatercraftRental { get; set; }
		
		/// <summary>
		/// Free Watercraft rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWatercraftRentalException")]
		public AccessibilityMobilityAccessibleElevatorException FreeWatercraftRentalException { get; set; }
		
		/// <summary>
		/// Game room. There is a room at the hotel containing electronic machines for play such as pinball, prize machines, driving simulators, and other items commonly found at a family fun center or arcade. May also include non-electronic games like pool, foosball, darts, and more. May or may not be designed for children. Also known as arcade, fun room, or family fun center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gameRoom")]
		public System.Nullable<System.Boolean> GameRoom { get; set; }
		
		/// <summary>
		/// Game room exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gameRoomException")]
		public AccessibilityMobilityAccessibleElevatorException GameRoomException { get; set; }
		
		/// <summary>
		/// Golf. There is a golf course on hotel grounds or there is a nearby, independently run golf course that allows use by hotel guests. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="golf")]
		public System.Nullable<System.Boolean> Golf { get; set; }
		
		/// <summary>
		/// Golf exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="golfException")]
		public AccessibilityMobilityAccessibleElevatorException GolfException { get; set; }
		
		/// <summary>
		/// Horseback riding. The hotel has a horse barn onsite or an affiliation with a nearby barn to allow for guests to sit astride a horse and direct it to walk, trot, cantor, gallop and/or jump. Can be in a riding ring, on designated paths, or in the wilderness. May or may not involve instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horsebackRiding")]
		public System.Nullable<System.Boolean> HorsebackRiding { get; set; }
		
		/// <summary>
		/// Horseback riding exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horsebackRidingException")]
		public AccessibilityMobilityAccessibleElevatorException HorsebackRidingException { get; set; }
		
		/// <summary>
		/// Nightclub. There is a room at the hotel with a bar, a dance floor, and seating where designated staffers play dance music. There may also be a designated area for the performance of live music, singing and comedy acts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nightclub")]
		public System.Nullable<System.Boolean> Nightclub { get; set; }
		
		/// <summary>
		/// Nightclub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nightclubException")]
		public AccessibilityMobilityAccessibleElevatorException NightclubException { get; set; }
		
		/// <summary>
		/// Private beach. The beach which is in close proximity to the hotel is open only to guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBeach")]
		public System.Nullable<System.Boolean> PrivateBeach { get; set; }
		
		/// <summary>
		/// Private beach exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBeachException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateBeachException { get; set; }
		
		/// <summary>
		/// Scuba. The provision for guests to dive under naturally occurring water fitted with a self-contained underwater breathing apparatus (SCUBA) for the purpose of exploring underwater life. Apparatus consists of a tank providing oxygen to the diver through a mask. Requires certification of the diver and supervision. The hotel may have the activity at its own waterfront or have an affiliation with a nearby facility. Required equipment is most often supplied to guests. Can be free or for a fee. Not snorkeling. Not done in a swimming pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scuba")]
		public System.Nullable<System.Boolean> Scuba { get; set; }
		
		/// <summary>
		/// Scuba exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scubaException")]
		public AccessibilityMobilityAccessibleElevatorException ScubaException { get; set; }
		
		/// <summary>
		/// Snorkeling. The provision for guests to participate in a recreational water activity in which swimmers wear a diving mask, a simple, shaped breathing tube and flippers/swim fins for the purpose of exploring below the surface of an ocean, gulf or lake. Does not usually require user certification or professional supervision. Equipment may or may not be available for rent or purchase. Not scuba diving.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snorkeling")]
		public System.Nullable<System.Boolean> Snorkeling { get; set; }
		
		/// <summary>
		/// Snorkeling exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snorkelingException")]
		public AccessibilityMobilityAccessibleElevatorException SnorkelingException { get; set; }
		
		/// <summary>
		/// Tennis. The hotel has the requisite court(s) on site or has an affiliation with a nearby facility for the purpose of providing guests with the opportunity to play a two-sided court-based game in which players use a stringed racquet to hit a ball across a net to the side of the opposing player. The court can be indoors or outdoors. Instructors, racquets and balls may or may not be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tennis")]
		public System.Nullable<System.Boolean> Tennis { get; set; }
		
		/// <summary>
		/// Tennis exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tennisException")]
		public AccessibilityMobilityAccessibleElevatorException TennisException { get; set; }
		
		/// <summary>
		/// Water skiing. The provision of giving guests the opportunity to be pulled across naturally occurring water while standing on skis and holding a tow rope attached to a motorboat. Can occur on hotel premises or at a nearby waterfront. Most often performed in a lake or ocean.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSkiing")]
		public System.Nullable<System.Boolean> WaterSkiing { get; set; }
		
		/// <summary>
		/// Water skiing exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterSkiingException")]
		public AccessibilityMobilityAccessibleElevatorException WaterSkiingException { get; set; }
		
		/// <summary>
		/// Watercraft rental. The hotel owns water vessels that it permits guests to borrow and use. Can be free or for a fee. Watercraft may include boats, pedal boats, rowboats, sailboats, powerboats, canoes, kayaks, or personal watercraft (such as a Jet Ski).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watercraftRental")]
		public System.Nullable<System.Boolean> WatercraftRental { get; set; }
		
		/// <summary>
		/// Watercraft rental exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watercraftRentalException")]
		public AccessibilityMobilityAccessibleElevatorException WatercraftRentalException { get; set; }
	}
	
	/// <summary>
	/// Additional information that is surfaced in AdWords.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdWordsLocationExtensions
	{
		
		/// <summary>
		/// An alternate phone number to display on AdWords location extensions instead of the location's primary phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adPhone")]
		public string AdPhone { get; set; }
	}
	
	/// <summary>
	/// Input for ADDRESS verification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressInput
	{
		
		/// <summary>
		/// Contact name the mail should be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailerContactName")]
		public string MailerContactName { get; set; }
	}
	
	/// <summary>
	/// Display data for verifications through postcard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressVerificationData
	{
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PostalAddress Address { get; set; }
		
		/// <summary>
		/// Merchant's business name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
	}
	
	/// <summary>
	/// An administrator of an Account or a Location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Admin
	{
		
		/// <summary>
		/// The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminName")]
		public string AdminName { get; set; }
		
		/// <summary>
		/// The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `accounts/{account_id}/locations/{location_id}/admins/{admin_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether this admin has a pending invitation for the specified resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingInvitation")]
		public System.Nullable<System.Boolean> PendingInvitation { get; set; }
		
		/// <summary>
		/// Specifies the AdminRole that this admin uses with the specified Account or Location resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<AdminRole> Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AdminRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO_OWNER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMUNITY_MANAGER = 4,
	}
	
	/// <summary>
	/// Represents an answer to a question
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Answer
	{
		
		/// <summary>
		/// Represents the author of a question or answer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public Author Author { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the answer was written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The unique name for the answer accounts/*/locations/*/questions/*/answers/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The text of the answer. It should contain at least one non-whitespace character. The maximum length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the answer was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The number of upvotes for the answer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upvoteCount")]
		public System.Nullable<System.Int32> UpvoteCount { get; set; }
	}
	
	/// <summary>
	/// Represents the author of a question or answer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Author
	{
		
		/// <summary>
		/// The display name of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The profile photo URL of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePhotoUrl")]
		public string ProfilePhotoUrl { get; set; }
		
		/// <summary>
		/// The type of user the author is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AuthorType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGULAR_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_GUIDE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERCHANT = 3,
	}
	
	/// <summary>
	/// Request message for Locations.AssociateLocationRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateLocationRequest
	{
		
		/// <summary>
		/// The association to establish. If not set, it indicates no match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
	}
	
	/// <summary>
	/// A location attribute. Attributes provide additional information about a location. The attributes that can be set on a location may vary based on the properties of that location (for example, category). Available attributes are determined by Google and may be added and removed without API changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attribute
	{
		
		/// <summary>
		/// The ID of the attribute. Attribute IDs are provided by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeId")]
		public string AttributeId { get; set; }
		
		/// <summary>
		/// Values for an attribute with a `value_type` of REPEATED_ENUM. This consists of two lists of value IDs: those that are set (true) and those that are unset (false). Values absent are considered unknown. At least one value must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatedEnumValue")]
		public RepeatedEnumAttributeValue RepeatedEnumValue { get; set; }
		
		/// <summary>
		/// When the attribute value type is URL, this field contains the value(s) for this attribute, and the other values fields must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlValues")]
		public UrlAttributeValue[] UrlValues { get; set; }
		
		/// <summary>
		/// Output only. The type of value that this attribute contains. This should be used to determine how to interpret the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public System.Nullable<AttributeValueType> ValueType { get; set; }
		
		/// <summary>
		/// The values for this attribute. The type of the values supplied must match that expected for that attribute; see [AttributeValueType](/my-business/reference/rest/v4/AttributeValueType). This is a repeated field where multiple attribute values may be provided. Attribute types only support one value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Values for an attribute with a `value_type` of REPEATED_ENUM. This consists of two lists of value IDs: those that are set (true) and those that are unset (false). Values absent are considered unknown. At least one value must be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepeatedEnumAttributeValue
	{
		
		/// <summary>
		/// Enum values that are set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setValues")]
		public string[] SetValues { get; set; }
		
		/// <summary>
		/// Enum values that are unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsetValues")]
		public string[] UnsetValues { get; set; }
	}
	
	/// <summary>
	/// Values for an attribute with a `value_type` of URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UrlAttributeValue
	{
		
		/// <summary>
		/// The URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AttributeValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTRIBUTE_VALUE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPEATED_ENUM = 4,
	}
	
	/// <summary>
	/// Metadata for an attribute. Contains display information for the attribute, including a localized name and a heading for grouping related attributes together.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributeMetadata
	{
		
		/// <summary>
		/// The ID of the attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeId")]
		public string AttributeId { get; set; }
		
		/// <summary>
		/// The localized display name for the attribute, if available; otherwise, the English display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The localized display name of the group that contains this attribute, if available; otherwise, the English group name. Related attributes are collected into a group and should be displayed together under the heading given here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupDisplayName")]
		public string GroupDisplayName { get; set; }
		
		/// <summary>
		/// If true, the attribute is deprecated and should no longer be used. If deprecated, updating this attribute will not result in an error, but updates will not be saved. At some point after being deprecated, the attribute will be removed entirely and it will become an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeprecated")]
		public System.Nullable<System.Boolean> IsDeprecated { get; set; }
		
		/// <summary>
		/// If true, the attribute supports multiple values. If false, only a single value should be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRepeatable")]
		public System.Nullable<System.Boolean> IsRepeatable { get; set; }
		
		/// <summary>
		/// For some types of attributes (for example, enums), a list of supported values and corresponding display names for those values is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueMetadata")]
		public AttributeValueMetadata[] ValueMetadata { get; set; }
		
		/// <summary>
		/// The value type for the attribute. Values set and retrieved should be expected to be of this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public AttributeValueType ValueType { get; set; }
	}
	
	/// <summary>
	/// Metadata for supported attribute values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttributeValueMetadata
	{
		
		/// <summary>
		/// The display name for this value, localized where available; otherwise, in English. The value display name is intended to be used in context with the attribute display name. For example, for a "WiFi" enum attribute, this could contain "Paid" to represent paid Wi-Fi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The attribute value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// Attribution information for customer media items, such as the contributor's name and profile picture.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attribution
	{
		
		/// <summary>
		/// The user name to attribute the media item to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// URL of the attributed user's profile photo thumbnail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePhotoUrl")]
		public string ProfilePhotoUrl { get; set; }
		
		/// <summary>
		/// The URL of the attributed user's Google Maps profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileUrl")]
		public string ProfileUrl { get; set; }
		
		/// <summary>
		/// The URL of the takedown page, where the media item can be reported if it is inappropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="takedownUrl")]
		public string TakedownUrl { get; set; }
	}
	
	/// <summary>
	/// A request for basic metric insights.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BasicMetricsRequest
	{
		
		/// <summary>
		/// A collection of metrics to return values for including the options for how the data should be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricRequests")]
		public MetricRequest[] MetricRequests { get; set; }
		
		/// <summary>
		/// A range of time. Data will be pulled over the range as a half-open inverval (that is, [start_time, end_time)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeRange")]
		public TimeRange TimeRange { get; set; }
	}
	
	/// <summary>
	/// A request to return values for one metric and the options for how those values should be returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricRequest
	{
		
		/// <summary>
		/// The requested metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public System.Nullable<MetricRequestMetric> Metric { get; set; }
		
		/// <summary>
		/// How the values should appear when returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MetricRequestMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERIES_DIRECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERIES_INDIRECT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERIES_CHAIN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWS_MAPS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWS_SEARCH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIONS_WEBSITE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIONS_PHONE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIONS_DRIVING_DIRECTIONS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHOTOS_VIEWS_MERCHANT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHOTOS_VIEWS_CUSTOMERS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHOTOS_COUNT_MERCHANT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHOTOS_COUNT_CUSTOMERS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_POST_VIEWS_SEARCH = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_POST_ACTIONS_CALL_TO_ACTION = 15,
	}
	
	/// <summary>
	/// A range of time. Data will be pulled over the range as a half-open inverval (that is, [start_time, end_time)).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeRange
	{
		
		/// <summary>
		/// Epoch timestamp for the end of the range (exclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Epoch timestamp for the start of the range (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Response message for BusinessCategories.BatchGetBusinessCategories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetBusinessCategoriesResponse
	{
		
		/// <summary>
		/// Categories that match the GConcept ids provided in the request. They will not come in the same order as category ids in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
	}
	
	/// <summary>
	/// A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see [categories.list](https://developers.google.com/my-business/reference/rest/v4/categories/list).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// @OutputOnly. A stable ID (provided by Google) for this category. The `category_id` must be specified when modifying the category (when creating or updating a location).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// @OutputOnly. The human-readable name of the category. This is set when reading the location. When modifying the location, `category_id` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. More hours types that are available for this business category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreHoursTypes")]
		public MoreHoursType[] MoreHoursTypes { get; set; }
		
		/// <summary>
		/// @OutputOnly. A list of all the service types that are available for this business category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceTypes")]
		public ServiceType[] ServiceTypes { get; set; }
	}
	
	/// <summary>
	/// More hours types that a business can offers, in addition to its regular hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoreHoursType
	{
		
		/// <summary>
		/// Output only. The human-readable English display name for the hours type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. A stable ID provided by Google for this hours type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursTypeId")]
		public string HoursTypeId { get; set; }
		
		/// <summary>
		/// Output only. The human-readable localized display name for the hours type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedDisplayName")]
		public string LocalizedDisplayName { get; set; }
	}
	
	/// <summary>
	/// A message describing a service type that the business offers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceType
	{
		
		/// <summary>
		/// Output only. The human-readable display name for the service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. A stable ID (provided by Google) for this service type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceTypeId")]
		public string ServiceTypeId { get; set; }
	}
	
	/// <summary>
	/// Request message for Locations.BatchGetLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetLocationsRequest
	{
		
		/// <summary>
		/// A collection of locations to fetch, specified by their names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationNames")]
		public string[] LocationNames { get; set; }
	}
	
	/// <summary>
	/// Response message for Locations.BatchGetLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetLocationsResponse
	{
		
		/// <summary>
		/// A collection of locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
	}
	
	/// <summary>
	/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Additional information that is surfaced in AdWords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adWordsLocationExtensions")]
		public AdWordsLocationExtensions AdWordsLocationExtensions { get; set; }
		
		/// <summary>
		/// Additional categories to describe your business. Categories help your customers find accurate, specific results for services they're interested in. To keep your business information accurate and live, make sure that you use as few categories as possible to describe your overall core business. Choose categories that are as specific as possible, but representative of your main business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalCategories")]
		public Category[] AdditionalCategories { get; set; }
		
		/// <summary>
		/// Up to two phone numbers (mobile or landline, no fax) at which your business can be called, in addition to your primary phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalPhones")]
		public string[] AdditionalPhones { get; set; }
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PostalAddress Address { get; set; }
		
		/// <summary>
		/// Attributes for this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attribute[] Attributes { get; set; }
		
		/// <summary>
		/// A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Limited to 255 characters (per label).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// The language of the location. Set during creation and not updateable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latlng")]
		public LatLng Latlng { get; set; }
		
		/// <summary>
		/// Alternate/surrogate key references for a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationKey")]
		public LocationKey LocationKey { get; set; }
		
		/// <summary>
		/// Location name should reflect your business's real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, `Address`, `Categories`). Don't add unnecessary information to your name (for example, prefer "Google" over "Google Inc. - Mountain View Corporate Headquarters"). Don't include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, "Chase ATM in Duane Reade").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
		
		/// <summary>
		/// Contains a set of booleans that reflect the [state of a Location.](https://support.google.com/business/answer/3480862)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationState")]
		public LocationState LocationState { get; set; }
		
		/// <summary>
		/// Additional non-user-editable information about the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// More hours for a business's different departments or specific customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreHours")]
		public MoreHours[] MoreHours { get; set; }
		
		/// <summary>
		/// Google identifier for this location in the form: `accounts/{account_id}/locations/{location_id}` In the context of matches, this field will not be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Information related to the opening state of the business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openInfo")]
		public OpenInfo OpenInfo { get; set; }
		
		/// <summary>
		/// Price list information for this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceLists")]
		public PriceList[] PriceLists { get; set; }
		
		/// <summary>
		/// A category describing what this business is (not what it does). For a list of valid category IDs, and the mappings to their human-readable names, see [categories.list](https://developers.google.com/my-business/reference/rest/v4/categories/list).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryCategory")]
		public Category PrimaryCategory { get; set; }
		
		/// <summary>
		/// A phone number that connects to your individual business location as directly as possible. Use a local phone number instead of a central, call center helpline number whenever possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryPhone")]
		public string PrimaryPhone { get; set; }
		
		/// <summary>
		/// All information pertaining to the location's profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile Profile { get; set; }
		
		/// <summary>
		/// Represents the time periods that this location is open for business. Holds a collection of TimePeriod instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regularHours")]
		public BusinessHours RegularHours { get; set; }
		
		/// <summary>
		/// Information of all parent and children locations related to this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipData")]
		public RelationshipData RelationshipData { get; set; }
		
		/// <summary>
		/// Service area businesses provide their service at the customer's location (for example, a locksmith or plumber).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceArea")]
		public ServiceAreaBusiness ServiceArea { get; set; }
		
		/// <summary>
		/// Represents a set of time periods when a location's operational hours differ from its normal business hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialHours")]
		public SpecialHours SpecialHours { get; set; }
		
		/// <summary>
		/// External identifier for this location, which must be unique inside a given account. This is a means of associating the location with your own records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeCode")]
		public string StoreCode { get; set; }
		
		/// <summary>
		/// A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUrl")]
		public string WebsiteUrl { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Alternate/surrogate key references for a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationKey
	{
		
		/// <summary>
		/// Output only. A value of true indicates that an unset place ID is deliberate, which is different from no association being made yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitNoPlaceId")]
		public System.Nullable<System.Boolean> ExplicitNoPlaceId { get; set; }
		
		/// <summary>
		/// If this location has been verified and is connected to/appears on Google Maps, this field is populated with the place ID for the location. This ID can be used in various Places APIs. If this location is unverified, this field may be populated if the location has been associated with a place that appears on Google Maps. This field can be set during Create calls, but not for Update. The additional `explicit_no_place_id` bool qualifies whether an unset place ID is deliberate or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
		
		/// <summary>
		/// Output only. If this location has a Google+ page associated with it, this is populated with the Google+ page ID for this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plusPageId")]
		public string PlusPageId { get; set; }
		
		/// <summary>
		/// Output only. The `request_id` used to create this location. May be empty if this location was created outside of the Google My Business API or Business Profile Locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Contains a set of booleans that reflect the [state of a Location.](https://support.google.com/business/answer/3480862)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationState
	{
		
		/// <summary>
		/// Output only. Indicates whether the location can be deleted using the Google My Business API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDelete")]
		public System.Nullable<System.Boolean> CanDelete { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the listing is eligible for food menu.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canHaveFoodMenus")]
		public System.Nullable<System.Boolean> CanHaveFoodMenus { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the listing can modify a ServiceList.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyServiceList")]
		public System.Nullable<System.Boolean> CanModifyServiceList { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location can operate on Health data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canOperateHealthData")]
		public System.Nullable<System.Boolean> CanOperateHealthData { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location can operate on Lodging data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canOperateLodgingData")]
		public System.Nullable<System.Boolean> CanOperateLodgingData { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location can be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canUpdate")]
		public System.Nullable<System.Boolean> CanUpdate { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether any of this Location's properties are in the edit pending state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasPendingEdits")]
		public System.Nullable<System.Boolean> HasPendingEdits { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location has pending verification requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasPendingVerification")]
		public System.Nullable<System.Boolean> HasPendingVerification { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisabled")]
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location is disconnected from a place on Google Maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisconnected")]
		public System.Nullable<System.Boolean> IsDisconnected { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location is a duplicate of another location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDuplicate")]
		public System.Nullable<System.Boolean> IsDuplicate { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the place ID associated with this location has updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGoogleUpdated")]
		public System.Nullable<System.Boolean> IsGoogleUpdated { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether [accounts.locations.localPosts](/my-business/reference/rest/v4/accounts.locations.localPosts) is disabled for this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocalPostApiDisabled")]
		public System.Nullable<System.Boolean> IsLocalPostApiDisabled { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the review of the location is pending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPendingReview")]
		public System.Nullable<System.Boolean> IsPendingReview { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location is suspended. Suspended locations are not visible to end users in Google products. If you believe this was a mistake, see the [help center article] (https://support.google.com/business/answer/4569145).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSuspended")]
		public System.Nullable<System.Boolean> IsSuspended { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location is verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVerified")]
		public System.Nullable<System.Boolean> IsVerified { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the location requires reverification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needsReverification")]
		public System.Nullable<System.Boolean> NeedsReverification { get; set; }
	}
	
	/// <summary>
	/// Additional non-user-editable information about the location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metadata
	{
		
		/// <summary>
		/// Information about the location that this location duplicates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicate")]
		public Duplicate Duplicate { get; set; }
		
		/// <summary>
		/// A link to the location on Maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapsUrl")]
		public string MapsUrl { get; set; }
		
		/// <summary>
		/// A link to the page on Google Search where a customer can leave a review for the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newReviewUrl")]
		public string NewReviewUrl { get; set; }
	}
	
	/// <summary>
	/// Information about the location that this location duplicates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Duplicate
	{
		
		/// <summary>
		/// Indicates whether the user has access to the location it duplicates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public System.Nullable<DuplicateAccess> Access { get; set; }
		
		/// <summary>
		/// The resource name of the location that this duplicates. Only populated if the authenticated user has access rights to that location and that location is not deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
		
		/// <summary>
		/// The place ID of the location that this duplicates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DuplicateAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT = 3,
	}
	
	/// <summary>
	/// The time periods during which a location is open for certain types of business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoreHours
	{
		
		/// <summary>
		/// Required. Type of hours. Clients should call {#link businessCategories:BatchGet} to get supported hours types for categories of their locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hoursTypeId")]
		public string HoursTypeId { get; set; }
		
		/// <summary>
		/// Required. A collection of times that this location is open. Each period represents a range of hours when the location is open during the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public TimePeriod[] Periods { get; set; }
	}
	
	/// <summary>
	/// Represents a span of time that the business is open, starting on the specified open day/time and closing on the specified close day/time. The closing time must occur after the opening time, for example later in the same day, or on a subsequent day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimePeriod
	{
		
		/// <summary>
		/// Indicates the day of the week this period ends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeDay")]
		public System.Nullable<TimePeriodCloseDay> CloseDay { get; set; }
		
		/// <summary>
		/// Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeTime")]
		public string CloseTime { get; set; }
		
		/// <summary>
		/// Indicates the day of the week this period starts on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openDay")]
		public TimePeriodCloseDay OpenDay { get; set; }
		
		/// <summary>
		/// Time in 24hr ISO 8601 extended format (hh:mm). Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openTime")]
		public string OpenTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TimePeriodCloseDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	/// <summary>
	/// Information related to the opening state of the business.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenInfo
	{
		
		/// <summary>
		/// Output only. Indicates whether this business is eligible for re-open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReopen")]
		public System.Nullable<System.Boolean> CanReopen { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openingDate")]
		public Date OpeningDate { get; set; }
		
		/// <summary>
		/// Indicates whether or not the Location is currently open for business. All locations are open by default, unless updated to be closed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<OpenInfoStatus> Status { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OpenInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_FOR_BUSINESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED_PERMANENTLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED_TEMPORARILY = 3,
	}
	
	/// <summary>
	/// A list of item price information. Price lists are structured as one or more price lists, each containing one or more sections with one or more items. For example, food price lists may represent breakfast/lunch/dinner menus, with sections for burgers/steak/seafood.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceList
	{
		
		/// <summary>
		/// Required. Language-tagged labels for the price list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		/// <summary>
		/// Required. ID for the price list. Price list, section, and item IDs cannot be duplicated within this Location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceListId")]
		public string PriceListId { get; set; }
		
		/// <summary>
		/// Required. Sections for this price list. Each price list must contain at least one section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public Section[] Sections { get; set; }
		
		/// <summary>
		/// Optional source URL of where the price list was retrieved from. For example, this could be the URL of the page that was automatically scraped to populate the menu information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	/// Label to be used when displaying the price list, section, or item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Label
	{
		
		/// <summary>
		/// Optional. Description of the price list, section, or item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. Display name for the price list, section, or item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. The BCP-47 language code that these strings apply for. Only one set of labels may be set per language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// A section of the price list containing one or more items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Section
	{
		
		/// <summary>
		/// Items that are contained within this section of the price list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Required. Language-tagged labels for the section. We recommend that section names and descriptions be 140 characters or less. At least one set of labels is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		/// <summary>
		/// Required. ID for the section. Price list, section, and item IDs cannot be duplicated within this Location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionId")]
		public string SectionId { get; set; }
		
		/// <summary>
		/// Optional. Type of the current price list section. Default value is FOOD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public System.Nullable<SectionSectionType> SectionType { get; set; }
	}
	
	/// <summary>
	/// A single list item. Each variation of an item in the price list should have its own Item with its own price data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Item
	{
		
		/// <summary>
		/// Required. ID for the item. Price list, section, and item IDs cannot be duplicated within this Location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// Required. Language-tagged labels for the item. We recommend that item names be 140 characters or less, and descriptions 250 characters or less. At least one set of labels is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SectionSectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOOD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICES = 2,
	}
	
	/// <summary>
	/// All information pertaining to the location's profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profile
	{
		
		/// <summary>
		/// Description of the location in your own voice, not editable by anyone else.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Represents the time periods that this location is open for business. Holds a collection of TimePeriod instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHours
	{
		
		/// <summary>
		/// A collection of times that this location is open for business. Each period represents a range of hours when the location is open during the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public TimePeriod[] Periods { get; set; }
	}
	
	/// <summary>
	/// Information of all parent and children locations related to this one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationshipData
	{
		
		/// <summary>
		/// The resource name of the Chain that this location is member of. How to find Chain ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentChain")]
		public string ParentChain { get; set; }
	}
	
	/// <summary>
	/// Service area businesses provide their service at the customer's location (for example, a locksmith or plumber).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAreaBusiness
	{
		
		/// <summary>
		/// Indicates the type of the service area business.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessType")]
		public System.Nullable<ServiceAreaBusinessBusinessType> BusinessType { get; set; }
		
		/// <summary>
		/// Defines the union of areas represented by a set of places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="places")]
		public Places Places { get; set; }
		
		/// <summary>
		/// A radius around a particular point (latitude/longitude).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public PointRadius Radius { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ServiceAreaBusinessBusinessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_LOCATION_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_AND_BUSINESS_LOCATION = 2,
	}
	
	/// <summary>
	/// Defines the union of areas represented by a set of places.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Places
	{
		
		/// <summary>
		/// The areas represented by place IDs. Limited to a maximum of 20 places.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeInfos")]
		public PlaceInfo[] PlaceInfos { get; set; }
	}
	
	/// <summary>
	/// Defines an area that's represented by a place ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlaceInfo
	{
		
		/// <summary>
		/// The localized name of the place. For example, `Scottsdale, AZ`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the place. Must correspond to a [region.] (https://developers.google.com/places/web-service/supported_types#table3)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
	}
	
	/// <summary>
	/// A radius around a particular point (latitude/longitude).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PointRadius
	{
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latlng")]
		public LatLng Latlng { get; set; }
		
		/// <summary>
		/// The distance in kilometers of the area around the point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radiusKm")]
		public System.Nullable<System.Single> RadiusKm { get; set; }
	}
	
	/// <summary>
	/// Represents a set of time periods when a location's operational hours differ from its normal business hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpecialHours
	{
		
		/// <summary>
		/// A list of exceptions to the business's regular hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialHourPeriods")]
		public SpecialHourPeriod[] SpecialHourPeriods { get; set; }
	}
	
	/// <summary>
	/// Represents a single time period when a location's operational hours differ from its normal business hours. A special hour period must represent a range of less than 24 hours. The `open_time` and `start_date` must predate the `close_time` and `end_date`. The `close_time` and `end_date` can extend to 11:59 a.m. on the day after the specified `start_date`. For example, the following inputs are valid: start_date=2015-11-23, open_time=08:00, close_time=18:00 start_date=2015-11-23, end_date=2015-11-23, open_time=08:00, close_time=18:00 start_date=2015-11-23, end_date=2015-11-24, open_time=13:00, close_time=11:59 The following inputs are not valid: start_date=2015-11-23, open_time=13:00, close_time=11:59 start_date=2015-11-23, end_date=2015-11-24, open_time=13:00, close_time=12:00 start_date=2015-11-23, end_date=2015-11-25, open_time=08:00, close_time=18:00
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpecialHourPeriod
	{
		
		/// <summary>
		/// The wall time on `end_date` when a location closes, expressed in 24hr ISO 8601 extended format. (hh:mm) Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field. Must be specified if `is_closed` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeTime")]
		public string CloseTime { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// If true, `end_date`, `open_time`, and `close_time` are ignored, and the date specified in `start_date` is treated as the location being closed for the entire day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isClosed")]
		public System.Nullable<System.Boolean> IsClosed { get; set; }
		
		/// <summary>
		/// The wall time on `start_date` when a location opens, expressed in 24hr ISO 8601 extended format. (hh:mm) Valid values are 00:00-24:00, where 24:00 represents midnight at the end of the specified day field. Must be specified if `is_closed` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openTime")]
		public string OpenTime { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
	}
	
	/// <summary>
	/// Request message for Reviews.BatchGetReviews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetReviewsRequest
	{
		
		/// <summary>
		/// Whether to ignore rating-only reviews.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreRatingOnlyReviews")]
		public System.Nullable<System.Boolean> IgnoreRatingOnlyReviews { get; set; }
		
		/// <summary>
		/// A collection of locations to fetch reviews for, specified by their names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationNames")]
		public string[] LocationNames { get; set; }
		
		/// <summary>
		/// Optional. Specifies the field to sort reviews by. If unspecified, the order of reviews returned will default to `update_time desc`. Valid orders to sort by are `rating`, `rating desc` and `update_time desc`. `rating` will return reviews in ascending order. `update_time`(i.e. ascending order) is not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public string OrderBy { get; set; }
		
		/// <summary>
		/// How many reviews to fetch per page. The default value is 200.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// If specified, it fetches the next page of reviews.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for Reviews.BatchGetReviews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetReviewsResponse
	{
		
		/// <summary>
		/// Reviews with location information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationReviews")]
		public LocationReview[] LocationReviews { get; set; }
		
		/// <summary>
		/// If the number of reviews exceeded the requested page size, this field is populated with a token to fetch the next page of reviews on a subsequent calls. If there are no more reviews, this field will not be present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents a review with location information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationReview
	{
		
		/// <summary>
		/// Location resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Represents a review for a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="review")]
		public Review Review { get; set; }
	}
	
	/// <summary>
	/// Output only. Represents a review for a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Review
	{
		
		/// <summary>
		/// The body of the review as plain text with markups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// The timestamp for when the review was written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name. For Review it is of the form `accounts/{account_id}/locations/{location_id}/reviews/{review_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The encrypted unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewId")]
		public string ReviewId { get; set; }
		
		/// <summary>
		/// Represents the location owner/manager's reply to a review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewReply")]
		public ReviewReply ReviewReply { get; set; }
		
		/// <summary>
		/// Represents the author of the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewer")]
		public Reviewer Reviewer { get; set; }
		
		/// <summary>
		/// The star rating of the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starRating")]
		public System.Nullable<ReviewStarRating> StarRating { get; set; }
		
		/// <summary>
		/// The timestamp for when the review was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Represents the location owner/manager's reply to a review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReviewReply
	{
		
		/// <summary>
		/// The body of the reply as plain text with markups. The maximum length is 4096 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the reply was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Represents the author of the review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reviewer
	{
		
		/// <summary>
		/// The name of the reviewer. Only populated with the reviewer's real name if `is_anonymous` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates whether the reviewer has opted to remain anonymous.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAnonymous")]
		public System.Nullable<System.Boolean> IsAnonymous { get; set; }
		
		/// <summary>
		/// The profile photo link of the reviewer. Only populated if `is_anonymous` is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePhotoUrl")]
		public string ProfilePhotoUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReviewStarRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR_RATING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOUR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIVE = 5,
	}
	
	/// <summary>
	/// Features of the property of specific interest to the business traveler.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Business
	{
		
		/// <summary>
		/// Business center. A designated room at the hotel with one or more desks and equipped with guest-use computers, printers, fax machines and/or photocopiers. May or may not be open 24/7. May or may not require a key to access. Not a meeting room or conference room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessCenter")]
		public System.Nullable<System.Boolean> BusinessCenter { get; set; }
		
		/// <summary>
		/// Business center exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessCenterException")]
		public AccessibilityMobilityAccessibleElevatorException BusinessCenterException { get; set; }
		
		/// <summary>
		/// Meeting rooms. Rooms at the hotel designated for business-related gatherings. Rooms are usually equipped with tables or desks, office chairs and audio/visual facilities to allow for presentations and conference calls. Also known as conference rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRooms")]
		public System.Nullable<System.Boolean> MeetingRooms { get; set; }
		
		/// <summary>
		/// Meeting rooms count. The number of meeting rooms at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRoomsCount")]
		public System.Nullable<System.Int32> MeetingRoomsCount { get; set; }
		
		/// <summary>
		/// Meeting rooms count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRoomsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MeetingRoomsCountException { get; set; }
		
		/// <summary>
		/// Meeting rooms exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetingRoomsException")]
		public AccessibilityMobilityAccessibleElevatorException MeetingRoomsException { get; set; }
	}
	
	/// <summary>
	/// An action that is performed when the user clicks through the post
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallToAction
	{
		
		/// <summary>
		/// The type of action that will be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public System.Nullable<CallToActionActionType> ActionType { get; set; }
		
		/// <summary>
		/// The URL the user will be directed to upon clicking. This field should be left unset for Call CTA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallToActionActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEARN_MORE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN_UP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_OFFER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALL = 7,
	}
	
	/// <summary>
	/// This message denotes calories information with an upper bound and lower bound range. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CaloriesFact
	{
		
		/// <summary>
		/// Required. Lower amount of calories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowerAmount")]
		public System.Nullable<System.Int32> LowerAmount { get; set; }
		
		/// <summary>
		/// Required. Unit of the given calories information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<CaloriesFactUnit> Unit { get; set; }
		
		/// <summary>
		/// Optional. Upper amount of calories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upperAmount")]
		public System.Nullable<System.Int32> UpperAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CaloriesFactUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENERGY_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALORIE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOULE = 2,
	}
	
	/// <summary>
	/// A chain is a brand that your business's locations can be affiliated with.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chain
	{
		
		/// <summary>
		/// Names of the chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chainNames")]
		public ChainName[] ChainNames { get; set; }
		
		/// <summary>
		/// Number of locations that are part of this chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationCount")]
		public System.Nullable<System.Int32> LocationCount { get; set; }
		
		/// <summary>
		/// The chain's resource name, in the format `chains/{chain_place_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Websites of the chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websites")]
		public ChainUrl[] Websites { get; set; }
	}
	
	/// <summary>
	/// Name to be used when displaying the chain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChainName
	{
		
		/// <summary>
		/// The display name for this chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The BCP 47 code of language of the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Url to be used when displaying the chain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChainUrl
	{
		
		/// <summary>
		/// The url for this chain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Request message for Locations.ClearLocationAssociationRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClearLocationAssociationRequest
	{
	}
	
	/// <summary>
	/// Request message for Verifications.CompleteVerificationAction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteVerificationRequest
	{
		
		/// <summary>
		/// PIN code received by the merchant to complete the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.CompleteVerificationAction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompleteVerificationResponse
	{
		
		/// <summary>
		/// A verification represents a verification attempt on a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public Verification Verification { get; set; }
	}
	
	/// <summary>
	/// A verification represents a verification attempt on a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Verification
	{
		
		/// <summary>
		/// The timestamp when the verification is requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The method of the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public System.Nullable<VerificationMethod> Method { get; set; }
		
		/// <summary>
		/// Resource name of the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The state of the verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VerificationState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VerificationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFICATION_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_CALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VerificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFICATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// The ways in which the property provides guests with the ability to access the internet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Connectivity
	{
		
		/// <summary>
		/// Free wifi. The hotel offers guests wifi for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWifi")]
		public System.Nullable<System.Boolean> FreeWifi { get; set; }
		
		/// <summary>
		/// Free wifi exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWifiException")]
		public AccessibilityMobilityAccessibleElevatorException FreeWifiException { get; set; }
		
		/// <summary>
		/// Public area wifi available. Guests have the ability to wirelessly connect to the internet in the areas of the hotel accessible to anyone. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicAreaWifiAvailable")]
		public System.Nullable<System.Boolean> PublicAreaWifiAvailable { get; set; }
		
		/// <summary>
		/// Public area wifi available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicAreaWifiAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException PublicAreaWifiAvailableException { get; set; }
		
		/// <summary>
		/// Public internet terminal. An area of the hotel supplied with computers and designated for the purpose of providing guests with the ability to access the internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicInternetTerminal")]
		public System.Nullable<System.Boolean> PublicInternetTerminal { get; set; }
		
		/// <summary>
		/// Public internet terminal exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicInternetTerminalException")]
		public AccessibilityMobilityAccessibleElevatorException PublicInternetTerminalException { get; set; }
		
		/// <summary>
		/// Wifi available. The hotel provides the ability for guests to wirelessly connect to the internet. Can be in the public areas of the hotel and/or in the guest rooms. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiAvailable")]
		public System.Nullable<System.Boolean> WifiAvailable { get; set; }
		
		/// <summary>
		/// Wifi available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException WifiAvailableException { get; set; }
	}
	
	/// <summary>
	/// Request message for AccessControl.DeclineInvitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeclineInvitationRequest
	{
	}
	
	/// <summary>
	/// A value for a single metric with a given time dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DimensionalMetricValue
	{
		
		/// <summary>
		/// The option that requested this dimensional value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricOption")]
		public System.Nullable<DimensionalMetricValueMetricOption> MetricOption { get; set; }
		
		/// <summary>
		/// The dimension for which data is divided over.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeDimension")]
		public TimeDimension TimeDimension { get; set; }
		
		/// <summary>
		/// The value. If no value is set, then the requested data is missing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DimensionalMetricValueMetricOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGGREGATED_TOTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGGREGATED_DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKDOWN_DAY_OF_WEEK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAKDOWN_HOUR_OF_DAY = 4,
	}
	
	/// <summary>
	/// The dimension for which data is divided over.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeDimension
	{
		
		/// <summary>
		/// The day of the week ("MONDAY" to "SUNDAY") this value corresponds to. Set for BREAKDOWN_DAY_OF_WEEK option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public TimePeriodCloseDay DayOfWeek { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeOfDay")]
		public TimeOfDay TimeOfDay { get; set; }
		
		/// <summary>
		/// A range of time. Data will be pulled over the range as a half-open inverval (that is, [start_time, end_time)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeRange")]
		public TimeRange TimeRange { get; set; }
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// Dimensions of the media item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dimensions
	{
		
		/// <summary>
		/// Height of the media item, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightPixels")]
		public System.Nullable<System.Int32> HeightPixels { get; set; }
		
		/// <summary>
		/// Width of the media item, in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthPixels")]
		public System.Nullable<System.Int32> WidthPixels { get; set; }
	}
	
	/// <summary>
	/// A request for driving direction insights.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DrivingDirectionMetricsRequest
	{
		
		/// <summary>
		/// The BCP 47 code for the language. If a language code is not provided, it defaults to English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The number of days to aggregate data for. Results returned will be available data over the last number of requested days. Valid values are 7, 30, and 90.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numDays")]
		public System.Nullable<DrivingDirectionMetricsRequestNumDays> NumDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DrivingDirectionMetricsRequestNumDays
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NINETY = 2,
	}
	
	/// <summary>
	/// Input for EMAIL verification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailInput
	{
		
		/// <summary>
		/// Email address where the PIN should be sent to. An email address is accepted only if it is one of the addresses provided by FetchVerificationOptions. If the EmailVerificationData has is_user_name_editable set to true, the client may specify a different user name (local-part) but must match the domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
	}
	
	/// <summary>
	/// Display data for verifications through email.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailVerificationData
	{
		
		/// <summary>
		/// Domain name in the email address. e.g. "gmail.com" in foo@gmail.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Whether client is allowed to provide a different user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isUserNameEditable")]
		public System.Nullable<System.Boolean> IsUserNameEditable { get; set; }
		
		/// <summary>
		/// User name in the email address. e.g. "foo" in foo@gmail.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Enhanced cleaning measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnhancedCleaning
	{
		
		/// <summary>
		/// Commercial-grade disinfectant used to clean the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialGradeDisinfectantCleaning")]
		public System.Nullable<System.Boolean> CommercialGradeDisinfectantCleaning { get; set; }
		
		/// <summary>
		/// Commercial grade disinfectant cleaning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commercialGradeDisinfectantCleaningException")]
		public AccessibilityMobilityAccessibleElevatorException CommercialGradeDisinfectantCleaningException { get; set; }
		
		/// <summary>
		/// Enhanced cleaning of common areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasEnhancedCleaning")]
		public System.Nullable<System.Boolean> CommonAreasEnhancedCleaning { get; set; }
		
		/// <summary>
		/// Common areas enhanced cleaning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasEnhancedCleaningException")]
		public AccessibilityMobilityAccessibleElevatorException CommonAreasEnhancedCleaningException { get; set; }
		
		/// <summary>
		/// Employees trained in COVID-19 cleaning procedures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedCleaningProcedures")]
		public System.Nullable<System.Boolean> EmployeesTrainedCleaningProcedures { get; set; }
		
		/// <summary>
		/// Employees trained cleaning procedures exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedCleaningProceduresException")]
		public AccessibilityMobilityAccessibleElevatorException EmployeesTrainedCleaningProceduresException { get; set; }
		
		/// <summary>
		/// Employees trained in thorough hand-washing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedThoroughHandWashing")]
		public System.Nullable<System.Boolean> EmployeesTrainedThoroughHandWashing { get; set; }
		
		/// <summary>
		/// Employees trained thorough hand washing exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesTrainedThoroughHandWashingException")]
		public AccessibilityMobilityAccessibleElevatorException EmployeesTrainedThoroughHandWashingException { get; set; }
		
		/// <summary>
		/// Employees wear masks, face shields, and/or gloves.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesWearProtectiveEquipment")]
		public System.Nullable<System.Boolean> EmployeesWearProtectiveEquipment { get; set; }
		
		/// <summary>
		/// Employees wear protective equipment exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employeesWearProtectiveEquipmentException")]
		public AccessibilityMobilityAccessibleElevatorException EmployeesWearProtectiveEquipmentException { get; set; }
		
		/// <summary>
		/// Enhanced cleaning of guest rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomsEnhancedCleaning")]
		public System.Nullable<System.Boolean> GuestRoomsEnhancedCleaning { get; set; }
		
		/// <summary>
		/// Guest rooms enhanced cleaning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomsEnhancedCleaningException")]
		public AccessibilityMobilityAccessibleElevatorException GuestRoomsEnhancedCleaningException { get; set; }
	}
	
	/// <summary>
	/// Services and amenities for families and young guests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Families
	{
		
		/// <summary>
		/// Babysitting. Child care that is offered by hotel staffers or coordinated by hotel staffers with local child care professionals. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="babysitting")]
		public System.Nullable<System.Boolean> Babysitting { get; set; }
		
		/// <summary>
		/// Babysitting exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="babysittingException")]
		public AccessibilityMobilityAccessibleElevatorException BabysittingException { get; set; }
		
		/// <summary>
		/// Kids activities. Recreational options such as sports, films, crafts and games designed for the enjoyment of children and offered at the hotel. May or may not be supervised. May or may not be at a designated time or place. Cab be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsActivities")]
		public System.Nullable<System.Boolean> KidsActivities { get; set; }
		
		/// <summary>
		/// Kids activities exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsActivitiesException")]
		public AccessibilityMobilityAccessibleElevatorException KidsActivitiesException { get; set; }
		
		/// <summary>
		/// Kids club. An organized program of group activities held at the hotel and designed for the enjoyment of children. Facilitated by hotel staff (or staff procured by the hotel) in an area(s) designated for the purpose of entertaining children without their parents. May include games, outings, water sports, team sports, arts and crafts, and films. Usually has set hours. Can be free or for a fee. Also known as Kids Camp or Kids program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsClub")]
		public System.Nullable<System.Boolean> KidsClub { get; set; }
		
		/// <summary>
		/// Kids club exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsClubException")]
		public AccessibilityMobilityAccessibleElevatorException KidsClubException { get; set; }
	}
	
	/// <summary>
	/// Request message for Verifications.FetchVerificationOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FetchVerificationOptionsRequest
	{
		
		/// <summary>
		/// Additional data for service business verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ServiceBusinessContext Context { get; set; }
		
		/// <summary>
		/// The BCP 47 language code representing the language that is to be used for the verification process. Available options vary by language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Additional data for service business verification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceBusinessContext
	{
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an i18n-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PostalAddress Address { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.FetchVerificationOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FetchVerificationOptionsResponse
	{
		
		/// <summary>
		/// The available verification options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public VerificationOption[] Options { get; set; }
	}
	
	/// <summary>
	/// The verification option represents how to verify the location (indicated by verification method) and where the verification will be sent to (indicated by display data).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerificationOption
	{
		
		/// <summary>
		/// Display data for verifications through postcard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressData")]
		public AddressVerificationData AddressData { get; set; }
		
		/// <summary>
		/// Display data for verifications through email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailData")]
		public EmailVerificationData EmailData { get; set; }
		
		/// <summary>
		/// Display Data for verifications through phone, e.g. phone call, sms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneData")]
		public PhoneVerificationData PhoneData { get; set; }
		
		/// <summary>
		/// Method to verify the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationMethod")]
		public VerificationMethod VerificationMethod { get; set; }
	}
	
	/// <summary>
	/// Display Data for verifications through phone, e.g. phone call, sms.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneVerificationData
	{
		
		/// <summary>
		/// Phone number that the PIN will be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Request message for Locations.FindMatchingLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FindMatchingLocationsRequest
	{
		
		/// <summary>
		/// The preferred language for the matching location (in BCP-47 format).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Deprecated. This field is ignored for all requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCacheDuration")]
		public string MaxCacheDuration { get; set; }
		
		/// <summary>
		/// The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numResults")]
		public System.Nullable<System.Int32> NumResults { get; set; }
	}
	
	/// <summary>
	/// Response message for Locations.FindMatchingLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FindMatchingLocationsResponse
	{
		
		/// <summary>
		/// When the matching algorithm was last executed for this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchTime")]
		public string MatchTime { get; set; }
		
		/// <summary>
		/// A collection of locations that are potential matches to the specified location, listed in order from best to least match. If there is an exact match, it will be in the first position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchedLocations")]
		public MatchedLocation[] MatchedLocations { get; set; }
	}
	
	/// <summary>
	/// Represents a possible match to a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MatchedLocation
	{
		
		/// <summary>
		/// Is this an exact match?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isExactMatch")]
		public System.Nullable<System.Boolean> IsExactMatch { get; set; }
		
		/// <summary>
		/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// Follower metadata for a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FollowersMetadata
	{
		
		/// <summary>
		/// Total number of followers for the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// The resource name for this. accounts/{account_id}/locations/{location_id}/followers/metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Meals, snacks, and beverages available at the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodAndDrink
	{
		
		/// <summary>
		/// Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest's order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bar")]
		public System.Nullable<System.Boolean> Bar { get; set; }
		
		/// <summary>
		/// Bar exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barException")]
		public AccessibilityMobilityAccessibleElevatorException BarException { get; set; }
		
		/// <summary>
		/// Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastAvailable")]
		public System.Nullable<System.Boolean> BreakfastAvailable { get; set; }
		
		/// <summary>
		/// Breakfast available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException BreakfastAvailableException { get; set; }
		
		/// <summary>
		/// Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastBuffet")]
		public System.Nullable<System.Boolean> BreakfastBuffet { get; set; }
		
		/// <summary>
		/// Breakfast buffet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakfastBuffetException")]
		public AccessibilityMobilityAccessibleElevatorException BreakfastBuffetException { get; set; }
		
		/// <summary>
		/// Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buffet")]
		public System.Nullable<System.Boolean> Buffet { get; set; }
		
		/// <summary>
		/// Buffet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buffetException")]
		public AccessibilityMobilityAccessibleElevatorException BuffetException { get; set; }
		
		/// <summary>
		/// Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dinnerBuffet")]
		public System.Nullable<System.Boolean> DinnerBuffet { get; set; }
		
		/// <summary>
		/// Dinner buffet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dinnerBuffetException")]
		public AccessibilityMobilityAccessibleElevatorException DinnerBuffetException { get; set; }
		
		/// <summary>
		/// Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBreakfast")]
		public System.Nullable<System.Boolean> FreeBreakfast { get; set; }
		
		/// <summary>
		/// Free breakfast exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBreakfastException")]
		public AccessibilityMobilityAccessibleElevatorException FreeBreakfastException { get; set; }
		
		/// <summary>
		/// Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A "breakfast room" where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurant")]
		public System.Nullable<System.Boolean> Restaurant { get; set; }
		
		/// <summary>
		/// Restaurant exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurantException")]
		public AccessibilityMobilityAccessibleElevatorException RestaurantException { get; set; }
		
		/// <summary>
		/// Restaurants count. The number of restaurants at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurantsCount")]
		public System.Nullable<System.Int32> RestaurantsCount { get; set; }
		
		/// <summary>
		/// Restaurants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restaurantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException RestaurantsCountException { get; set; }
		
		/// <summary>
		/// Room service. A hotel staffer delivers meals prepared onsite to a guest's room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomService")]
		public System.Nullable<System.Boolean> RoomService { get; set; }
		
		/// <summary>
		/// Room service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomServiceException")]
		public AccessibilityMobilityAccessibleElevatorException RoomServiceException { get; set; }
		
		/// <summary>
		/// Table service. A restaurant in which a staff member is assigned to a guest's table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableService")]
		public System.Nullable<System.Boolean> TableService { get; set; }
		
		/// <summary>
		/// Table service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableServiceException")]
		public AccessibilityMobilityAccessibleElevatorException TableServiceException { get; set; }
		
		/// <summary>
		/// 24hr room service. Room service is available 24 hours a day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourRoomService")]
		public System.Nullable<System.Boolean> TwentyFourHourRoomService { get; set; }
		
		/// <summary>
		/// 24hr room service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourRoomServiceException")]
		public AccessibilityMobilityAccessibleElevatorException TwentyFourHourRoomServiceException { get; set; }
		
		/// <summary>
		/// Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendingMachine")]
		public System.Nullable<System.Boolean> VendingMachine { get; set; }
		
		/// <summary>
		/// Vending machine exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendingMachineException")]
		public AccessibilityMobilityAccessibleElevatorException VendingMachineException { get; set; }
	}
	
	/// <summary>
	/// Menu of a business that serves food dishes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodMenu
	{
		
		/// <summary>
		/// Optional. Cuisine information for the food menu. It is highly recommended to provide this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cuisines")]
		public string[] Cuisines { get; set; }
		
		/// <summary>
		/// Required. Language-tagged labels for the menu. E.g. "menu", "lunch special". Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public MenuLabel[] Labels { get; set; }
		
		/// <summary>
		/// Required. Sections of the menu.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public FoodMenuSection[] Sections { get; set; }
		
		/// <summary>
		/// Optional. Source URL of menu if there is a webpage to go to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	/// Label to be used when displaying the menu and its various sub-components.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MenuLabel
	{
		
		/// <summary>
		/// Optional. Supplementary information of the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. Display name of the component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. The BCP 47 code of language. If the language is not available, it will default to English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Section of a menu. It can contain multiple items/dishes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodMenuSection
	{
		
		/// <summary>
		/// Required. Items of the section. Each Section must have at least an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public FoodMenuItem[] Items { get; set; }
		
		/// <summary>
		/// Required. Language tagged labels for this menu section. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public MenuLabel[] Labels { get; set; }
	}
	
	/// <summary>
	/// Item of a Section. It can be the dish itself, or can contain multiple FoodMenuItemOption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodMenuItem
	{
		
		/// <summary>
		/// Attributes of a food item/dish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public FoodMenuItemAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required. Language tagged labels for this menu item. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public MenuLabel[] Labels { get; set; }
		
		/// <summary>
		/// Optional. This is for an item that comes in multiple different options, and users are required to make choices. E.g. "regular" vs. "large" pizza. When options are specified, labels and attributes at item level will automatically become the first option's labels and attributes. Clients only need to specify other additional food options in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public FoodMenuItemOption[] Options { get; set; }
	}
	
	/// <summary>
	/// Attributes of a food item/dish.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodMenuItemAttributes
	{
		
		/// <summary>
		/// Optional. Allergens associated with the food dish. It is highly recommended to provide this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allergen")]
		public string[] Allergen { get; set; }
		
		/// <summary>
		/// Optional. Dietary information of the food dish. It is highly recommended to provide this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dietaryRestriction")]
		public string[] DietaryRestriction { get; set; }
		
		/// <summary>
		/// Optional. Ingredients of the food dish option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingredients")]
		public Ingredient[] Ingredients { get; set; }
		
		/// <summary>
		/// Optional. The media keys of the media associated with the dish. Only photo media is supported. When there are multiple photos associated, the first photo is considered as the preferred photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaKeys")]
		public string[] MediaKeys { get; set; }
		
		/// <summary>
		/// This message represents nutrition facts for a food dish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nutritionFacts")]
		public NutritionFacts NutritionFacts { get; set; }
		
		/// <summary>
		/// Serving portion size of a food dish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portionSize")]
		public PortionSize PortionSize { get; set; }
		
		/// <summary>
		/// Optional. Methods on how the food dish option is prepared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preparationMethods")]
		public string[] PreparationMethods { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Optional. Number of people can be served by this food dish option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servesNumPeople")]
		public System.Nullable<System.Int32> ServesNumPeople { get; set; }
		
		/// <summary>
		/// Optional. Spiciness level of the food dish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spiciness")]
		public System.Nullable<FoodMenuItemAttributesSpiciness> Spiciness { get; set; }
	}
	
	/// <summary>
	/// This message denotes an ingredient information of a food dish.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ingredient
	{
		
		/// <summary>
		/// Required. Labels to describe ingredient. Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public MenuLabel[] Labels { get; set; }
	}
	
	/// <summary>
	/// This message represents nutrition facts for a food dish.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NutritionFacts
	{
		
		/// <summary>
		/// This message denotes calories information with an upper bound and lower bound range. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calories")]
		public CaloriesFact Calories { get; set; }
		
		/// <summary>
		/// This message denotes nutrition information with an upper bound and lower bound range and can be represented by mass unit. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cholesterol")]
		public NutritionFact Cholesterol { get; set; }
		
		/// <summary>
		/// This message denotes nutrition information with an upper bound and lower bound range and can be represented by mass unit. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protein")]
		public NutritionFact Protein { get; set; }
		
		/// <summary>
		/// This message denotes nutrition information with an upper bound and lower bound range and can be represented by mass unit. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sodium")]
		public NutritionFact Sodium { get; set; }
		
		/// <summary>
		/// This message denotes nutrition information with an upper bound and lower bound range and can be represented by mass unit. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCarbohydrate")]
		public NutritionFact TotalCarbohydrate { get; set; }
		
		/// <summary>
		/// This message denotes nutrition information with an upper bound and lower bound range and can be represented by mass unit. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalFat")]
		public NutritionFact TotalFat { get; set; }
	}
	
	/// <summary>
	/// This message denotes nutrition information with an upper bound and lower bound range and can be represented by mass unit. Lower amount must be specified. Both lower and upper amounts are non-negative numbers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NutritionFact
	{
		
		/// <summary>
		/// Required. Lower amount of nutrition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowerAmount")]
		public System.Nullable<System.Double> LowerAmount { get; set; }
		
		/// <summary>
		/// Required. Unit of the given nutrition information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<NutritionFactUnit> Unit { get; set; }
		
		/// <summary>
		/// Optional. Upper amount of nutrition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upperAmount")]
		public System.Nullable<System.Double> UpperAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NutritionFactUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASS_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILLIGRAM = 2,
	}
	
	/// <summary>
	/// Serving portion size of a food dish.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortionSize
	{
		
		/// <summary>
		/// Required. Number of the portion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Required. The repeated name_info field is for the unit in multiple languages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MenuLabel[] Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FoodMenuItemAttributesSpiciness
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICINESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOT = 3,
	}
	
	/// <summary>
	/// Option of an Item. It requires an explicit user selection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodMenuItemOption
	{
		
		/// <summary>
		/// Attributes of a food item/dish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public FoodMenuItemAttributes Attributes { get; set; }
		
		/// <summary>
		/// Required. Language tagged labels for this menu item option. E.g.: "beef pad thai", "veggie pad thai", "small pizza", "large pizza". Display names should be 140 characters or less, with descriptions 1,000 characters or less. At least one set of labels is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public MenuLabel[] Labels { get; set; }
	}
	
	/// <summary>
	/// Menus of a business that serve food dishes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoodMenus
	{
		
		/// <summary>
		/// Optional. A collection of food menus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="menus")]
		public FoodMenu[] Menus { get; set; }
		
		/// <summary>
		/// Required. Google identifier for this location in the form: `accounts/{account_id}/locations/{location_id}/foodMenus`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a free-form service offered by the merchant. These are services that are not exposed as part of our structure service data. The merchant manually enters the names for of such services via a geomerchant surface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreeFormServiceItem
	{
		
		/// <summary>
		/// Required. The `category_id` and `service_type_id` should match the possible combinations provided in the `Category` message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// Label to be used when displaying the price list, section, or item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public Label Label { get; set; }
	}
	
	/// <summary>
	/// Request message for Accounts.GenerateAccountNumber.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateAccountNumberRequest
	{
	}
	
	/// <summary>
	/// Response message for LodgingService.GetGoogleUpdatedLodging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetGoogleUpdatedLodgingResponse
	{
		
		/// <summary>
		/// Required. The fields in the Lodging that have been updated by Google. Repeated field items are not individually specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffMask")]
		public string DiffMask { get; set; }
		
		/// <summary>
		/// Lodging of a location that provides accomodations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lodging")]
		public Lodging Lodging { get; set; }
	}
	
	/// <summary>
	/// Lodging of a location that provides accomodations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Lodging
	{
		
		/// <summary>
		/// Physical adaptations made to the property in consideration of varying levels of human physical ability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibility")]
		public Accessibility Accessibility { get; set; }
		
		/// <summary>
		/// Amenities and features related to leisure and play.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public Activities Activities { get; set; }
		
		/// <summary>
		/// Features and available amenities in the guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allUnits")]
		public GuestUnitFeatures AllUnits { get; set; }
		
		/// <summary>
		/// Features of the property of specific interest to the business traveler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="business")]
		public Business Business { get; set; }
		
		/// <summary>
		/// An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonLivingArea")]
		public LivingArea CommonLivingArea { get; set; }
		
		/// <summary>
		/// The ways in which the property provides guests with the ability to access the internet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectivity")]
		public Connectivity Connectivity { get; set; }
		
		/// <summary>
		/// Services and amenities for families and young guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="families")]
		public Families Families { get; set; }
		
		/// <summary>
		/// Meals, snacks, and beverages available at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodAndDrink")]
		public FoodAndDrink FoodAndDrink { get; set; }
		
		/// <summary>
		/// Individual GuestUnitTypes that are available in this Lodging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestUnits")]
		public GuestUnitType[] GuestUnits { get; set; }
		
		/// <summary>
		/// Health and safety measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthAndSafety")]
		public HealthAndSafety HealthAndSafety { get; set; }
		
		/// <summary>
		/// Conveniences provided in guest units to facilitate an easier, more comfortable stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeeping")]
		public Housekeeping Housekeeping { get; set; }
		
		/// <summary>
		/// Metadata for the Lodging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public LodgingMetadata Metadata { get; set; }
		
		/// <summary>
		/// Required. Google identifier for this location in the form: `accounts/{account_id}/locations/{location_id}/lodging`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parking options at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parking")]
		public Parking Parking { get; set; }
		
		/// <summary>
		/// Policies regarding guest-owned animals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pets")]
		public Pets Pets { get; set; }
		
		/// <summary>
		/// Property rules that impact guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policies Policies { get; set; }
		
		/// <summary>
		/// Swimming pool or recreational water facilities available at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pools")]
		public Pools Pools { get; set; }
		
		/// <summary>
		/// General factual information about the property's physical structure and important dates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public Property Property { get; set; }
		
		/// <summary>
		/// Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Services Services { get; set; }
		
		/// <summary>
		/// Features and available amenities in the guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="someUnits")]
		public GuestUnitFeatures SomeUnits { get; set; }
		
		/// <summary>
		/// Vehicles or vehicular services facilitated or owned by the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportation")]
		public Transportation Transportation { get; set; }
		
		/// <summary>
		/// Guest facilities at the property to promote or maintain health, beauty, and fitness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wellness")]
		public Wellness Wellness { get; set; }
	}
	
	/// <summary>
	/// Features and available amenities in the guest unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GuestUnitFeatures
	{
		
		/// <summary>
		/// Bungalow or villa. An independent structure that is part of a hotel or resort that is rented to one party for a vacation stay. The hotel or resort may be completely comprised of bungalows or villas, or they may be one of several guestroom options. Guests in the bungalows or villas most often have the same, if not more, amenities and services offered to guests in other guestroom types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungalowOrVilla")]
		public System.Nullable<System.Boolean> BungalowOrVilla { get; set; }
		
		/// <summary>
		/// Bungalow or villa exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungalowOrVillaException")]
		public AccessibilityMobilityAccessibleElevatorException BungalowOrVillaException { get; set; }
		
		/// <summary>
		/// Connecting unit available. A guestroom type that features access to an adjacent guestroom for the purpose of booking both rooms. Most often used by families who need more than one room to accommodate the number of people in their group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectingUnitAvailable")]
		public System.Nullable<System.Boolean> ConnectingUnitAvailable { get; set; }
		
		/// <summary>
		/// Connecting unit available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectingUnitAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ConnectingUnitAvailableException { get; set; }
		
		/// <summary>
		/// Executive floor. A floor of the hotel where the guestrooms are only bookable by members of the hotel's frequent guest membership program. Benefits of this room class include access to a designated lounge which may or may not feature free breakfast, cocktails or other perks specific to members of the program.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executiveFloor")]
		public System.Nullable<System.Boolean> ExecutiveFloor { get; set; }
		
		/// <summary>
		/// Executive floor exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executiveFloorException")]
		public AccessibilityMobilityAccessibleElevatorException ExecutiveFloorException { get; set; }
		
		/// <summary>
		/// Max adult occupants count. The total number of adult guests allowed to stay overnight in the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAdultOccupantsCount")]
		public System.Nullable<System.Int32> MaxAdultOccupantsCount { get; set; }
		
		/// <summary>
		/// Max adult occupants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAdultOccupantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxAdultOccupantsCountException { get; set; }
		
		/// <summary>
		/// Max child occupants count. The total number of children allowed to stay overnight in the room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildOccupantsCount")]
		public System.Nullable<System.Int32> MaxChildOccupantsCount { get; set; }
		
		/// <summary>
		/// Max child occupants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildOccupantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxChildOccupantsCountException { get; set; }
		
		/// <summary>
		/// Max occupants count. The total number of guests allowed to stay overnight in the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxOccupantsCount")]
		public System.Nullable<System.Int32> MaxOccupantsCount { get; set; }
		
		/// <summary>
		/// Max occupants count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxOccupantsCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxOccupantsCountException { get; set; }
		
		/// <summary>
		/// Private home. A privately owned home (house, townhouse, apartment, cabin, bungalow etc) that may or not serve as the owner's residence, but is rented out in its entirety or by the room(s) to paying guest(s) for vacation stays. Not for lease-based, long-term residency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateHome")]
		public System.Nullable<System.Boolean> PrivateHome { get; set; }
		
		/// <summary>
		/// Private home exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateHomeException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateHomeException { get; set; }
		
		/// <summary>
		/// Suite. A guestroom category that implies both a bedroom area and a separate living area. There may or may not be full walls and doors separating the two areas, but regardless, they are very distinct. Does not mean a couch or chair in a bedroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suite")]
		public System.Nullable<System.Boolean> Suite { get; set; }
		
		/// <summary>
		/// Suite exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suiteException")]
		public AccessibilityMobilityAccessibleElevatorException SuiteException { get; set; }
		
		/// <summary>
		/// Tier. Classification of the unit based on available features/amenities. A non-standard tier is only permitted if at least one other unit type falls under the standard tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<GuestUnitFeaturesTier> Tier { get; set; }
		
		/// <summary>
		/// Tier exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierException")]
		public AccessibilityMobilityAccessibleElevatorException TierException { get; set; }
		
		/// <summary>
		/// An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalLivingAreas")]
		public LivingArea TotalLivingAreas { get; set; }
		
		/// <summary>
		/// Views available from the guest unit itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="views")]
		public ViewsFromUnit Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GuestUnitFeaturesTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIT_TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_UNIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELUXE_UNIT = 2,
	}
	
	/// <summary>
	/// An individual room, such as kitchen, bathroom, bedroom, within a bookable guest unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingArea
	{
		
		/// <summary>
		/// Accessibility features of the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibility")]
		public LivingAreaAccessibility Accessibility { get; set; }
		
		/// <summary>
		/// Information about eating features in the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eating")]
		public LivingAreaEating Eating { get; set; }
		
		/// <summary>
		/// Features in the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public LivingAreaFeatures Features { get; set; }
		
		/// <summary>
		/// Information about the layout of the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public LivingAreaLayout Layout { get; set; }
		
		/// <summary>
		/// Information about sleeping features in the living area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sleeping")]
		public LivingAreaSleeping Sleeping { get; set; }
	}
	
	/// <summary>
	/// Accessibility features of the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaAccessibility
	{
		
		/// <summary>
		/// ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaCompliantUnit")]
		public System.Nullable<System.Boolean> AdaCompliantUnit { get; set; }
		
		/// <summary>
		/// ADA compliant unit exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaCompliantUnitException")]
		public AccessibilityMobilityAccessibleElevatorException AdaCompliantUnitException { get; set; }
		
		/// <summary>
		/// Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleDoorbell")]
		public System.Nullable<System.Boolean> HearingAccessibleDoorbell { get; set; }
		
		/// <summary>
		/// Hearing-accessible doorbell exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleDoorbellException")]
		public AccessibilityMobilityAccessibleElevatorException HearingAccessibleDoorbellException { get; set; }
		
		/// <summary>
		/// Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleFireAlarm")]
		public System.Nullable<System.Boolean> HearingAccessibleFireAlarm { get; set; }
		
		/// <summary>
		/// Hearing-accessible fire alarm exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleFireAlarmException")]
		public AccessibilityMobilityAccessibleElevatorException HearingAccessibleFireAlarmException { get; set; }
		
		/// <summary>
		/// Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleUnit")]
		public System.Nullable<System.Boolean> HearingAccessibleUnit { get; set; }
		
		/// <summary>
		/// Hearing-accessible unit exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hearingAccessibleUnitException")]
		public AccessibilityMobilityAccessibleElevatorException HearingAccessibleUnitException { get; set; }
		
		/// <summary>
		/// Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleBathtub")]
		public System.Nullable<System.Boolean> MobilityAccessibleBathtub { get; set; }
		
		/// <summary>
		/// Mobility-accessible bathtub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleBathtubException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleBathtubException { get; set; }
		
		/// <summary>
		/// Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleShower")]
		public System.Nullable<System.Boolean> MobilityAccessibleShower { get; set; }
		
		/// <summary>
		/// Mobility-accessible shower exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleShowerException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleShowerException { get; set; }
		
		/// <summary>
		/// Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleToilet")]
		public System.Nullable<System.Boolean> MobilityAccessibleToilet { get; set; }
		
		/// <summary>
		/// Mobility-accessible toilet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleToiletException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleToiletException { get; set; }
		
		/// <summary>
		/// Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleUnit")]
		public System.Nullable<System.Boolean> MobilityAccessibleUnit { get; set; }
		
		/// <summary>
		/// Mobility-accessible unit exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilityAccessibleUnitException")]
		public AccessibilityMobilityAccessibleElevatorException MobilityAccessibleUnitException { get; set; }
	}
	
	/// <summary>
	/// Information about eating features in the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaEating
	{
		
		/// <summary>
		/// Coffee maker. An electric appliance that brews coffee by heating and forcing water through ground coffee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coffeeMaker")]
		public System.Nullable<System.Boolean> CoffeeMaker { get; set; }
		
		/// <summary>
		/// Coffee maker exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coffeeMakerException")]
		public AccessibilityMobilityAccessibleElevatorException CoffeeMakerException { get; set; }
		
		/// <summary>
		/// Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookware")]
		public System.Nullable<System.Boolean> Cookware { get; set; }
		
		/// <summary>
		/// Cookware exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookwareException")]
		public AccessibilityMobilityAccessibleElevatorException CookwareException { get; set; }
		
		/// <summary>
		/// Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to the plumbing system to facilitate the automatic cleaning of its contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dishwasher")]
		public System.Nullable<System.Boolean> Dishwasher { get; set; }
		
		/// <summary>
		/// Dishwasher exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dishwasherException")]
		public AccessibilityMobilityAccessibleElevatorException DishwasherException { get; set; }
		
		/// <summary>
		/// Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open flame or electric heat source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorGrill")]
		public System.Nullable<System.Boolean> IndoorGrill { get; set; }
		
		/// <summary>
		/// Indoor grill exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorGrillException")]
		public AccessibilityMobilityAccessibleElevatorException IndoorGrillException { get; set; }
		
		/// <summary>
		/// Kettle. A covered container with a handle and a spout used for boiling water.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kettle")]
		public System.Nullable<System.Boolean> Kettle { get; set; }
		
		/// <summary>
		/// Kettle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kettleException")]
		public AccessibilityMobilityAccessibleElevatorException KettleException { get; set; }
		
		/// <summary>
		/// Kitchen available. An area of the guestroom designated for the preparation and storage of food via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not include an automatic dishwasher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kitchenAvailable")]
		public System.Nullable<System.Boolean> KitchenAvailable { get; set; }
		
		/// <summary>
		/// Kitchen available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kitchenAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException KitchenAvailableException { get; set; }
		
		/// <summary>
		/// Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or mounted above a cooktop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microwave")]
		public System.Nullable<System.Boolean> Microwave { get; set; }
		
		/// <summary>
		/// Microwave exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microwaveException")]
		public AccessibilityMobilityAccessibleElevatorException MicrowaveException { get; set; }
		
		/// <summary>
		/// Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks, mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minibar")]
		public System.Nullable<System.Boolean> Minibar { get; set; }
		
		/// <summary>
		/// Minibar exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minibarException")]
		public AccessibilityMobilityAccessibleElevatorException MinibarException { get; set; }
		
		/// <summary>
		/// Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source. Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or barbecue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorGrill")]
		public System.Nullable<System.Boolean> OutdoorGrill { get; set; }
		
		/// <summary>
		/// Outdoor grill exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorGrillException")]
		public AccessibilityMobilityAccessibleElevatorException OutdoorGrillException { get; set; }
		
		/// <summary>
		/// Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which food is placed for the purpose of cooking or reheating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oven")]
		public System.Nullable<System.Boolean> Oven { get; set; }
		
		/// <summary>
		/// Oven exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ovenException")]
		public AccessibilityMobilityAccessibleElevatorException OvenException { get; set; }
		
		/// <summary>
		/// Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the purpose of chilling and storing perishable foods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refrigerator")]
		public System.Nullable<System.Boolean> Refrigerator { get; set; }
		
		/// <summary>
		/// Refrigerator exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refrigeratorException")]
		public AccessibilityMobilityAccessibleElevatorException RefrigeratorException { get; set; }
		
		/// <summary>
		/// Sink. A basin with a faucet attached to a water source and used for the purpose of washing and rinsing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sink")]
		public System.Nullable<System.Boolean> Sink { get; set; }
		
		/// <summary>
		/// Sink exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sinkException")]
		public AccessibilityMobilityAccessibleElevatorException SinkException { get; set; }
		
		/// <summary>
		/// Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly available for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snackbar")]
		public System.Nullable<System.Boolean> Snackbar { get; set; }
		
		/// <summary>
		/// Snackbar exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snackbarException")]
		public AccessibilityMobilityAccessibleElevatorException SnackbarException { get; set; }
		
		/// <summary>
		/// Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or hot surface on which pots of food can be cooked. Also known as cooktop or hob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stove")]
		public System.Nullable<System.Boolean> Stove { get; set; }
		
		/// <summary>
		/// Stove exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stoveException")]
		public AccessibilityMobilityAccessibleElevatorException StoveException { get; set; }
		
		/// <summary>
		/// Tea station. A small area with the supplies needed to heat water and make tea.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaStation")]
		public System.Nullable<System.Boolean> TeaStation { get; set; }
		
		/// <summary>
		/// Tea station exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teaStationException")]
		public AccessibilityMobilityAccessibleElevatorException TeaStationException { get; set; }
		
		/// <summary>
		/// Toaster. A small, temperature controlled electric appliance with rectangular slots at the top that are lined with heated coils for the purpose of browning slices of bread products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toaster")]
		public System.Nullable<System.Boolean> Toaster { get; set; }
		
		/// <summary>
		/// Toaster exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toasterException")]
		public AccessibilityMobilityAccessibleElevatorException ToasterException { get; set; }
	}
	
	/// <summary>
	/// Features in the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaFeatures
	{
		
		/// <summary>
		/// Air conditioning. An electrical machine used to cool the temperature of the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airConditioning")]
		public System.Nullable<System.Boolean> AirConditioning { get; set; }
		
		/// <summary>
		/// Air conditioning exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airConditioningException")]
		public AccessibilityMobilityAccessibleElevatorException AirConditioningException { get; set; }
		
		/// <summary>
		/// Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures to control the temperature of the water, a faucet through which the water flows, and a drain that can be closed for filling and opened for draining.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bathtub")]
		public System.Nullable<System.Boolean> Bathtub { get; set; }
		
		/// <summary>
		/// Bathtub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bathtubException")]
		public AccessibilityMobilityAccessibleElevatorException BathtubException { get; set; }
		
		/// <summary>
		/// Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of washing after toilet use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidet")]
		public System.Nullable<System.Boolean> Bidet { get; set; }
		
		/// <summary>
		/// Bidet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidetException")]
		public AccessibilityMobilityAccessibleElevatorException BidetException { get; set; }
		
		/// <summary>
		/// Dryer. An electrical machine designed to dry clothing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dryer")]
		public System.Nullable<System.Boolean> Dryer { get; set; }
		
		/// <summary>
		/// Dryer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dryerException")]
		public AccessibilityMobilityAccessibleElevatorException DryerException { get; set; }
		
		/// <summary>
		/// Electronic room key. A card coded by the check-in computer that is read by the lock on the hotel guestroom door to allow for entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electronicRoomKey")]
		public System.Nullable<System.Boolean> ElectronicRoomKey { get; set; }
		
		/// <summary>
		/// Electronic room key exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electronicRoomKeyException")]
		public AccessibilityMobilityAccessibleElevatorException ElectronicRoomKeyException { get; set; }
		
		/// <summary>
		/// Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often made of bricks or stone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fireplace")]
		public System.Nullable<System.Boolean> Fireplace { get; set; }
		
		/// <summary>
		/// Fireplace exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fireplaceException")]
		public AccessibilityMobilityAccessibleElevatorException FireplaceException { get; set; }
		
		/// <summary>
		/// Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the guestroom's bathroom or closet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hairdryer")]
		public System.Nullable<System.Boolean> Hairdryer { get; set; }
		
		/// <summary>
		/// Hairdryer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hairdryerException")]
		public AccessibilityMobilityAccessibleElevatorException HairdryerException { get; set; }
		
		/// <summary>
		/// Heating. An electrical machine used to warm the temperature of the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heating")]
		public System.Nullable<System.Boolean> Heating { get; set; }
		
		/// <summary>
		/// Heating exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heatingException")]
		public AccessibilityMobilityAccessibleElevatorException HeatingException { get; set; }
		
		/// <summary>
		/// In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected storage of valuables in a guestroom. Often built into a closet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitSafe")]
		public System.Nullable<System.Boolean> InunitSafe { get; set; }
		
		/// <summary>
		/// In-unit safe exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitSafeException")]
		public AccessibilityMobilityAccessibleElevatorException InunitSafeException { get; set; }
		
		/// <summary>
		/// In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitWifiAvailable")]
		public System.Nullable<System.Boolean> InunitWifiAvailable { get; set; }
		
		/// <summary>
		/// In-unit Wifi available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inunitWifiAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException InunitWifiAvailableException { get; set; }
		
		/// <summary>
		/// Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish, or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ironingEquipment")]
		public System.Nullable<System.Boolean> IroningEquipment { get; set; }
		
		/// <summary>
		/// Ironing equipment exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ironingEquipmentException")]
		public AccessibilityMobilityAccessibleElevatorException IroningEquipmentException { get; set; }
		
		/// <summary>
		/// Pay per view movies. Televisions with channels that offer films that can be viewed for a fee, and have an interface to allow the viewer to accept the terms and approve payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payPerViewMovies")]
		public System.Nullable<System.Boolean> PayPerViewMovies { get; set; }
		
		/// <summary>
		/// Pay per view movies exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payPerViewMoviesException")]
		public AccessibilityMobilityAccessibleElevatorException PayPerViewMoviesException { get; set; }
		
		/// <summary>
		/// Private bathroom. A bathroom designated for the express use of the guests staying in a specific guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBathroom")]
		public System.Nullable<System.Boolean> PrivateBathroom { get; set; }
		
		/// <summary>
		/// Private bathroom exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateBathroomException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateBathroomException { get; set; }
		
		/// <summary>
		/// Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or faucet through which water flows, a knob or knobs that control the water's temperature, and a drain in the floor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shower")]
		public System.Nullable<System.Boolean> Shower { get; set; }
		
		/// <summary>
		/// Shower exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showerException")]
		public AccessibilityMobilityAccessibleElevatorException ShowerException { get; set; }
		
		/// <summary>
		/// Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a water-flushed bowl with a seat, as well as a device that elicites the water-flushing action. Used for the process and disposal of human waste.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toilet")]
		public System.Nullable<System.Boolean> Toilet { get; set; }
		
		/// <summary>
		/// Toilet exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toiletException")]
		public AccessibilityMobilityAccessibleElevatorException ToiletException { get; set; }
		
		/// <summary>
		/// TV. A television is available in the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tv")]
		public System.Nullable<System.Boolean> Tv { get; set; }
		
		/// <summary>
		/// TV casting. A television equipped with a device through which the video entertainment accessed on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the guestroom's television.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvCasting")]
		public System.Nullable<System.Boolean> TvCasting { get; set; }
		
		/// <summary>
		/// TV exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvCastingException")]
		public AccessibilityMobilityAccessibleElevatorException TvCastingException { get; set; }
		
		/// <summary>
		/// TV exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvException")]
		public AccessibilityMobilityAccessibleElevatorException TvException { get; set; }
		
		/// <summary>
		/// TV streaming. Televisions that embed a range of web-based apps to allow for watching media from those apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvStreaming")]
		public System.Nullable<System.Boolean> TvStreaming { get; set; }
		
		/// <summary>
		/// TV streaming exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tvStreamingException")]
		public AccessibilityMobilityAccessibleElevatorException TvStreamingException { get; set; }
		
		/// <summary>
		/// Universal power adapters. A power supply for electronic devices which plugs into a wall for the purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="universalPowerAdapters")]
		public System.Nullable<System.Boolean> UniversalPowerAdapters { get; set; }
		
		/// <summary>
		/// Universal power adapters exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="universalPowerAdaptersException")]
		public AccessibilityMobilityAccessibleElevatorException UniversalPowerAdaptersException { get; set; }
		
		/// <summary>
		/// Washer. An electrical machine connected to a running water source designed to launder clothing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="washer")]
		public System.Nullable<System.Boolean> Washer { get; set; }
		
		/// <summary>
		/// Washer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="washerException")]
		public AccessibilityMobilityAccessibleElevatorException WasherException { get; set; }
	}
	
	/// <summary>
	/// Information about the layout of the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaLayout
	{
		
		/// <summary>
		/// Balcony. An outdoor platform attached to a building and surrounded by a short wall, fence or other safety railing. The balcony is accessed through a door in a guestroom or suite and is for use by the guest staying in that room. May or may not include seating or outdoor furniture. Is not located on the ground floor. Also lanai.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balcony")]
		public System.Nullable<System.Boolean> Balcony { get; set; }
		
		/// <summary>
		/// Balcony exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balconyException")]
		public AccessibilityMobilityAccessibleElevatorException BalconyException { get; set; }
		
		/// <summary>
		/// Living area sq meters. The measurement in meters of the area of a guestroom's living space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livingAreaSqMeters")]
		public System.Nullable<System.Single> LivingAreaSqMeters { get; set; }
		
		/// <summary>
		/// Living area sq meters exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livingAreaSqMetersException")]
		public AccessibilityMobilityAccessibleElevatorException LivingAreaSqMetersException { get; set; }
		
		/// <summary>
		/// Loft. A three-walled upper area accessed by stairs or a ladder that overlooks the lower area of a room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loft")]
		public System.Nullable<System.Boolean> Loft { get; set; }
		
		/// <summary>
		/// Loft exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loftException")]
		public AccessibilityMobilityAccessibleElevatorException LoftException { get; set; }
		
		/// <summary>
		/// Non smoking. A guestroom in which the smoking of cigarettes, cigars and pipes is prohibited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSmoking")]
		public System.Nullable<System.Boolean> NonSmoking { get; set; }
		
		/// <summary>
		/// Non smoking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonSmokingException")]
		public AccessibilityMobilityAccessibleElevatorException NonSmokingException { get; set; }
		
		/// <summary>
		/// Patio. A paved, outdoor area with seating attached to and accessed through a ground-floor guestroom for use by the occupants of the guestroom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patio")]
		public System.Nullable<System.Boolean> Patio { get; set; }
		
		/// <summary>
		/// Patio exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patioException")]
		public AccessibilityMobilityAccessibleElevatorException PatioException { get; set; }
		
		/// <summary>
		/// Stairs. There are steps leading from one level or story to another in the unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stairs")]
		public System.Nullable<System.Boolean> Stairs { get; set; }
		
		/// <summary>
		/// Stairs exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stairsException")]
		public AccessibilityMobilityAccessibleElevatorException StairsException { get; set; }
	}
	
	/// <summary>
	/// Information about sleeping features in the living area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LivingAreaSleeping
	{
		
		/// <summary>
		/// Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bedsCount")]
		public System.Nullable<System.Int32> BedsCount { get; set; }
		
		/// <summary>
		/// Beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException BedsCountException { get; set; }
		
		/// <summary>
		/// Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bunkBedsCount")]
		public System.Nullable<System.Int32> BunkBedsCount { get; set; }
		
		/// <summary>
		/// Bunk beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bunkBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException BunkBedsCountException { get; set; }
		
		/// <summary>
		/// Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cribsCount")]
		public System.Nullable<System.Int32> CribsCount { get; set; }
		
		/// <summary>
		/// Cribs count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cribsCountException")]
		public AccessibilityMobilityAccessibleElevatorException CribsCountException { get; set; }
		
		/// <summary>
		/// Double beds count. The number of medium beds measuring 53"W x 75"L (135cm x 191cm). Also known as full size bed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleBedsCount")]
		public System.Nullable<System.Int32> DoubleBedsCount { get; set; }
		
		/// <summary>
		/// Double beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException DoubleBedsCountException { get; set; }
		
		/// <summary>
		/// Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featherPillows")]
		public System.Nullable<System.Boolean> FeatherPillows { get; set; }
		
		/// <summary>
		/// Feather pillows exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featherPillowsException")]
		public AccessibilityMobilityAccessibleElevatorException FeatherPillowsException { get; set; }
		
		/// <summary>
		/// Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hypoallergenicBedding")]
		public System.Nullable<System.Boolean> HypoallergenicBedding { get; set; }
		
		/// <summary>
		/// Hypoallergenic bedding exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hypoallergenicBeddingException")]
		public AccessibilityMobilityAccessibleElevatorException HypoallergenicBeddingException { get; set; }
		
		/// <summary>
		/// King beds count. The number of large beds measuring 76"W x 80"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kingBedsCount")]
		public System.Nullable<System.Int32> KingBedsCount { get; set; }
		
		/// <summary>
		/// King beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kingBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException KingBedsCountException { get; set; }
		
		/// <summary>
		/// Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryFoamPillows")]
		public System.Nullable<System.Boolean> MemoryFoamPillows { get; set; }
		
		/// <summary>
		/// Memory foam pillows exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryFoamPillowsException")]
		public AccessibilityMobilityAccessibleElevatorException MemoryFoamPillowsException { get; set; }
		
		/// <summary>
		/// Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherBedsCount")]
		public System.Nullable<System.Int32> OtherBedsCount { get; set; }
		
		/// <summary>
		/// Other beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException OtherBedsCountException { get; set; }
		
		/// <summary>
		/// Queen beds count. The number of medium-large beds measuring 60"W x 80"L (152cm x 102cm).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queenBedsCount")]
		public System.Nullable<System.Int32> QueenBedsCount { get; set; }
		
		/// <summary>
		/// Queen beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queenBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException QueenBedsCountException { get; set; }
		
		/// <summary>
		/// Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rollAwayBedsCount")]
		public System.Nullable<System.Int32> RollAwayBedsCount { get; set; }
		
		/// <summary>
		/// Roll away beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rollAwayBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException RollAwayBedsCountException { get; set; }
		
		/// <summary>
		/// Single or twin count beds. The number of smaller beds measuring 38"W x 75"L (97cm x 191cm) that can accommodate one adult.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleOrTwinBedsCount")]
		public System.Nullable<System.Int32> SingleOrTwinBedsCount { get; set; }
		
		/// <summary>
		/// Single or twin beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleOrTwinBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException SingleOrTwinBedsCountException { get; set; }
		
		/// <summary>
		/// Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sofaBedsCount")]
		public System.Nullable<System.Int32> SofaBedsCount { get; set; }
		
		/// <summary>
		/// Sofa beds count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sofaBedsCountException")]
		public AccessibilityMobilityAccessibleElevatorException SofaBedsCountException { get; set; }
		
		/// <summary>
		/// Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntheticPillows")]
		public System.Nullable<System.Boolean> SyntheticPillows { get; set; }
		
		/// <summary>
		/// Synthetic pillows exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntheticPillowsException")]
		public AccessibilityMobilityAccessibleElevatorException SyntheticPillowsException { get; set; }
	}
	
	/// <summary>
	/// Views available from the guest unit itself.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViewsFromUnit
	{
		
		/// <summary>
		/// Beach view. A guestroom that features a window through which guests can see the beach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachView")]
		public System.Nullable<System.Boolean> BeachView { get; set; }
		
		/// <summary>
		/// Beach view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beachViewException")]
		public AccessibilityMobilityAccessibleElevatorException BeachViewException { get; set; }
		
		/// <summary>
		/// City view. A guestroom that features a window through which guests can see the buildings, parks and/or streets of the city.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cityView")]
		public System.Nullable<System.Boolean> CityView { get; set; }
		
		/// <summary>
		/// City view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cityViewException")]
		public AccessibilityMobilityAccessibleElevatorException CityViewException { get; set; }
		
		/// <summary>
		/// Garden view. A guestroom that features a window through which guests can see a garden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gardenView")]
		public System.Nullable<System.Boolean> GardenView { get; set; }
		
		/// <summary>
		/// Garden view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gardenViewException")]
		public AccessibilityMobilityAccessibleElevatorException GardenViewException { get; set; }
		
		/// <summary>
		/// Lake view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lakeView")]
		public System.Nullable<System.Boolean> LakeView { get; set; }
		
		/// <summary>
		/// Lake view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lakeViewException")]
		public AccessibilityMobilityAccessibleElevatorException LakeViewException { get; set; }
		
		/// <summary>
		/// Landmark view. A guestroom that features a window through which guests can see a landmark such as the countryside, a golf course, the forest, a park, a rain forst, a mountain or a slope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landmarkView")]
		public System.Nullable<System.Boolean> LandmarkView { get; set; }
		
		/// <summary>
		/// Landmark view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landmarkViewException")]
		public AccessibilityMobilityAccessibleElevatorException LandmarkViewException { get; set; }
		
		/// <summary>
		/// Ocean view. A guestroom that features a window through which guests can see the ocean.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oceanView")]
		public System.Nullable<System.Boolean> OceanView { get; set; }
		
		/// <summary>
		/// Ocean view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oceanViewException")]
		public AccessibilityMobilityAccessibleElevatorException OceanViewException { get; set; }
		
		/// <summary>
		/// Pool view. A guestroom that features a window through which guests can see the hotel's swimming pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolView")]
		public System.Nullable<System.Boolean> PoolView { get; set; }
		
		/// <summary>
		/// Pool view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolViewException")]
		public AccessibilityMobilityAccessibleElevatorException PoolViewException { get; set; }
		
		/// <summary>
		/// Valley view. A guestroom that features a window through which guests can see over a valley.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valleyView")]
		public System.Nullable<System.Boolean> ValleyView { get; set; }
		
		/// <summary>
		/// Valley view exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valleyViewException")]
		public AccessibilityMobilityAccessibleElevatorException ValleyViewException { get; set; }
	}
	
	/// <summary>
	/// A specific type of unit primarily defined by its features.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GuestUnitType
	{
		
		/// <summary>
		/// Required. Unit or room code identifiers for a single GuestUnitType. Each code must be unique within a Lodging instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codes")]
		public string[] Codes { get; set; }
		
		/// <summary>
		/// Features and available amenities in the guest unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public GuestUnitFeatures Features { get; set; }
		
		/// <summary>
		/// Required. Short, English label or name of the GuestUnitType. Target <50 chars.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Health and safety measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthAndSafety
	{
		
		/// <summary>
		/// Enhanced cleaning measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enhancedCleaning")]
		public EnhancedCleaning EnhancedCleaning { get; set; }
		
		/// <summary>
		/// Increased food safety measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="increasedFoodSafety")]
		public IncreasedFoodSafety IncreasedFoodSafety { get; set; }
		
		/// <summary>
		/// Minimized contact measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimizedContact")]
		public MinimizedContact MinimizedContact { get; set; }
		
		/// <summary>
		/// Personal protection measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalProtection")]
		public PersonalProtection PersonalProtection { get; set; }
		
		/// <summary>
		/// Physical distancing measures implemented by the hotel during COVID-19.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalDistancing")]
		public PhysicalDistancing PhysicalDistancing { get; set; }
	}
	
	/// <summary>
	/// Increased food safety measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncreasedFoodSafety
	{
		
		/// <summary>
		/// Additional sanitation in dining areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diningAreasAdditionalSanitation")]
		public System.Nullable<System.Boolean> DiningAreasAdditionalSanitation { get; set; }
		
		/// <summary>
		/// Dining areas additional sanitation exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diningAreasAdditionalSanitationException")]
		public AccessibilityMobilityAccessibleElevatorException DiningAreasAdditionalSanitationException { get; set; }
		
		/// <summary>
		/// Disposable flatware.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disposableFlatware")]
		public System.Nullable<System.Boolean> DisposableFlatware { get; set; }
		
		/// <summary>
		/// Disposable flatware exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disposableFlatwareException")]
		public AccessibilityMobilityAccessibleElevatorException DisposableFlatwareException { get; set; }
		
		/// <summary>
		/// Additional safety measures during food prep and serving.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodPreparationAndServingAdditionalSafety")]
		public System.Nullable<System.Boolean> FoodPreparationAndServingAdditionalSafety { get; set; }
		
		/// <summary>
		/// Food preparation and serving additional safety exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foodPreparationAndServingAdditionalSafetyException")]
		public AccessibilityMobilityAccessibleElevatorException FoodPreparationAndServingAdditionalSafetyException { get; set; }
		
		/// <summary>
		/// Individually-packaged meals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualPackagedMeals")]
		public System.Nullable<System.Boolean> IndividualPackagedMeals { get; set; }
		
		/// <summary>
		/// Individual packaged meals exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualPackagedMealsException")]
		public AccessibilityMobilityAccessibleElevatorException IndividualPackagedMealsException { get; set; }
		
		/// <summary>
		/// Single-use menus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleUseFoodMenus")]
		public System.Nullable<System.Boolean> SingleUseFoodMenus { get; set; }
		
		/// <summary>
		/// Single use food menus exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleUseFoodMenusException")]
		public AccessibilityMobilityAccessibleElevatorException SingleUseFoodMenusException { get; set; }
	}
	
	/// <summary>
	/// Minimized contact measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MinimizedContact
	{
		
		/// <summary>
		/// No-contact check-in and check-out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactlessCheckinCheckout")]
		public System.Nullable<System.Boolean> ContactlessCheckinCheckout { get; set; }
		
		/// <summary>
		/// Contactless check-in check-out exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactlessCheckinCheckoutException")]
		public AccessibilityMobilityAccessibleElevatorException ContactlessCheckinCheckoutException { get; set; }
		
		/// <summary>
		/// Keyless mobile entry to guest rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digitalGuestRoomKeys")]
		public System.Nullable<System.Boolean> DigitalGuestRoomKeys { get; set; }
		
		/// <summary>
		/// Digital guest room keys exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digitalGuestRoomKeysException")]
		public AccessibilityMobilityAccessibleElevatorException DigitalGuestRoomKeysException { get; set; }
		
		/// <summary>
		/// Housekeeping scheduled by request only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingScheduledRequestOnly")]
		public System.Nullable<System.Boolean> HousekeepingScheduledRequestOnly { get; set; }
		
		/// <summary>
		/// Housekeeping scheduled request only exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingScheduledRequestOnlyException")]
		public AccessibilityMobilityAccessibleElevatorException HousekeepingScheduledRequestOnlyException { get; set; }
		
		/// <summary>
		/// High-touch items, such as magazines, removed from common areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsCommonAreas")]
		public System.Nullable<System.Boolean> NoHighTouchItemsCommonAreas { get; set; }
		
		/// <summary>
		/// No high touch items common areas exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsCommonAreasException")]
		public AccessibilityMobilityAccessibleElevatorException NoHighTouchItemsCommonAreasException { get; set; }
		
		/// <summary>
		/// High-touch items, such as decorative pillows, removed from guest rooms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsGuestRooms")]
		public System.Nullable<System.Boolean> NoHighTouchItemsGuestRooms { get; set; }
		
		/// <summary>
		/// No high touch items guest rooms exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noHighTouchItemsGuestRoomsException")]
		public AccessibilityMobilityAccessibleElevatorException NoHighTouchItemsGuestRoomsException { get; set; }
		
		/// <summary>
		/// Plastic key cards are disinfected or discarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plasticKeycardsDisinfected")]
		public System.Nullable<System.Boolean> PlasticKeycardsDisinfected { get; set; }
		
		/// <summary>
		/// Plastic keycards disinfected exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plasticKeycardsDisinfectedException")]
		public AccessibilityMobilityAccessibleElevatorException PlasticKeycardsDisinfectedException { get; set; }
		
		/// <summary>
		/// Buffer maintained between room bookings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomBookingsBuffer")]
		public System.Nullable<System.Boolean> RoomBookingsBuffer { get; set; }
		
		/// <summary>
		/// Room bookings buffer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomBookingsBufferException")]
		public AccessibilityMobilityAccessibleElevatorException RoomBookingsBufferException { get; set; }
	}
	
	/// <summary>
	/// Personal protection measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalProtection
	{
		
		/// <summary>
		/// Hand-sanitizer and/or sanitizing wipes are offered in common areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasOfferSanitizingItems")]
		public System.Nullable<System.Boolean> CommonAreasOfferSanitizingItems { get; set; }
		
		/// <summary>
		/// Common areas offer sanitizing items exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasOfferSanitizingItemsException")]
		public AccessibilityMobilityAccessibleElevatorException CommonAreasOfferSanitizingItemsException { get; set; }
		
		/// <summary>
		/// Masks required on the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faceMaskRequired")]
		public System.Nullable<System.Boolean> FaceMaskRequired { get; set; }
		
		/// <summary>
		/// Face mask required exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="faceMaskRequiredException")]
		public AccessibilityMobilityAccessibleElevatorException FaceMaskRequiredException { get; set; }
		
		/// <summary>
		/// In-room hygiene kits with masks, hand sanitizer, and/or antibacterial wipes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomHygieneKitsAvailable")]
		public System.Nullable<System.Boolean> GuestRoomHygieneKitsAvailable { get; set; }
		
		/// <summary>
		/// Guest room hygiene kits available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guestRoomHygieneKitsAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException GuestRoomHygieneKitsAvailableException { get; set; }
		
		/// <summary>
		/// Masks and/or gloves available for guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectiveEquipmentAvailable")]
		public System.Nullable<System.Boolean> ProtectiveEquipmentAvailable { get; set; }
		
		/// <summary>
		/// Protective equipment available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectiveEquipmentAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ProtectiveEquipmentAvailableException { get; set; }
	}
	
	/// <summary>
	/// Physical distancing measures implemented by the hotel during COVID-19.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhysicalDistancing
	{
		
		/// <summary>
		/// Common areas arranged to maintain physical distancing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasPhysicalDistancingArranged")]
		public System.Nullable<System.Boolean> CommonAreasPhysicalDistancingArranged { get; set; }
		
		/// <summary>
		/// Common areas physical distancing arranged exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonAreasPhysicalDistancingArrangedException")]
		public AccessibilityMobilityAccessibleElevatorException CommonAreasPhysicalDistancingArrangedException { get; set; }
		
		/// <summary>
		/// Physical distancing required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalDistancingRequired")]
		public System.Nullable<System.Boolean> PhysicalDistancingRequired { get; set; }
		
		/// <summary>
		/// Physical distancing required exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalDistancingRequiredException")]
		public AccessibilityMobilityAccessibleElevatorException PhysicalDistancingRequiredException { get; set; }
		
		/// <summary>
		/// Safety dividers at front desk and other locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safetyDividers")]
		public System.Nullable<System.Boolean> SafetyDividers { get; set; }
		
		/// <summary>
		/// Safety dividers exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safetyDividersException")]
		public AccessibilityMobilityAccessibleElevatorException SafetyDividersException { get; set; }
		
		/// <summary>
		/// Guest occupancy limited within shared facilities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAreasLimitedOccupancy")]
		public System.Nullable<System.Boolean> SharedAreasLimitedOccupancy { get; set; }
		
		/// <summary>
		/// Shared areas limited occupancy exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAreasLimitedOccupancyException")]
		public AccessibilityMobilityAccessibleElevatorException SharedAreasLimitedOccupancyException { get; set; }
		
		/// <summary>
		/// Private spaces designated in spa and wellness areas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wellnessAreasHavePrivateSpaces")]
		public System.Nullable<System.Boolean> WellnessAreasHavePrivateSpaces { get; set; }
		
		/// <summary>
		/// Wellness areas have private spaces exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wellnessAreasHavePrivateSpacesException")]
		public AccessibilityMobilityAccessibleElevatorException WellnessAreasHavePrivateSpacesException { get; set; }
	}
	
	/// <summary>
	/// Conveniences provided in guest units to facilitate an easier, more comfortable stay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Housekeeping
	{
		
		/// <summary>
		/// Daily housekeeping. Guest units are cleaned by hotel staff daily during guest's stay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyHousekeeping")]
		public System.Nullable<System.Boolean> DailyHousekeeping { get; set; }
		
		/// <summary>
		/// Daily housekeeping exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyHousekeepingException")]
		public AccessibilityMobilityAccessibleElevatorException DailyHousekeepingException { get; set; }
		
		/// <summary>
		/// Housekeeping available. Guest units are cleaned by hotel staff during guest's stay. Schedule may vary from daily, weekly, or specific days of the week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingAvailable")]
		public System.Nullable<System.Boolean> HousekeepingAvailable { get; set; }
		
		/// <summary>
		/// Housekeeping available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="housekeepingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException HousekeepingAvailableException { get; set; }
		
		/// <summary>
		/// Turndown service. Hotel staff enters guest units to prepare the bed for sleep use. May or may not include some light housekeeping. May or may not include an evening snack or candy. Also known as evening service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="turndownService")]
		public System.Nullable<System.Boolean> TurndownService { get; set; }
		
		/// <summary>
		/// Turndown service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="turndownServiceException")]
		public AccessibilityMobilityAccessibleElevatorException TurndownServiceException { get; set; }
	}
	
	/// <summary>
	/// Metadata for the Lodging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LodgingMetadata
	{
		
		/// <summary>
		/// Required. The latest time at which the Lodging data is asserted to be true in the real world. This is not necessarily the time at which the request is made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Parking options at the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parking
	{
		
		/// <summary>
		/// Electric car charging stations. Electric power stations, usually located outdoors, into which guests plug their electric cars to receive a charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electricCarChargingStations")]
		public System.Nullable<System.Boolean> ElectricCarChargingStations { get; set; }
		
		/// <summary>
		/// Electric car charging stations exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="electricCarChargingStationsException")]
		public AccessibilityMobilityAccessibleElevatorException ElectricCarChargingStationsException { get; set; }
		
		/// <summary>
		/// Free parking. The hotel allows the cars of guests to be parked for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff. Free parking must be available to all guests (limited conditions does not apply).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeParking")]
		public System.Nullable<System.Boolean> FreeParking { get; set; }
		
		/// <summary>
		/// Free parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeParkingException")]
		public AccessibilityMobilityAccessibleElevatorException FreeParkingException { get; set; }
		
		/// <summary>
		/// Free self parking. Guests park their own cars for free. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeSelfParking")]
		public System.Nullable<System.Boolean> FreeSelfParking { get; set; }
		
		/// <summary>
		/// Free self parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeSelfParkingException")]
		public AccessibilityMobilityAccessibleElevatorException FreeSelfParkingException { get; set; }
		
		/// <summary>
		/// Free valet parking. Hotel staff member parks the cars of guests. Parking with this service is free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeValetParking")]
		public System.Nullable<System.Boolean> FreeValetParking { get; set; }
		
		/// <summary>
		/// Free valet parking exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeValetParkingException")]
		public AccessibilityMobilityAccessibleElevatorException FreeValetParkingException { get; set; }
		
		/// <summary>
		/// Parking available. The hotel allows the cars of guests to be parked. Can be free or for a fee. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Parking may be performed by the guest or by hotel staff.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parkingAvailable")]
		public System.Nullable<System.Boolean> ParkingAvailable { get; set; }
		
		/// <summary>
		/// Parking available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parkingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ParkingAvailableException { get; set; }
		
		/// <summary>
		/// Self parking available. Guests park their own cars. Parking facility may be an outdoor lot or an indoor garage, but must be onsite. Nearby parking does not apply. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfParkingAvailable")]
		public System.Nullable<System.Boolean> SelfParkingAvailable { get; set; }
		
		/// <summary>
		/// Self parking available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfParkingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException SelfParkingAvailableException { get; set; }
		
		/// <summary>
		/// Valet parking available. Hotel staff member parks the cars of guests. Parking with this service can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valetParkingAvailable")]
		public System.Nullable<System.Boolean> ValetParkingAvailable { get; set; }
		
		/// <summary>
		/// Valet parking available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valetParkingAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException ValetParkingAvailableException { get; set; }
	}
	
	/// <summary>
	/// Policies regarding guest-owned animals.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pets
	{
		
		/// <summary>
		/// Cats allowed. Domesticated felines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catsAllowed")]
		public System.Nullable<System.Boolean> CatsAllowed { get; set; }
		
		/// <summary>
		/// Cats allowed exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catsAllowedException")]
		public AccessibilityMobilityAccessibleElevatorException CatsAllowedException { get; set; }
		
		/// <summary>
		/// Dogs allowed. Domesticated canines are permitted at the property and allowed to stay in the guest room of their owner. May or may not require a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dogsAllowed")]
		public System.Nullable<System.Boolean> DogsAllowed { get; set; }
		
		/// <summary>
		/// Dogs allowed exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dogsAllowedException")]
		public AccessibilityMobilityAccessibleElevatorException DogsAllowedException { get; set; }
		
		/// <summary>
		/// Pets allowed. Household animals are allowed at the property and in the specific guest room of their owner. May or may not include dogs, cats, reptiles and/or fish. May or may not require a fee. Service animals are not considered to be pets, so not governed by this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowed")]
		public System.Nullable<System.Boolean> PetsAllowed { get; set; }
		
		/// <summary>
		/// Pets allowed exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowedException")]
		public AccessibilityMobilityAccessibleElevatorException PetsAllowedException { get; set; }
		
		/// <summary>
		/// Pets allowed free. Household animals are allowed at the property and in the specific guest room of their owner for free. May or may not include dogs, cats, reptiles, and/or fish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowedFree")]
		public System.Nullable<System.Boolean> PetsAllowedFree { get; set; }
		
		/// <summary>
		/// Pets allowed free exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="petsAllowedFreeException")]
		public AccessibilityMobilityAccessibleElevatorException PetsAllowedFreeException { get; set; }
	}
	
	/// <summary>
	/// Property rules that impact guests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policies
	{
		
		/// <summary>
		/// All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveAvailable")]
		public System.Nullable<System.Boolean> AllInclusiveAvailable { get; set; }
		
		/// <summary>
		/// All inclusive available exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveAvailableException")]
		public AccessibilityMobilityAccessibleElevatorException AllInclusiveAvailableException { get; set; }
		
		/// <summary>
		/// All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveOnly")]
		public System.Nullable<System.Boolean> AllInclusiveOnly { get; set; }
		
		/// <summary>
		/// All inclusive only exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allInclusiveOnlyException")]
		public AccessibilityMobilityAccessibleElevatorException AllInclusiveOnlyException { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkinTime")]
		public TimeOfDay CheckinTime { get; set; }
		
		/// <summary>
		/// Check-in time exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkinTimeException")]
		public AccessibilityMobilityAccessibleElevatorException CheckinTimeException { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkoutTime")]
		public TimeOfDay CheckoutTime { get; set; }
		
		/// <summary>
		/// Check-out time exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkoutTimeException")]
		public AccessibilityMobilityAccessibleElevatorException CheckoutTimeException { get; set; }
		
		/// <summary>
		/// Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsStayFree")]
		public System.Nullable<System.Boolean> KidsStayFree { get; set; }
		
		/// <summary>
		/// Kids stay free exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kidsStayFreeException")]
		public AccessibilityMobilityAccessibleElevatorException KidsStayFreeException { get; set; }
		
		/// <summary>
		/// Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildAge")]
		public System.Nullable<System.Int32> MaxChildAge { get; set; }
		
		/// <summary>
		/// Max child age exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxChildAgeException")]
		public AccessibilityMobilityAccessibleElevatorException MaxChildAgeException { get; set; }
		
		/// <summary>
		/// Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxKidsStayFreeCount")]
		public System.Nullable<System.Int32> MaxKidsStayFreeCount { get; set; }
		
		/// <summary>
		/// Max kids stay free count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxKidsStayFreeCountException")]
		public AccessibilityMobilityAccessibleElevatorException MaxKidsStayFreeCountException { get; set; }
		
		/// <summary>
		/// Forms of payment accepted at the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentOptions")]
		public PaymentOptions PaymentOptions { get; set; }
		
		/// <summary>
		/// Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smokeFreeProperty")]
		public System.Nullable<System.Boolean> SmokeFreeProperty { get; set; }
		
		/// <summary>
		/// Smoke free property exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smokeFreePropertyException")]
		public AccessibilityMobilityAccessibleElevatorException SmokeFreePropertyException { get; set; }
	}
	
	/// <summary>
	/// Forms of payment accepted at the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentOptions
	{
		
		/// <summary>
		/// Cash. The hotel accepts payment by paper/coin currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public System.Nullable<System.Boolean> Cash { get; set; }
		
		/// <summary>
		/// Cash exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashException")]
		public AccessibilityMobilityAccessibleElevatorException CashException { get; set; }
		
		/// <summary>
		/// Cheque. The hotel accepts a printed document issued by the guest's bank in the guest's name as a form of payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cheque")]
		public System.Nullable<System.Boolean> Cheque { get; set; }
		
		/// <summary>
		/// Cheque exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chequeException")]
		public AccessibilityMobilityAccessibleElevatorException ChequeException { get; set; }
		
		/// <summary>
		/// Credit card. The hotel accepts payment by a card issued by a bank or credit card company. Also known as charge card, debit card, bank card, or charge plate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCard")]
		public System.Nullable<System.Boolean> CreditCard { get; set; }
		
		/// <summary>
		/// Credit card exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCardException")]
		public AccessibilityMobilityAccessibleElevatorException CreditCardException { get; set; }
		
		/// <summary>
		/// Debit card. The hotel accepts a bank-issued card that immediately deducts the charged funds from the guest's bank account upon processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debitCard")]
		public System.Nullable<System.Boolean> DebitCard { get; set; }
		
		/// <summary>
		/// Debit card exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debitCardException")]
		public AccessibilityMobilityAccessibleElevatorException DebitCardException { get; set; }
		
		/// <summary>
		/// Mobile nfc. The hotel has the compatible computer hardware terminal that reads and charges a payment app on the guest's smartphone without requiring the two devices to make physical contact. Also known as Apple Pay, Google Pay, Samsung Pay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNfc")]
		public System.Nullable<System.Boolean> MobileNfc { get; set; }
		
		/// <summary>
		/// Mobile nfc exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNfcException")]
		public AccessibilityMobilityAccessibleElevatorException MobileNfcException { get; set; }
	}
	
	/// <summary>
	/// Swimming pool or recreational water facilities available at the hotel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pools
	{
		
		/// <summary>
		/// Adult pool. A pool restricted for use by adults only. Can be indoors or outdoors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultPool")]
		public System.Nullable<System.Boolean> AdultPool { get; set; }
		
		/// <summary>
		/// Adult pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adultPoolException")]
		public AccessibilityMobilityAccessibleElevatorException AdultPoolException { get; set; }
		
		/// <summary>
		/// Hot tub. A man-made pool containing bubbling water maintained at a higher temperature and circulated by aerating jets for the purpose of soaking, relaxation and hydrotherapy. Can be indoors or outdoors. Not used for active swimming. Also known as Jacuzzi. Hot tub must be in a common area where all guests can access it. Does not apply to room-specific hot tubs that are only accessible to guest occupying that room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotTub")]
		public System.Nullable<System.Boolean> HotTub { get; set; }
		
		/// <summary>
		/// Hot tub exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotTubException")]
		public AccessibilityMobilityAccessibleElevatorException HotTubException { get; set; }
		
		/// <summary>
		/// Indoor pool. A pool located inside the hotel and available for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPool")]
		public System.Nullable<System.Boolean> IndoorPool { get; set; }
		
		/// <summary>
		/// Indoor pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPoolException")]
		public AccessibilityMobilityAccessibleElevatorException IndoorPoolException { get; set; }
		
		/// <summary>
		/// Indoor pools count. The sum of all indoor pools at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPoolsCount")]
		public System.Nullable<System.Int32> IndoorPoolsCount { get; set; }
		
		/// <summary>
		/// Indoor pools count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indoorPoolsCountException")]
		public AccessibilityMobilityAccessibleElevatorException IndoorPoolsCountException { get; set; }
		
		/// <summary>
		/// Lazy river. A man-made pool or several interconnected recreational pools built to mimic the shape and current of a winding river where guests float in the water on inflated rubber tubes. Can be indoors or outdoors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lazyRiver")]
		public System.Nullable<System.Boolean> LazyRiver { get; set; }
		
		/// <summary>
		/// Lazy river exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lazyRiverException")]
		public AccessibilityMobilityAccessibleElevatorException LazyRiverException { get; set; }
		
		/// <summary>
		/// Lifeguard. A trained member of the hotel staff stationed by the hotel's indoor or outdoor swimming area and responsible for the safety of swimming guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeguard")]
		public System.Nullable<System.Boolean> Lifeguard { get; set; }
		
		/// <summary>
		/// Lifeguard exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeguardException")]
		public AccessibilityMobilityAccessibleElevatorException LifeguardException { get; set; }
		
		/// <summary>
		/// Outdoor pool. A pool located outside on the grounds of the hotel and available for guests to use for swimming, soaking or recreation. Use may or may not be restricted to adults and/or children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPool")]
		public System.Nullable<System.Boolean> OutdoorPool { get; set; }
		
		/// <summary>
		/// Outdoor pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPoolException")]
		public AccessibilityMobilityAccessibleElevatorException OutdoorPoolException { get; set; }
		
		/// <summary>
		/// Outdoor pools count. The sum of all outdoor pools at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPoolsCount")]
		public System.Nullable<System.Int32> OutdoorPoolsCount { get; set; }
		
		/// <summary>
		/// Outdoor pools count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outdoorPoolsCountException")]
		public AccessibilityMobilityAccessibleElevatorException OutdoorPoolsCountException { get; set; }
		
		/// <summary>
		/// Pool. The presence of a pool, either indoors or outdoors, for guests to use for swimming and/or soaking. Use may or may not be restricted to adults and/or children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public System.Nullable<System.Boolean> Pool { get; set; }
		
		/// <summary>
		/// Pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolException")]
		public AccessibilityMobilityAccessibleElevatorException PoolException { get; set; }
		
		/// <summary>
		/// Pools count. The sum of all pools at the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolsCount")]
		public System.Nullable<System.Int32> PoolsCount { get; set; }
		
		/// <summary>
		/// Pools count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poolsCountException")]
		public AccessibilityMobilityAccessibleElevatorException PoolsCountException { get; set; }
		
		/// <summary>
		/// Wading pool. A shallow pool designed for small children to play in. Can be indoors or outdoors. Also known as kiddie pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wadingPool")]
		public System.Nullable<System.Boolean> WadingPool { get; set; }
		
		/// <summary>
		/// Wading pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wadingPoolException")]
		public AccessibilityMobilityAccessibleElevatorException WadingPoolException { get; set; }
		
		/// <summary>
		/// Water park. An aquatic recreation area with a large pool or series of pools that has features such as a water slide or tube, wavepool, fountains, rope swings, and/or obstacle course. Can be indoors or outdoors. Also known as adventure pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterPark")]
		public System.Nullable<System.Boolean> WaterPark { get; set; }
		
		/// <summary>
		/// Water park exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterParkException")]
		public AccessibilityMobilityAccessibleElevatorException WaterParkException { get; set; }
		
		/// <summary>
		/// Waterslide. A continuously wetted chute positioned by an indoor or outdoor pool which people slide down into the water.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterslide")]
		public System.Nullable<System.Boolean> Waterslide { get; set; }
		
		/// <summary>
		/// Waterslide exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterslideException")]
		public AccessibilityMobilityAccessibleElevatorException WaterslideException { get; set; }
		
		/// <summary>
		/// Wave pool. A large indoor or outdoor pool with a machine that produces water currents to mimic the ocean's crests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wavePool")]
		public System.Nullable<System.Boolean> WavePool { get; set; }
		
		/// <summary>
		/// Wave pool exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wavePoolException")]
		public AccessibilityMobilityAccessibleElevatorException WavePoolException { get; set; }
	}
	
	/// <summary>
	/// General factual information about the property's physical structure and important dates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Property
	{
		
		/// <summary>
		/// Built year. The year that construction of the property was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtYear")]
		public System.Nullable<System.Int32> BuiltYear { get; set; }
		
		/// <summary>
		/// Built year exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtYearException")]
		public AccessibilityMobilityAccessibleElevatorException BuiltYearException { get; set; }
		
		/// <summary>
		/// Floors count. The number of stories the building has from the ground floor to the top floor that are accessible to guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorsCount")]
		public System.Nullable<System.Int32> FloorsCount { get; set; }
		
		/// <summary>
		/// Floors count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorsCountException")]
		public AccessibilityMobilityAccessibleElevatorException FloorsCountException { get; set; }
		
		/// <summary>
		/// Last renovated year. The year when the most recent renovation of the property was completed. Renovation may include all or any combination of the following: the units, the public spaces, the exterior, or the interior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRenovatedYear")]
		public System.Nullable<System.Int32> LastRenovatedYear { get; set; }
		
		/// <summary>
		/// Last renovated year exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRenovatedYearException")]
		public AccessibilityMobilityAccessibleElevatorException LastRenovatedYearException { get; set; }
		
		/// <summary>
		/// Rooms count. The total number of rooms and suites bookable by guests for an overnight stay. Does not include event space, public spaces, conference rooms, fitness rooms, business centers, spa, salon, restaurants/bars, or shops.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomsCount")]
		public System.Nullable<System.Int32> RoomsCount { get; set; }
		
		/// <summary>
		/// Rooms count exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomsCountException")]
		public AccessibilityMobilityAccessibleElevatorException RoomsCountException { get; set; }
	}
	
	/// <summary>
	/// Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Services
	{
		
		/// <summary>
		/// Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baggageStorage")]
		public System.Nullable<System.Boolean> BaggageStorage { get; set; }
		
		/// <summary>
		/// Baggage storage exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baggageStorageException")]
		public AccessibilityMobilityAccessibleElevatorException BaggageStorageException { get; set; }
		
		/// <summary>
		/// Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concierge")]
		public System.Nullable<System.Boolean> Concierge { get; set; }
		
		/// <summary>
		/// Concierge exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conciergeException")]
		public AccessibilityMobilityAccessibleElevatorException ConciergeException { get; set; }
		
		/// <summary>
		/// Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convenienceStore")]
		public System.Nullable<System.Boolean> ConvenienceStore { get; set; }
		
		/// <summary>
		/// Convenience store exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convenienceStoreException")]
		public AccessibilityMobilityAccessibleElevatorException ConvenienceStoreException { get; set; }
		
		/// <summary>
		/// Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel's locale in exchange for the foreign currency provided by a guest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyExchange")]
		public System.Nullable<System.Boolean> CurrencyExchange { get; set; }
		
		/// <summary>
		/// Currency exchange exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyExchangeException")]
		public AccessibilityMobilityAccessibleElevatorException CurrencyExchangeException { get; set; }
		
		/// <summary>
		/// Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevator")]
		public System.Nullable<System.Boolean> Elevator { get; set; }
		
		/// <summary>
		/// Elevator exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevatorException")]
		public AccessibilityMobilityAccessibleElevatorException ElevatorException { get; set; }
		
		/// <summary>
		/// Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frontDesk")]
		public System.Nullable<System.Boolean> FrontDesk { get; set; }
		
		/// <summary>
		/// Front desk exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frontDeskException")]
		public AccessibilityMobilityAccessibleElevatorException FrontDeskException { get; set; }
		
		/// <summary>
		/// Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullServiceLaundry")]
		public System.Nullable<System.Boolean> FullServiceLaundry { get; set; }
		
		/// <summary>
		/// Full service laundry exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullServiceLaundryException")]
		public AccessibilityMobilityAccessibleElevatorException FullServiceLaundryException { get; set; }
		
		/// <summary>
		/// Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftShop")]
		public System.Nullable<System.Boolean> GiftShop { get; set; }
		
		/// <summary>
		/// Gift shop exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="giftShopException")]
		public AccessibilityMobilityAccessibleElevatorException GiftShopException { get; set; }
		
		/// <summary>
		/// Languages spoken by at least one staff member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languagesSpoken")]
		public LanguagesSpoken LanguagesSpoken { get; set; }
		
		/// <summary>
		/// Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfServiceLaundry")]
		public System.Nullable<System.Boolean> SelfServiceLaundry { get; set; }
		
		/// <summary>
		/// Self service laundry exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfServiceLaundryException")]
		public AccessibilityMobilityAccessibleElevatorException SelfServiceLaundryException { get; set; }
		
		/// <summary>
		/// Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialHour")]
		public System.Nullable<System.Boolean> SocialHour { get; set; }
		
		/// <summary>
		/// Social hour exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socialHourException")]
		public AccessibilityMobilityAccessibleElevatorException SocialHourException { get; set; }
		
		/// <summary>
		/// 24hr front desk. Front desk is staffed 24 hours a day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourFrontDesk")]
		public System.Nullable<System.Boolean> TwentyFourHourFrontDesk { get; set; }
		
		/// <summary>
		/// 24hr front desk exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twentyFourHourFrontDeskException")]
		public AccessibilityMobilityAccessibleElevatorException TwentyFourHourFrontDeskException { get; set; }
		
		/// <summary>
		/// Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wakeUpCalls")]
		public System.Nullable<System.Boolean> WakeUpCalls { get; set; }
		
		/// <summary>
		/// Wake up calls exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wakeUpCallsException")]
		public AccessibilityMobilityAccessibleElevatorException WakeUpCallsException { get; set; }
	}
	
	/// <summary>
	/// Languages spoken by at least one staff member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguagesSpoken
	{
		
		/// <summary>
		/// Arabic. At least one staff member speaks Arabic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arabicSpoken")]
		public System.Nullable<System.Boolean> ArabicSpoken { get; set; }
		
		/// <summary>
		/// Arabic exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arabicSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException ArabicSpokenException { get; set; }
		
		/// <summary>
		/// Cantonese. At least one staff member speaks Cantonese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cantoneseSpoken")]
		public System.Nullable<System.Boolean> CantoneseSpoken { get; set; }
		
		/// <summary>
		/// Cantonese exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cantoneseSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException CantoneseSpokenException { get; set; }
		
		/// <summary>
		/// Dutch. At least one staff member speaks Dutch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dutchSpoken")]
		public System.Nullable<System.Boolean> DutchSpoken { get; set; }
		
		/// <summary>
		/// Dutch exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dutchSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException DutchSpokenException { get; set; }
		
		/// <summary>
		/// English. At least one staff member speaks English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="englishSpoken")]
		public System.Nullable<System.Boolean> EnglishSpoken { get; set; }
		
		/// <summary>
		/// English exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="englishSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException EnglishSpokenException { get; set; }
		
		/// <summary>
		/// Filipino. At least one staff member speaks Filipino.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filipinoSpoken")]
		public System.Nullable<System.Boolean> FilipinoSpoken { get; set; }
		
		/// <summary>
		/// Filipino exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filipinoSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException FilipinoSpokenException { get; set; }
		
		/// <summary>
		/// French. At least one staff member speaks French.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frenchSpoken")]
		public System.Nullable<System.Boolean> FrenchSpoken { get; set; }
		
		/// <summary>
		/// French exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frenchSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException FrenchSpokenException { get; set; }
		
		/// <summary>
		/// German. At least one staff member speaks German.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="germanSpoken")]
		public System.Nullable<System.Boolean> GermanSpoken { get; set; }
		
		/// <summary>
		/// German exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="germanSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException GermanSpokenException { get; set; }
		
		/// <summary>
		/// Hindi. At least one staff member speaks Hindi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hindiSpoken")]
		public System.Nullable<System.Boolean> HindiSpoken { get; set; }
		
		/// <summary>
		/// Hindi exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hindiSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException HindiSpokenException { get; set; }
		
		/// <summary>
		/// Indonesian. At least one staff member speaks Indonesian.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indonesianSpoken")]
		public System.Nullable<System.Boolean> IndonesianSpoken { get; set; }
		
		/// <summary>
		/// Indonesian exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indonesianSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException IndonesianSpokenException { get; set; }
		
		/// <summary>
		/// Italian. At least one staff member speaks Italian.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="italianSpoken")]
		public System.Nullable<System.Boolean> ItalianSpoken { get; set; }
		
		/// <summary>
		/// Italian exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="italianSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException ItalianSpokenException { get; set; }
		
		/// <summary>
		/// Japanese. At least one staff member speaks Japanese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="japaneseSpoken")]
		public System.Nullable<System.Boolean> JapaneseSpoken { get; set; }
		
		/// <summary>
		/// Japanese exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="japaneseSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException JapaneseSpokenException { get; set; }
		
		/// <summary>
		/// Korean. At least one staff member speaks Korean.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="koreanSpoken")]
		public System.Nullable<System.Boolean> KoreanSpoken { get; set; }
		
		/// <summary>
		/// Korean exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="koreanSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException KoreanSpokenException { get; set; }
		
		/// <summary>
		/// Mandarin. At least one staff member speaks Mandarin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandarinSpoken")]
		public System.Nullable<System.Boolean> MandarinSpoken { get; set; }
		
		/// <summary>
		/// Mandarin exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mandarinSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException MandarinSpokenException { get; set; }
		
		/// <summary>
		/// Portuguese. At least one staff member speaks Portuguese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portugueseSpoken")]
		public System.Nullable<System.Boolean> PortugueseSpoken { get; set; }
		
		/// <summary>
		/// Portuguese exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portugueseSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException PortugueseSpokenException { get; set; }
		
		/// <summary>
		/// Russian. At least one staff member speaks Russian.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="russianSpoken")]
		public System.Nullable<System.Boolean> RussianSpoken { get; set; }
		
		/// <summary>
		/// Russian exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="russianSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException RussianSpokenException { get; set; }
		
		/// <summary>
		/// Spanish. At least one staff member speaks Spanish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanishSpoken")]
		public System.Nullable<System.Boolean> SpanishSpoken { get; set; }
		
		/// <summary>
		/// Spanish exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanishSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException SpanishSpokenException { get; set; }
		
		/// <summary>
		/// Vietnamese. At least one staff member speaks Vietnamese.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vietnameseSpoken")]
		public System.Nullable<System.Boolean> VietnameseSpoken { get; set; }
		
		/// <summary>
		/// Vietnamese exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vietnameseSpokenException")]
		public AccessibilityMobilityAccessibleElevatorException VietnameseSpokenException { get; set; }
	}
	
	/// <summary>
	/// Vehicles or vehicular services facilitated or owned by the property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transportation
	{
		
		/// <summary>
		/// Airport shuttle. The hotel provides guests with a chauffeured van or bus to and from the airport. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them. Applies if the hotel has a third-party shuttle service (office/desk etc.) within the hotel. As long as hotel provides this service, it doesn't matter if it's directly with them or a third party they work with. Does not apply if guest has to coordinate with an entity outside/other than the hotel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airportShuttle")]
		public System.Nullable<System.Boolean> AirportShuttle { get; set; }
		
		/// <summary>
		/// Airport shuttle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airportShuttleException")]
		public AccessibilityMobilityAccessibleElevatorException AirportShuttleException { get; set; }
		
		/// <summary>
		/// Car rental on property. A branch of a rental car company with a processing desk in the hotel. Available cars for rent may be awaiting at the hotel or in a nearby lot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carRentalOnProperty")]
		public System.Nullable<System.Boolean> CarRentalOnProperty { get; set; }
		
		/// <summary>
		/// Car rental on property exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carRentalOnPropertyException")]
		public AccessibilityMobilityAccessibleElevatorException CarRentalOnPropertyException { get; set; }
		
		/// <summary>
		/// Free airport shuttle. Airport shuttle is free to guests. Must be free to all guests without any conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeAirportShuttle")]
		public System.Nullable<System.Boolean> FreeAirportShuttle { get; set; }
		
		/// <summary>
		/// Free airport shuttle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeAirportShuttleException")]
		public AccessibilityMobilityAccessibleElevatorException FreeAirportShuttleException { get; set; }
		
		/// <summary>
		/// Free private car service. Private chauffeured car service is free to guests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freePrivateCarService")]
		public System.Nullable<System.Boolean> FreePrivateCarService { get; set; }
		
		/// <summary>
		/// Free private car service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freePrivateCarServiceException")]
		public AccessibilityMobilityAccessibleElevatorException FreePrivateCarServiceException { get; set; }
		
		/// <summary>
		/// Local shuttle. A car, van or bus provided by the hotel to transport guests to destinations within a specified range of distance around the hotel. Usually shopping and/or convention centers, downtown districts, or beaches. Can be free or for a fee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localShuttle")]
		public System.Nullable<System.Boolean> LocalShuttle { get; set; }
		
		/// <summary>
		/// Local shuttle exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localShuttleException")]
		public AccessibilityMobilityAccessibleElevatorException LocalShuttleException { get; set; }
		
		/// <summary>
		/// Private car service. Hotel provides a private chauffeured car to transport guests to destinations. Passengers in the car are either alone or are known to one another and have requested the car together. Service can be free or for a fee and travel distance is usually limited to a specific range. Not a taxi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCarService")]
		public System.Nullable<System.Boolean> PrivateCarService { get; set; }
		
		/// <summary>
		/// Private car service exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateCarServiceException")]
		public AccessibilityMobilityAccessibleElevatorException PrivateCarServiceException { get; set; }
		
		/// <summary>
		/// Transfer. Hotel provides a shuttle service or car service to take guests to and from the nearest airport or train station. Can be free or for a fee. Guests may share the vehicle with other guests unknown to them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfer")]
		public System.Nullable<System.Boolean> Transfer { get; set; }
		
		/// <summary>
		/// Transfer exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferException")]
		public AccessibilityMobilityAccessibleElevatorException TransferException { get; set; }
	}
	
	/// <summary>
	/// Guest facilities at the property to promote or maintain health, beauty, and fitness.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wellness
	{
		
		/// <summary>
		/// Doctor on call. The hotel has a contract with a medical professional who provides services to hotel guests should they fall ill during their stay. The doctor may or may not have an on-site office or be at the hotel at all times.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doctorOnCall")]
		public System.Nullable<System.Boolean> DoctorOnCall { get; set; }
		
		/// <summary>
		/// Doctor on call exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doctorOnCallException")]
		public AccessibilityMobilityAccessibleElevatorException DoctorOnCallException { get; set; }
		
		/// <summary>
		/// Elliptical machine. An electric, stationary fitness machine with pedals that simulates climbing, walking or running and provides a user-controlled range of speeds and tensions. May not have arm-controlled levers to work out the upper body as well. Commonly found in a gym, fitness room, health center, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ellipticalMachine")]
		public System.Nullable<System.Boolean> EllipticalMachine { get; set; }
		
		/// <summary>
		/// Elliptical machine exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ellipticalMachineException")]
		public AccessibilityMobilityAccessibleElevatorException EllipticalMachineException { get; set; }
		
		/// <summary>
		/// Fitness center. A room or building at the hotel containing equipment to promote physical activity, such as treadmills, elliptical machines, stationary bikes, weight machines, free weights, and/or stretching mats. Use of the fitness center can be free or for a fee. May or may not be staffed. May or may not offer instructor-led classes in various styles of physical conditioning. May or may not be open 24/7. May or may not include locker rooms and showers. Also known as health club, gym, fitness room, health center.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitnessCenter")]
		public System.Nullable<System.Boolean> FitnessCenter { get; set; }
		
		/// <summary>
		/// Fitness center exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fitnessCenterException")]
		public AccessibilityMobilityAccessibleElevatorException FitnessCenterException { get; set; }
		
		/// <summary>
		/// Free fitness center. Guests may use the fitness center for free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeFitnessCenter")]
		public System.Nullable<System.Boolean> FreeFitnessCenter { get; set; }
		
		/// <summary>
		/// Free fitness center exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeFitnessCenterException")]
		public AccessibilityMobilityAccessibleElevatorException FreeFitnessCenterException { get; set; }
		
		/// <summary>
		/// Free weights. Individual handheld fitness equipment of varied weights used for upper body strength training or bodybuilding. Also known as barbells, dumbbells, or kettlebells. Often stored on a rack with the weights arranged from light to heavy. Commonly found in a gym, fitness room, health center, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWeights")]
		public System.Nullable<System.Boolean> FreeWeights { get; set; }
		
		/// <summary>
		/// Free weights exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeWeightsException")]
		public AccessibilityMobilityAccessibleElevatorException FreeWeightsException { get; set; }
		
		/// <summary>
		/// Massage. A service provided by a trained massage therapist involving the physical manipulation of a guest's muscles in order to achieve relaxation or pain relief.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="massage")]
		public System.Nullable<System.Boolean> Massage { get; set; }
		
		/// <summary>
		/// Massage exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="massageException")]
		public AccessibilityMobilityAccessibleElevatorException MassageException { get; set; }
		
		/// <summary>
		/// Salon. A room at the hotel where professionals provide hair styling services such as shampooing, blow drying, hair dos, hair cutting and hair coloring. Also known as hairdresser or beauty salon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salon")]
		public System.Nullable<System.Boolean> Salon { get; set; }
		
		/// <summary>
		/// Salon exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salonException")]
		public AccessibilityMobilityAccessibleElevatorException SalonException { get; set; }
		
		/// <summary>
		/// Sauna. A wood-paneled room heated to a high temperature where guests sit on built-in wood benches for the purpose of perspiring and relaxing their muscles. Can be dry or slightly wet heat. Not a steam room.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sauna")]
		public System.Nullable<System.Boolean> Sauna { get; set; }
		
		/// <summary>
		/// Sauna exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saunaException")]
		public AccessibilityMobilityAccessibleElevatorException SaunaException { get; set; }
		
		/// <summary>
		/// Spa. A designated area, room or building at the hotel offering health and beauty treatment through such means as steam baths, exercise equipment, and massage. May also offer facials, nail care, and hair care. Services are usually available by appointment and for an additional fee. Does not apply if hotel only offers a steam room; must offer other beauty and/or health treatments as well.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spa")]
		public System.Nullable<System.Boolean> Spa { get; set; }
		
		/// <summary>
		/// Spa exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaException")]
		public AccessibilityMobilityAccessibleElevatorException SpaException { get; set; }
		
		/// <summary>
		/// Treadmill. An electric stationary fitness machine that simulates a moving path to promote walking or running within a range of user-controlled speeds and inclines. Also known as running machine. Commonly found in a gym, fitness room, health center, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treadmill")]
		public System.Nullable<System.Boolean> Treadmill { get; set; }
		
		/// <summary>
		/// Treadmill exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treadmillException")]
		public AccessibilityMobilityAccessibleElevatorException TreadmillException { get; set; }
		
		/// <summary>
		/// Weight machine. Non-electronic fitness equipment designed for the user to target the exertion of different muscles. Usually incorporates a padded seat, a stack of flat weights and various bars and pulleys. May be designed for toning a specific part of the body or may involve different user-controlled settings, hardware and pulleys so as to provide an overall workout in one machine. Commonly found in a gym, fitness center, fitness room, or health club.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightMachine")]
		public System.Nullable<System.Boolean> WeightMachine { get; set; }
		
		/// <summary>
		/// Weight machine exception.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightMachineException")]
		public AccessibilityMobilityAccessibleElevatorException WeightMachineException { get; set; }
	}
	
	/// <summary>
	/// Represents a Location that is present on Google. This can be a location that has been claimed by the user, someone else, or could be unclaimed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleLocation
	{
		
		/// <summary>
		/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Resource name of this GoogleLocation, in the format `googleLocations/{googleLocationId}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A URL that will redirect the user to the request admin rights UI. This field is only present if the location has already been claimed by any user, including the current user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAdminRightsUrl")]
		public string RequestAdminRightsUrl { get; set; }
	}
	
	/// <summary>
	/// Represents a location that was modified by Google.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleUpdatedLocation
	{
		
		/// <summary>
		/// The fields that Google updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffMask")]
		public string DiffMask { get; set; }
		
		/// <summary>
		/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// The Health provider attributes linked with this location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthProviderAttributes
	{
		
		/// <summary>
		/// Optional. A list of insurance networks accpected by this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insuranceNetworks")]
		public InsuranceNetwork[] InsuranceNetworks { get; set; }
		
		/// <summary>
		/// Required. Google identifier for this location in the form: `accounts/{account_id}/locations/{location_id}/healthProviderAttributes`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A single insurance network. Next id: 5
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsuranceNetwork
	{
		
		/// <summary>
		/// Required. The id of this insurance network generated by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Output only. A map of network display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkNames")]
		public System.Collections.Generic.Dictionary<string, string> NetworkNames { get; set; }
		
		/// <summary>
		/// Output only. A map of payer display names in requested languages where the language is the key and localized display name is the value. The display name in English is set by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payerNames")]
		public System.Collections.Generic.Dictionary<string, string> PayerNames { get; set; }
		
		/// <summary>
		/// Output only. The state of this insurance network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<InsuranceNetworkState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InsuranceNetworkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ADD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DELETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ACCEPTED = 4,
	}
	
	/// <summary>
	/// Output only. Represents a pending invitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invitation
	{
		
		/// <summary>
		/// The resource name for the invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The invited role on the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public AdminRole Role { get; set; }
		
		/// <summary>
		/// An account is a container for your business's locations. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetAccount")]
		public Account TargetAccount { get; set; }
		
		/// <summary>
		/// Represents a target location for a pending invitation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLocation")]
		public TargetLocation TargetLocation { get; set; }
	}
	
	/// <summary>
	/// Represents a target location for a pending invitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetLocation
	{
		
		/// <summary>
		/// The address of the location to which the user is invited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationAddress")]
		public string LocationAddress { get; set; }
		
		/// <summary>
		/// The name of the location to which the user is invited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
	}
	
	/// <summary>
	/// Response message for AccessControl.ListAccountAdmins.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAccountAdminsResponse
	{
		
		/// <summary>
		/// A collection of Admin instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admins")]
		public Admin[] Admins { get; set; }
	}
	
	/// <summary>
	/// Response message for Accounts.ListAccounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAccountsResponse
	{
		
		/// <summary>
		/// A collection of accounts to which the user has access. The personal account of the user doing the query will always be the first item of the result, unless it is filtered out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// If the number of accounts exceeds the requested page size, this field is populated with a token to fetch the next page of accounts on a subsequent call to `accounts.list`. If there are no more accounts, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for QuestionsAndAnswers.ListAnswers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAnswersResponse
	{
		
		/// <summary>
		/// The requested answers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public Answer[] Answers { get; set; }
		
		/// <summary>
		/// If the number of answers exceeds the requested max page size, this field is populated with a token to fetch the next page of answers on a subsequent call. If there are no more answers, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of answers posted for this question across all pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for Locations.ListAttributeMetadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttributeMetadataResponse
	{
		
		/// <summary>
		/// A collection of attribute metadata for the available attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AttributeMetadata[] Attributes { get; set; }
		
		/// <summary>
		/// If the number of attributes exceeded the requested page size, this field will be populated with a token to fetch the next page of attributes on a subsequent call to `attributes.list`. If there are no more attributes, this field will not be present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBusinessCategoriesResponse
	{
		
		/// <summary>
		/// The categories. Categories are BASIC view. They don't contain any ServiceType information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// If the number of categories exceeded the requested page size, this field will be populated with a token to fetch the next page of categories on a subsequent call to `ListBusinessCategories`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of categories for the request parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCategoryCount")]
		public System.Nullable<System.Int32> TotalCategoryCount { get; set; }
	}
	
	/// <summary>
	/// Response message for Media.ListCustomerMediaItems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCustomerMediaItemsResponse
	{
		
		/// <summary>
		/// The returned list of media items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaItems")]
		public MediaItem[] MediaItems { get; set; }
		
		/// <summary>
		/// If there are more media items than the requested page size, then this field is populated with a token to fetch the next page of media items on a subsequent call to ListCustomerMediaItems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of media items for this location, irrespective of pagination. This number is approximate, particularly when there are multiple pages of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMediaItemCount")]
		public System.Nullable<System.Int32> TotalMediaItemCount { get; set; }
	}
	
	/// <summary>
	/// A single media item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaItem
	{
		
		/// <summary>
		/// Attribution information for customer media items, such as the contributor's name and profile picture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public Attribution Attribution { get; set; }
		
		/// <summary>
		/// Output only. Creation time of this media item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Reference to the photo binary data of a `MediaItem` uploaded through the Google My Business API. Create a data ref using StartUploadMediaItemData, and use this ref when uploading bytes to [UpdateMedia] and subsequently calling CreateMediaItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRef")]
		public MediaItemDataRef DataRef { get; set; }
		
		/// <summary>
		/// Description for this media item. Descriptions cannot be modified through the Google My Business API, but can be set when creating a new media item that is not a cover photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Dimensions of the media item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimensions Dimensions { get; set; }
		
		/// <summary>
		/// Output only. Google-hosted URL for this media item. This URL is not static since it may change over time. For video this will be a preview image with an overlaid play icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleUrl")]
		public string GoogleUrl { get; set; }
		
		/// <summary>
		/// Insights and statistics for the media item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insights")]
		public MediaInsights Insights { get; set; }
		
		/// <summary>
		/// How the media item is associated with its location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationAssociation")]
		public LocationAssociation LocationAssociation { get; set; }
		
		/// <summary>
		/// The format of this media item. Must be set when the media item is created, and is read-only on all other requests. Cannot be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaFormat")]
		public System.Nullable<MediaItemMediaFormat> MediaFormat { get; set; }
		
		/// <summary>
		/// The resource name for this media item. `accounts/{account_id}/locations/{location_id}/media/{media_key}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A publicly accessible URL where the media item can be retrieved from. When creating one of this or data_ref must be set to specify the source of the media item. If `source_url` was used when creating a media item, it will be populated with that source URL when the media item is retrieved. This field cannot be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
		
		/// <summary>
		/// Output only. Where provided, the URL of a thumbnail image for this media item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
	}
	
	/// <summary>
	/// Reference to the photo binary data of a `MediaItem` uploaded through the Google My Business API. Create a data ref using StartUploadMediaItemData, and use this ref when uploading bytes to [UpdateMedia] and subsequently calling CreateMediaItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaItemDataRef
	{
		
		/// <summary>
		/// The unique ID for this media item's binary data. Used to upload the photo data with [UpdateMedia] and when creating a new media item from those bytes with CreateMediaItem. Example of uploading bytes: `curl -X POST -T{path_to_file} "http://mybusiness.googleapis.com/upload/v1/media/{resource_name}?upload_type=media"` For CreateMediaItem calls, set this as the `MediaItem` `data_ref`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Insights and statistics for the media item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaInsights
	{
		
		/// <summary>
		/// Output only. The number of times the media item has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewCount")]
		public string ViewCount { get; set; }
	}
	
	/// <summary>
	/// How the media item is associated with its location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationAssociation
	{
		
		/// <summary>
		/// The category that this location photo belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<LocationAssociationCategory> Category { get; set; }
		
		/// <summary>
		/// The ID of a price list item that this location photo is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceListItemId")]
		public string PriceListItemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LocationAssociationCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COVER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERIOR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERIOR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT_WORK = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOOD_AND_DRINK = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENU = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMON_AREA = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROOMS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEAMS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaItemMediaFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIA_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHOTO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 2,
	}
	
	/// <summary>
	/// Response message for InsuranceNetworkService.ListInsuranceNetworks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInsuranceNetworksResponse
	{
		
		/// <summary>
		/// A list of insurance networks that are supported by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public InsuranceNetwork[] Networks { get; set; }
		
		/// <summary>
		/// If there are more insurance networks than the requested page size, then this field is populated with a token to fetch the next page of insurance networks on a subsequent call to ListInsuranceNetworks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for AccessControl.ListInvitations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInvitationsResponse
	{
		
		/// <summary>
		/// A collection of location invitations that are pending for the account. The number of invitations listed here cannot exceed 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitations")]
		public Invitation[] Invitations { get; set; }
	}
	
	/// <summary>
	/// Response message for ListLocalPosts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocalPostsResponse
	{
		
		/// <summary>
		/// The returned list of local posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localPosts")]
		public LocalPost[] LocalPosts { get; set; }
		
		/// <summary>
		/// If there are more local posts than the requested page size, then this field is populated with a token to fetch the next page of local posts on a subsequent call to `ListLocalPosts`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents a [local post](https://support.google.com/business/answer/7662907) for a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalPost
	{
		
		/// <summary>
		/// The type of alert the post is created for. This field is only applicable for posts of topic_type Alert, and behaves as a sub-type of Alerts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertType")]
		public System.Nullable<LocalPostAlertType> AlertType { get; set; }
		
		/// <summary>
		/// An action that is performed when the user clicks through the post
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public CallToAction CallToAction { get; set; }
		
		/// <summary>
		/// Output only. Time of the creation of the post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// All the information pertaining to an event featured in a local post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public LocalPostEvent Event { get; set; }
		
		/// <summary>
		/// The language of the local post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The media associated with the post. source_url is the only supported data field for a LocalPost MediaItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public MediaItem[] Media { get; set; }
		
		/// <summary>
		/// Output only. Google identifier for this local post in the form: `accounts/{account_id}/locations/{location_id}/localPosts/{local_post_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specific fields for offer posts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offer")]
		public LocalPostOffer Offer { get; set; }
		
		/// <summary>
		/// Output only. The link to the local post in Google search. This link can be used to share the post via social media, email, text, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchUrl")]
		public string SearchUrl { get; set; }
		
		/// <summary>
		/// Output only. The state of the post, indicating what part of its lifecycle it is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<LocalPostState> State { get; set; }
		
		/// <summary>
		/// Description/body of the local post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Required. The topic type of the post: standard, event, offer, or alert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicType")]
		public System.Nullable<LocalPostTopicType> TopicType { get; set; }
		
		/// <summary>
		/// Output only. Time of the last modification of the post made by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LocalPostAlertType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALERT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COVID_19 = 1,
	}
	
	/// <summary>
	/// All the information pertaining to an event featured in a local post.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalPostEvent
	{
		
		/// <summary>
		/// An interval of time, inclusive. It must contain all fields to be valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public TimeInterval Schedule { get; set; }
		
		/// <summary>
		/// Name of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// An interval of time, inclusive. It must contain all fields to be valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeInterval
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public TimeOfDay EndTime { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	/// <summary>
	/// Specific fields for offer posts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalPostOffer
	{
		
		/// <summary>
		/// Optional. Offer code that is usable in store or online.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponCode")]
		public string CouponCode { get; set; }
		
		/// <summary>
		/// Optional. Online link to redeem offer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redeemOnlineUrl")]
		public string RedeemOnlineUrl { get; set; }
		
		/// <summary>
		/// Optional. Offer terms and conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsConditions")]
		public string TermsConditions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LocalPostState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_POST_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LocalPostTopicType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_POST_TOPIC_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALERT = 4,
	}
	
	/// <summary>
	/// Response message for AccessControl.ListLocationAdmins.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationAdminsResponse
	{
		
		/// <summary>
		/// A collection of Admin instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admins")]
		public Admin[] Admins { get; set; }
	}
	
	/// <summary>
	/// Response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// The locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// If the number of locations exceeded the requested page size, this field is populated with a token to fetch the next page of locations on a subsequent call to `ListLocations`. If there are no more locations, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The approximate number of Locations in the list irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for Media.ListMediaItems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMediaItemsResponse
	{
		
		/// <summary>
		/// The returned list of media items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaItems")]
		public MediaItem[] MediaItems { get; set; }
		
		/// <summary>
		/// If there are more media items than the requested page size, then this field is populated with a token to fetch the next page of media items on a subsequent call to ListMediaItems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of media items for this location, irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMediaItemCount")]
		public System.Nullable<System.Int32> TotalMediaItemCount { get; set; }
	}
	
	/// <summary>
	/// Response message for QuestionsAndAnswers.ListQuestions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListQuestionsResponse
	{
		
		/// <summary>
		/// If the number of questions exceeds the requested max page size, this field is populated with a token to fetch the next page of questions on a subsequent call. If there are no more questions, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The requested questions,
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public Question[] Questions { get; set; }
		
		/// <summary>
		/// The total number of questions posted for this location across all pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Represents a single question and some of its answers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Question
	{
		
		/// <summary>
		/// Represents the author of a question or answer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public Author Author { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the question was written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The unique name for the question. accounts/*/locations/*/questions/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topAnswers")]
		public Answer[] TopAnswers { get; set; }
		
		/// <summary>
		/// Output only. The total number of answers posted for this question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalAnswerCount")]
		public System.Nullable<System.Int32> TotalAnswerCount { get; set; }
		
		/// <summary>
		/// Output only. The timestamp for when the question was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The number of upvotes for the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upvoteCount")]
		public System.Nullable<System.Int32> UpvoteCount { get; set; }
	}
	
	/// <summary>
	/// Response message for GoogleLocations.ListRecommendedGoogleLocations. It also contains some locations that have been claimed by other Business Profile users since the last time they were recommended to this Business Profile account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRecommendedGoogleLocationsResponse
	{
		
		/// <summary>
		/// The locations recommended to a Business Profile account. Each of these represents a GoogleLocation that is present on Maps. The locations are sorted in decreasing order of relevance to the Business Profile account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleLocations")]
		public GoogleLocation[] GoogleLocations { get; set; }
		
		/// <summary>
		/// During pagination, if there are more locations available to be fetched in the next page, this field is populated with a token to fetch the next page of locations in a subsequent call. If there are no more locations to be fetched, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total number of recommended locations for this Business Profile account, irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message for Reviews.ListReviews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReviewsResponse
	{
		
		/// <summary>
		/// The average star rating of all reviews for this location on a scale of 1 to 5, where 5 is the highest rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageRating")]
		public System.Nullable<System.Double> AverageRating { get; set; }
		
		/// <summary>
		/// If the number of reviews exceeded the requested page size, this field is populated with a token to fetch the next page of reviews on a subsequent call to ListReviews. If there are no more reviews, this field is not present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The reviews.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviews")]
		public Review[] Reviews { get; set; }
		
		/// <summary>
		/// The total number of reviews for this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalReviewCount")]
		public System.Nullable<System.Int32> TotalReviewCount { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.ListVerifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVerificationsResponse
	{
		
		/// <summary>
		/// If the number of verifications exceeded the requested page size, this field will be populated with a token to fetch the next page of verification on a subsequent call. If there are no more attributes, this field will not be present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of the verifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifications")]
		public Verification[] Verifications { get; set; }
	}
	
	/// <summary>
	/// All the metrics requested for a Local Post.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalPostMetrics
	{
		
		[System.Runtime.Serialization.DataMember(Name="localPostName")]
		public string LocalPostName { get; set; }
		
		/// <summary>
		/// A list of values for the requested metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public MetricValue[] MetricValues { get; set; }
	}
	
	/// <summary>
	/// A value for a single Metric from a starting time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricValue
	{
		
		/// <summary>
		/// Dimensional values for this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionalValues")]
		public DimensionalMetricValue[] DimensionalValues { get; set; }
		
		/// <summary>
		/// The metric for which the value applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public MetricRequestMetric Metric { get; set; }
		
		/// <summary>
		/// A value for a single metric with a given time dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalValue")]
		public DimensionalMetricValue TotalValue { get; set; }
	}
	
	/// <summary>
	/// A location indexed with the regions that people usually come from. This is captured by counting how many driving-direction requests to this location are from each region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationDrivingDirectionMetrics
	{
		
		/// <summary>
		/// The location resource name this metric value belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
		
		/// <summary>
		/// Time zone (IANA timezone IDs, for example, 'Europe/London') of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// Driving-direction requests by source region. By convention, these are sorted by count with at most 10 results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topDirectionSources")]
		public TopDirectionSources[] TopDirectionSources { get; set; }
	}
	
	/// <summary>
	/// Top regions where driving-direction requests originated from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TopDirectionSources
	{
		
		/// <summary>
		/// The number of days data is aggregated over.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayCount")]
		public System.Nullable<System.Int32> DayCount { get; set; }
		
		/// <summary>
		/// Regions sorted in descending order by count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCounts")]
		public RegionCount[] RegionCounts { get; set; }
	}
	
	/// <summary>
	/// A region with its associated request count.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionCount
	{
		
		/// <summary>
		/// Number of driving-direction requests from this region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Human-readable label for the region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latlng")]
		public LatLng Latlng { get; set; }
	}
	
	/// <summary>
	/// A series of Metrics and BreakdownMetrics associated with a Location over some time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationMetrics
	{
		
		/// <summary>
		/// The location resource name these values belong to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
		
		/// <summary>
		/// A list of values for the requested metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public MetricValue[] MetricValues { get; set; }
		
		/// <summary>
		/// IANA timezone for the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// A Google Cloud Pub/Sub topic where notifications can be published when a location is updated or has a new review. There will be only one notification settings resource per-account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notifications
	{
		
		/// <summary>
		/// Output only. The notifications resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The types of notifications that will be sent to the Cloud Pub/Sub topic. At least one must be specified. To stop receiving notifications entirely, use DeleteNotifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationTypes")]
		public string[] NotificationTypes { get; set; }
		
		/// <summary>
		/// The Google Cloud Pub/Sub topic that will receive notifications when locations managed by this account are updated. If unset, no notifications will be posted. The account mybusiness-api-pubsub@system.gserviceaccount.com must have at least Publish permissions on the Cloud Pub/Sub topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicName")]
		public string TopicName { get; set; }
	}
	
	/// <summary>
	/// Input for PHONE_CALL/SMS verification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneInput
	{
		
		/// <summary>
		/// The phone number that should be called or be sent SMS to. It must be one of the phone numbers in the eligible options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Request message for reporting a GoogleLocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportGoogleLocationRequest
	{
		
		/// <summary>
		/// Optional. The resource name of the location group that this Google Location is being reported for, in the format `accounts/{account_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationGroupName")]
		public string LocationGroupName { get; set; }
		
		/// <summary>
		/// The reason for which the user is reporting this location when the issue is with the location itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportReasonBadLocation")]
		public System.Nullable<ReportGoogleLocationRequestReportReasonBadLocation> ReportReasonBadLocation { get; set; }
		
		/// <summary>
		/// The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportReasonBadRecommendation")]
		public System.Nullable<ReportGoogleLocationRequestReportReasonBadRecommendation> ReportReasonBadRecommendation { get; set; }
		
		/// <summary>
		/// Optional. A text entry for elaborating on the reason for which the user is reporting this location. The maximum length is 512 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportReasonElaboration")]
		public string ReportReasonElaboration { get; set; }
		
		/// <summary>
		/// Optional. The BCP 47 code of language used in `report_reason_elaboration`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportReasonLanguageCode")]
		public string ReportReasonLanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportGoogleLocationRequestReportReasonBadLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_LOCATION_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_A_LOCATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMANENTLY_CLOSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOES_NOT_EXIST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPAM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_A_BUSINESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportGoogleLocationRequestReportReasonBadRecommendation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_RECOMMENDATION_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_A_STORE_FRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_PART_OF_SUGGESTED_CHAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRRELEVANT = 3,
	}
	
	/// <summary>
	/// Request message for Insights.ReportLocalPostInsights
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportLocalPostInsightsRequest
	{
		
		/// <summary>
		/// A request for basic metric insights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicRequest")]
		public BasicMetricsRequest BasicRequest { get; set; }
		
		/// <summary>
		/// Required. The list of posts for which to fetch insights data. All posts have to belong to the location whose name is specified in the `name` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localPostNames")]
		public string[] LocalPostNames { get; set; }
	}
	
	/// <summary>
	/// Response message for Insights.ReportLocalPostInsights
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportLocalPostInsightsResponse
	{
		
		/// <summary>
		/// One entry per requested post corresponding to this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localPostMetrics")]
		public LocalPostMetrics[] LocalPostMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Time zone (IANA timezone IDs, eg, 'Europe/London') of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Request message for Insights.ReportLocationInsights.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportLocationInsightsRequest
	{
		
		/// <summary>
		/// A request for basic metric insights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicRequest")]
		public BasicMetricsRequest BasicRequest { get; set; }
		
		/// <summary>
		/// A request for driving direction insights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drivingDirectionsRequest")]
		public DrivingDirectionMetricsRequest DrivingDirectionsRequest { get; set; }
		
		/// <summary>
		/// A collection of locations to fetch insights for, specified by their names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationNames")]
		public string[] LocationNames { get; set; }
	}
	
	/// <summary>
	/// Response message for `Insights.ReportLocationInsights`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportLocationInsightsResponse
	{
		
		/// <summary>
		/// A collection of values for driving direction-related metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationDrivingDirectionMetrics")]
		public LocationDrivingDirectionMetrics[] LocationDrivingDirectionMetrics { get; set; }
		
		/// <summary>
		/// A collection of metric values by location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationMetrics")]
		public LocationMetrics[] LocationMetrics { get; set; }
	}
	
	/// <summary>
	/// Response message for Locations.SearchChains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchChainsResponse
	{
		
		/// <summary>
		/// Chains that match the queried chain_display_name in SearchChainsRequest. If there are no matches, this field will be empty. Results are listed in order of relevance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chains")]
		public Chain[] Chains { get; set; }
	}
	
	/// <summary>
	/// Request message for GoogleLocations.SearchGoogleLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchGoogleLocationsRequest
	{
		
		/// <summary>
		/// A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Text query to search for. The search results from a query string will be less accurate than if providing an exact location, but can provide more inexact matches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// The number of matches to return. The default value is 3, with a maximum of 10. Note that latency may increase if more are requested. There is no pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultCount")]
		public System.Nullable<System.Int32> ResultCount { get; set; }
	}
	
	/// <summary>
	/// Response message for GoogleLocations.SearchGoogleLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchGoogleLocationsResponse
	{
		
		/// <summary>
		/// A collection of GoogleLocations that are potential matches to the specified request, listed in order from most to least accuracy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleLocations")]
		public GoogleLocation[] GoogleLocations { get; set; }
	}
	
	/// <summary>
	/// A message that describes a single service item. It is used to describe the type of service that the merchant provides. For example, haircut can be a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceItem
	{
		
		/// <summary>
		/// Represents a free-form service offered by the merchant. These are services that are not exposed as part of our structure service data. The merchant manually enters the names for of such services via a geomerchant surface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeFormServiceItem")]
		public FreeFormServiceItem FreeFormServiceItem { get; set; }
		
		/// <summary>
		/// Optional. This field decides whether or not the input service is offered by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOffered")]
		public System.Nullable<System.Boolean> IsOffered { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Represents a structured service offered by the merchant. For eg: toilet_installation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredServiceItem")]
		public StructuredServiceItem StructuredServiceItem { get; set; }
	}
	
	/// <summary>
	/// Represents a structured service offered by the merchant. For eg: toilet_installation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StructuredServiceItem
	{
		
		/// <summary>
		/// Optional. Description of structured service item. The character limit is 300.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The `service_type_id` field is a Google provided unique ID that can be found in `ServiceTypeMetadata`. This information is provided by BatchGetBusinessCategories rpc service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceTypeId")]
		public string ServiceTypeId { get; set; }
	}
	
	/// <summary>
	/// A service list containing one or more service items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceList
	{
		
		/// <summary>
		/// Required. Google identifier for this location in the form: `accounts/{account_id}/locations/{location_id}/serviceList`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Service items that are contained within this service list. Duplicated service items will be removed automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceItems")]
		public ServiceItem[] ServiceItems { get; set; }
	}
	
	/// <summary>
	/// Request message for Media.StartUploadMediaItemData.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartUploadMediaItemDataRequest
	{
	}
	
	/// <summary>
	/// Request message for Locations.TransferLocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferLocationRequest
	{
		
		/// <summary>
		/// Name of the account resource to transfer the location to (for example, "accounts/8675309").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toAccount")]
		public string ToAccount { get; set; }
	}
	
	/// <summary>
	/// Request message for QuestionsAndAnswers.UpsertAnswer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsertAnswerRequest
	{
		
		/// <summary>
		/// Represents an answer to a question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public Answer Answer { get; set; }
	}
	
	/// <summary>
	/// Request message for Verifications.VerifyLocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifyLocationRequest
	{
		
		/// <summary>
		/// Input for ADDRESS verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressInput")]
		public AddressInput AddressInput { get; set; }
		
		/// <summary>
		/// Additional data for service business verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ServiceBusinessContext Context { get; set; }
		
		/// <summary>
		/// Input for EMAIL verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailInput")]
		public EmailInput EmailInput { get; set; }
		
		/// <summary>
		/// The BCP 47 language code representing the language that is to be used for the verification process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Verification method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public VerificationMethod Method { get; set; }
		
		/// <summary>
		/// Input for PHONE_CALL/SMS verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneInput")]
		public PhoneInput PhoneInput { get; set; }
	}
	
	/// <summary>
	/// Response message for Verifications.VerifyLocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VerifyLocationResponse
	{
		
		/// <summary>
		/// A verification represents a verification attempt on a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public Verification Verification { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the accounts for the authenticated user. This includes all accounts that the user owns, as well as any accounts for which the user has management rights.
		/// Mybusiness_accounts_list v4/accounts
		/// </summary>
		/// <param name="filter">A filter constraining the accounts to return. The response includes only entries that match the filter. If `filter` is empty, then no constraints are applied and all accounts (paginated) are retrieved for the requested account. For example, a request with the filter `type=USER_GROUP` will only return user groups.</param>
		/// <param name="name">The resource name of the account for which the list of directly accessible accounts is to be retrieved. This only makes sense for Organizations and User Groups. If empty, will return `ListAccounts` for the authenticated user.</param>
		/// <param name="pageSize">How many accounts to fetch per page. Default is 20, minimum is 2, and maximum page size is 20.</param>
		/// <param name="pageToken">If specified, the next page of accounts is retrieved. The `pageToken` is returned when a call to `accounts.list` returns more results than can fit into the requested page size.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccountsResponse> Mybusiness_accounts_listAsync(string filter, string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/accounts?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an account with the specified name and type under the given parent. - Personal accounts and Organizations cannot be created. - User Groups cannot be created with a Personal account as primary owner. - Location Groups cannot be created with a primary owner of a Personal account if the Personal account is in an Organization. - Location Groups cannot own Location Groups.
		/// Mybusiness_accounts_create v4/accounts
		/// </summary>
		/// <param name="primaryOwner">The resource name of the account which will be the primary owner of the account being created. It should be of the form `accounts/{account_id}/`.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Mybusiness_accounts_createAsync(string primaryOwner, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/accounts?primaryOwner=" + (primaryOwner==null? "" : System.Uri.EscapeDataString(primaryOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of available attributes that would be available for a location with the given primary category and country.
		/// Mybusiness_attributes_list v4/attributes
		/// </summary>
		/// <param name="categoryId">The primary category stable ID to find available attributes.</param>
		/// <param name="country">The ISO 3166-1 alpha-2 country code to find available attributes.</param>
		/// <param name="languageCode">The BCP 47 code of language to get attribute display names in. If this language is not available, they will be provided in English.</param>
		/// <param name="name">Resource name of the location to look up available attributes.</param>
		/// <param name="pageSize">How many attributes to include per page. Default is 200, minimum is 1.</param>
		/// <param name="pageToken">If specified, the next page of attribute metadata is retrieved. The `pageToken` is returned when a call to `attributes.list` returns more results than can fit into the requested page size.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAttributeMetadataResponse> Mybusiness_attributes_listAsync(string categoryId, string country, string languageCode, string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/attributes?categoryId=" + (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAttributeMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of business categories. Search will match the category name but not the category ID. *Note:* Search only matches the front of a category name (that is, 'food' may return 'Food Court' but not 'Fast Food Restaurant').
		/// Mybusiness_categories_list v4/categories
		/// </summary>
		/// <param name="languageCode">The BCP 47 code of language. If the language is not available, it will default to English.</param>
		/// <param name="pageSize">How many categories to fetch per page. Default is 100, minimum is 1, and maximum page size is 100.</param>
		/// <param name="pageToken">If specified, the next page of categories will be fetched.</param>
		/// <param name="regionCode">The ISO 3166-1 alpha-2 country code.</param>
		/// <param name="searchTerm">Optional filter string from user.</param>
		/// <param name="view">Optional. Specifies which parts to the Category resource should be returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBusinessCategoriesResponse> Mybusiness_categories_listAsync(string languageCode, int pageSize, string pageToken, string regionCode, string searchTerm, Mybusiness_categories_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/categories?languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&searchTerm=" + (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBusinessCategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of business categories for the provided language and GConcept ids.
		/// Mybusiness_categories_batchGet v4/categories:batchGet
		/// </summary>
		/// <param name="categoryIds">Required. At least one name must be set. The GConcept ids the localized category names should be returned for.</param>
		/// <param name="languageCode">Required. The BCP 47 code of language that the category names should be returned in.</param>
		/// <param name="regionCode">Optional. The ISO 3166-1 alpha-2 country code used to infer non-standard language.</param>
		/// <param name="view">Required. Specifies which parts to the Category resource should be returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetBusinessCategoriesResponse> Mybusiness_categories_batchGetAsync(string[] categoryIds, string languageCode, string regionCode, Mybusiness_categories_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/categories:batchGet?"+string.Join("&", categoryIds.Select(z => $"categoryIds={System.Uri.EscapeDataString(z.ToString())}"))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&regionCode=" + (regionCode==null? "" : System.Uri.EscapeDataString(regionCode))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetBusinessCategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches the chain based on chain name.
		/// Mybusiness_chains_search v4/chains:search
		/// </summary>
		/// <param name="chainDisplayName">Search for a chain by its name. Exact/partial/fuzzy/related queries are supported. Examples: "walmart", "wal-mart", "walmmmart", "沃尔玛"</param>
		/// <param name="resultCount">The maximum number of matched chains to return from this query. The default is 10. The maximum possible value is 500.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchChainsResponse> Mybusiness_chains_searchAsync(string chainDisplayName, int resultCount, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/chains:search?chainDisplayName=" + (chainDisplayName==null? "" : System.Uri.EscapeDataString(chainDisplayName))+"&resultCount="+resultCount;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchChainsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search all of the possible locations that are a match to the specified request.
		/// Mybusiness_googleLocations_search v4/googleLocations:search
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SearchGoogleLocationsResponse> Mybusiness_googleLocations_searchAsync(SearchGoogleLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/googleLocations:search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchGoogleLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a specific question written by the current user.
		/// Mybusiness_accounts_locations_questions_delete v4/{name}
		/// </summary>
		/// <param name="name">The name of the question to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_accounts_locations_questions_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified chain. Returns `NOT_FOUND` if the chain does not exist.
		/// Mybusiness_chains_get v4/{name}
		/// </summary>
		/// <param name="name">The chain's resource name, in the format `chains/{chain_place_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Chain> Mybusiness_chains_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chain>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a specific question written by the current user.
		/// Mybusiness_accounts_locations_questions_patch v4/{name}
		/// </summary>
		/// <param name="name">The name of the question to update.</param>
		/// <param name="updateMask">The specific fields to update. If no mask is specified, then this is treated as a full update and all editable fields are set to the values passed in.</param>
		/// <returns>Successful response</returns>
		public async Task<Question> Mybusiness_accounts_locations_questions_patchAsync(string name, string updateMask, Question requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Question>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the pubsub notification settings for the account informing Business Profile which topic to send pubsub notifications for: - New reviews for locations administered by the account. - Updated reviews for locations administered by the account. - New `GoogleUpdates` for locations administered by the account. An account will only have one notification settings resource, and only one pubsub topic can be set.
		/// Mybusiness_accounts_updateNotifications v4/{name}
		/// </summary>
		/// <param name="name">The notification settings resource name.</param>
		/// <returns>Successful response</returns>
		public async Task<Notifications> Mybusiness_accounts_updateNotificationsAsync(string name, Notifications requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Notifications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns insights for a set of local posts associated with a single listing. Which metrics and how they are reported are options specified in the request proto. *Note:* Insight reports are limited to 100 `local_post_names` per call.
		/// Mybusiness_accounts_locations_localPosts_reportInsights v4/{name}/localPosts:reportInsights
		/// </summary>
		/// <param name="name">Required. The name of the location for which to fetch insights.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportLocalPostInsightsResponse> Mybusiness_accounts_locations_localPosts_reportInsightsAsync(string name, ReportLocalPostInsightsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/localPosts:reportInsights";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportLocalPostInsightsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all of the specified locations in the given account.
		/// Mybusiness_accounts_locations_batchGet v4/{name}/locations:batchGet
		/// </summary>
		/// <param name="name">The name of the account from which to fetch locations.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetLocationsResponse> Mybusiness_accounts_locations_batchGetAsync(string name, BatchGetLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations:batchGet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the paginated list of reviews for all specified locations. This operation is only valid if the specified locations are verified. *Note:* Reviews are limited to a batch size of 200 `location_names` per call.
		/// Mybusiness_accounts_locations_batchGetReviews v4/{name}/locations:batchGetReviews
		/// </summary>
		/// <param name="name">The name of the account from which to retrieve a list of reviews across multiple locations.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetReviewsResponse> Mybusiness_accounts_locations_batchGetReviewsAsync(string name, BatchGetReviewsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations:batchGetReviews";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetReviewsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a report containing insights on one or more metrics by location. *Note:* Insight reports are limited to a batch size of 10 `location_names` per call.
		/// Mybusiness_accounts_locations_reportInsights v4/{name}/locations:reportInsights
		/// </summary>
		/// <param name="name">The account resource name.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportLocationInsightsResponse> Mybusiness_accounts_locations_reportInsightsAsync(string name, ReportLocationInsightsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations:reportInsights";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReportLocationInsightsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the response to the specified review. This operation is only valid if the specified location is verified.
		/// Mybusiness_accounts_locations_reviews_deleteReply v4/{name}/reply
		/// </summary>
		/// <param name="name">The name of the review reply to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_accounts_locations_reviews_deleteReplyAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/reply";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the reply to the specified review. A reply is created if one does not exist. This operation is only valid if the specified location is verified.
		/// Mybusiness_accounts_locations_reviews_updateReply v4/{name}/reply
		/// </summary>
		/// <param name="name">The name of the review to respond to.</param>
		/// <returns>Successful response</returns>
		public async Task<ReviewReply> Mybusiness_accounts_locations_reviews_updateReplyAsync(string name, ReviewReply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/reply";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReviewReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Accepts the specified invitation.
		/// Mybusiness_accounts_invitations_accept v4/{name}:accept
		/// </summary>
		/// <param name="name">The name of the invitation that is being accepted.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_accounts_invitations_acceptAsync(string name, AcceptInvitationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it appears in the list of `FindMatchingLocations`.
		/// Mybusiness_accounts_locations_associate v4/{name}:associate
		/// </summary>
		/// <param name="name">The resource name of the location to associate.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_accounts_locations_associateAsync(string name, AssociateLocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":associate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clears an association between a location and its place ID. This operation is only valid if the location is unverified.
		/// Mybusiness_accounts_locations_clearAssociation v4/{name}:clearAssociation
		/// </summary>
		/// <param name="name">The resource name of the location to disassociate.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_accounts_locations_clearAssociationAsync(string name, ClearLocationAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":clearAssociation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Completes a `PENDING` verification. It is only necessary for non `AUTO` verification methods. `AUTO` verification request is instantly `VERIFIED` upon creation.
		/// Mybusiness_accounts_locations_verifications_complete v4/{name}:complete
		/// </summary>
		/// <param name="name">Resource name of the verification to complete.</param>
		/// <returns>Successful response</returns>
		public async Task<CompleteVerificationResponse> Mybusiness_accounts_locations_verifications_completeAsync(string name, CompleteVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":complete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CompleteVerificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Declines the specified invitation.
		/// Mybusiness_accounts_invitations_decline v4/{name}:decline
		/// </summary>
		/// <param name="name">The name of the account invitation that is being declined.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_accounts_invitations_declineAsync(string name, DeclineInvitationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":decline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reports all eligible verification options for a location in a specific language.
		/// Mybusiness_accounts_locations_fetchVerificationOptions v4/{name}:fetchVerificationOptions
		/// </summary>
		/// <param name="name">Resource name of the location to verify.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchVerificationOptionsResponse> Mybusiness_accounts_locations_fetchVerificationOptionsAsync(string name, FetchVerificationOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":fetchVerificationOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FetchVerificationOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Finds all of the possible locations that are a match to the specified location. This operation is only valid if the location is unverified.
		/// Mybusiness_accounts_locations_findMatches v4/{name}:findMatches
		/// </summary>
		/// <param name="name">The resource name of the location to find matches for.</param>
		/// <returns>Successful response</returns>
		public async Task<FindMatchingLocationsResponse> Mybusiness_accounts_locations_findMatchesAsync(string name, FindMatchingLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":findMatches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FindMatchingLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates an account number for this account. The account number is not provisioned when an account is created. Use this request to create an account number when it is required.
		/// Mybusiness_accounts_generateAccountNumber v4/{name}:generateAccountNumber
		/// </summary>
		/// <param name="name">The name of the account to generate an account number for.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Mybusiness_accounts_generateAccountNumberAsync(string name, GenerateAccountNumberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":generateAccountNumber";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the Google updated Lodging of a specific location.
		/// Mybusiness_accounts_locations_lodging_getGoogleUpdated v4/{name}:getGoogleUpdated
		/// </summary>
		/// <param name="name">Required. Google identifier for this location in the form: `accounts/{account_id}/locations/{location_id}/lodging`</param>
		/// <param name="readMask">Optional. The specific fields to return. If no mask is specified, then it returns the full Lodging (same as "*"). Repeated field items cannot be individually specified.</param>
		/// <returns>Successful response</returns>
		public async Task<GetGoogleUpdatedLodgingResponse> Mybusiness_accounts_locations_lodging_getGoogleUpdatedAsync(string name, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getGoogleUpdated&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetGoogleUpdatedLodgingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Google-updated version of the specified location. Returns `NOT_FOUND` if the location does not exist.
		/// Mybusiness_accounts_locations_getGoogleUpdated v4/{name}:googleUpdated
		/// </summary>
		/// <param name="name">The name of the location to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleUpdatedLocation> Mybusiness_accounts_locations_getGoogleUpdatedAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":googleUpdated";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleUpdatedLocation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the GoogleLocations that have been recommended to the specified Business Profile account. Recommendations are provided for personal accounts and location groups only, requests for all other account types will result in an error. The recommendations for location groups are based on the locations in that group. The recommendations for personal accounts are based on all of the locations that the user has access to on Business Profile (which includes locations they can access through location groups), and is a superset of all recommendations generated for the user.
		/// Mybusiness_accounts_listRecommendGoogleLocations v4/{name}:recommendGoogleLocations
		/// </summary>
		/// <param name="name">Name of the account resource to fetch recommended Google locations for.</param>
		/// <param name="pageSize">How many locations to fetch per page. Default is 25, minimum is 1, and maximum page size is 100.</param>
		/// <param name="pageToken">If specified, the next page of locations is retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRecommendedGoogleLocationsResponse> Mybusiness_accounts_listRecommendGoogleLocationsAsync(string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":recommendGoogleLocations&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRecommendedGoogleLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report a GoogleLocation.
		/// Mybusiness_googleLocations_report v4/{name}:report
		/// </summary>
		/// <param name="name">Resource name of a [GoogleLocation], in the format `googleLocations/{googleLocationId}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_googleLocations_reportAsync(string name, ReportGoogleLocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Moves a location from an account that the user owns to another account that the same user administers. The user must be an owner of the account the location is currently associated with and must also be at least a manager of the destination account. Returns the Location with its new resource name.
		/// Mybusiness_accounts_locations_transfer v4/{name}:transfer
		/// </summary>
		/// <param name="name">The name of the location to transfer.</param>
		/// <returns>Successful response</returns>
		public async Task<Location> Mybusiness_accounts_locations_transferAsync(string name, TransferLocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":transfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Location>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts the verification process for a location.
		/// Mybusiness_accounts_locations_verify v4/{name}:verify
		/// </summary>
		/// <param name="name">Resource name of the location to verify.</param>
		/// <returns>Successful response</returns>
		public async Task<VerifyLocationResponse> Mybusiness_accounts_locations_verifyAsync(string name, VerifyLocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VerifyLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all of the admins for the specified location.
		/// Mybusiness_accounts_locations_admins_list v4/{parent}/admins
		/// </summary>
		/// <param name="parent">The name of the location to list admins of.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationAdminsResponse> Mybusiness_accounts_locations_admins_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/admins";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationAdminsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invites the specified user to become an administrator for the specified location. The invitee must accept the invitation in order to be granted access to the location. See AcceptInvitation to programmatically accept an invitation.
		/// Mybusiness_accounts_locations_admins_create v4/{parent}/admins
		/// </summary>
		/// <param name="parent">The resource name of the location this admin is created for.</param>
		/// <returns>Successful response</returns>
		public async Task<Admin> Mybusiness_accounts_locations_admins_createAsync(string parent, Admin requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/admins";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Admin>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the paginated list of answers for a specified question.
		/// Mybusiness_accounts_locations_questions_answers_list v4/{parent}/answers
		/// </summary>
		/// <param name="parent">The name of the question to fetch answers for.</param>
		/// <param name="orderBy">The order to return the answers. Valid options include 'update_time desc' and 'upvote_count desc', which will return the answers sorted descendingly by the requested field. The default sort order is 'update_time desc'.</param>
		/// <param name="pageSize">How many answers to fetch per page. The default and maximum `page_size` values are 10.</param>
		/// <param name="pageToken">If specified, the next page of answers is retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAnswersResponse> Mybusiness_accounts_locations_questions_answers_listAsync(string parent, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/answers&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAnswersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the answer written by the current user to a question.
		/// Mybusiness_accounts_locations_questions_answers_delete v4/{parent}/answers:delete
		/// </summary>
		/// <param name="parent">The name of the question to delete an answer for.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Mybusiness_accounts_locations_questions_answers_deleteAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/answers:delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an answer or updates the existing answer written by the user for the specified question. A user can only create one answer per question.
		/// Mybusiness_accounts_locations_questions_answers_upsert v4/{parent}/answers:upsert
		/// </summary>
		/// <param name="parent">The name of the question to write an answer for.</param>
		/// <returns>Successful response</returns>
		public async Task<Answer> Mybusiness_accounts_locations_questions_answers_upsertAsync(string parent, UpsertAnswerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/answers:upsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Answer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all insurance networks supported by Google.
		/// Mybusiness_accounts_locations_insuranceNetworks_list v4/{parent}/insuranceNetworks
		/// </summary>
		/// <param name="parent">Required. The name of the location whose insurance networks will be listed. The name is in the form: accounts/{account_id}/locations/{location_id}</param>
		/// <param name="languageCode">Optional. The BCP 47 code for the language. If a language code is not provided, it defaults to English. Right now only 'en' is supported.</param>
		/// <param name="pageSize">How many insurance networks to return per page. The default value is 5000. Maximum page size is 10000.</param>
		/// <param name="pageToken">If specified, returns the next page of insurance networks.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInsuranceNetworksResponse> Mybusiness_accounts_locations_insuranceNetworks_listAsync(string parent, string languageCode, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/insuranceNetworks&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsuranceNetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists pending invitations for the specified account.
		/// Mybusiness_accounts_invitations_list v4/{parent}/invitations
		/// </summary>
		/// <param name="parent">The name of the account from which the list of invitations is being retrieved.</param>
		/// <param name="targetType">Specifies which target types should appear in the response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInvitationsResponse> Mybusiness_accounts_invitations_listAsync(string parent, Mybusiness_accounts_invitations_listTargetType targetType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/invitations&targetType=" + targetType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInvitationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of local posts associated with a location.
		/// Mybusiness_accounts_locations_localPosts_list v4/{parent}/localPosts
		/// </summary>
		/// <param name="parent">The name of the location whose local posts will be listed.</param>
		/// <param name="pageSize">How many local posts to return per page. Default of 20. The minimum is 1, and maximum page size is 100.</param>
		/// <param name="pageToken">If specified, returns the next page of local posts.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocalPostsResponse> Mybusiness_accounts_locations_localPosts_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/localPosts&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocalPostsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new local post associated with the specified location, and returns it.
		/// Mybusiness_accounts_locations_localPosts_create v4/{parent}/localPosts
		/// </summary>
		/// <param name="parent">The name of the location in which to create this local post.</param>
		/// <returns>Successful response</returns>
		public async Task<LocalPost> Mybusiness_accounts_locations_localPosts_createAsync(string parent, LocalPost requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/localPosts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocalPost>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the locations for the specified account.
		/// Mybusiness_accounts_locations_list v4/{parent}/locations
		/// </summary>
		/// <param name="parent">The name of the account to fetch locations from. If the Account is of AccountType PERSONAL, only Locations that are directly owned by the Account are returned, otherwise it will return all accessible locations from the Account, either directly or indirectly.</param>
		/// <param name="filter">A filter constraining the locations to return. The response includes only entries that match the filter. If `filter` is empty, then constraints are applied and all locations (paginated) are retrieved for the requested account. For more information about valid fields and example usage, see [Work with Location Data Guide](https://developers.google.com/my-business/content/location-data#filter_results_when_you_list_locations).</param>
		/// <param name="languageCode">The BCP 47 code of language to get display location properties in. If this language is not available, they will be provided in the language of the location. If neither is available, they will be provided in English. Deprecated. After August 15th, 2020, this field will no longer be applied. Instead, the language of the location will always be used.</param>
		/// <param name="orderBy">Sorting order for the request. Multiple fields should be comma-separated, following SQL syntax. The default sorting order is ascending. To specify descending order, a suffix " desc" should be added. Valid fields to order_by are location_name and store_code. For example: "location_name, store_code desc" or "location_name" or "store_code desc"</param>
		/// <param name="pageSize">How many locations to fetch per page. Default is 100, minimum is 1, and maximum page size is 100.</param>
		/// <param name="pageToken">If specified, it fetches the next `page` of locations. The page token is returned by previous calls to `ListLocations` when there were more locations than could fit in the requested page size.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Mybusiness_accounts_locations_listAsync(string parent, string filter, string languageCode, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new location owned by the specified account, and returns it.
		/// Mybusiness_accounts_locations_create v4/{parent}/locations
		/// </summary>
		/// <param name="parent">The name of the account in which to create this location.</param>
		/// <param name="requestId">A unique request ID for the server to detect duplicated requests. We recommend using UUIDs. Max length is 50 characters.</param>
		/// <param name="validateOnly">If true, the request is validated without actually creating the location.</param>
		/// <returns>Successful response</returns>
		public async Task<Location> Mybusiness_accounts_locations_createAsync(string parent, string requestId, bool validateOnly, Location requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/locations&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Location>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of media items associated with a location.
		/// Mybusiness_accounts_locations_media_list v4/{parent}/media
		/// </summary>
		/// <param name="parent">The name of the location whose media items will be listed.</param>
		/// <param name="pageSize">How many media items to return per page. The default value is 100, which is also the maximum supported number of media items able to be added to a location with the Google My Business API. Maximum page size is 2500.</param>
		/// <param name="pageToken">If specified, returns the next page of media items.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMediaItemsResponse> Mybusiness_accounts_locations_media_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/media&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMediaItemsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new media item for the location.
		/// Mybusiness_accounts_locations_media_create v4/{parent}/media
		/// </summary>
		/// <param name="parent">The resource name of the location where this media item will be created.</param>
		/// <returns>Successful response</returns>
		public async Task<MediaItem> Mybusiness_accounts_locations_media_createAsync(string parent, MediaItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/media";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MediaItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of media items associated with a location that have been contributed by customers.
		/// Mybusiness_accounts_locations_media_customers_list v4/{parent}/media/customers
		/// </summary>
		/// <param name="parent">The name of the location whose customer media items will be listed.</param>
		/// <param name="pageSize">How many media items to return per page. The default value is 100, the maximum supported page size is 200.</param>
		/// <param name="pageToken">If specified, returns the next page of media items.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomerMediaItemsResponse> Mybusiness_accounts_locations_media_customers_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/media/customers&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCustomerMediaItemsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a `MediaItemDataRef` for media item uploading.
		/// Mybusiness_accounts_locations_media_startUpload v4/{parent}/media:startUpload
		/// </summary>
		/// <param name="parent">The resource name of the location this media item is to be added to.</param>
		/// <returns>Successful response</returns>
		public async Task<MediaItemDataRef> Mybusiness_accounts_locations_media_startUploadAsync(string parent, StartUploadMediaItemDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/media:startUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MediaItemDataRef>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the paginated list of questions and some of its answers for a specified location.
		/// Mybusiness_accounts_locations_questions_list v4/{parent}/questions
		/// </summary>
		/// <param name="parent">The name of the location to fetch questions for.</param>
		/// <param name="answersPerQuestion">How many answers to fetch per question. The default and maximum `answers_per_question` values are 10.</param>
		/// <param name="filter">A filter constraining the questions to return. The only filter currently supported is "ignore_answered=true"</param>
		/// <param name="orderBy">The order to return the questions. Valid options include 'update_time desc' and 'upvote_count desc', which will return the questions sorted descendingly by the requested field. The default sort order is 'update_time desc'.</param>
		/// <param name="pageSize">How many questions to fetch per page. The default and maximum `page_size` values are 10.</param>
		/// <param name="pageToken">If specified, the next page of questions is retrieved.</param>
		/// <returns>Successful response</returns>
		public async Task<ListQuestionsResponse> Mybusiness_accounts_locations_questions_listAsync(string parent, int answersPerQuestion, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/questions&answersPerQuestion="+answersPerQuestion+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListQuestionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a question for the specified location.
		/// Mybusiness_accounts_locations_questions_create v4/{parent}/questions
		/// </summary>
		/// <param name="parent">The name of the location to write a question for.</param>
		/// <returns>Successful response</returns>
		public async Task<Question> Mybusiness_accounts_locations_questions_createAsync(string parent, Question requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/questions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Question>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the paginated list of reviews for the specified location. This operation is only valid if the specified location is verified.
		/// Mybusiness_accounts_locations_reviews_list v4/{parent}/reviews
		/// </summary>
		/// <param name="parent">The name of the location to fetch reviews for.</param>
		/// <param name="orderBy">Specifies the field to sort reviews by. If unspecified, the order of reviews returned will default to `update_time desc`. Valid orders to sort by are `rating`, `rating desc` and `update_time desc`.</param>
		/// <param name="pageSize">How many reviews to fetch per page. The maximum `page_size` is 50.</param>
		/// <param name="pageToken">If specified, it fetches the next page of reviews.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReviewsResponse> Mybusiness_accounts_locations_reviews_listAsync(string parent, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reviews&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReviewsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List verifications of a location, ordered by create time.
		/// Mybusiness_accounts_locations_verifications_list v4/{parent}/verifications
		/// </summary>
		/// <param name="parent">Resource name of the location that verification requests belong to.</param>
		/// <param name="pageSize">How many verification to include per page. If not set, return all.</param>
		/// <param name="pageToken">If specified, returns the next page of verifications.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVerificationsResponse> Mybusiness_accounts_locations_verifications_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/verifications&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVerificationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Mybusiness_categories_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
	
	public enum Mybusiness_accounts_invitations_listTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNTS_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATIONS_ONLY = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
