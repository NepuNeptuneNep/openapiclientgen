//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request to add a newly created and configured tenant project to a tenancy unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddTenantProjectRequest
	{
		
		/// <summary>
		/// This structure defines a tenant project to be added to the specified tenancy unit and its initial configuration and properties. A project lien is created for the tenant project to prevent the tenant project from being deleted accidentally. The lien is deleted as part of tenant project removal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectConfig")]
		public TenantProjectConfig ProjectConfig { get; set; }
		
		/// <summary>
		/// Required. Tag of the added project. Must be less than 128 characters. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// This structure defines a tenant project to be added to the specified tenancy unit and its initial configuration and properties. A project lien is created for the tenant project to prevent the tenant project from being deleted accidentally. The lien is deleted as part of tenant project removal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TenantProjectConfig
	{
		
		/// <summary>
		/// Describes the billing configuration for a new tenant project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingConfig")]
		public BillingConfig BillingConfig { get; set; }
		
		/// <summary>
		/// Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a project in it. Valid folder resource names have the format `folders/{folder_number}` (for example, `folders/123456`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
		
		/// <summary>
		/// Labels that are applied to this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Describes the service account configuration for the tenant project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountConfig")]
		public ServiceAccountConfig ServiceAccountConfig { get; set; }
		
		/// <summary>
		/// Google Cloud API names of services that are activated on this project during provisioning. If any of these services can't be activated, the request fails. For example: 'compute.googleapis.com','cloudfunctions.googleapis.com'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
		
		/// <summary>
		/// Describes policy settings that can be applied to a newly created tenant project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectPolicy")]
		public TenantProjectPolicy TenantProjectPolicy { get; set; }
	}
	
	/// <summary>
	/// Describes the billing configuration for a new tenant project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingConfig
	{
		
		/// <summary>
		/// Name of the billing account. For example `billingAccounts/012345-567890-ABCDEF`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingAccount")]
		public string BillingAccount { get; set; }
	}
	
	/// <summary>
	/// Describes the service account configuration for the tenant project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAccountConfig
	{
		
		/// <summary>
		/// ID of the IAM service account to be created in tenant project. The email format of the service account is "@.iam.gserviceaccount.com". This account ID must be unique within tenant project and service producers have to guarantee it. The ID must be 6-30 characters long, and match the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Roles for the associated service account for the tenant project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectRoles")]
		public string[] TenantProjectRoles { get; set; }
	}
	
	/// <summary>
	/// Describes policy settings that can be applied to a newly created tenant project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TenantProjectPolicy
	{
		
		/// <summary>
		/// Policy bindings to be applied to the tenant project, in addition to the 'roles/owner' role granted to the Service Consumer Management service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyBindings")]
		public PolicyBinding[] PolicyBindings { get; set; }
	}
	
	/// <summary>
	/// Translates to IAM Policy bindings (without auditing at this level)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyBinding
	{
		
		/// <summary>
		/// Uses the same format as in IAM policy. `member` must include both a prefix and ID. For example, `user:{emailId}`, `serviceAccount:{emailId}`, `group:{emailId}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role. (https://cloud.google.com/iam/docs/understanding-roles) For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Api is a light-weight descriptor for an API Interface. Interfaces are also described as "protocol buffer services" in some contexts, such as by the "service" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as "APIs" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Api
	{
		
		/// <summary>
		/// The methods of this interface, in unspecified order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methods")]
		public Method[] Methods { get; set; }
		
		/// <summary>
		/// Included interfaces. See Mixin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mixins")]
		public Mixin[] Mixins { get; set; }
		
		/// <summary>
		/// The fully qualified name of this interface, including package name followed by the interface's simple name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Any metadata attached to the interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
		
		/// <summary>
		/// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceContext")]
		public SourceContext SourceContext { get; set; }
		
		/// <summary>
		/// The source syntax of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntax")]
		public MethodSyntax Syntax { get; set; }
		
		/// <summary>
		/// A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Method represents a method of an API interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Method
	{
		
		/// <summary>
		/// The simple name of this method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Any metadata attached to the method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
		
		/// <summary>
		/// If true, the request is streamed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestStreaming")]
		public System.Nullable<System.Boolean> RequestStreaming { get; set; }
		
		/// <summary>
		/// A URL of the input message type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTypeUrl")]
		public string RequestTypeUrl { get; set; }
		
		/// <summary>
		/// If true, the response is streamed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseStreaming")]
		public System.Nullable<System.Boolean> ResponseStreaming { get; set; }
		
		/// <summary>
		/// The URL of the output message type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseTypeUrl")]
		public string ResponseTypeUrl { get; set; }
		
		/// <summary>
		/// The source syntax of this method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntax")]
		public System.Nullable<MethodSyntax> Syntax { get; set; }
	}
	
	/// <summary>
	/// A protocol buffer option, which can be attached to a message, field, enumeration, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Option
	{
		
		/// <summary>
		/// The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `"map_entry"`. For custom options, it should be the fully-qualified name. For example, `"google.api.http"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Collections.Generic.Dictionary<string, object> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MethodSyntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNTAX_PROTO2")]
		SYNTAX_PROTO2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNTAX_PROTO3")]
		SYNTAX_PROTO3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNTAX_EDITIONS")]
		SYNTAX_EDITIONS = 2,
	}
	
	/// <summary>
	/// Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v1/{resource=**}:getAcl"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = "/v2/{resource=**}"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inherting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/{resource=**}:getAcl"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/acls/{resource=**}:getAcl"; } ... }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Mixin
	{
		
		/// <summary>
		/// The fully qualified name of the interface which is included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If non-empty specifies a path under which inherited HTTP paths are rooted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="root")]
		public string Root { get; set; }
	}
	
	/// <summary>
	/// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceContext
	{
		
		/// <summary>
		/// The path-qualified name of the .proto file that contained the associated protobuf element. For example: `"google/protobuf/source_context.proto"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
	}
	
	/// <summary>
	/// Request to apply configuration to an existing tenant project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplyTenantProjectConfigRequest
	{
		
		/// <summary>
		/// This structure defines a tenant project to be added to the specified tenancy unit and its initial configuration and properties. A project lien is created for the tenant project to prevent the tenant project from being deleted accidentally. The lien is deleted as part of tenant project removal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectConfig")]
		public TenantProjectConfig ProjectConfig { get; set; }
		
		/// <summary>
		/// Required. Tag of the project. Must be less than 128 characters. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Request to attach an existing project to the tenancy unit as a new tenant resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachTenantProjectRequest
	{
		
		/// <summary>
		/// When attaching an external project, this is in the format of `projects/{project_number}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalResource")]
		public string ExternalResource { get; set; }
		
		/// <summary>
		/// When attaching a reserved project already in tenancy units, this is the tag of a tenant resource under the tenancy unit for the managed service's service producer project. The reserved tenant resource must be in an active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedResource")]
		public string ReservedResource { get; set; }
		
		/// <summary>
		/// Required. Tag of the tenant resource after attachment. Must be less than 128 characters. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthProvider
	{
		
		/// <summary>
		/// The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - "https://[service.name]/[google.protobuf.Api.name]" - "https://[service.name]/" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audiences")]
		public string Audiences { get; set; }
		
		/// <summary>
		/// Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationUrl")]
		public string AuthorizationUrl { get; set; }
		
		/// <summary>
		/// The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: "bookstore_auth".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwksUri")]
		public string JwksUri { get; set; }
		
		/// <summary>
		/// Defines the locations to extract the JWT. For now it is only used by the Cloud Endpoints to store the OpenAPI extension [x-google-jwt-locations] (https://cloud.google.com/endpoints/docs/openapi/openapi-extensions#x-google-jwt-locations) JWT locations can be one of HTTP headers, URL query parameters or cookies. The rule is that the first match wins. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: "Bearer " - header: x-goog-iap-jwt-assertion - query: access_token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwtLocations")]
		public JwtLocation[] JwtLocations { get; set; }
	}
	
	/// <summary>
	/// Specifies a location to extract JWT from an API request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JwtLocation
	{
		
		/// <summary>
		/// Specifies cookie name to extract JWT token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookie")]
		public string Cookie { get; set; }
		
		/// <summary>
		/// Specifies HTTP header name to extract JWT token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public string Header { get; set; }
		
		/// <summary>
		/// Specifies URL query parameter name to extract JWT token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// The value prefix. The value format is "value_prefix{token}" Only applies to "in" header type. Must be empty for "in" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for "Authorization: Bearer {JWT}", value_prefix="Bearer " with a space at the end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuePrefix")]
		public string ValuePrefix { get; set; }
	}
	
	/// <summary>
	/// User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthRequirement
	{
		
		/// <summary>
		/// NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience "https://Service_name/API_name" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience "https://library-example.googleapis.com/google.example.library.v1.LibraryService". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audiences")]
		public string Audiences { get; set; }
		
		/// <summary>
		/// id from authentication provider. Example: provider_id: bookstore_auth
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
	}
	
	/// <summary>
	/// `Authentication` defines the authentication configuration for API methods provided by an API service. Example: name: calendar.googleapis.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth - selector: google.calendar.Delegate oauth: canonical_scopes: https://www.googleapis.com/auth/calendar.read
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authentication
	{
		
		/// <summary>
		/// Defines a set of authentication providers that a service supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providers")]
		public AuthProvider[] Providers { get; set; }
		
		/// <summary>
		/// A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public AuthenticationRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationRule
	{
		
		/// <summary>
		/// If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowWithoutCredential")]
		public System.Nullable<System.Boolean> AllowWithoutCredential { get; set; }
		
		/// <summary>
		/// OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for "Read-only access to Google Calendar" and "Access to Cloud Platform". Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth")]
		public OAuthRequirements Oauth { get; set; }
		
		/// <summary>
		/// Requirements for additional authentication providers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirements")]
		public AuthRequirement[] Requirements { get; set; }
		
		/// <summary>
		/// Selects the methods to which this rule applies. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for "Read-only access to Google Calendar" and "Access to Cloud Platform". Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuthRequirements
	{
		
		/// <summary>
		/// The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalScopes")]
		public string CanonicalScopes { get; set; }
	}
	
	/// <summary>
	/// `Backend` defines the backend configuration for a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Backend
	{
		
		/// <summary>
		/// A list of API backend rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public BackendRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// A backend rule provides configuration for an individual API element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendRule
	{
		
		/// <summary>
		/// The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadline")]
		public System.Nullable<System.Double> Deadline { get; set; }
		
		/// <summary>
		/// When disable_auth is true, a JWT ID token won't be generated and the original "Authorization" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableAuth")]
		public System.Nullable<System.Boolean> DisableAuth { get; set; }
		
		/// <summary>
		/// The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP "authorization" header, and sent to the backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwtAudience")]
		public string JwtAudience { get; set; }
		
		/// <summary>
		/// Deprecated, do not use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minDeadline")]
		public System.Nullable<System.Double> MinDeadline { get; set; }
		
		/// <summary>
		/// The number of seconds to wait for the completion of a long running operation. The default is no deadline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationDeadline")]
		public System.Nullable<System.Double> OperationDeadline { get; set; }
		
		/// <summary>
		/// The map between request protocol and the backend address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridesByRequestProtocol")]
		public System.Collections.Generic.Dictionary<string, BackendRule> OverridesByRequestProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathTranslation")]
		public System.Nullable<BackendRulePathTranslation> PathTranslation { get; set; }
		
		/// <summary>
		/// The protocol used for sending a request to the backend. The supported values are "http/1.1" and "h2". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to "h2" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// Selects the methods to which this rule applies. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BackendRulePathTranslation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATH_TRANSLATION_UNSPECIFIED")]
		PATH_TRANSLATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONSTANT_ADDRESS")]
		CONSTANT_ADDRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPEND_PATH_TO_ADDRESS")]
		APPEND_PATH_TO_ADDRESS = 2,
	}
	
	/// <summary>
	/// Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Billing
	{
		
		/// <summary>
		/// Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerDestinations")]
		public BillingDestination[] ConsumerDestinations { get; set; }
	}
	
	/// <summary>
	/// Configuration of a specific billing destination (Currently only support bill against consumer project).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingDestination
	{
		
		/// <summary>
		/// Names of the metrics to report to this billing destination. Each name must be defined in Service.metrics section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// The monitored resource type. The type must be defined in Service.monitored_resources section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoredResource")]
		public string MonitoredResource { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Details about how and where to publish client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientLibrarySettings
	{
		
		/// <summary>
		/// Settings for C++ client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cppSettings")]
		public CppSettings CppSettings { get; set; }
		
		/// <summary>
		/// Settings for Dotnet client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dotnetSettings")]
		public DotnetSettings DotnetSettings { get; set; }
		
		/// <summary>
		/// Settings for Go client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goSettings")]
		public GoSettings GoSettings { get; set; }
		
		/// <summary>
		/// Settings for Java client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="javaSettings")]
		public JavaSettings JavaSettings { get; set; }
		
		/// <summary>
		/// Launch stage of this version of the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchStage")]
		public System.Nullable<ClientLibrarySettingsLaunchStage> LaunchStage { get; set; }
		
		/// <summary>
		/// Settings for Node client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeSettings")]
		public NodeSettings NodeSettings { get; set; }
		
		/// <summary>
		/// Settings for Php client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phpSettings")]
		public PhpSettings PhpSettings { get; set; }
		
		/// <summary>
		/// Settings for Python client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonSettings")]
		public PythonSettings PythonSettings { get; set; }
		
		/// <summary>
		/// When using transport=rest, the client request will encode enums as numbers rather than strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restNumericEnums")]
		public System.Nullable<System.Boolean> RestNumericEnums { get; set; }
		
		/// <summary>
		/// Settings for Ruby client libraries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rubySettings")]
		public RubySettings RubySettings { get; set; }
		
		/// <summary>
		/// Version of the API to apply these settings to. This is the full protobuf package for the API, ending in the version element. Examples: "google.cloud.speech.v1" and "google.spanner.admin.database.v1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Settings for C++ client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CppSettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
	}
	
	/// <summary>
	/// Required information for every language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonLanguageSettings
	{
		
		/// <summary>
		/// The destination where API teams want this client library to be published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public string[] Destinations { get; set; }
		
		/// <summary>
		/// Link to automatically generated reference documentation. Example: https://cloud.google.com/nodejs/docs/reference/asset/latest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceDocsUri")]
		public string ReferenceDocsUri { get; set; }
	}
	
	/// <summary>
	/// Settings for Dotnet client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DotnetSettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
		
		/// <summary>
		/// Namespaces which must be aliased in snippets due to a known (but non-generator-predictable) naming collision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forcedNamespaceAliases")]
		public string[] ForcedNamespaceAliases { get; set; }
		
		/// <summary>
		/// Method signatures (in the form "service.method(signature)") which are provided separately, so shouldn't be generated. Snippets *calling* these methods are still generated, however.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handwrittenSignatures")]
		public string[] HandwrittenSignatures { get; set; }
		
		/// <summary>
		/// List of full resource types to ignore during generation. This is typically used for API-specific Location resources, which should be handled by the generator as if they were actually the common Location resources. Example entry: "documentai.googleapis.com/Location"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoredResources")]
		public string[] IgnoredResources { get; set; }
		
		/// <summary>
		/// Map from full resource types to the effective short name for the resource. This is used when otherwise resource named from different services would cause naming collisions. Example entry: "datalabeling.googleapis.com/Dataset": "DataLabelingDataset"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renamedResources")]
		public System.Collections.Generic.Dictionary<string, string> RenamedResources { get; set; }
		
		/// <summary>
		/// Map from original service names to renamed versions. This is used when the default generated types would cause a naming conflict. (Neither name is fully-qualified.) Example: Subscriber to SubscriberServiceApi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renamedServices")]
		public System.Collections.Generic.Dictionary<string, string> RenamedServices { get; set; }
	}
	
	/// <summary>
	/// Settings for Go client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoSettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
	}
	
	/// <summary>
	/// Settings for Java client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JavaSettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
		
		/// <summary>
		/// The package name to use in Java. Clobbers the java_package option set in the protobuf. This should be used **only** by APIs who have already set the language_settings.java.package_name" field in gapic.yaml. API teams should use the protobuf java_package option where possible. Example of a YAML configuration:: publishing: java_settings: library_package: com.google.cloud.pubsub.v1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="libraryPackage")]
		public string LibraryPackage { get; set; }
		
		/// <summary>
		/// Configure the Java class name to use instead of the service's for its corresponding generated GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including the full the language_settings.java.interface_names" field in gapic.yaml. API teams should otherwise use the service name as it appears in the protobuf. Example of a YAML configuration:: publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin - google.pubsub.v1.Subscriber: SubscriptionAdmin
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceClassNames")]
		public System.Collections.Generic.Dictionary<string, string> ServiceClassNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClientLibrarySettingsLaunchStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAUNCH_STAGE_UNSPECIFIED")]
		LAUNCH_STAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNIMPLEMENTED")]
		UNIMPLEMENTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRELAUNCH")]
		PRELAUNCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EARLY_ACCESS")]
		EARLY_ACCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALPHA")]
		ALPHA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETA")]
		BETA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GA")]
		GA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATED")]
		DEPRECATED = 7,
	}
	
	/// <summary>
	/// Settings for Node client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NodeSettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
	}
	
	/// <summary>
	/// Settings for Php client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhpSettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
	}
	
	/// <summary>
	/// Settings for Python client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PythonSettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
	}
	
	/// <summary>
	/// Settings for Ruby client libraries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RubySettings
	{
		
		/// <summary>
		/// Required information for every language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public CommonLanguageSettings Common { get; set; }
	}
	
	/// <summary>
	/// `Context` defines which contexts an API requests. Example: context: rules: - selector: "*" requested: - google.rpc.context.ProjectContext - google.rpc.context.OriginContext The above specifies that all methods in the API request `google.rpc.context.ProjectContext` and `google.rpc.context.OriginContext`. Available context types are defined in package `google.rpc.context`. This also provides mechanism to allowlist any protobuf message extension that can be sent in grpc metadata using “x-goog-ext--bin” and “x-goog-ext--jspb” format. For example, list any service specific protobuf types that can appear in grpc metadata as follows in your yaml file: Example: context: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allowed_request_extensions: - google.foo.v1.NewExtension allowed_response_extensions: - google.foo.v1.NewExtension You can also specify extension ID instead of fully qualified extension name here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Context
	{
		
		/// <summary>
		/// A list of RPC context rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ContextRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// A context rule provides information about the context for an individual API element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextRule
	{
		
		/// <summary>
		/// A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedRequestExtensions")]
		public string[] AllowedRequestExtensions { get; set; }
		
		/// <summary>
		/// A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedResponseExtensions")]
		public string[] AllowedResponseExtensions { get; set; }
		
		/// <summary>
		/// A list of full type names of provided contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provided")]
		public string[] Provided { get; set; }
		
		/// <summary>
		/// A list of full type names of requested contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requested")]
		public string[] Requested { get; set; }
		
		/// <summary>
		/// Selects the methods to which this rule applies. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// Selects and configures the service controller used by the service. Example: control: environment: servicecontrol.googleapis.com
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Control
	{
		
		/// <summary>
		/// The service controller environment to use. If empty, no control plane feature (like quota and billing) will be enabled. The recommended value for most services is servicecontrol.googleapis.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		/// <summary>
		/// Defines policies applying to the API methods of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodPolicies")]
		public MethodPolicy[] MethodPolicies { get; set; }
	}
	
	/// <summary>
	/// Defines policies applying to an RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MethodPolicy
	{
		
		/// <summary>
		/// Policies that are applicable to the request message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestPolicies")]
		public FieldPolicy[] RequestPolicies { get; set; }
		
		/// <summary>
		/// Selects a method to which these policies should be enforced, for example, "google.pubsub.v1.Subscriber.CreateSubscription". Refer to selector for syntax details. NOTE: This field must not be set in the proto annotation. It will be automatically filled by the service config compiler .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// Google API Policy Annotation This message defines a simple API policy annotation that can be used to annotate API request and response message fields with applicable policies. One field may have multiple applicable policies that must all be satisfied before a request can be processed. This policy annotation is used to generate the overall policy that will be used for automatic runtime policy enforcement and documentation generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldPolicy
	{
		
		/// <summary>
		/// Specifies the required permission(s) for the resource referred to by the field. It requires the field contains a valid resource reference, and the request must pass the permission checks to proceed. For example, "resourcemanager.projects.get".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePermission")]
		public string ResourcePermission { get; set; }
		
		/// <summary>
		/// Specifies the resource type for the resource referred to by the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Selects one or more request or response message fields to apply this `FieldPolicy`. When a `FieldPolicy` is used in proto annotation, the selector must be left as empty. The service config generator will automatically fill the correct value. When a `FieldPolicy` is used in service config, the selector must be a comma-separated string with valid request or response field paths, such as "foo.bar" or "foo.bar,foo.baz".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// Request to create a tenancy unit for a service consumer of a managed service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTenancyUnitRequest
	{
		
		/// <summary>
		/// Optional. Optional service producer-provided identifier of the tenancy unit. Must be no longer than 40 characters and preferably URI friendly. If it isn't provided, a UID for the tenancy unit is automatically generated. The identifier must be unique across a managed service. If the tenancy unit already exists for the managed service and service consumer pair, calling `CreateTenancyUnit` returns the existing tenancy unit if the provided identifier is identical or empty, otherwise the call fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenancyUnitId")]
		public string TenancyUnitId { get; set; }
	}
	
	/// <summary>
	/// Customize service error responses. For example, list any service specific protobuf types that can appear in error detail lists of error responses. Example: custom_error: types: - google.foo.v1.CustomError - google.foo.v1.AnotherError
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomError
	{
		
		/// <summary>
		/// The list of custom error rules that apply to individual API messages. **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public CustomErrorRule[] Rules { get; set; }
		
		/// <summary>
		/// The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	/// <summary>
	/// A custom error rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomErrorRule
	{
		
		/// <summary>
		/// Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isErrorType")]
		public System.Nullable<System.Boolean> IsErrorType { get; set; }
		
		/// <summary>
		/// Selects messages to which this rule applies. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// A custom pattern is used for defining custom HTTP verb.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomHttpPattern
	{
		
		/// <summary>
		/// The name of this custom HTTP verb.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The path matched by this custom verb.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Request message to delete tenant project resource from the tenancy unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTenantProjectRequest
	{
		
		/// <summary>
		/// Required. Tag of the resource within the tenancy unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// `Documentation` provides the information for describing a service. Example: documentation: summary: > The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages: - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: > ... - selector: google.calendar.Calendar.Put description: > ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Documentation
	{
		
		/// <summary>
		/// The URL to the root of documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationRootUrl")]
		public string DocumentationRootUrl { get; set; }
		
		/// <summary>
		/// Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		/// <summary>
		/// The top level pages for the documentation set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public Page[] Pages { get; set; }
		
		/// <summary>
		/// A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public DocumentationRule[] Rules { get; set; }
		
		/// <summary>
		/// Specifies section and content to override boilerplate content provided by go/api-docgen. Currently overrides following sections: 1. rest.service.client_libraries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionOverrides")]
		public Page[] SectionOverrides { get; set; }
		
		/// <summary>
		/// Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceRootUrl")]
		public string ServiceRootUrl { get; set; }
		
		/// <summary>
		/// A short description of what the service does. The summary must be plain text. It becomes the overview of the service displayed in Google Cloud Console. NOTE: This field is equivalent to the standard field `description`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	/// <summary>
	/// Represents a documentation page. A page can contain subpages to represent nested documentation set structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Page
	{
		
		/// <summary>
		/// The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file. The content can be used to produce the documentation page such as HTML format page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Subpages of this page. The order of subpages specified here will be honored in the generated docset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subpages")]
		public Page[] Subpages { get; set; }
	}
	
	/// <summary>
	/// A documentation rule provides information about individual API elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentationRule
	{
		
		/// <summary>
		/// Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecationDescription")]
		public string DeprecationDescription { get; set; }
		
		/// <summary>
		/// Description of the selected proto element (e.g. a message, a method, a 'service' definition, or a field). Defaults to leading & trailing comments taken from the proto source definition of the proto element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// String of comma or space separated case-sensitive words for which method/field name replacement will be disabled by go/api-docgen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableReplacementWords")]
		public string DisableReplacementWords { get; set; }
		
		/// <summary>
		/// The selector is a comma-separated list of patterns for any element such as a method, a field, an enum value. Each pattern is a qualified name of the element which may end in "*", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern "*" is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// `Endpoint` describes a network address of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example: type: google.api.Service name: library-example.googleapis.com endpoints: # Declares network address `https://library-example.googleapis.com` # for service `library-example.googleapis.com`. The `https` scheme # is implicit for all service endpoints. Other schemes may be # supported in the future. - name: library-example.googleapis.com allow_cors: false - name: content-staging-library-example.googleapis.com # Allows HTTP OPTIONS calls to be passed to the API frontend, for it # to decide whether the subsequent cross-origin request is allowed # to proceed. allow_cors: true
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Endpoint
	{
		
		/// <summary>
		/// Unimplemented. Dot not use. DEPRECATED: This field is no longer supported. Instead of using aliases, please specify multiple google.api.Endpoint for each of the intended aliases. Additional names that this endpoint will be hosted on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliases")]
		public string[] Aliases { get; set; }
		
		/// <summary>
		/// Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowCors")]
		public System.Nullable<System.Boolean> AllowCors { get; set; }
		
		/// <summary>
		/// The canonical name of this endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, "8.8.8.8" or "myservice.appspot.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Enum type definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Enum
	{
		
		/// <summary>
		/// The source edition string, only valid when syntax is SYNTAX_EDITIONS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// Enum value definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumvalue")]
		public EnumValue[] Enumvalue { get; set; }
		
		/// <summary>
		/// Enum type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Protocol buffer options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
		
		/// <summary>
		/// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceContext")]
		public SourceContext SourceContext { get; set; }
		
		/// <summary>
		/// The source syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntax")]
		public MethodSyntax Syntax { get; set; }
	}
	
	/// <summary>
	/// Enum value definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnumValue
	{
		
		/// <summary>
		/// Enum value name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Enum value number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// Protocol buffer options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
	}
	
	/// <summary>
	/// A single field of a message type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Field
	{
		
		/// <summary>
		/// The field cardinality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cardinality")]
		public System.Nullable<FieldCardinality> Cardinality { get; set; }
		
		/// <summary>
		/// The string value of the default value of this field. Proto2 syntax only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// The field JSON name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonName")]
		public string JsonName { get; set; }
		
		/// <summary>
		/// The field type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<FieldKind> Kind { get; set; }
		
		/// <summary>
		/// The field name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The field number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneofIndex")]
		public System.Nullable<System.Int32> OneofIndex { get; set; }
		
		/// <summary>
		/// The protocol buffer options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
		
		/// <summary>
		/// Whether to use alternative packed wire representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packed")]
		public System.Nullable<System.Boolean> Packed { get; set; }
		
		/// <summary>
		/// The field type URL, without the scheme, for message or enumeration types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeUrl")]
		public string TypeUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FieldCardinality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDINALITY_UNKNOWN")]
		CARDINALITY_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDINALITY_OPTIONAL")]
		CARDINALITY_OPTIONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDINALITY_REQUIRED")]
		CARDINALITY_REQUIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CARDINALITY_REPEATED")]
		CARDINALITY_REPEATED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FieldKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UNKNOWN")]
		TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_DOUBLE")]
		TYPE_DOUBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_FLOAT")]
		TYPE_FLOAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_INT64")]
		TYPE_INT64 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UINT64")]
		TYPE_UINT64 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_INT32")]
		TYPE_INT32 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_FIXED64")]
		TYPE_FIXED64 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_FIXED32")]
		TYPE_FIXED32 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_BOOL")]
		TYPE_BOOL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_STRING")]
		TYPE_STRING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_GROUP")]
		TYPE_GROUP = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_MESSAGE")]
		TYPE_MESSAGE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_BYTES")]
		TYPE_BYTES = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_UINT32")]
		TYPE_UINT32 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_ENUM")]
		TYPE_ENUM = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_SFIXED32")]
		TYPE_SFIXED32 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_SFIXED64")]
		TYPE_SFIXED64 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_SINT32")]
		TYPE_SINT32 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPE_SINT64")]
		TYPE_SINT64 = 18,
	}
	
	/// <summary>
	/// Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Http
	{
		
		/// <summary>
		/// When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullyDecodeReservedExpansion")]
		public System.Nullable<System.Boolean> FullyDecodeReservedExpansion { get; set; }
		
		/// <summary>
		/// A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public HttpRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// # gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC method and one or more HTTP REST endpoints. It allows developers to build a single API service that supports both gRPC APIs and REST APIs. Many systems, including [Google APIs](https://github.com/googleapis/googleapis), [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and use it for large scale production services. `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies how different portions of the gRPC request message are mapped to the URL path, URL query parameters, and HTTP request body. It also controls how the gRPC response message is mapped to the HTTP response body. `HttpRule` is typically specified as an `google.api.http` annotation on the gRPC method. Each mapping specifies a URL path template and an HTTP method. The path template may refer to one or more fields in the gRPC request message, as long as each field is a non-repeated field with a primitive (non-message) type. The path template controls how fields of the request message are mapped to the URL path. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/{name=messages/*}" }; } } message GetMessageRequest { string name = 1; // Mapped to URL path. } message Message { string text = 1; // The resource content. } This enables an HTTP REST to gRPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(name: "messages/123456")` Any fields in the request message which are not bound by the path template automatically become HTTP query parameters if there is no HTTP request body. For example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get:"/v1/messages/{message_id}" }; } } message GetMessageRequest { message SubMessage { string subfield = 1; } string message_id = 1; // Mapped to URL path. int64 revision = 2; // Mapped to URL query parameter `revision`. SubMessage sub = 3; // Mapped to URL query parameter `sub.subfield`. } This enables a HTTP JSON to RPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))` Note that fields which are mapped to URL query parameters must have a primitive type or a repeated primitive type or a non-repeated message type. In the case of a repeated type, the parameter can be repeated in the URL as `...?param=A&param=B`. In the case of a message type, each field of the message is mapped to a separate parameter, such as `...?foo.a=A&foo.b=B&foo.c=C`. For HTTP methods that allow a request body, the `body` field specifies the mapping. Consider a REST update method on the message resource collection: service Messaging { rpc UpdateMessage(UpdateMessageRequest) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "message" }; } } message UpdateMessageRequest { string message_id = 1; // mapped to the URL Message message = 2; // mapped to the body } The following HTTP JSON to RPC mapping is enabled, where the representation of the JSON in the request body is determined by protos JSON encoding: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })` The special name `*` can be used in the body mapping to define that every field not bound by the path template should be mapped to the request body. This enables the following alternative definition of the update method: service Messaging { rpc UpdateMessage(Message) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "*" }; } } message Message { string message_id = 1; string text = 2; } The following HTTP JSON to RPC mapping is enabled: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")` Note that when using `*` in the body mapping, it is not possible to have HTTP parameters, as all fields not bound by the path end in the body. This makes this option more rarely used in practice when defining REST APIs. The common usage of `*` is in custom methods which don't use the URL at all for transferring data. It is possible to define multiple HTTP methods for one RPC by using the `additional_bindings` option. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/messages/{message_id}" additional_bindings { get: "/v1/users/{user_id}/messages/{message_id}" } }; } } message GetMessageRequest { string message_id = 1; string user_id = 2; } This enables the following two alternative HTTP JSON to RPC mappings: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(message_id: "123456")` `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")` ## Rules for HTTP mapping 1. Leaf request fields (recursive expansion nested messages in the request message) are classified into three categories: - Fields referred by the path template. They are passed via the URL path. - Fields referred by the HttpRule.body. They are passed via the HTTP request body. - All other fields are passed via the URL query parameters, and the parameter name is the field path in the request message. A repeated field can be represented as multiple query parameters under the same name. 2. If HttpRule.body is "*", there is no URL query parameter, all fields are passed via URL path and HTTP request body. 3. If HttpRule.body is omitted, there is no HTTP request body, all fields are passed via URL path and URL query parameters. ### Path template syntax Template = "/" Segments [ Verb ] ; Segments = Segment { "/" Segment } ; Segment = "*" | "**" | LITERAL | Variable ; Variable = "{" FieldPath [ "=" Segments ] "}" ; FieldPath = IDENT { "." IDENT } ; Verb = ":" LITERAL ; The syntax `*` matches a single URL path segment. The syntax `**` matches zero or more URL path segments, which must be the last part of the URL path except the `Verb`. The syntax `Variable` matches part of the URL path as specified by its template. A variable template must not contain other variables. If a variable matches a single path segment, its template may be omitted, e.g. `{var}` is equivalent to `{var=*}`. The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL` contains any reserved character, such characters should be percent-encoded before the matching. If a variable contains exactly one path segment, such as `"{var}"` or `"{var=*}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{var}`. If a variable contains multiple path segments, such as `"{var=foo/*}"` or `"{var=**}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding, except "%2F" and "%2f" are left unchanged. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{+var}`. ## Using gRPC API Service Configuration gRPC API Service Configuration (service config) is a configuration language for configuring a gRPC service to become a user-facing product. The service config is simply the YAML representation of the `google.api.Service` proto message. As an alternative to annotating your proto file, you can configure gRPC transcoding in your service config YAML files. You do this by specifying a `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same effect as the proto annotation. This can be particularly useful if you have a proto that is reused in multiple services. Note that any transcoding specified in the service config will override any matching transcoding configuration in the proto. Example: http: rules: # Selects a gRPC method and applies HttpRule to it. - selector: example.v1.Messaging.GetMessage get: /v1/messages/{message_id}/{sub.subfield} ## Special notes When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON conversion must follow the [proto3 specification](https://developers.google.com/protocol-buffers/docs/proto3#json). While the single segment variable follows the semantics of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String Expansion, the multi segment variable **does not** follow RFC 6570 Section 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion does not expand special characters like `?` and `#`, which would lead to invalid URLs. As the result, gRPC Transcoding uses a custom encoding for multi segment variables. The path variables **must not** refer to any repeated or mapped field, because client libraries are not capable of handling such variable expansion. The path variables **must not** capture the leading "/" character. The reason is that the most common use case "{var}" does not capture the leading "/" character. For consistency, all path variables must share the same behavior. Repeated message fields must not be mapped to URL query parameters, because no client library can support such complicated mapping. If an API needs to use a JSON array for request or response body, it can map the request or response body to a repeated field. However, some gRPC Transcoding implementations may not support this feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HttpRule
	{
		
		/// <summary>
		/// Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalBindings")]
		public HttpRule[] AdditionalBindings { get; set; }
		
		/// <summary>
		/// The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// A custom pattern is used for defining custom HTTP verb.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public CustomHttpPattern Custom { get; set; }
		
		/// <summary>
		/// Maps to HTTP DELETE. Used for deleting a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public string Delete { get; set; }
		
		/// <summary>
		/// Maps to HTTP GET. Used for listing and getting information about resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="get")]
		public string Get { get; set; }
		
		/// <summary>
		/// Maps to HTTP PATCH. Used for updating a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patch")]
		public string Patch { get; set; }
		
		/// <summary>
		/// Maps to HTTP POST. Used for creating a resource or performing an action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post")]
		public string Post { get; set; }
		
		/// <summary>
		/// Maps to HTTP PUT. Used for replacing a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="put")]
		public string Put { get; set; }
		
		/// <summary>
		/// Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The referred field must be present at the top-level of the response message type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseBody")]
		public string ResponseBody { get; set; }
		
		/// <summary>
		/// Selects a method to which this rule applies. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// A description of a label.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelDescriptor
	{
		
		/// <summary>
		/// A human-readable description for the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The label key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The type of data that can be assigned to the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public System.Nullable<LabelDescriptorValueType> ValueType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LabelDescriptorValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOL")]
		BOOL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INT64")]
		INT64 = 2,
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response for the list request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTenancyUnitsResponse
	{
		
		/// <summary>
		/// Pagination token for large results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Tenancy units matching the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenancyUnits")]
		public TenancyUnit[] TenancyUnits { get; set; }
	}
	
	/// <summary>
	/// Representation of a tenancy unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TenancyUnit
	{
		
		/// <summary>
		/// Output only. @OutputOnly Cloud resource name of the consumer of this service. For example 'projects/123456'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumer")]
		public string Consumer { get; set; }
		
		/// <summary>
		/// Output only. @OutputOnly The time this tenancy unit was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Globally unique identifier of this tenancy unit "services/{service}/{collection id}/{resource id}/tenancyUnits/{unit}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Google Cloud API name of the managed service owning this tenancy unit. For example 'serviceconsumermanagement.googleapis.com'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// Resources constituting the tenancy unit. There can be at most 512 tenant resources in a tenancy unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantResources")]
		public TenantResource[] TenantResources { get; set; }
	}
	
	/// <summary>
	/// Resource constituting the TenancyUnit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TenantResource
	{
		
		/// <summary>
		/// Output only. @OutputOnly Identifier of the tenant resource. For cloud projects, it is in the form 'projects/{number}'. For example 'projects/123456'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Status of tenant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TenantResourceStatus> Status { get; set; }
		
		/// <summary>
		/// Unique per single tenancy unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TenantResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_UNSPECIFIED")]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_CREATE")]
		PENDING_CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_DELETE")]
		PENDING_DELETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 5,
	}
	
	/// <summary>
	/// A description of a log type. Example in YAML format: - name: library.googleapis.com/activity_history description: The history of borrowing and returning library items. display_name: Activity labels: - key: /customer_id description: Identifier of a library customer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogDescriptor
	{
		
		/// <summary>
		/// A human-readable description of this log. This information appears in the documentation and can contain details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The human-readable name for this log. This information appears on the user interface and should be concise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The set of labels that are available to describe a specific log entry. Runtime requests that contain labels not specified here are considered invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public LabelDescriptor[] Labels { get; set; }
		
		/// <summary>
		/// The name of the log. It must be less than 512 characters long and can include the following characters: upper- and lower-case alphanumeric characters [A-Za-z0-9], and punctuation characters including slash, underscore, hyphen, period [/_-.].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Logging
	{
		
		/// <summary>
		/// Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerDestinations")]
		public LoggingDestination[] ConsumerDestinations { get; set; }
		
		/// <summary>
		/// Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerDestinations")]
		public LoggingDestination[] ProducerDestinations { get; set; }
	}
	
	/// <summary>
	/// Configuration of a specific logging destination (the producer project or the consumer project).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingDestination
	{
		
		/// <summary>
		/// Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by "/".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public string[] Logs { get; set; }
		
		/// <summary>
		/// The monitored resource type. The type must be defined in the Service.monitored_resources section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoredResource")]
		public string MonitoredResource { get; set; }
	}
	
	/// <summary>
	/// Describes settings to use when generating API methods that use the long-running operation pattern. All default values below are from those used in the client library generators (e.g. [Java](https://github.com/googleapis/gapic-generator-java/blob/04c2faa191a9b5a10b92392fe8482279c4404803/src/main/java/com/google/api/generator/gapic/composer/common/RetrySettingsComposer.java)).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LongRunning
	{
		
		/// <summary>
		/// Initial delay after which the first poll request will be made. Default value: 5 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialPollDelay")]
		public string InitialPollDelay { get; set; }
		
		/// <summary>
		/// Maximum time between two subsequent poll requests. Default value: 45 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPollDelay")]
		public string MaxPollDelay { get; set; }
		
		/// <summary>
		/// Multiplier to gradually increase delay between subsequent polls until it reaches max_poll_delay. Default value: 1.5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pollDelayMultiplier")]
		public System.Nullable<System.Single> PollDelayMultiplier { get; set; }
		
		/// <summary>
		/// Total polling timeout. Default value: 5 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPollTimeout")]
		public string TotalPollTimeout { get; set; }
	}
	
	/// <summary>
	/// Describes the generator configuration for a method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MethodSettings
	{
		
		/// <summary>
		/// List of top-level fields of the request message, that should be automatically populated by the client libraries based on their (google.api.field_info).format. Currently supported format: UUID4. Example of a YAML configuration: publishing: method_settings: - selector: google.example.v1.ExampleService.CreateExample auto_populated_fields: - request_id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoPopulatedFields")]
		public string[] AutoPopulatedFields { get; set; }
		
		/// <summary>
		/// Describes settings to use when generating API methods that use the long-running operation pattern. All default values below are from those used in the client library generators (e.g. [Java](https://github.com/googleapis/gapic-generator-java/blob/04c2faa191a9b5a10b92392fe8482279c4404803/src/main/java/com/google/api/generator/gapic/composer/common/RetrySettingsComposer.java)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longRunning")]
		public LongRunning LongRunning { get; set; }
		
		/// <summary>
		/// The fully qualified name of the method, for which the options below apply. This is used to find the method to apply the options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDescriptor
	{
		
		/// <summary>
		/// A detailed description of the metric, which can be used in documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public LabelDescriptor[] Labels { get; set; }
		
		/// <summary>
		/// Optional. The launch stage of the metric definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchStage")]
		public ClientLibrarySettingsLaunchStage LaunchStage { get; set; }
		
		/// <summary>
		/// Additional annotations that can be used to guide the usage of a metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public MetricDescriptorMetadata Metadata { get; set; }
		
		/// <summary>
		/// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricKind")]
		public System.Nullable<MetricDescriptorMetricKind> MetricKind { get; set; }
		
		/// <summary>
		/// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoredResourceTypes")]
		public string[] MonitoredResourceTypes { get; set; }
		
		/// <summary>
		/// The resource name of the metric descriptor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public System.Nullable<MetricDescriptorValueType> ValueType { get; set; }
	}
	
	/// <summary>
	/// Additional annotations that can be used to guide the usage of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDescriptorMetadata
	{
		
		/// <summary>
		/// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingestDelay")]
		public string IngestDelay { get; set; }
		
		/// <summary>
		/// Deprecated. Must use the MetricDescriptor.launch_stage instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchStage")]
		public ClientLibrarySettingsLaunchStage LaunchStage { get; set; }
		
		/// <summary>
		/// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="samplePeriod")]
		public string SamplePeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricDescriptorMetricKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METRIC_KIND_UNSPECIFIED")]
		METRIC_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GAUGE")]
		GAUGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELTA")]
		DELTA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUMULATIVE")]
		CUMULATIVE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricDescriptorValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE_TYPE_UNSPECIFIED")]
		VALUE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOL")]
		BOOL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INT64")]
		INT64 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOUBLE")]
		DOUBLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISTRIBUTION")]
		DISTRIBUTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONEY")]
		MONEY = 6,
	}
	
	/// <summary>
	/// Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricRule
	{
		
		/// <summary>
		/// Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricCosts")]
		public System.Collections.Generic.Dictionary<string, string> MetricCosts { get; set; }
		
		/// <summary>
		/// Selects the methods to which this rule applies. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `"gce_instance"` and specifies the use of the labels `"instance_id"` and `"zone"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoredResourceDescriptor
	{
		
		/// <summary>
		/// Optional. A detailed description of the monitored resource type that might be used in documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `"Google Cloud SQL Database"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `"database_id"` and `"zone"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public LabelDescriptor[] Labels { get; set; }
		
		/// <summary>
		/// Optional. The launch stage of the monitored resource definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchStage")]
		public ClientLibrarySettingsLaunchStage LaunchStage { get; set; }
		
		/// <summary>
		/// Optional. The resource name of the monitored resource descriptor: `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `"monitoredResourceDescriptors/{type}"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The monitored resource type. For example, the type `"cloudsql_database"` represents databases in Google Cloud SQL. For a list of types, see [Monitored resource types](https://cloud.google.com/monitoring/api/resources) and [Logging resource types](https://cloud.google.com/logging/docs/api/v2/resource-list).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The `library.googleapis.com/book/returned_count` metric is sent to both producer and consumer projects, whereas the `library.googleapis.com/book/num_overdue` metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: "Library Branch" description: "A branch of a library." launch_stage: GA labels: - key: resource_container description: "The Cloud container (ie. project id) for the Branch." - key: location description: "The location of the library branch." - key: branch_id description: "The id of the branch." metrics: - name: library.googleapis.com/book/returned_count display_name: "Books Returned" description: "The count of books that have been returned." launch_stage: GA metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." - name: library.googleapis.com/book/num_overdue display_name: "Books Overdue" description: "The current number of overdue books." launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Monitoring
	{
		
		/// <summary>
		/// Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerDestinations")]
		public MonitoringDestination[] ConsumerDestinations { get; set; }
		
		/// <summary>
		/// Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerDestinations")]
		public MonitoringDestination[] ProducerDestinations { get; set; }
	}
	
	/// <summary>
	/// Configuration of a specific monitoring destination (the producer project or the consumer project).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoringDestination
	{
		
		/// <summary>
		/// Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// The monitored resource type. The type must be defined in Service.monitored_resources section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoredResource")]
		public string MonitoredResource { get; set; }
	}
	
	/// <summary>
	/// This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Publishing
	{
		
		/// <summary>
		/// Used as a tracking tag when collecting data about the APIs developer relations artifacts like docs, packages delivered to package managers, etc. Example: "speech".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiShortName")]
		public string ApiShortName { get; set; }
		
		/// <summary>
		/// GitHub teams to be added to CODEOWNERS in the directory in GitHub containing source code for the client libraries for this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeownerGithubTeams")]
		public string[] CodeownerGithubTeams { get; set; }
		
		/// <summary>
		/// A prefix used in sample code when demarking regions to be included in documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docTagPrefix")]
		public string DocTagPrefix { get; set; }
		
		/// <summary>
		/// Link to product home page. Example: https://cloud.google.com/asset-inventory/docs/overview
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentationUri")]
		public string DocumentationUri { get; set; }
		
		/// <summary>
		/// GitHub label to apply to issues and pull requests opened for this API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubLabel")]
		public string GithubLabel { get; set; }
		
		/// <summary>
		/// Client library settings. If the same version string appears multiple times in this list, then the last one wins. Settings from earlier settings with the same version string are discarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="librarySettings")]
		public ClientLibrarySettings[] LibrarySettings { get; set; }
		
		/// <summary>
		/// A list of API method settings, e.g. the behavior for methods that use the long-running operation pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodSettings")]
		public MethodSettings[] MethodSettings { get; set; }
		
		/// <summary>
		/// Link to a *public* URI where users can report issues. Example: https://issuetracker.google.com/issues/new?component=190865&template=1161103
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newIssueUri")]
		public string NewIssueUri { get; set; }
		
		/// <summary>
		/// For whom the client library is being published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public System.Nullable<PublishingOrganization> Organization { get; set; }
		
		/// <summary>
		/// Optional link to proto reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rpc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protoReferenceDocumentationUri")]
		public string ProtoReferenceDocumentationUri { get; set; }
		
		/// <summary>
		/// Optional link to REST reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restReferenceDocumentationUri")]
		public string RestReferenceDocumentationUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PublishingOrganization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED")]
		CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD")]
		CLOUD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADS")]
		ADS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHOTOS")]
		PHOTOS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STREET_VIEW")]
		STREET_VIEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHOPPING")]
		SHOPPING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEO")]
		GEO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERATIVE_AI")]
		GENERATIVE_AI = 7,
	}
	
	/// <summary>
	/// Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 (The metric rules bind all methods to the read_calls metric, except for the UpdateBook and DeleteBook methods. These two methods are mapped to the write_calls metric, with the UpdateBook method consuming at twice rate as the DeleteBook method.) metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Quota
	{
		
		/// <summary>
		/// List of QuotaLimit definitions for the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public QuotaLimit[] Limits { get; set; }
		
		/// <summary>
		/// List of MetricRule definitions, each one mapping a selected method to one or more metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricRules")]
		public MetricRule[] MetricRules { get; set; }
	}
	
	/// <summary>
	/// `QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuotaLimit
	{
		
		/// <summary>
		/// Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLimit")]
		public string DefaultLimit { get; set; }
		
		/// <summary>
		/// Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Duration of this limit in textual notation. Must be "100s" or "1d". Used by group-based quotas only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration "1d", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeTier")]
		public string FreeTier { get; set; }
		
		/// <summary>
		/// Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLimit")]
		public string MaxLimit { get; set; }
		
		/// <summary>
		/// The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		/// <summary>
		/// Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * "1/min/{project}" for quota per minute per project. Note: the order of unit components is insignificant. The "1" at the beginning is required to follow the metric unit syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		/// <summary>
		/// Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, string> Values { get; set; }
	}
	
	/// <summary>
	/// Request message to remove a tenant project resource from the tenancy unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveTenantProjectRequest
	{
		
		/// <summary>
		/// Required. Tag of the resource within the tenancy unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Response for the search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchTenancyUnitsResponse
	{
		
		/// <summary>
		/// Pagination token for large results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Tenancy Units matching the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenancyUnits")]
		public TenancyUnit[] TenancyUnits { get; set; }
	}
	
	/// <summary>
	/// `Service` is the root object of Google API service configuration (service config). It describes the basic information about a logical service, such as the service name and the user-facing title, and delegates other aspects to sub-sections. Each sub-section is either a proto message or a repeated proto message that configures a specific aspect, such as auth. For more information, see each proto message definition. Example: type: google.api.Service name: calendar.googleapis.com title: Google Calendar API apis: - name: google.calendar.v3.Calendar visibility: rules: - selector: "google.calendar.v3.*" restriction: PREVIEW backend: rules: - selector: "google.calendar.v3.*" address: calendar.example.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Service
	{
		
		/// <summary>
		/// A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apis")]
		public Api[] Apis { get; set; }
		
		/// <summary>
		/// `Authentication` defines the authentication configuration for API methods provided by an API service. Example: name: calendar.googleapis.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth - selector: google.calendar.Delegate oauth: canonical_scopes: https://www.googleapis.com/auth/calendar.read
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public Authentication Authentication { get; set; }
		
		/// <summary>
		/// `Backend` defines the backend configuration for a service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backend")]
		public Backend Backend { get; set; }
		
		/// <summary>
		/// Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public Billing Billing { get; set; }
		
		/// <summary>
		/// Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configVersion")]
		public System.Nullable<System.UInt32> ConfigVersion { get; set; }
		
		/// <summary>
		/// `Context` defines which contexts an API requests. Example: context: rules: - selector: "*" requested: - google.rpc.context.ProjectContext - google.rpc.context.OriginContext The above specifies that all methods in the API request `google.rpc.context.ProjectContext` and `google.rpc.context.OriginContext`. Available context types are defined in package `google.rpc.context`. This also provides mechanism to allowlist any protobuf message extension that can be sent in grpc metadata using “x-goog-ext--bin” and “x-goog-ext--jspb” format. For example, list any service specific protobuf types that can appear in grpc metadata as follows in your yaml file: Example: context: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allowed_request_extensions: - google.foo.v1.NewExtension allowed_response_extensions: - google.foo.v1.NewExtension You can also specify extension ID instead of fully qualified extension name here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public Context Context { get; set; }
		
		/// <summary>
		/// Selects and configures the service controller used by the service. Example: control: environment: servicecontrol.googleapis.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="control")]
		public Control Control { get; set; }
		
		/// <summary>
		/// Customize service error responses. For example, list any service specific protobuf types that can appear in error detail lists of error responses. Example: custom_error: types: - google.foo.v1.CustomError - google.foo.v1.AnotherError
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customError")]
		public CustomError CustomError { get; set; }
		
		/// <summary>
		/// `Documentation` provides the information for describing a service. Example: documentation: summary: > The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages: - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: > ... - selector: google.calendar.Calendar.Put description: > ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public Documentation Documentation { get; set; }
		
		/// <summary>
		/// Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpoints")]
		public Endpoint[] Endpoints { get; set; }
		
		/// <summary>
		/// A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enums")]
		public Enum[] Enums { get; set; }
		
		/// <summary>
		/// Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http")]
		public Http Http { get; set; }
		
		/// <summary>
		/// A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public Logging Logging { get; set; }
		
		/// <summary>
		/// Defines the logs used by this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public LogDescriptor[] Logs { get; set; }
		
		/// <summary>
		/// Defines the metrics used by this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public MetricDescriptor[] Metrics { get; set; }
		
		/// <summary>
		/// Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoredResources")]
		public MonitoredResourceDescriptor[] MonitoredResources { get; set; }
		
		/// <summary>
		/// Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The `library.googleapis.com/book/returned_count` metric is sent to both producer and consumer projects, whereas the `library.googleapis.com/book/num_overdue` metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: "Library Branch" description: "A branch of a library." launch_stage: GA labels: - key: resource_container description: "The Cloud container (ie. project id) for the Branch." - key: location description: "The location of the library branch." - key: branch_id description: "The id of the branch." metrics: - name: library.googleapis.com/book/returned_count display_name: "Books Returned" description: "The count of books that have been returned." launch_stage: GA metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." - name: library.googleapis.com/book/num_overdue display_name: "Books Overdue" description: "The current number of overdue books." launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoring")]
		public Monitoring Monitoring { get; set; }
		
		/// <summary>
		/// The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Google project that owns this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerProjectId")]
		public string ProducerProjectId { get; set; }
		
		/// <summary>
		/// This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishing")]
		public Publishing Publishing { get; set; }
		
		/// <summary>
		/// Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 (The metric rules bind all methods to the read_calls metric, except for the UpdateBook and DeleteBook methods. These two methods are mapped to the write_calls metric, with the UpdateBook method consuming at twice rate as the DeleteBook method.) metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public Quota Quota { get; set; }
		
		/// <summary>
		/// Source information used to create a Service Config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceInfo")]
		public SourceInfo SourceInfo { get; set; }
		
		/// <summary>
		/// ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemParameters")]
		public SystemParameters SystemParameters { get; set; }
		
		/// <summary>
		/// A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemTypes")]
		public Type[] SystemTypes { get; set; }
		
		/// <summary>
		/// The product title for this service, it is the name displayed in Google Cloud Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public Type[] Types { get; set; }
		
		/// <summary>
		/// Configuration controlling usage of a service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public Usage Usage { get; set; }
	}
	
	/// <summary>
	/// Source information used to create a Service Config
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceInfo
	{
		
		/// <summary>
		/// All files used during config generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFiles")]
		public string[] SourceFiles { get; set; }
	}
	
	/// <summary>
	/// ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemParameters
	{
		
		/// <summary>
		/// Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: "*" parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: "/ListShelves" parameters: - name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public SystemParameterRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Define a system parameter rule mapping system parameter definitions to methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemParameterRule
	{
		
		/// <summary>
		/// Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SystemParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
	}
	
	/// <summary>
	/// Define a parameter's name and location. The parameter may be passed as either an HTTP header or a URL query parameter, and if both are passed the behavior is implementation-dependent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemParameter
	{
		
		/// <summary>
		/// Define the HTTP header name to use for the parameter. It is case insensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpHeader")]
		public string HttpHeader { get; set; }
		
		/// <summary>
		/// Define the name of the parameter, such as "api_key" . It is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Define the URL query parameter name to use for the parameter. It is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlQueryParameter")]
		public string UrlQueryParameter { get; set; }
	}
	
	/// <summary>
	/// A protocol buffer message type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Type
	{
		
		/// <summary>
		/// The source edition string, only valid when syntax is SYNTAX_EDITIONS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// The list of fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Field[] Fields { get; set; }
		
		/// <summary>
		/// The fully qualified message name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The list of types appearing in `oneof` definitions in this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneofs")]
		public string[] Oneofs { get; set; }
		
		/// <summary>
		/// The protocol buffer options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
		
		/// <summary>
		/// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceContext")]
		public SourceContext SourceContext { get; set; }
		
		/// <summary>
		/// The source syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntax")]
		public MethodSyntax Syntax { get; set; }
	}
	
	/// <summary>
	/// Configuration controlling usage of a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Usage
	{
		
		/// <summary>
		/// The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerNotificationChannel")]
		public string ProducerNotificationChannel { get; set; }
		
		/// <summary>
		/// Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirements")]
		public string[] Requirements { get; set; }
		
		/// <summary>
		/// A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public UsageRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: "*" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allow_unregistered_calls: true
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageRule
	{
		
		/// <summary>
		/// If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowUnregisteredCalls")]
		public System.Nullable<System.Boolean> AllowUnregisteredCalls { get; set; }
		
		/// <summary>
		/// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public string Selector { get; set; }
		
		/// <summary>
		/// If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipServiceControl")]
		public System.Nullable<System.Boolean> SkipServiceControl { get; set; }
	}
	
	/// <summary>
	/// Request message to undelete tenant project resource previously deleted from the tenancy unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UndeleteTenantProjectRequest
	{
		
		/// <summary>
		/// Required. Tag of the resource within the tenancy unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Response message for the `AddVisibilityLabels` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1AddVisibilityLabelsResponse
	{
		
		/// <summary>
		/// The updated set of visibility labels for this consumer on this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
	}
	
	/// <summary>
	/// Response message for BatchCreateProducerOverrides
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1BatchCreateProducerOverridesResponse
	{
		
		/// <summary>
		/// The overrides that were created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public V1Beta1QuotaOverride[] Overrides { get; set; }
	}
	
	/// <summary>
	/// A quota override
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1QuotaOverride
	{
		
		/// <summary>
		/// The resource name of the ancestor that requested the override. For example: "organizations/12345" or "folders/67890". Used by admin overrides only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminOverrideAncestor")]
		public string AdminOverrideAncestor { get; set; }
		
		/// <summary>
		///  If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit 1/{project}/{region} could contain an entry with the key "region" and the value "us-east-1"; the override is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. * "project" is not a valid key; the project is already specified in the parent resource name. * "user" is not a valid key; the API does not support quota overrides that apply only to a specific user. * If "region" appears as a key, its value must be a valid Cloud region. * If "zone" appears as a key, its value must be a valid Cloud zone. * If any valid key other than "region" or "zone" appears in the map, then all valid keys other than "region" or "zone" must also appear in the map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public System.Collections.Generic.Dictionary<string, string> Dimensions { get; set; }
		
		/// <summary>
		/// The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		/// <summary>
		/// The resource name of the producer override. An example name would be: `services/compute.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerOverrides/4a3f2c1d`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideValue")]
		public string OverrideValue { get; set; }
		
		/// <summary>
		/// The limit unit of the limit to which this override applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Response message for the `DisableConsumer` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1DisableConsumerResponse
	{
	}
	
	/// <summary>
	/// Response message for the `EnableConsumer` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1EnableConsumerResponse
	{
	}
	
	/// <summary>
	/// Response message for the `GenerateServiceIdentity` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1GenerateServiceIdentityResponse
	{
		
		/// <summary>
		/// A service identity in the Identity and Access Management API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public V1Beta1ServiceIdentity Identity { get; set; }
	}
	
	/// <summary>
	/// A service identity in the Identity and Access Management API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1ServiceIdentity
	{
		
		/// <summary>
		/// The email address of the service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// P4 service identity resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/serviceIdentities/default`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The P4 service identity configuration tag. This must be defined in activation_grants. If not specified when creating the account, the tag is set to "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The unique and stable id of the service identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	/// <summary>
	/// Response message for ImportProducerOverrides
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1ImportProducerOverridesResponse
	{
		
		/// <summary>
		/// The overrides that were created from the imported data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public V1Beta1QuotaOverride[] Overrides { get; set; }
	}
	
	/// <summary>
	/// Response message for ImportProducerQuotaPolicies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1ImportProducerQuotaPoliciesResponse
	{
		
		/// <summary>
		/// The policies that were created from the imported data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public V1Beta1ProducerQuotaPolicy[] Policies { get; set; }
	}
	
	/// <summary>
	/// Quota policy created by service producer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1ProducerQuotaPolicy
	{
		
		/// <summary>
		/// The cloud resource container at which the quota policy is created. The format is {container_type}/{container_number}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public string Container { get; set; }
		
		/// <summary>
		///  If this map is nonempty, then this policy applies only to specific values for dimensions defined in the limit unit. For example, a policy on a limit with the unit 1/{project}/{region} could contain an entry with the key "region" and the value "us-east-1"; the policy is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in {brackets} in the unit (besides {project} or {user}) is a defined key. * "project" is not a valid key; the project is already specified in the parent resource name. * "user" is not a valid key; the API does not support quota polcies that apply only to a specific user. * If "region" appears as a key, its value must be a valid Cloud region. * If "zone" appears as a key, its value must be a valid Cloud zone. * If any valid key other than "region" or "zone" appears in the map, then all valid keys other than "region" or "zone" must also appear in the map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public System.Collections.Generic.Dictionary<string, string> Dimensions { get; set; }
		
		/// <summary>
		/// The name of the metric to which this policy applies. An example name would be: `compute.googleapis.com/cpus`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public string Metric { get; set; }
		
		/// <summary>
		/// The resource name of the producer policy. An example name would be: `services/compute.googleapis.com/organizations/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/producerQuotaPolicies/4a3f2c1d`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The quota policy value. Can be any nonnegative integer, or -1 (unlimited quota).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyValue")]
		public string PolicyValue { get; set; }
		
		/// <summary>
		/// The limit unit of the limit to which this policy applies. An example unit would be: `1/{project}/{region}` Note that `{project}` and `{region}` are not placeholders in this example; the literal characters `{` and `}` occur in the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Response message for the `RefreshConsumer` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1Beta1RefreshConsumerResponse
	{
	}
	
	/// <summary>
	/// A default identity in the Identity and Access Management API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1DefaultIdentity
	{
		
		/// <summary>
		/// The email address of the default identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Default identity resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/defaultIdentity`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Default Identity tag. If specified when creating the account, the tag must be present in activation_grants. If not specified when creating the account, the tag is set to the tag specified in activation_grants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The unique and stable id of the default identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	/// <summary>
	/// Response message for the `DisableConsumer` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1DisableConsumerResponse
	{
	}
	
	/// <summary>
	/// Response message for the `EnableConsumer` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1EnableConsumerResponse
	{
	}
	
	/// <summary>
	/// Response message for the `GenerateDefaultIdentity` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1GenerateDefaultIdentityResponse
	{
		
		/// <summary>
		/// Status of the role attachment. Under development (go/si-attach-role), currently always return ATTACH_STATUS_UNSPECIFIED)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachStatus")]
		public System.Nullable<V1GenerateDefaultIdentityResponseAttachStatus> AttachStatus { get; set; }
		
		/// <summary>
		/// A default identity in the Identity and Access Management API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public V1DefaultIdentity Identity { get; set; }
		
		/// <summary>
		/// Role attached to consumer project. Empty if not attached in this request. (Under development, currently always return empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum V1GenerateDefaultIdentityResponseAttachStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACH_STATUS_UNSPECIFIED")]
		ATTACH_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACHED")]
		ATTACHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACH_SKIPPED")]
		ATTACH_SKIPPED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREVIOUSLY_ATTACHED")]
		PREVIOUSLY_ATTACHED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACH_DENIED_BY_ORG_POLICY")]
		ATTACH_DENIED_BY_ORG_POLICY = 4,
	}
	
	/// <summary>
	/// Response message for the `GenerateServiceAccount` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1GenerateServiceAccountResponse
	{
		
		/// <summary>
		/// A service account in the Identity and Access Management API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public V1ServiceAccount Account { get; set; }
	}
	
	/// <summary>
	/// A service account in the Identity and Access Management API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1ServiceAccount
	{
		
		/// <summary>
		/// The email address of the service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Deprecated. See b/136209818.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iamAccountName")]
		public string IamAccountName { get; set; }
		
		/// <summary>
		/// P4 SA resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/serviceAccounts/default`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The P4 SA configuration tag. This must be defined in activation_grants. If not specified when creating the account, the tag is set to "default".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The unique and stable id of the service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
	}
	
	/// <summary>
	/// Response message for the `RefreshConsumer` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1RefreshConsumerResponse
	{
	}
	
	/// <summary>
	/// Response message for the `RemoveVisibilityLabels` method. This response message is assigned to the `response` field of the returned Operation when that operation is done.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class V1RemoveVisibilityLabelsResponse
	{
		
		/// <summary>
		/// The updated set of visibility labels for this consumer on this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete a tenancy unit. Before you delete the tenancy unit, there should be no tenant resources in it that aren't in a DELETED state. Operation.
		/// Serviceconsumermanagement_services_tenancyUnits_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the tenancy unit to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Serviceconsumermanagement_services_tenancyUnits_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Serviceconsumermanagement_operations_list v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Serviceconsumermanagement_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apply a configuration to an existing tenant project. This project must exist in an active state and have the original owner account. The caller must have permission to add a project to the given tenancy unit. The configuration is applied, but any existing settings on the project aren't modified. Specified policy bindings are applied. Existing bindings aren't modified. Specified services are activated. No service is deactivated. If specified, new billing configuration is applied. Omit a billing configuration to keep the existing one. A service account in the project is created if previously non existed. Specified labels will be appended to tenant project, note that the value of existing label key will be updated if the same label key is requested. The specified folder is ignored, as moving a tenant project to a different folder isn't supported. The operation fails if any of the steps fail, but no rollback of already applied configuration changes is attempted. Operation.
		/// Serviceconsumermanagement_services_tenancyUnits_applyProjectConfig v1/{name}:applyProjectConfig
		/// </summary>
		/// <param name="name">Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Serviceconsumermanagement_services_tenancyUnits_applyProjectConfigAsync(string name, ApplyTenantProjectConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":applyProjectConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attach an existing project to the tenancy unit as a new tenant resource. The project could either be the tenant project reserved by calling `AddTenantProject` under a tenancy unit of a service producer's project of a managed service, or from a separate project. The caller is checked against a set of permissions as if calling `AddTenantProject` on the same service consumer. To trigger the attachment, the targeted tenant project must be in a folder. Make sure the ServiceConsumerManagement service account is the owner of that project. These two requirements are already met if the project is reserved by calling `AddTenantProject`. Operation.
		/// Serviceconsumermanagement_services_tenancyUnits_attachProject v1/{name}:attachProject
		/// </summary>
		/// <param name="name">Required. Name of the tenancy unit that the project will be attached to. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Serviceconsumermanagement_services_tenancyUnits_attachProjectAsync(string name, AttachTenantProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":attachProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Serviceconsumermanagement_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Serviceconsumermanagement_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified project resource identified by a tenant resource tag. The mothod removes a project lien with a 'TenantManager' origin if that was added. It will then attempt to delete the project. If that operation fails, this method also fails. After the project has been deleted, the tenant resource state is set to DELETED. To permanently remove resource metadata, call the `RemoveTenantProject` method. New resources with the same tag can't be added if there are existing resources in a DELETED state. Operation.
		/// Serviceconsumermanagement_services_tenancyUnits_deleteProject v1/{name}:deleteProject
		/// </summary>
		/// <param name="name">Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Serviceconsumermanagement_services_tenancyUnits_deleteProjectAsync(string name, DeleteTenantProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":deleteProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified project resource identified by a tenant resource tag. The method removes the project lien with 'TenantManager' origin if that was added. It then attempts to delete the project. If that operation fails, this method also fails. Calls to remove already removed or non-existent tenant project succeed. After the project has been deleted, or if was already in a DELETED state, resource metadata is permanently removed from the tenancy unit. Operation.
		/// Serviceconsumermanagement_services_tenancyUnits_removeProject v1/{name}:removeProject
		/// </summary>
		/// <param name="name">Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Serviceconsumermanagement_services_tenancyUnits_removeProjectAsync(string name, RemoveTenantProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":removeProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to undelete a previously deleted tenant project. The project must be in a DELETED state. There are no guarantees that an undeleted project will be in a fully restored and functional state. Call the `ApplyTenantProjectConfig` method to update its configuration and then validate all managed service resources. Operation.
		/// Serviceconsumermanagement_services_tenancyUnits_undeleteProject v1/{name}:undeleteProject
		/// </summary>
		/// <param name="name">Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Serviceconsumermanagement_services_tenancyUnits_undeleteProjectAsync(string name, UndeleteTenantProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":undeleteProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find the tenancy unit for a managed service and service consumer. This method shouldn't be used in a service producer's runtime path, for example to find the tenant project number when creating VMs. Service producers must persist the tenant project's information after the project is created.
		/// Serviceconsumermanagement_services_tenancyUnits_list v1/{parent}/tenancyUnits
		/// </summary>
		/// <param name="parent">Required. Managed service and service consumer. Required. services/{service}/{collection id}/{resource id} {collection id} is the cloud resource collection type representing the service consumer, for example 'projects', or 'organizations'. {resource id} is the consumer numeric id, such as project number: '123456'. {service} the name of a service, such as 'service.googleapis.com'.</param>
		/// <param name="filter">Optional. Filter expression over tenancy resources field. Optional.</param>
		/// <param name="pageSize">Optional. The maximum number of results returned by this request.</param>
		/// <param name="pageToken">Optional. The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTenancyUnitsResponse> Serviceconsumermanagement_services_tenancyUnits_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tenancyUnits&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTenancyUnitsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a tenancy unit with no tenant resources. If tenancy unit already exists, it will be returned, however, in this case, returned TenancyUnit does not have tenant_resources field set and ListTenancyUnits has to be used to get a complete TenancyUnit with all fields populated.
		/// Serviceconsumermanagement_services_tenancyUnits_create v1/{parent}/tenancyUnits
		/// </summary>
		/// <param name="parent">Required. services/{service}/{collection id}/{resource id} {collection id} is the cloud resource collection type representing the service consumer, for example 'projects', or 'organizations'. {resource id} is the consumer numeric id, such as project number: '123456'. {service} the name of a managed service, such as 'service.googleapis.com'. Enables service binding using the new tenancy unit.</param>
		/// <returns>Successful response</returns>
		public async Task<TenancyUnit> Serviceconsumermanagement_services_tenancyUnits_createAsync(string parent, CreateTenancyUnitRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/tenancyUnits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TenancyUnit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a new tenant project to the tenancy unit. There can be a maximum of 1024 tenant projects in a tenancy unit. If there are previously failed `AddTenantProject` calls, you might need to call `RemoveTenantProject` first to resolve them before you can make another call to `AddTenantProject` with the same tag. Operation.
		/// Serviceconsumermanagement_services_tenancyUnits_addProject v1/{parent}:addProject
		/// </summary>
		/// <param name="parent">Required. Name of the tenancy unit. Such as 'services/service.googleapis.com/projects/12345/tenancyUnits/abcd'.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Serviceconsumermanagement_services_tenancyUnits_addProjectAsync(string parent, AddTenantProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":addProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Search tenancy units for a managed service.
		/// Serviceconsumermanagement_services_search v1/{parent}:search
		/// </summary>
		/// <param name="parent">Required. Service for which search is performed. services/{service} {service} the name of a service, for example 'service.googleapis.com'.</param>
		/// <param name="pageSize">Optional. The maximum number of results returned by this request. Currently, the default maximum is set to 1000. If `page_size` isn't provided or the size provided is a number larger than 1000, it's automatically set to 1000.</param>
		/// <param name="pageToken">Optional. The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of `nextPageToken` from the previous response.</param>
		/// <param name="query">Optional. Set a query `{expression}` for querying tenancy units. Your `{expression}` must be in the format: `field_name=literal_string`. The `field_name` is the name of the field you want to compare. Supported fields are `tenant_resources.tag` and `tenant_resources.resource`. For example, to search tenancy units that contain at least one tenant resource with a given tag 'xyz', use the query `tenant_resources.tag=xyz`. To search tenancy units that contain at least one tenant resource with a given resource name 'projects/123456', use the query `tenant_resources.resource=projects/123456`. Multiple expressions can be joined with `AND`s. Tenancy units must match all expressions to be included in the result set. For example, `tenant_resources.tag=xyz AND tenant_resources.resource=projects/123456`</param>
		/// <returns>Successful response</returns>
		public async Task<SearchTenancyUnitsResponse> Serviceconsumermanagement_services_searchAsync(string parent, int pageSize, string pageToken, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":search&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchTenancyUnitsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
