//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A shell command was issued over ADB via “adb shell command”.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdbShellCommandEvent
	{
		
		/// <summary>
		/// Shell command that was issued over ADB via "adb shell command". Redacted to empty string on organization-owned managed profile devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shellCmd")]
		public string ShellCmd { get; set; }
	}
	
	/// <summary>
	/// An ADB interactive shell was opened via “adb shell”. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdbShellInteractiveEvent
	{
	}
	
	/// <summary>
	/// Security policies set to secure values by default. To maintain the security posture of a device, we don't recommend overriding any of the default values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdvancedSecurityOverrides
	{
		
		/// <summary>
		/// Controls Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC). Enabling Common Criteria Mode increases certain security components on a device, including AES-GCM encryption of Bluetooth Long Term Keys, and Wi-Fi configuration stores.Warning: Common Criteria Mode enforces a strict security model typically only required for IT products used in national security systems and other highly sensitive organizations. Standard device use may be affected. Only enabled if required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonCriteriaMode")]
		public System.Nullable<AdvancedSecurityOverridesCommonCriteriaMode> CommonCriteriaMode { get; set; }
		
		/// <summary>
		/// Controls access to developer settings: developer options and safe boot. Replaces safeBootDisabled (deprecated) and debuggingFeaturesAllowed (deprecated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerSettings")]
		public System.Nullable<AdvancedSecurityOverridesDeveloperSettings> DeveloperSettings { get; set; }
		
		/// <summary>
		/// Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced. Replaces ensureVerifyAppsEnabled (deprecated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googlePlayProtectVerifyApps")]
		public System.Nullable<AdvancedSecurityOverridesGooglePlayProtectVerifyApps> GooglePlayProtectVerifyApps { get; set; }
		
		/// <summary>
		/// Personal apps that can read work profile notifications using a NotificationListenerService (https://developer.android.com/reference/android/service/notification/NotificationListenerService). By default, no personal apps (aside from system apps) can read work notifications. Each value in the list must be a package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalAppsThatCanReadWorkNotifications")]
		public string[] PersonalAppsThatCanReadWorkNotifications { get; set; }
		
		/// <summary>
		/// The policy for untrusted apps (apps from unknown sources) enforced on the device. Replaces install_unknown_sources_allowed (deprecated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="untrustedAppsPolicy")]
		public System.Nullable<AdvancedSecurityOverridesUntrustedAppsPolicy> UntrustedAppsPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdvancedSecurityOverridesCommonCriteriaMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON_CRITERIA_MODE_UNSPECIFIED")]
		COMMON_CRITERIA_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON_CRITERIA_MODE_DISABLED")]
		COMMON_CRITERIA_MODE_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON_CRITERIA_MODE_ENABLED")]
		COMMON_CRITERIA_MODE_ENABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdvancedSecurityOverridesDeveloperSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVELOPER_SETTINGS_UNSPECIFIED")]
		DEVELOPER_SETTINGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVELOPER_SETTINGS_DISABLED")]
		DEVELOPER_SETTINGS_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVELOPER_SETTINGS_ALLOWED")]
		DEVELOPER_SETTINGS_ALLOWED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdvancedSecurityOverridesGooglePlayProtectVerifyApps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GOOGLE_PLAY_PROTECT_VERIFY_APPS_UNSPECIFIED")]
		GOOGLE_PLAY_PROTECT_VERIFY_APPS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFY_APPS_ENFORCED")]
		VERIFY_APPS_ENFORCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFY_APPS_USER_CHOICE")]
		VERIFY_APPS_USER_CHOICE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdvancedSecurityOverridesUntrustedAppsPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNTRUSTED_APPS_POLICY_UNSPECIFIED")]
		UNTRUSTED_APPS_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_INSTALL")]
		DISALLOW_INSTALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_INSTALL_IN_PERSONAL_PROFILE_ONLY")]
		ALLOW_INSTALL_IN_PERSONAL_PROFILE_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_INSTALL_DEVICE_WIDE")]
		ALLOW_INSTALL_DEVICE_WIDE = 3,
	}
	
	/// <summary>
	/// Configuration for an always-on VPN connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlwaysOnVpnPackage
	{
		
		/// <summary>
		/// Disallows networking when the VPN is not connected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockdownEnabled")]
		public System.Nullable<System.Boolean> LockdownEnabled { get; set; }
		
		/// <summary>
		/// The package name of the VPN app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	/// <summary>
	/// A compliance rule condition which is satisfied if the Android Framework API level on the device doesn't meet a minimum requirement. There can only be one rule with this type of condition per policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiLevelCondition
	{
		
		/// <summary>
		/// The minimum desired Android Framework API level. If the device doesn't meet the minimum requirement, this condition is satisfied. Must be greater than zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minApiLevel")]
		public System.Nullable<System.Int32> MinApiLevel { get; set; }
	}
	
	/// <summary>
	/// Information about a process. It contains process name, start time, app Uid, app Pid, seinfo tag, hash of the base APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppProcessInfo
	{
		
		/// <summary>
		/// SHA-256 hash of the base APK, in hexadecimal format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apkSha256Hash")]
		public string ApkSha256Hash { get; set; }
		
		/// <summary>
		/// Package names of all packages that are associated with the particular user ID. In most cases, this will be a single package name, the package that has been assigned that user ID. If multiple application share a UID then all packages sharing UID will be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageNames")]
		public string[] PackageNames { get; set; }
		
		/// <summary>
		/// Process ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pid")]
		public System.Nullable<System.Int32> Pid { get; set; }
		
		/// <summary>
		/// Process name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processName")]
		public string ProcessName { get; set; }
		
		/// <summary>
		/// SELinux policy info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seinfo")]
		public string Seinfo { get; set; }
		
		/// <summary>
		/// Process start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// UID of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public System.Nullable<System.Int32> Uid { get; set; }
	}
	
	/// <summary>
	/// An app process was started. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppProcessStartEvent
	{
		
		/// <summary>
		/// Information about a process. It contains process name, start time, app Uid, app Pid, seinfo tag, hash of the base APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processInfo")]
		public AppProcessInfo ProcessInfo { get; set; }
	}
	
	/// <summary>
	/// Id to name association of a app track.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppTrackInfo
	{
		
		/// <summary>
		/// The track name associated with the trackId, set in the Play Console. The name is modifiable from Play Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackAlias")]
		public string TrackAlias { get; set; }
		
		/// <summary>
		/// The unmodifiable unique track identifier, taken from the releaseTrackId in the URL of the Play Console page that displays the app’s track information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackId")]
		public string TrackId { get; set; }
	}
	
	/// <summary>
	/// This represents a single version of the app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppVersion
	{
		
		/// <summary>
		/// If the value is True, it indicates that this version is a production track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="production")]
		public System.Nullable<System.Boolean> Production { get; set; }
		
		/// <summary>
		/// Track identifiers that the app version is published in. This does not include the production track (see production instead).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackIds")]
		public string[] TrackIds { get; set; }
		
		/// <summary>
		/// Unique increasing identifier for the app version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
		
		/// <summary>
		/// The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be "1.4").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionString")]
		public string VersionString { get; set; }
	}
	
	/// <summary>
	/// Information about an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Application
	{
		
		/// <summary>
		/// Whether this app is free, free with in-app purchases, or paid. If the pricing is unspecified, this means the app is not generally available anymore (even though it might still be available to people who own it).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appPricing")]
		public System.Nullable<ApplicationAppPricing> AppPricing { get; set; }
		
		/// <summary>
		/// Application tracks visible to the enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appTracks")]
		public AppTrackInfo[] AppTracks { get; set; }
		
		/// <summary>
		/// Versions currently available for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appVersions")]
		public AppVersion[] AppVersions { get; set; }
		
		/// <summary>
		/// The name of the author of the apps (for example, the app developer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The countries which this app is available in as per ISO 3166-1 alpha-2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableCountries")]
		public string[] AvailableCountries { get; set; }
		
		/// <summary>
		/// The app category (e.g. RACING, SOCIAL, etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The content rating for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentRating")]
		public System.Nullable<ApplicationContentRating> ContentRating { get; set; }
		
		/// <summary>
		/// The localized promotional description, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// How and to whom the package is made available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionChannel")]
		public System.Nullable<ApplicationDistributionChannel> DistributionChannel { get; set; }
		
		/// <summary>
		/// Noteworthy features (if any) of this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public string[] Features { get; set; }
		
		/// <summary>
		/// Full app description, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullDescription")]
		public string FullDescription { get; set; }
		
		/// <summary>
		/// A link to an image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 512 x 512.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// The set of managed properties available to be pre-configured for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedProperties")]
		public ManagedProperty[] ManagedProperties { get; set; }
		
		/// <summary>
		/// The minimum Android SDK necessary to run the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minAndroidSdkVersion")]
		public System.Nullable<System.Int32> MinAndroidSdkVersion { get; set; }
		
		/// <summary>
		/// The name of the app in the form enterprises/{enterprise}/applications/{package_name}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The permissions required by the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public ApplicationPermission[] Permissions { get; set; }
		
		/// <summary>
		/// A link to the (consumer) Google Play details page for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playStoreUrl")]
		public string PlayStoreUrl { get; set; }
		
		/// <summary>
		/// A localised description of the recent changes made to the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentChanges")]
		public string RecentChanges { get; set; }
		
		/// <summary>
		/// A list of screenshot links representing the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshotUrls")]
		public string[] ScreenshotUrls { get; set; }
		
		/// <summary>
		/// A link to a smaller image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 128 x 128.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallIconUrl")]
		public string SmallIconUrl { get; set; }
		
		/// <summary>
		/// The title of the app. Localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Output only. The approximate time (within 7 days) the app was last published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationAppPricing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_PRICING_UNSPECIFIED")]
		APP_PRICING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FREE")]
		FREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FREE_WITH_IN_APP_PURCHASE")]
		FREE_WITH_IN_APP_PURCHASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID")]
		PAID = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationContentRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTENT_RATING_UNSPECIFIED")]
		CONTENT_RATING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THREE_YEARS")]
		THREE_YEARS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEVEN_YEARS")]
		SEVEN_YEARS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TWELVE_YEARS")]
		TWELVE_YEARS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SIXTEEN_YEARS")]
		SIXTEEN_YEARS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EIGHTEEN_YEARS")]
		EIGHTEEN_YEARS = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationDistributionChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISTRIBUTION_CHANNEL_UNSPECIFIED")]
		DISTRIBUTION_CHANNEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLIC_GOOGLE_HOSTED")]
		PUBLIC_GOOGLE_HOSTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVATE_GOOGLE_HOSTED")]
		PRIVATE_GOOGLE_HOSTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVATE_SELF_HOSTED")]
		PRIVATE_SELF_HOSTED = 3,
	}
	
	/// <summary>
	/// Managed property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedProperty
	{
		
		/// <summary>
		/// The default value of the property. BUNDLE_ARRAY properties don't have a default value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public object DefaultValue { get; set; }
		
		/// <summary>
		/// A longer description of the property, providing more detail of what it affects. Localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// For CHOICE or MULTISELECT properties, the list of possible entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public ManagedPropertyEntry[] Entries { get; set; }
		
		/// <summary>
		/// The unique key that the app uses to identify the property, e.g. "com.google.android.gm.fieldname".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// For BUNDLE_ARRAY properties, the list of nested properties. A BUNDLE_ARRAY property is at most two levels deep.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestedProperties")]
		public ManagedProperty[] NestedProperties { get; set; }
		
		/// <summary>
		/// The name of the property. Localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ManagedPropertyType> Type { get; set; }
	}
	
	/// <summary>
	/// An entry of a managed property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedPropertyEntry
	{
		
		/// <summary>
		/// The human-readable name of the value. Localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The machine-readable value of the entry, which should be used in the configuration. Not localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ManagedPropertyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGED_PROPERTY_TYPE_UNSPECIFIED")]
		MANAGED_PROPERTY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOL")]
		BOOL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTEGER")]
		INTEGER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHOICE")]
		CHOICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTISELECT")]
		MULTISELECT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIDDEN")]
		HIDDEN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUNDLE")]
		BUNDLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUNDLE_ARRAY")]
		BUNDLE_ARRAY = 8,
	}
	
	/// <summary>
	/// A permission required by the app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationPermission
	{
		
		/// <summary>
		/// A longer description of the permission, providing more detail on what it affects. Localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the permission. Localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An opaque string uniquely identifying the permission. Not localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
	}
	
	/// <summary>
	/// An app-related event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationEvent
	{
		
		/// <summary>
		/// The creation time of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// App event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<ApplicationEventEventType> EventType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPLICATION_EVENT_TYPE_UNSPECIFIED")]
		APPLICATION_EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED")]
		INSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGED")]
		CHANGED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_CLEARED")]
		DATA_CLEARED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVED")]
		REMOVED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPLACED")]
		REPLACED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESTARTED")]
		RESTARTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PINNED")]
		PINNED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNPINNED")]
		UNPINNED = 8,
	}
	
	/// <summary>
	/// Policy for an individual app. Note: Application availability on a given device cannot be changed using this policy if installAppsDisabled is enabled. The maximum number of applications that you can specify per policy is 3,000.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationPolicy
	{
		
		/// <summary>
		/// List of the app’s track IDs that a device belonging to the enterprise can access. If the list contains multiple track IDs, devices receive the latest version among all accessible tracks. If the list contains no track IDs, devices only have access to the app’s production track. More details about each track are available in AppTrackInfo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibleTrackIds")]
		public string[] AccessibleTrackIds { get; set; }
		
		/// <summary>
		/// Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the package in the applications policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alwaysOnVpnLockdownExemption")]
		public System.Nullable<ApplicationPolicyAlwaysOnVpnLockdownExemption> AlwaysOnVpnLockdownExemption { get; set; }
		
		/// <summary>
		/// Controls the auto-update mode for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpdateMode")]
		public System.Nullable<ApplicationPolicyAutoUpdateMode> AutoUpdateMode { get; set; }
		
		/// <summary>
		/// Controls whether the app can communicate with itself across a device’s work and personal profiles, subject to user consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedWorkAndPersonalApp")]
		public System.Nullable<ApplicationPolicyConnectedWorkAndPersonalApp> ConnectedWorkAndPersonalApp { get; set; }
		
		/// <summary>
		/// The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override the permission_grants which applies to all apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPermissionPolicy")]
		public System.Nullable<ApplicationPolicyDefaultPermissionPolicy> DefaultPermissionPolicy { get; set; }
		
		/// <summary>
		/// The scopes delegated to the app from Android Device Policy. These provide additional privileges for the applications they are applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delegatedScopes")]
		public string[] DelegatedScopes { get; set; }
		
		/// <summary>
		/// Whether the app is disabled. When disabled, the app data is still preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Configuration to enable an app as an extension app, with the capability of interacting with Android Device Policy offline. For Android versions 13 and above, extension apps are exempt from battery restrictions so will not be placed into the restricted App Standby Bucket (https://developer.android.com/topic/performance/appstandby#restricted-bucket). Extensions apps are also protected against users clearing their data or force-closing the application, although admins can continue to use the clear app data command (https://developer.android.com/management/reference/rest/v1/enterprises.devices/issueCommand#CommandType) on extension apps if needed for Android 13 and above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensionConfig")]
		public ExtensionConfig ExtensionConfig { get; set; }
		
		/// <summary>
		/// The type of installation to perform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installType")]
		public System.Nullable<ApplicationPolicyInstallType> InstallType { get; set; }
		
		/// <summary>
		/// Whether the app is allowed to lock itself in full-screen mode. DEPRECATED. Use InstallType KIOSK or kioskCustomLauncherEnabled to configure a dedicated device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockTaskAllowed")]
		public System.Nullable<System.Boolean> LockTaskAllowed { get; set; }
		
		/// <summary>
		/// Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: *type* *JSON value* BOOL true or false STRING string INTEGER number CHOICE string MULTISELECT array of strings HIDDEN string BUNDLE_ARRAY array of objects 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedConfiguration")]
		public System.Collections.Generic.Dictionary<string, object> ManagedConfiguration { get; set; }
		
		/// <summary>
		/// The managed configurations template for the app, saved from the managed configurations iframe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedConfigurationTemplate")]
		public ManagedConfigurationTemplate ManagedConfigurationTemplate { get; set; }
		
		/// <summary>
		/// The minimum version of the app that runs on the device. If set, the device attempts to update the app to at least this version code. If the app is not up-to-date, the device will contain a NonComplianceDetail with non_compliance_reason set to APP_NOT_UPDATED. The app must already be published to Google Play with a version code greater than or equal to this value. At most 20 apps may specify a minimum version code per policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumVersionCode")]
		public System.Nullable<System.Int32> MinimumVersionCode { get; set; }
		
		/// <summary>
		/// The package name of the app. For example, com.google.android.youtube for the YouTube app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Explicit permission grants or denials for the app. These values override the default_permission_policy and permission_grants which apply to all apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionGrants")]
		public PermissionGrant[] PermissionGrants { get; set; }
		
		/// <summary>
		/// Specifies whether the app installed in the work profile is allowed to add widgets to the home screen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workProfileWidgets")]
		public System.Nullable<ApplicationPolicyWorkProfileWidgets> WorkProfileWidgets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationPolicyAlwaysOnVpnLockdownExemption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED")]
		ALWAYS_ON_VPN_LOCKDOWN_EXEMPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VPN_LOCKDOWN_ENFORCED")]
		VPN_LOCKDOWN_ENFORCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VPN_LOCKDOWN_EXEMPTION")]
		VPN_LOCKDOWN_EXEMPTION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationPolicyAutoUpdateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_UPDATE_MODE_UNSPECIFIED")]
		AUTO_UPDATE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_UPDATE_DEFAULT")]
		AUTO_UPDATE_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_UPDATE_POSTPONED")]
		AUTO_UPDATE_POSTPONED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_UPDATE_HIGH_PRIORITY")]
		AUTO_UPDATE_HIGH_PRIORITY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationPolicyConnectedWorkAndPersonalApp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED")]
		CONNECTED_WORK_AND_PERSONAL_APP_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED")]
		CONNECTED_WORK_AND_PERSONAL_APP_DISALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED")]
		CONNECTED_WORK_AND_PERSONAL_APP_ALLOWED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationPolicyDefaultPermissionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERMISSION_POLICY_UNSPECIFIED")]
		PERMISSION_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROMPT")]
		PROMPT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GRANT")]
		GRANT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DENY")]
		DENY = 3,
	}
	
	/// <summary>
	/// Configuration to enable an app as an extension app, with the capability of interacting with Android Device Policy offline. For Android versions 13 and above, extension apps are exempt from battery restrictions so will not be placed into the restricted App Standby Bucket (https://developer.android.com/topic/performance/appstandby#restricted-bucket). Extensions apps are also protected against users clearing their data or force-closing the application, although admins can continue to use the clear app data command (https://developer.android.com/management/reference/rest/v1/enterprises.devices/issueCommand#CommandType) on extension apps if needed for Android 13 and above.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExtensionConfig
	{
		
		/// <summary>
		/// Fully qualified class name of the receiver service class for Android Device Policy to notify the extension app of any local command status updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationReceiver")]
		public string NotificationReceiver { get; set; }
		
		/// <summary>
		/// Hex-encoded SHA-256 hash of the signing certificate of the extension app. Only hexadecimal string representations of 64 characters are valid.If not specified, the signature for the corresponding package name is obtained from the Play Store instead.If this list is empty, the signature of the extension app on the device must match the signature obtained from the Play Store for the app to be able to communicate with Android Device Policy.If this list is not empty, the signature of the extension app on the device must match one of the entries in this list for the app to be able to communicate with Android Device Policy.In production use cases, it is recommended to leave this empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingKeyFingerprintsSha256")]
		public string[] SigningKeyFingerprintsSha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationPolicyInstallType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALL_TYPE_UNSPECIFIED")]
		INSTALL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREINSTALLED")]
		PREINSTALLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORCE_INSTALLED")]
		FORCE_INSTALLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED")]
		BLOCKED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUIRED_FOR_SETUP")]
		REQUIRED_FOR_SETUP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KIOSK")]
		KIOSK = 6,
	}
	
	/// <summary>
	/// The managed configurations template for the app, saved from the managed configurations iframe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedConfigurationTemplate
	{
		
		/// <summary>
		/// Optional, a map containing configuration variables defined for the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationVariables")]
		public System.Collections.Generic.Dictionary<string, string> ConfigurationVariables { get; set; }
		
		/// <summary>
		/// The ID of the managed configurations template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
	}
	
	/// <summary>
	/// Configuration for an Android permission and its grant state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionGrant
	{
		
		/// <summary>
		/// The Android permission or group, e.g. android.permission.READ_CALENDAR or android.permission_group.CALENDAR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string Permission { get; set; }
		
		/// <summary>
		/// The policy for granting the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public ApplicationPolicyDefaultPermissionPolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationPolicyWorkProfileWidgets
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_PROFILE_WIDGETS_UNSPECIFIED")]
		WORK_PROFILE_WIDGETS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_PROFILE_WIDGETS_ALLOWED")]
		WORK_PROFILE_WIDGETS_ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_PROFILE_WIDGETS_DISALLOWED")]
		WORK_PROFILE_WIDGETS_DISALLOWED = 2,
	}
	
	/// <summary>
	/// Information reported about an installed app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationReport
	{
		
		/// <summary>
		/// The source of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationSource")]
		public System.Nullable<ApplicationReportApplicationSource> ApplicationSource { get; set; }
		
		/// <summary>
		/// The display name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The list of app events which have occurred in the last 30 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public ApplicationEvent[] Events { get; set; }
		
		/// <summary>
		/// The package name of the app that installed this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installerPackageName")]
		public string InstallerPackageName { get; set; }
		
		/// <summary>
		/// List of keyed app states reported by the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyedAppStates")]
		public KeyedAppState[] KeyedAppStates { get; set; }
		
		/// <summary>
		/// Package name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The SHA-256 hash of the app's APK file, which can be used to verify the app hasn't been modified. Each byte of the hash value is represented as a two-digit hexadecimal number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageSha256Hash")]
		public string PackageSha256Hash { get; set; }
		
		/// <summary>
		/// The SHA-1 hash of each android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the app package. Each byte of each hash value is represented as a two-digit hexadecimal number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingKeyCertFingerprints")]
		public string[] SigningKeyCertFingerprints { get; set; }
		
		/// <summary>
		/// Application state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ApplicationReportState> State { get; set; }
		
		/// <summary>
		/// Whether the app is user facing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFacingType")]
		public System.Nullable<ApplicationReportUserFacingType> UserFacingType { get; set; }
		
		/// <summary>
		/// The app version code, which can be used to determine whether one version is more recent than another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
		
		/// <summary>
		/// The app version as displayed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationReportApplicationSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPLICATION_SOURCE_UNSPECIFIED")]
		APPLICATION_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_APP_FACTORY_VERSION")]
		SYSTEM_APP_FACTORY_VERSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_APP_UPDATED_VERSION")]
		SYSTEM_APP_UPDATED_VERSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED_FROM_PLAY_STORE")]
		INSTALLED_FROM_PLAY_STORE = 3,
	}
	
	/// <summary>
	/// Keyed app state reported by the app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyedAppState
	{
		
		/// <summary>
		/// The creation time of the app state on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optionally, a machine-readable value to be read by the EMM. For example, setting values that the admin can choose to query against in the EMM console (e.g. “notify me if the battery_warning data < 10”).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The key for the app state. Acts as a point of reference for what the app is providing state for. For example, when providing managed configuration feedback, this key could be the managed configuration key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The time the app state was most recently updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public string LastUpdateTime { get; set; }
		
		/// <summary>
		/// Optionally, a free-form message string to explain the app state. If the state was triggered by a particular value (e.g. a managed configuration value), it should be included in the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The severity of the app state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<KeyedAppStateSeverity> Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeyedAppStateSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEVERITY_UNSPECIFIED")]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INFO")]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationReportState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPLICATION_STATE_UNSPECIFIED")]
		APPLICATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVED")]
		REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED")]
		INSTALLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationReportUserFacingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_FACING_TYPE_UNSPECIFIED")]
		USER_FACING_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_USER_FACING")]
		NOT_USER_FACING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_FACING")]
		USER_FACING = 2,
	}
	
	/// <summary>
	/// Settings controlling the behavior of application reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationReportingSettings
	{
		
		/// <summary>
		/// Whether removed apps are included in application reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeRemovedApps")]
		public System.Nullable<System.Boolean> IncludeRemovedApps { get; set; }
	}
	
	/// <summary>
	/// Batched event logs of events from the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUsageLogEvents
	{
		
		/// <summary>
		/// The name of the device in the form ‘enterprises/{enterpriseId}/devices/{deviceId}’
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public string Device { get; set; }
		
		/// <summary>
		/// The device timestamp when the batch of events were collected from the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retrievalTime")]
		public string RetrievalTime { get; set; }
		
		/// <summary>
		/// The list of UsageLogEvent that were reported by the device, sorted chronologically by the event time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageLogEvents")]
		public UsageLogEvent[] UsageLogEvents { get; set; }
		
		/// <summary>
		/// The resource name of the user that owns this device in the form ‘enterprises/{enterpriseId}/users/{userId}’.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// An event logged on the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageLogEvent
	{
		
		/// <summary>
		/// A shell command was issued over ADB via “adb shell command”.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adbShellCommandEvent")]
		public AdbShellCommandEvent AdbShellCommandEvent { get; set; }
		
		/// <summary>
		/// An ADB interactive shell was opened via “adb shell”. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adbShellInteractiveEvent")]
		public AdbShellInteractiveEvent AdbShellInteractiveEvent { get; set; }
		
		/// <summary>
		/// An app process was started. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appProcessStartEvent")]
		public AppProcessStartEvent AppProcessStartEvent { get; set; }
		
		/// <summary>
		/// A new root certificate was installed into the system's trusted credential storage. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certAuthorityInstalledEvent")]
		public CertAuthorityInstalledEvent CertAuthorityInstalledEvent { get; set; }
		
		/// <summary>
		/// A root certificate was removed from the system's trusted credential storage. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certAuthorityRemovedEvent")]
		public CertAuthorityRemovedEvent CertAuthorityRemovedEvent { get; set; }
		
		/// <summary>
		/// An X.509v3 certificate failed to validate, currently this validation is performed on the Wi-FI access point and failure may be due to a mismatch upon server certificate validation. However it may in the future include other validation events of an X.509v3 certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certValidationFailureEvent")]
		public CertValidationFailureEvent CertValidationFailureEvent { get; set; }
		
		/// <summary>
		/// A TCP connect event was initiated through the standard network stack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectEvent")]
		public ConnectEvent ConnectEvent { get; set; }
		
		/// <summary>
		/// Validates whether Android’s built-in cryptographic library (BoringSSL) is valid. Should always succeed on device boot, if it fails, the device should be considered untrusted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoSelfTestCompletedEvent")]
		public CryptoSelfTestCompletedEvent CryptoSelfTestCompletedEvent { get; set; }
		
		/// <summary>
		/// A DNS lookup event was initiated through the standard network stack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsEvent")]
		public DnsEvent DnsEvent { get; set; }
		
		/// <summary>
		/// Represents that the device has completed enrollment. User should be in the launcher at this point, device at this point will be compliant and all setup steps have been completed. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentCompleteEvent")]
		public EnrollmentCompleteEvent EnrollmentCompleteEvent { get; set; }
		
		/// <summary>
		/// Unique id of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Device timestamp when the event was logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public string EventTime { get; set; }
		
		/// <summary>
		/// The particular usage log event type that was reported on the device. Use this to determine which event field to access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<UsageLogEventEventType> EventType { get; set; }
		
		/// <summary>
		/// A file was downloaded from the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePulledEvent")]
		public FilePulledEvent FilePulledEvent { get; set; }
		
		/// <summary>
		/// A file was uploaded onto the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePushedEvent")]
		public FilePushedEvent FilePushedEvent { get; set; }
		
		/// <summary>
		/// A cryptographic key including user installed, admin installed and system maintained private key is removed from the device either by the user or management. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyDestructionEvent")]
		public KeyDestructionEvent KeyDestructionEvent { get; set; }
		
		/// <summary>
		/// A cryptographic key including user installed, admin installed and system maintained private key is installed on the device either by the user or management.This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyGeneratedEvent")]
		public KeyGeneratedEvent KeyGeneratedEvent { get; set; }
		
		/// <summary>
		/// A cryptographic key including user installed, admin installed and system maintained private key is imported on the device either by the user or management. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyImportEvent")]
		public KeyImportEvent KeyImportEvent { get; set; }
		
		/// <summary>
		/// A cryptographic key including user installed, admin installed and system maintained private key is determined to be corrupted due to storage corruption, hardware failure or some OS issue. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyIntegrityViolationEvent")]
		public KeyIntegrityViolationEvent KeyIntegrityViolationEvent { get; set; }
		
		/// <summary>
		/// An attempt was made to unlock the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyguardDismissAuthAttemptEvent")]
		public KeyguardDismissAuthAttemptEvent KeyguardDismissAuthAttemptEvent { get; set; }
		
		/// <summary>
		/// The keyguard was dismissed. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyguardDismissedEvent")]
		public KeyguardDismissedEvent KeyguardDismissedEvent { get; set; }
		
		/// <summary>
		/// The device was locked either by user or timeout. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyguardSecuredEvent")]
		public KeyguardSecuredEvent KeyguardSecuredEvent { get; set; }
		
		/// <summary>
		/// The usageLog buffer on the device has reached 90% of its capacity, therefore older events may be dropped. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logBufferSizeCriticalEvent")]
		public LogBufferSizeCriticalEvent LogBufferSizeCriticalEvent { get; set; }
		
		/// <summary>
		/// usageLog policy has been enabled. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingStartedEvent")]
		public LoggingStartedEvent LoggingStartedEvent { get; set; }
		
		/// <summary>
		/// usageLog policy has been disabled. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loggingStoppedEvent")]
		public LoggingStoppedEvent LoggingStoppedEvent { get; set; }
		
		/// <summary>
		/// A lost mode event containing the device location and battery level as a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lostModeLocationEvent")]
		public LostModeLocationEvent LostModeLocationEvent { get; set; }
		
		/// <summary>
		/// An event indicating an outgoing phone call has been made when a device is in lost mode. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lostModeOutgoingPhoneCallEvent")]
		public LostModeOutgoingPhoneCallEvent LostModeOutgoingPhoneCallEvent { get; set; }
		
		/// <summary>
		/// Removable media was mounted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaMountEvent")]
		public MediaMountEvent MediaMountEvent { get; set; }
		
		/// <summary>
		/// Removable media was unmounted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaUnmountEvent")]
		public MediaUnmountEvent MediaUnmountEvent { get; set; }
		
		/// <summary>
		/// Device was shutdown. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osShutdownEvent")]
		public OsShutdownEvent OsShutdownEvent { get; set; }
		
		/// <summary>
		/// Device was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osStartupEvent")]
		public OsStartupEvent OsStartupEvent { get; set; }
		
		/// <summary>
		/// The device or profile has been remotely locked via the LOCK command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteLockEvent")]
		public RemoteLockEvent RemoteLockEvent { get; set; }
		
		/// <summary>
		/// A lost mode event indicating the user has attempted to stop lost mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopLostModeUserAttemptEvent")]
		public StopLostModeUserAttemptEvent StopLostModeUserAttemptEvent { get; set; }
		
		/// <summary>
		/// The work profile or company-owned device failed to wipe when requested. This could be user initiated or admin initiated e.g. delete was received. Intentionally empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wipeFailureEvent")]
		public WipeFailureEvent WipeFailureEvent { get; set; }
	}
	
	/// <summary>
	/// A new root certificate was installed into the system's trusted credential storage. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertAuthorityInstalledEvent
	{
		
		/// <summary>
		/// Subject of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// Whether the installation event succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		/// <summary>
		/// The user in which the certificate install event happened. Only available for devices running Android 11 and above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int32> UserId { get; set; }
	}
	
	/// <summary>
	/// A root certificate was removed from the system's trusted credential storage. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertAuthorityRemovedEvent
	{
		
		/// <summary>
		/// Subject of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// Whether the removal succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		/// <summary>
		/// The user in which the certificate removal event occurred. Only available for devices running Android 11 and above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int32> UserId { get; set; }
	}
	
	/// <summary>
	/// An X.509v3 certificate failed to validate, currently this validation is performed on the Wi-FI access point and failure may be due to a mismatch upon server certificate validation. However it may in the future include other validation events of an X.509v3 certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertValidationFailureEvent
	{
		
		/// <summary>
		/// The reason why certification validation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
	}
	
	/// <summary>
	/// A TCP connect event was initiated through the standard network stack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectEvent
	{
		
		/// <summary>
		/// The destination IP address of the connect call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationIpAddress")]
		public string DestinationIpAddress { get; set; }
		
		/// <summary>
		/// The destination port of the connect call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationPort")]
		public System.Nullable<System.Int32> DestinationPort { get; set; }
		
		/// <summary>
		/// The package name of the UID that performed the connect call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	/// <summary>
	/// Validates whether Android’s built-in cryptographic library (BoringSSL) is valid. Should always succeed on device boot, if it fails, the device should be considered untrusted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CryptoSelfTestCompletedEvent
	{
		
		/// <summary>
		/// Whether the test succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	/// <summary>
	/// A DNS lookup event was initiated through the standard network stack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DnsEvent
	{
		
		/// <summary>
		/// The hostname that was looked up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// The (possibly truncated) list of the IP addresses returned for DNS lookup (max 10 IPv4 or IPv6 addresses).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddresses")]
		public string[] IpAddresses { get; set; }
		
		/// <summary>
		/// The package name of the UID that performed the DNS lookup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The number of IP addresses returned from the DNS lookup event. May be higher than the amount of ip_addresses if there were too many addresses to log.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalIpAddressesReturned")]
		public string TotalIpAddressesReturned { get; set; }
	}
	
	/// <summary>
	/// Represents that the device has completed enrollment. User should be in the launcher at this point, device at this point will be compliant and all setup steps have been completed. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollmentCompleteEvent
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageLogEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT_TYPE_UNSPECIFIED")]
		EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADB_SHELL_COMMAND")]
		ADB_SHELL_COMMAND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADB_SHELL_INTERACTIVE")]
		ADB_SHELL_INTERACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_PROCESS_START")]
		APP_PROCESS_START = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEYGUARD_DISMISSED")]
		KEYGUARD_DISMISSED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEYGUARD_DISMISS_AUTH_ATTEMPT")]
		KEYGUARD_DISMISS_AUTH_ATTEMPT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEYGUARD_SECURED")]
		KEYGUARD_SECURED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILE_PULLED")]
		FILE_PULLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILE_PUSHED")]
		FILE_PUSHED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CERT_AUTHORITY_INSTALLED")]
		CERT_AUTHORITY_INSTALLED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CERT_AUTHORITY_REMOVED")]
		CERT_AUTHORITY_REMOVED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CERT_VALIDATION_FAILURE")]
		CERT_VALIDATION_FAILURE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRYPTO_SELF_TEST_COMPLETED")]
		CRYPTO_SELF_TEST_COMPLETED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEY_DESTRUCTION")]
		KEY_DESTRUCTION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEY_GENERATED")]
		KEY_GENERATED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEY_IMPORT")]
		KEY_IMPORT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEY_INTEGRITY_VIOLATION")]
		KEY_INTEGRITY_VIOLATION = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOGGING_STARTED")]
		LOGGING_STARTED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOGGING_STOPPED")]
		LOGGING_STOPPED = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOG_BUFFER_SIZE_CRITICAL")]
		LOG_BUFFER_SIZE_CRITICAL = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIA_MOUNT")]
		MEDIA_MOUNT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIA_UNMOUNT")]
		MEDIA_UNMOUNT = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OS_SHUTDOWN")]
		OS_SHUTDOWN = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OS_STARTUP")]
		OS_STARTUP = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOTE_LOCK")]
		REMOTE_LOCK = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIPE_FAILURE")]
		WIPE_FAILURE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECT")]
		CONNECT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DNS")]
		DNS = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOP_LOST_MODE_USER_ATTEMPT")]
		STOP_LOST_MODE_USER_ATTEMPT = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOST_MODE_OUTGOING_PHONE_CALL")]
		LOST_MODE_OUTGOING_PHONE_CALL = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOST_MODE_LOCATION")]
		LOST_MODE_LOCATION = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENROLLMENT_COMPLETE")]
		ENROLLMENT_COMPLETE = 31,
	}
	
	/// <summary>
	/// A file was downloaded from the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilePulledEvent
	{
		
		/// <summary>
		/// The path of the file being pulled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	/// <summary>
	/// A file was uploaded onto the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilePushedEvent
	{
		
		/// <summary>
		/// The path of the file being pushed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	/// <summary>
	/// A cryptographic key including user installed, admin installed and system maintained private key is removed from the device either by the user or management. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyDestructionEvent
	{
		
		/// <summary>
		/// UID of the application which owns the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationUid")]
		public System.Nullable<System.Int32> ApplicationUid { get; set; }
		
		/// <summary>
		/// Alias of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyAlias")]
		public string KeyAlias { get; set; }
		
		/// <summary>
		/// Whether the operation was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	/// <summary>
	/// A cryptographic key including user installed, admin installed and system maintained private key is installed on the device either by the user or management.This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyGeneratedEvent
	{
		
		/// <summary>
		/// UID of the application which generated the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationUid")]
		public System.Nullable<System.Int32> ApplicationUid { get; set; }
		
		/// <summary>
		/// Alias of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyAlias")]
		public string KeyAlias { get; set; }
		
		/// <summary>
		/// Whether the operation was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	/// <summary>
	/// A cryptographic key including user installed, admin installed and system maintained private key is imported on the device either by the user or management. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyImportEvent
	{
		
		/// <summary>
		/// UID of the application which imported the key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationUid")]
		public System.Nullable<System.Int32> ApplicationUid { get; set; }
		
		/// <summary>
		/// Alias of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyAlias")]
		public string KeyAlias { get; set; }
		
		/// <summary>
		/// Whether the operation was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	/// <summary>
	/// A cryptographic key including user installed, admin installed and system maintained private key is determined to be corrupted due to storage corruption, hardware failure or some OS issue. This is available device-wide on fully managed devices and within the work profile on organization-owned devices with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyIntegrityViolationEvent
	{
		
		/// <summary>
		/// UID of the application which owns the key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationUid")]
		public System.Nullable<System.Int32> ApplicationUid { get; set; }
		
		/// <summary>
		/// Alias of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyAlias")]
		public string KeyAlias { get; set; }
	}
	
	/// <summary>
	/// An attempt was made to unlock the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyguardDismissAuthAttemptEvent
	{
		
		/// <summary>
		/// Whether a strong form of authentication (password, PIN, or pattern) was used to unlock device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strongAuthMethodUsed")]
		public System.Nullable<System.Boolean> StrongAuthMethodUsed { get; set; }
		
		/// <summary>
		/// Whether the unlock attempt was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	/// <summary>
	/// The keyguard was dismissed. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyguardDismissedEvent
	{
	}
	
	/// <summary>
	/// The device was locked either by user or timeout. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyguardSecuredEvent
	{
	}
	
	/// <summary>
	/// The usageLog buffer on the device has reached 90% of its capacity, therefore older events may be dropped. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogBufferSizeCriticalEvent
	{
	}
	
	/// <summary>
	/// usageLog policy has been enabled. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingStartedEvent
	{
	}
	
	/// <summary>
	/// usageLog policy has been disabled. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingStoppedEvent
	{
	}
	
	/// <summary>
	/// A lost mode event containing the device location and battery level as a percentage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LostModeLocationEvent
	{
		
		/// <summary>
		/// The battery level as a number between 0 and 100 inclusive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryLevel")]
		public System.Nullable<System.Int32> BatteryLevel { get; set; }
		
		/// <summary>
		/// The device location containing the latitude and longitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// The device location containing the latitude and longitude.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The latitude position of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude position of the location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// An event indicating an outgoing phone call has been made when a device is in lost mode. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LostModeOutgoingPhoneCallEvent
	{
	}
	
	/// <summary>
	/// Removable media was mounted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaMountEvent
	{
		
		/// <summary>
		/// Mount point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
		
		/// <summary>
		/// Volume label. Redacted to empty string on organization-owned managed profile devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeLabel")]
		public string VolumeLabel { get; set; }
	}
	
	/// <summary>
	/// Removable media was unmounted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaUnmountEvent
	{
		
		/// <summary>
		/// Mount point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPoint")]
		public string MountPoint { get; set; }
		
		/// <summary>
		/// Volume label. Redacted to empty string on organization-owned managed profile devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeLabel")]
		public string VolumeLabel { get; set; }
	}
	
	/// <summary>
	/// Device was shutdown. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OsShutdownEvent
	{
	}
	
	/// <summary>
	/// Device was started.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OsStartupEvent
	{
		
		/// <summary>
		/// Verified Boot state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifiedBootState")]
		public System.Nullable<OsStartupEventVerifiedBootState> VerifiedBootState { get; set; }
		
		/// <summary>
		/// dm-verity mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verityMode")]
		public System.Nullable<OsStartupEventVerityMode> VerityMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OsStartupEventVerifiedBootState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERIFIED_BOOT_STATE_UNSPECIFIED")]
		VERIFIED_BOOT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREEN")]
		GREEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YELLOW")]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORANGE")]
		ORANGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OsStartupEventVerityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DM_VERITY_MODE_UNSPECIFIED")]
		DM_VERITY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENFORCING")]
		ENFORCING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IO_ERROR")]
		IO_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 3,
	}
	
	/// <summary>
	/// The device or profile has been remotely locked via the LOCK command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoteLockEvent
	{
		
		/// <summary>
		/// Package name of the admin app requesting the change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminPackageName")]
		public string AdminPackageName { get; set; }
		
		/// <summary>
		/// User ID of the admin app from the which the change was requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminUserId")]
		public System.Nullable<System.Int32> AdminUserId { get; set; }
		
		/// <summary>
		/// User ID in which the change was requested in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetUserId")]
		public System.Nullable<System.Int32> TargetUserId { get; set; }
	}
	
	/// <summary>
	/// A lost mode event indicating the user has attempted to stop lost mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopLostModeUserAttemptEvent
	{
		
		/// <summary>
		/// The status of the attempt to stop lost mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<StopLostModeUserAttemptEventStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StopLostModeUserAttemptEventStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_UNSPECIFIED")]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTEMPT_SUCCEEDED")]
		ATTEMPT_SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTEMPT_FAILED")]
		ATTEMPT_FAILED = 2,
	}
	
	/// <summary>
	/// The work profile or company-owned device failed to wipe when requested. This could be user initiated or admin initiated e.g. delete was received. Intentionally empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WipeFailureEvent
	{
	}
	
	/// <summary>
	/// An action to block access to apps and data on a fully managed device or in a work profile. This action also triggers a device or work profile to displays a user-facing notification with information (where possible) on how to correct the compliance issue. Note: wipeAction must also be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlockAction
	{
		
		/// <summary>
		/// Number of days the policy is non-compliant before the device or work profile is blocked. To block access immediately, set to 0. blockAfterDays must be less than wipeAfterDays.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockAfterDays")]
		public System.Nullable<System.Int32> BlockAfterDays { get; set; }
		
		/// <summary>
		/// Specifies the scope of this BlockAction. Only applicable to devices that are company-owned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockScope")]
		public System.Nullable<BlockActionBlockScope> BlockScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlockActionBlockScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCK_SCOPE_UNSPECIFIED")]
		BLOCK_SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCK_SCOPE_WORK_PROFILE")]
		BLOCK_SCOPE_WORK_PROFILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCK_SCOPE_DEVICE")]
		BLOCK_SCOPE_DEVICE = 2,
	}
	
	/// <summary>
	/// Controls apps' access to private keys. The rule determines which private key, if any, Android Device Policy grants to the specified app. Access is granted either when the app calls KeyChain.choosePrivateKeyAlias (https://developer.android.com/reference/android/security/KeyChain#choosePrivateKeyAlias%28android.app.Activity,%20android.security.KeyChainAliasCallback,%20java.lang.String[],%20java.security.Principal[],%20java.lang.String,%20int,%20java.lang.String%29) (or any overloads) to request a private key alias for a given URL, or for rules that are not URL-specific (that is, if urlPattern is not set, or set to the empty string or .*) on Android 11 and above, directly so that the app can call KeyChain.getPrivateKey (https://developer.android.com/reference/android/security/KeyChain#getPrivateKey%28android.content.Context,%20java.lang.String%29), without first having to call KeyChain.choosePrivateKeyAlias.When an app calls KeyChain.choosePrivateKeyAlias if more than one choosePrivateKeyRules matches, the last matching rule defines which key alias to return.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoosePrivateKeyRule
	{
		
		/// <summary>
		/// The package names to which this rule applies. The hash of the signing certificate for each app is verified against the hash provided by Play. If no package names are specified, then the alias is provided to all apps that call KeyChain.choosePrivateKeyAlias (https://developer.android.com/reference/android/security/KeyChain#choosePrivateKeyAlias%28android.app.Activity,%20android.security.KeyChainAliasCallback,%20java.lang.String[],%20java.security.Principal[],%20java.lang.String,%20int,%20java.lang.String%29) or any overloads (but not without calling KeyChain.choosePrivateKeyAlias, even on Android 11 and above). Any app with the same Android UID as a package specified here will have access when they call KeyChain.choosePrivateKeyAlias.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageNames")]
		public string[] PackageNames { get; set; }
		
		/// <summary>
		/// The alias of the private key to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeyAlias")]
		public string PrivateKeyAlias { get; set; }
		
		/// <summary>
		/// The URL pattern to match against the URL of the request. If not set or empty, it matches all URLs. This uses the regular expression syntax of java.util.regex.Pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	/// <summary>
	/// Parameters associated with the CLEAR_APP_DATA command to clear the data of specified apps from the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClearAppsDataParams
	{
		
		/// <summary>
		/// The package names of the apps whose data will be cleared when the command is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageNames")]
		public string[] PackageNames { get; set; }
	}
	
	/// <summary>
	/// Status of the CLEAR_APP_DATA command to clear the data of specified apps from the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClearAppsDataStatus
	{
		
		/// <summary>
		/// The per-app results, a mapping from package names to the respective clearing result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public System.Collections.Generic.Dictionary<string, PerAppResult> Results { get; set; }
	}
	
	/// <summary>
	/// The result of an attempt to clear the data of a single app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerAppResult
	{
		
		/// <summary>
		/// The result of an attempt to clear the data of a single app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearingResult")]
		public System.Nullable<PerAppResultClearingResult> ClearingResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PerAppResultClearingResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLEARING_RESULT_UNSPECIFIED")]
		CLEARING_RESULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_NOT_FOUND")]
		APP_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_PROTECTED")]
		APP_PROTECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="API_LEVEL")]
		API_LEVEL = 4,
	}
	
	/// <summary>
	/// A command.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Command
	{
		
		/// <summary>
		/// Parameters associated with the CLEAR_APP_DATA command to clear the data of specified apps from the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearAppsDataParams")]
		public ClearAppsDataParams ClearAppsDataParams { get; set; }
		
		/// <summary>
		/// Status of the CLEAR_APP_DATA command to clear the data of specified apps from the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearAppsDataStatus")]
		public ClearAppsDataStatus ClearAppsDataStatus { get; set; }
		
		/// <summary>
		/// The timestamp at which the command was created. The timestamp is automatically generated by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The duration for which the command is valid. The command will expire if not executed by the device during this time. The default duration if unspecified is ten minutes. There is no maximum duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// If the command failed, an error code explaining the failure. This is not set when the command is cancelled by the caller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<CommandErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// For commands of type RESET_PASSWORD, optionally specifies the new password. Note: The new password must be at least 6 characters long if it is numeric in case of Android 14 devices. Else the command will fail with INVALID_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// For commands of type RESET_PASSWORD, optionally specifies flags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetPasswordFlags")]
		public string[] ResetPasswordFlags { get; set; }
		
		/// <summary>
		/// Parameters associated with the START_LOST_MODE command to put the device into lost mode. At least one of the parameters, not including the organization name, must be provided in order for the device to be put into lost mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startLostModeParams")]
		public StartLostModeParams StartLostModeParams { get; set; }
		
		/// <summary>
		/// Status of the START_LOST_MODE command to put the device into lost mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startLostModeStatus")]
		public StartLostModeStatus StartLostModeStatus { get; set; }
		
		/// <summary>
		/// Parameters associated with the STOP_LOST_MODE command to take the device out of lost mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopLostModeParams")]
		public StopLostModeParams StopLostModeParams { get; set; }
		
		/// <summary>
		/// Status of the STOP_LOST_MODE command to take the device out of lost mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopLostModeStatus")]
		public StopLostModeStatus StopLostModeStatus { get; set; }
		
		/// <summary>
		/// The type of the command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CommandType> Type { get; set; }
		
		/// <summary>
		/// The resource name of the user that owns the device in the form enterprises/{enterpriseId}/users/{userId}. This is automatically generated by the server based on the device the command is sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommandErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMAND_ERROR_CODE_UNSPECIFIED")]
		COMMAND_ERROR_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="API_LEVEL")]
		API_LEVEL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGEMENT_MODE")]
		MANAGEMENT_MODE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_VALUE")]
		INVALID_VALUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED")]
		UNSUPPORTED = 5,
	}
	
	/// <summary>
	/// Parameters associated with the START_LOST_MODE command to put the device into lost mode. At least one of the parameters, not including the organization name, must be provided in order for the device to be put into lost mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartLostModeParams
	{
		
		/// <summary>
		/// The email address displayed to the user when the device is in lost mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lostEmailAddress")]
		public string LostEmailAddress { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lostMessage")]
		public UserFacingMessage LostMessage { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lostOrganization")]
		public UserFacingMessage LostOrganization { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lostPhoneNumber")]
		public UserFacingMessage LostPhoneNumber { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lostStreetAddress")]
		public UserFacingMessage LostStreetAddress { get; set; }
	}
	
	/// <summary>
	/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserFacingMessage
	{
		
		/// <summary>
		/// The default message displayed if no localized message is specified or the user's locale doesn't match with any of the localized messages. A default message must be provided if any localized messages are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultMessage")]
		public string DefaultMessage { get; set; }
		
		/// <summary>
		/// A map containing pairs, where locale is a well-formed BCP 47 language (https://www.w3.org/International/articles/language-tags/) code, such as en-US, es-ES, or fr.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizedMessages")]
		public System.Collections.Generic.Dictionary<string, string> LocalizedMessages { get; set; }
	}
	
	/// <summary>
	/// Status of the START_LOST_MODE command to put the device into lost mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartLostModeStatus
	{
		
		/// <summary>
		/// The status. See StartLostModeStatus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<StartLostModeStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StartLostModeStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_UNSPECIFIED")]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESET_PASSWORD_RECENTLY")]
		RESET_PASSWORD_RECENTLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_EXIT_LOST_MODE_RECENTLY")]
		USER_EXIT_LOST_MODE_RECENTLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALREADY_IN_LOST_MODE")]
		ALREADY_IN_LOST_MODE = 4,
	}
	
	/// <summary>
	/// Parameters associated with the STOP_LOST_MODE command to take the device out of lost mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopLostModeParams
	{
	}
	
	/// <summary>
	/// Status of the STOP_LOST_MODE command to take the device out of lost mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopLostModeStatus
	{
		
		/// <summary>
		/// The status. See StopLostModeStatus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<StopLostModeStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StopLostModeStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_UNSPECIFIED")]
		STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_IN_LOST_MODE")]
		NOT_IN_LOST_MODE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommandType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMAND_TYPE_UNSPECIFIED")]
		COMMAND_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCK")]
		LOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESET_PASSWORD")]
		RESET_PASSWORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REBOOT")]
		REBOOT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RELINQUISH_OWNERSHIP")]
		RELINQUISH_OWNERSHIP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLEAR_APP_DATA")]
		CLEAR_APP_DATA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="START_LOST_MODE")]
		START_LOST_MODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOP_LOST_MODE")]
		STOP_LOST_MODE = 7,
	}
	
	/// <summary>
	/// Information about Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC).This information is only available if statusReportingSettings.commonCriteriaModeEnabled is true in the device's policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonCriteriaModeInfo
	{
		
		/// <summary>
		/// Whether Common Criteria Mode is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonCriteriaModeStatus")]
		public System.Nullable<CommonCriteriaModeInfoCommonCriteriaModeStatus> CommonCriteriaModeStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommonCriteriaModeInfoCommonCriteriaModeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON_CRITERIA_MODE_STATUS_UNKNOWN")]
		COMMON_CRITERIA_MODE_STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON_CRITERIA_MODE_DISABLED")]
		COMMON_CRITERIA_MODE_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMON_CRITERIA_MODE_ENABLED")]
		COMMON_CRITERIA_MODE_ENABLED = 2,
	}
	
	/// <summary>
	/// A rule declaring which mitigating actions to take when a device is not compliant with its policy. For every rule, there is always an implicit mitigating action to set policy_compliant to false for the Device resource, and display a message on the device indicating that the device is not compliant with its policy. Other mitigating actions may optionally be taken as well, depending on the field values in the rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceRule
	{
		
		/// <summary>
		/// A compliance rule condition which is satisfied if the Android Framework API level on the device doesn't meet a minimum requirement. There can only be one rule with this type of condition per policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiLevelCondition")]
		public ApiLevelCondition ApiLevelCondition { get; set; }
		
		/// <summary>
		/// If set to true, the rule includes a mitigating action to disable apps so that the device is effectively disabled, but app data is preserved. If the device is running an app in locked task mode, the app will be closed and a UI showing the reason for non-compliance will be displayed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableApps")]
		public System.Nullable<System.Boolean> DisableApps { get; set; }
		
		/// <summary>
		/// A compliance rule condition which is satisfied if there exists any matching NonComplianceDetail for the device. A NonComplianceDetail matches a NonComplianceDetailCondition if all the fields which are set within the NonComplianceDetailCondition match the corresponding NonComplianceDetail fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonComplianceDetailCondition")]
		public NonComplianceDetailCondition NonComplianceDetailCondition { get; set; }
		
		/// <summary>
		/// If set, the rule includes a mitigating action to disable apps specified in the list, but app data is preserved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageNamesToDisable")]
		public string[] PackageNamesToDisable { get; set; }
	}
	
	/// <summary>
	/// A compliance rule condition which is satisfied if there exists any matching NonComplianceDetail for the device. A NonComplianceDetail matches a NonComplianceDetailCondition if all the fields which are set within the NonComplianceDetailCondition match the corresponding NonComplianceDetail fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonComplianceDetailCondition
	{
		
		/// <summary>
		/// The reason the device is not in compliance with the setting. If not set, then this condition matches any reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonComplianceReason")]
		public System.Nullable<NonComplianceDetailConditionNonComplianceReason> NonComplianceReason { get; set; }
		
		/// <summary>
		/// The package name of the app that's out of compliance. If not set, then this condition matches any package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingName")]
		public string SettingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NonComplianceDetailConditionNonComplianceReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NON_COMPLIANCE_REASON_UNSPECIFIED")]
		NON_COMPLIANCE_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="API_LEVEL")]
		API_LEVEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGEMENT_MODE")]
		MANAGEMENT_MODE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_ACTION")]
		USER_ACTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_VALUE")]
		INVALID_VALUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_NOT_INSTALLED")]
		APP_NOT_INSTALLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED")]
		UNSUPPORTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_INSTALLED")]
		APP_INSTALLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_INCOMPATIBLE")]
		APP_INCOMPATIBLE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_NOT_UPDATED")]
		APP_NOT_UPDATED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE_INCOMPATIBLE")]
		DEVICE_INCOMPATIBLE = 11,
	}
	
	/// <summary>
	/// Contact details for managed Google Play enterprises.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactInfo
	{
		
		/// <summary>
		/// Email address for a point of contact, which will be used to send important announcements related to managed Google Play.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// The email of the data protection officer. The email is validated but not verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataProtectionOfficerEmail")]
		public string DataProtectionOfficerEmail { get; set; }
		
		/// <summary>
		/// The name of the data protection officer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataProtectionOfficerName")]
		public string DataProtectionOfficerName { get; set; }
		
		/// <summary>
		/// The phone number of the data protection officer The phone number is validated but not verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataProtectionOfficerPhone")]
		public string DataProtectionOfficerPhone { get; set; }
		
		/// <summary>
		/// The email of the EU representative. The email is validated but not verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="euRepresentativeEmail")]
		public string EuRepresentativeEmail { get; set; }
		
		/// <summary>
		/// The name of the EU representative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="euRepresentativeName")]
		public string EuRepresentativeName { get; set; }
		
		/// <summary>
		/// The phone number of the EU representative. The phone number is validated but not verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="euRepresentativePhone")]
		public string EuRepresentativePhone { get; set; }
	}
	
	/// <summary>
	/// This feature is not generally available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentProviderEndpoint
	{
		
		/// <summary>
		/// This feature is not generally available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Required. This feature is not generally available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingCertsSha256")]
		public string[] SigningCertsSha256 { get; set; }
		
		/// <summary>
		/// This feature is not generally available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Controls the data from the work profile that can be accessed from the personal profile and vice versa. A nonComplianceDetail with MANAGEMENT_MODE is reported if the device does not have a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CrossProfilePolicies
	{
		
		/// <summary>
		/// Whether text copied from one profile (personal or work) can be pasted in the other profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossProfileCopyPaste")]
		public System.Nullable<CrossProfilePoliciesCrossProfileCopyPaste> CrossProfileCopyPaste { get; set; }
		
		/// <summary>
		/// Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossProfileDataSharing")]
		public System.Nullable<CrossProfilePoliciesCrossProfileDataSharing> CrossProfileDataSharing { get; set; }
		
		/// <summary>
		/// A list of package names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptionsToShowWorkContactsInPersonalProfile")]
		public PackageNameList ExemptionsToShowWorkContactsInPersonalProfile { get; set; }
		
		/// <summary>
		/// Whether personal apps can access contacts stored in the work profile.See also exemptions_to_show_work_contacts_in_personal_profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showWorkContactsInPersonalProfile")]
		public System.Nullable<CrossProfilePoliciesShowWorkContactsInPersonalProfile> ShowWorkContactsInPersonalProfile { get; set; }
		
		/// <summary>
		/// Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value specified here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workProfileWidgetsDefault")]
		public System.Nullable<CrossProfilePoliciesWorkProfileWidgetsDefault> WorkProfileWidgetsDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CrossProfilePoliciesCrossProfileCopyPaste
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CROSS_PROFILE_COPY_PASTE_UNSPECIFIED")]
		CROSS_PROFILE_COPY_PASTE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COPY_FROM_WORK_TO_PERSONAL_DISALLOWED")]
		COPY_FROM_WORK_TO_PERSONAL_DISALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CROSS_PROFILE_COPY_PASTE_ALLOWED")]
		CROSS_PROFILE_COPY_PASTE_ALLOWED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CrossProfilePoliciesCrossProfileDataSharing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CROSS_PROFILE_DATA_SHARING_UNSPECIFIED")]
		CROSS_PROFILE_DATA_SHARING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CROSS_PROFILE_DATA_SHARING_DISALLOWED")]
		CROSS_PROFILE_DATA_SHARING_DISALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED")]
		DATA_SHARING_FROM_WORK_TO_PERSONAL_DISALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CROSS_PROFILE_DATA_SHARING_ALLOWED")]
		CROSS_PROFILE_DATA_SHARING_ALLOWED = 3,
	}
	
	/// <summary>
	/// A list of package names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageNameList
	{
		
		/// <summary>
		/// A list of package names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageNames")]
		public string[] PackageNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CrossProfilePoliciesShowWorkContactsInPersonalProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED")]
		SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED")]
		SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED")]
		SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED_EXCEPT_SYSTEM")]
		SHOW_WORK_CONTACTS_IN_PERSONAL_PROFILE_DISALLOWED_EXCEPT_SYSTEM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CrossProfilePoliciesWorkProfileWidgetsDefault
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED")]
		WORK_PROFILE_WIDGETS_DEFAULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED")]
		WORK_PROFILE_WIDGETS_DEFAULT_ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED")]
		WORK_PROFILE_WIDGETS_DEFAULT_DISALLOWED = 2,
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A device owned by an enterprise. Unless otherwise noted, all fields are read-only and can't be modified by enterprises.devices.patch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Device
	{
		
		/// <summary>
		/// The API level of the Android platform version running on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiLevel")]
		public System.Nullable<System.Int32> ApiLevel { get; set; }
		
		/// <summary>
		/// Reports for apps installed on the device. This information is only available when application_reports_enabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationReports")]
		public ApplicationReport[] ApplicationReports { get; set; }
		
		/// <summary>
		/// The password requirements currently applied to the device. The applied requirements may be slightly different from those specified in passwordPolicies in some cases. fieldPath is set based on passwordPolicies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliedPasswordPolicies")]
		public PasswordRequirements[] AppliedPasswordPolicies { get; set; }
		
		/// <summary>
		/// The name of the policy currently applied to the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliedPolicyName")]
		public string AppliedPolicyName { get; set; }
		
		/// <summary>
		/// The version of the policy currently applied to the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliedPolicyVersion")]
		public string AppliedPolicyVersion { get; set; }
		
		/// <summary>
		/// The state currently applied to the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appliedState")]
		public System.Nullable<DeviceAppliedState> AppliedState { get; set; }
		
		/// <summary>
		/// Information about Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC).This information is only available if statusReportingSettings.commonCriteriaModeEnabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonCriteriaModeInfo")]
		public CommonCriteriaModeInfo CommonCriteriaModeInfo { get; set; }
		
		/// <summary>
		/// Information about security related device settings on device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSettings")]
		public DeviceSettings DeviceSettings { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabledReason")]
		public UserFacingMessage DisabledReason { get; set; }
		
		/// <summary>
		/// Detailed information about displays on the device. This information is only available if displayInfoEnabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displays")]
		public Display[] Displays { get; set; }
		
		/// <summary>
		/// The time of device enrollment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentTime")]
		public string EnrollmentTime { get; set; }
		
		/// <summary>
		/// If the device was enrolled with an enrollment token with additional data provided, this field contains that data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentTokenData")]
		public string EnrollmentTokenData { get; set; }
		
		/// <summary>
		/// If the device was enrolled with an enrollment token, this field contains the name of the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentTokenName")]
		public string EnrollmentTokenName { get; set; }
		
		/// <summary>
		/// Information about device hardware. The fields related to temperature thresholds are only available if hardwareStatusEnabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareInfo")]
		public HardwareInfo HardwareInfo { get; set; }
		
		/// <summary>
		/// Hardware status samples in chronological order. This information is only available if hardwareStatusEnabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareStatusSamples")]
		public HardwareStatus[] HardwareStatusSamples { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPolicyComplianceReportTime")]
		public string LastPolicyComplianceReportTime { get; set; }
		
		/// <summary>
		/// The last time the device fetched its policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPolicySyncTime")]
		public string LastPolicySyncTime { get; set; }
		
		/// <summary>
		/// The last time the device sent a status report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastStatusReportTime")]
		public string LastStatusReportTime { get; set; }
		
		/// <summary>
		/// The type of management mode Android Device Policy takes on the device. This influences which policy settings are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementMode")]
		public System.Nullable<DeviceManagementMode> ManagementMode { get; set; }
		
		/// <summary>
		/// Events related to memory and storage measurements in chronological order. This information is only available if memoryInfoEnabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryEvents")]
		public MemoryEvent[] MemoryEvents { get; set; }
		
		/// <summary>
		/// Information about device memory and storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryInfo")]
		public MemoryInfo MemoryInfo { get; set; }
		
		/// <summary>
		/// The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Device network info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInfo")]
		public NetworkInfo NetworkInfo { get; set; }
		
		/// <summary>
		/// Details about policy settings that the device is not compliant with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonComplianceDetails")]
		public NonComplianceDetail[] NonComplianceDetails { get; set; }
		
		/// <summary>
		/// Ownership of the managed device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownership")]
		public System.Nullable<DeviceOwnership> Ownership { get; set; }
		
		/// <summary>
		/// Whether the device is compliant with its policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyCompliant")]
		public System.Nullable<System.Boolean> PolicyCompliant { get; set; }
		
		/// <summary>
		/// The name of the policy applied to the device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device's user is applied. This field can be modified by a patch request. You can specify only the policyId when calling enterprises.devices.patch, as long as the policyId doesn’t contain any slashes. The rest of the policy name is inferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Power management events on the device in chronological order. This information is only available if powerManagementEventsEnabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerManagementEvents")]
		public PowerManagementEvent[] PowerManagementEvents { get; set; }
		
		/// <summary>
		/// If the same physical device has been enrolled multiple times, this field contains its previous device names. The serial number is used as the unique identifier to determine if the same physical device has enrolled previously. The names are in chronological order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousDeviceNames")]
		public string[] PreviousDeviceNames { get; set; }
		
		/// <summary>
		/// The security posture of the device, as determined by the current device state and the policies applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityPosture")]
		public SecurityPosture SecurityPosture { get; set; }
		
		/// <summary>
		/// Information about device software.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareInfo")]
		public SoftwareInfo SoftwareInfo { get; set; }
		
		/// <summary>
		/// The state to be applied to the device. This field can be modified by a patch request. Note that when calling enterprises.devices.patch, ACTIVE and DISABLED are the only allowable values. To enter the device into a DELETED state, call enterprises.devices.delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DeviceAppliedState State { get; set; }
		
		/// <summary>
		/// Map of selected system properties name and value related to the device. This information is only available if systemPropertiesEnabled is true in the device's policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemProperties")]
		public System.Collections.Generic.Dictionary<string, string> SystemProperties { get; set; }
		
		/// <summary>
		/// A user belonging to an enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// The resource name of the user that owns this device in the form enterprises/{enterpriseId}/users/{userId}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// Requirements for the password used to unlock a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordRequirements
	{
		
		/// <summary>
		/// Number of incorrect device-unlock passwords that can be entered before a device is wiped. A value of 0 means there is no restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumFailedPasswordsForWipe")]
		public System.Nullable<System.Int32> MaximumFailedPasswordsForWipe { get; set; }
		
		/// <summary>
		/// Password expiration timeout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordExpirationTimeout")]
		public string PasswordExpirationTimeout { get; set; }
		
		/// <summary>
		/// The length of the password history. After setting this field, the user won't be able to enter a new password that is the same as any password in the history. A value of 0 means there is no restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordHistoryLength")]
		public System.Nullable<System.Int32> PasswordHistoryLength { get; set; }
		
		/// <summary>
		/// The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, or COMPLEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordMinimumLength")]
		public System.Nullable<System.Int32> PasswordMinimumLength { get; set; }
		
		/// <summary>
		/// Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordMinimumLetters")]
		public System.Nullable<System.Int32> PasswordMinimumLetters { get; set; }
		
		/// <summary>
		/// Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordMinimumLowerCase")]
		public System.Nullable<System.Int32> PasswordMinimumLowerCase { get; set; }
		
		/// <summary>
		/// Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordMinimumNonLetter")]
		public System.Nullable<System.Int32> PasswordMinimumNonLetter { get; set; }
		
		/// <summary>
		/// Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordMinimumNumeric")]
		public System.Nullable<System.Int32> PasswordMinimumNumeric { get; set; }
		
		/// <summary>
		/// Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordMinimumSymbols")]
		public System.Nullable<System.Int32> PasswordMinimumSymbols { get; set; }
		
		/// <summary>
		/// Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordMinimumUpperCase")]
		public System.Nullable<System.Int32> PasswordMinimumUpperCase { get; set; }
		
		/// <summary>
		/// The required password quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordQuality")]
		public System.Nullable<PasswordRequirementsPasswordQuality> PasswordQuality { get; set; }
		
		/// <summary>
		/// The scope that the password requirement applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordScope")]
		public System.Nullable<PasswordRequirementsPasswordScope> PasswordScope { get; set; }
		
		/// <summary>
		/// The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirePasswordUnlock")]
		public System.Nullable<PasswordRequirementsRequirePasswordUnlock> RequirePasswordUnlock { get; set; }
		
		/// <summary>
		/// Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is reported with nonComplianceReason set to USER_ACTION.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unifiedLockSettings")]
		public System.Nullable<PasswordRequirementsUnifiedLockSettings> UnifiedLockSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PasswordRequirementsPasswordQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSWORD_QUALITY_UNSPECIFIED")]
		PASSWORD_QUALITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIOMETRIC_WEAK")]
		BIOMETRIC_WEAK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOMETHING")]
		SOMETHING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMERIC")]
		NUMERIC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NUMERIC_COMPLEX")]
		NUMERIC_COMPLEX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALPHABETIC")]
		ALPHABETIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALPHANUMERIC")]
		ALPHANUMERIC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLEX")]
		COMPLEX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLEXITY_LOW")]
		COMPLEXITY_LOW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLEXITY_MEDIUM")]
		COMPLEXITY_MEDIUM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLEXITY_HIGH")]
		COMPLEXITY_HIGH = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PasswordRequirementsPasswordScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCOPE_UNSPECIFIED")]
		SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCOPE_DEVICE")]
		SCOPE_DEVICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCOPE_PROFILE")]
		SCOPE_PROFILE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PasswordRequirementsRequirePasswordUnlock
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED")]
		REQUIRE_PASSWORD_UNLOCK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_DEFAULT_DEVICE_TIMEOUT")]
		USE_DEFAULT_DEVICE_TIMEOUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUIRE_EVERY_DAY")]
		REQUIRE_EVERY_DAY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PasswordRequirementsUnifiedLockSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNIFIED_LOCK_SETTINGS_UNSPECIFIED")]
		UNIFIED_LOCK_SETTINGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK")]
		ALLOW_UNIFIED_WORK_AND_PERSONAL_LOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUIRE_SEPARATE_WORK_LOCK")]
		REQUIRE_SEPARATE_WORK_LOCK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceAppliedState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE_STATE_UNSPECIFIED")]
		DEVICE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVISIONING")]
		PROVISIONING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOST")]
		LOST = 5,
	}
	
	/// <summary>
	/// Information about security related device settings on device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceSettings
	{
		
		/// <summary>
		/// Whether ADB (https://developer.android.com/studio/command-line/adb.html) is enabled on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adbEnabled")]
		public System.Nullable<System.Boolean> AdbEnabled { get; set; }
		
		/// <summary>
		/// Whether developer mode is enabled on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developmentSettingsEnabled")]
		public System.Nullable<System.Boolean> DevelopmentSettingsEnabled { get; set; }
		
		/// <summary>
		/// Encryption status from DevicePolicyManager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionStatus")]
		public System.Nullable<DeviceSettingsEncryptionStatus> EncryptionStatus { get; set; }
		
		/// <summary>
		/// Whether the device is secured with PIN/password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeviceSecure")]
		public System.Nullable<System.Boolean> IsDeviceSecure { get; set; }
		
		/// <summary>
		/// Whether the storage encryption is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Whether installing apps from unknown sources is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unknownSourcesEnabled")]
		public System.Nullable<System.Boolean> UnknownSourcesEnabled { get; set; }
		
		/// <summary>
		/// Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verifyAppsEnabled")]
		public System.Nullable<System.Boolean> VerifyAppsEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceSettingsEncryptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENCRYPTION_STATUS_UNSPECIFIED")]
		ENCRYPTION_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED")]
		UNSUPPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVATING")]
		ACTIVATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE_DEFAULT_KEY")]
		ACTIVE_DEFAULT_KEY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE_PER_USER")]
		ACTIVE_PER_USER = 6,
	}
	
	/// <summary>
	/// Device display information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Display
	{
		
		/// <summary>
		/// Display density expressed as dots-per-inch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="density")]
		public System.Nullable<System.Int32> Density { get; set; }
		
		/// <summary>
		/// Unique display id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayId")]
		public System.Nullable<System.Int32> DisplayId { get; set; }
		
		/// <summary>
		/// Display height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Name of the display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Refresh rate of the display in frames per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshRate")]
		public System.Nullable<System.Int32> RefreshRate { get; set; }
		
		/// <summary>
		/// State of the display.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DisplayState> State { get; set; }
		
		/// <summary>
		/// Display width in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DisplayState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISPLAY_STATE_UNSPECIFIED")]
		DISPLAY_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON")]
		ON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOZE")]
		DOZE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUSPENDED")]
		SUSPENDED = 4,
	}
	
	/// <summary>
	/// Information about device hardware. The fields related to temperature thresholds are only available if hardwareStatusEnabled is true in the device's policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HardwareInfo
	{
		
		/// <summary>
		/// Battery shutdown temperature thresholds in Celsius for each battery on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryShutdownTemperatures")]
		public double[] BatteryShutdownTemperatures { get; set; }
		
		/// <summary>
		/// Battery throttling temperature thresholds in Celsius for each battery on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryThrottlingTemperatures")]
		public double[] BatteryThrottlingTemperatures { get; set; }
		
		/// <summary>
		/// Brand of the device. For example, Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// CPU shutdown temperature thresholds in Celsius for each CPU on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuShutdownTemperatures")]
		public double[] CpuShutdownTemperatures { get; set; }
		
		/// <summary>
		/// CPU throttling temperature thresholds in Celsius for each CPU on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuThrottlingTemperatures")]
		public double[] CpuThrottlingTemperatures { get; set; }
		
		/// <summary>
		/// Baseband version. For example, MDM9625_104662.22.05.34p.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceBasebandVersion")]
		public string DeviceBasebandVersion { get; set; }
		
		/// <summary>
		/// Output only. ID that uniquely identifies a personally-owned device in a particular organization. On the same physical device when enrolled with the same organization, this ID persists across setups and even factory resets. This ID is available on personally-owned devices with a work profile on devices running Android 12 and above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterpriseSpecificId")]
		public string EnterpriseSpecificId { get; set; }
		
		/// <summary>
		/// GPU shutdown temperature thresholds in Celsius for each GPU on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuShutdownTemperatures")]
		public double[] GpuShutdownTemperatures { get; set; }
		
		/// <summary>
		/// GPU throttling temperature thresholds in Celsius for each GPU on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuThrottlingTemperatures")]
		public double[] GpuThrottlingTemperatures { get; set; }
		
		/// <summary>
		/// Name of the hardware. For example, Angler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardware")]
		public string Hardware { get; set; }
		
		/// <summary>
		/// Manufacturer. For example, Motorola.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// The model of the device. For example, Asus Nexus 7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The device serial number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Device skin shutdown temperature thresholds in Celsius.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skinShutdownTemperatures")]
		public double[] SkinShutdownTemperatures { get; set; }
		
		/// <summary>
		/// Device skin throttling temperature thresholds in Celsius.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skinThrottlingTemperatures")]
		public double[] SkinThrottlingTemperatures { get; set; }
	}
	
	/// <summary>
	/// Hardware status. Temperatures may be compared to the temperature thresholds available in hardwareInfo to determine hardware health.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HardwareStatus
	{
		
		/// <summary>
		/// Current battery temperatures in Celsius for each battery on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryTemperatures")]
		public double[] BatteryTemperatures { get; set; }
		
		/// <summary>
		/// Current CPU temperatures in Celsius for each CPU on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuTemperatures")]
		public double[] CpuTemperatures { get; set; }
		
		/// <summary>
		/// CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported in the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuUsages")]
		public double[] CpuUsages { get; set; }
		
		/// <summary>
		/// The time the measurements were taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fanSpeeds")]
		public double[] FanSpeeds { get; set; }
		
		/// <summary>
		/// Current GPU temperatures in Celsius for each GPU on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gpuTemperatures")]
		public double[] GpuTemperatures { get; set; }
		
		/// <summary>
		/// Current device skin temperatures in Celsius.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skinTemperatures")]
		public double[] SkinTemperatures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceManagementMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANAGEMENT_MODE_UNSPECIFIED")]
		MANAGEMENT_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE_OWNER")]
		DEVICE_OWNER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROFILE_OWNER")]
		PROFILE_OWNER = 2,
	}
	
	/// <summary>
	/// An event related to memory and storage measurements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemoryEvent
	{
		
		/// <summary>
		/// The number of free bytes in the medium, or for EXTERNAL_STORAGE_DETECTED, the total capacity in bytes of the storage medium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="byteCount")]
		public string ByteCount { get; set; }
		
		/// <summary>
		/// The creation time of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<MemoryEventEventType> EventType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MemoryEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEMORY_EVENT_TYPE_UNSPECIFIED")]
		MEMORY_EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAM_MEASURED")]
		RAM_MEASURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_STORAGE_MEASURED")]
		INTERNAL_STORAGE_MEASURED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_STORAGE_DETECTED")]
		EXTERNAL_STORAGE_DETECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_STORAGE_REMOVED")]
		EXTERNAL_STORAGE_REMOVED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXTERNAL_STORAGE_MEASURED")]
		EXTERNAL_STORAGE_MEASURED = 5,
	}
	
	/// <summary>
	/// Information about device memory and storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemoryInfo
	{
		
		/// <summary>
		/// Total internal storage on device in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalInternalStorage")]
		public string TotalInternalStorage { get; set; }
		
		/// <summary>
		/// Total RAM on device in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRam")]
		public string TotalRam { get; set; }
	}
	
	/// <summary>
	/// Device network info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkInfo
	{
		
		/// <summary>
		/// IMEI number of the GSM device. For example, A1000031212.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imei")]
		public string Imei { get; set; }
		
		/// <summary>
		/// MEID number of the CDMA device. For example, A00000292788E1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meid")]
		public string Meid { get; set; }
		
		/// <summary>
		/// Alphabetic name of current registered operator. For example, Vodafone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkOperatorName")]
		public string NetworkOperatorName { get; set; }
		
		/// <summary>
		/// Provides telephony information associated with each SIM card on the device. Only supported on fully managed devices starting from Android API level 23.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telephonyInfos")]
		public TelephonyInfo[] TelephonyInfos { get; set; }
		
		/// <summary>
		/// Wi-Fi MAC address of the device. For example, 7c:11:11:11:11:11.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiMacAddress")]
		public string WifiMacAddress { get; set; }
	}
	
	/// <summary>
	/// Telephony information associated with a given SIM card on the device. Only supported on fully managed devices starting from Android API level 23.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelephonyInfo
	{
		
		/// <summary>
		/// The carrier name associated with this SIM card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierName")]
		public string CarrierName { get; set; }
		
		/// <summary>
		/// The phone number associated with this SIM card.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Provides detail about non-compliance with a policy setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonComplianceDetail
	{
		
		/// <summary>
		/// If the policy setting could not be applied, the current value of the setting on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentValue")]
		public object CurrentValue { get; set; }
		
		/// <summary>
		/// For settings with nested fields, if a particular nested field is out of compliance, this specifies the full path to the offending field. The path is formatted in the same way the policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the field name is followed by a dot then by a subfield name. 2) For array-typed fields, the field name is followed by the array index enclosed in brackets. For example, to indicate a problem with the url field in the externalData field in the 3rd application, the path would be applications[2].externalData.url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldPath")]
		public string FieldPath { get; set; }
		
		/// <summary>
		/// If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app can't be installed or updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installationFailureReason")]
		public System.Nullable<NonComplianceDetailInstallationFailureReason> InstallationFailureReason { get; set; }
		
		/// <summary>
		/// The reason the device is not in compliance with the setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonComplianceReason")]
		public NonComplianceDetailConditionNonComplianceReason NonComplianceReason { get; set; }
		
		/// <summary>
		/// The package name indicating which app is out of compliance, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The name of the policy setting. This is the JSON field name of a top-level Policy field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingName")]
		public string SettingName { get; set; }
		
		/// <summary>
		/// Additional context for SpecificNonComplianceReason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specificNonComplianceContext")]
		public SpecificNonComplianceContext SpecificNonComplianceContext { get; set; }
		
		/// <summary>
		/// The policy-specific reason the device is not in compliance with the setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specificNonComplianceReason")]
		public System.Nullable<NonComplianceDetailSpecificNonComplianceReason> SpecificNonComplianceReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NonComplianceDetailInstallationFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLATION_FAILURE_REASON_UNSPECIFIED")]
		INSTALLATION_FAILURE_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLATION_FAILURE_REASON_UNKNOWN")]
		INSTALLATION_FAILURE_REASON_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_FOUND")]
		NOT_FOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_COMPATIBLE_WITH_DEVICE")]
		NOT_COMPATIBLE_WITH_DEVICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_APPROVED")]
		NOT_APPROVED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERMISSIONS_NOT_ACCEPTED")]
		PERMISSIONS_NOT_ACCEPTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_AVAILABLE_IN_COUNTRY")]
		NOT_AVAILABLE_IN_COUNTRY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_LICENSES_REMAINING")]
		NO_LICENSES_REMAINING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_ENROLLED")]
		NOT_ENROLLED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_INVALID")]
		USER_INVALID = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NETWORK_ERROR_UNRELIABLE_CONNECTION")]
		NETWORK_ERROR_UNRELIABLE_CONNECTION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSUFFICIENT_STORAGE")]
		INSUFFICIENT_STORAGE = 12,
	}
	
	/// <summary>
	/// Additional context for SpecificNonComplianceReason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpecificNonComplianceContext
	{
		
		/// <summary>
		/// Additional context for non-compliance related to Wi-Fi configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oncWifiContext")]
		public OncWifiContext OncWifiContext { get; set; }
		
		/// <summary>
		/// Additional context for non-compliance related to password policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordPoliciesContext")]
		public PasswordPoliciesContext PasswordPoliciesContext { get; set; }
	}
	
	/// <summary>
	/// Additional context for non-compliance related to Wi-Fi configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OncWifiContext
	{
		
		/// <summary>
		/// The GUID of non-compliant Wi-Fi configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiGuid")]
		public string WifiGuid { get; set; }
	}
	
	/// <summary>
	/// Additional context for non-compliance related to password policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordPoliciesContext
	{
		
		/// <summary>
		/// The scope of non-compliant password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordPolicyScope")]
		public PasswordRequirementsPasswordScope PasswordPolicyScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NonComplianceDetailSpecificNonComplianceReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPECIFIC_NON_COMPLIANCE_REASON_UNSPECIFIED")]
		SPECIFIC_NON_COMPLIANCE_REASON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSWORD_POLICIES_USER_CREDENTIALS_CONFIRMATION_REQUIRED")]
		PASSWORD_POLICIES_USER_CREDENTIALS_CONFIRMATION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSWORD_POLICIES_PASSWORD_EXPIRED")]
		PASSWORD_POLICIES_PASSWORD_EXPIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT")]
		PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONC_WIFI_INVALID_VALUE")]
		ONC_WIFI_INVALID_VALUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONC_WIFI_API_LEVEL")]
		ONC_WIFI_API_LEVEL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONC_WIFI_INVALID_ENTERPRISE_CONFIG")]
		ONC_WIFI_INVALID_ENTERPRISE_CONFIG = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceOwnership
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OWNERSHIP_UNSPECIFIED")]
		OWNERSHIP_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPANY_OWNED")]
		COMPANY_OWNED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSONALLY_OWNED")]
		PERSONALLY_OWNED = 2,
	}
	
	/// <summary>
	/// A power management event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PowerManagementEvent
	{
		
		/// <summary>
		/// For BATTERY_LEVEL_COLLECTED events, the battery level as a percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batteryLevel")]
		public System.Nullable<System.Single> BatteryLevel { get; set; }
		
		/// <summary>
		/// The creation time of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Event type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<PowerManagementEventEventType> EventType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PowerManagementEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED")]
		POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BATTERY_LEVEL_COLLECTED")]
		BATTERY_LEVEL_COLLECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_CONNECTED")]
		POWER_CONNECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_DISCONNECTED")]
		POWER_DISCONNECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BATTERY_LOW")]
		BATTERY_LOW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BATTERY_OKAY")]
		BATTERY_OKAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOT_COMPLETED")]
		BOOT_COMPLETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHUTDOWN")]
		SHUTDOWN = 7,
	}
	
	/// <summary>
	/// The security posture of the device, as determined by the current device state and the policies applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecurityPosture
	{
		
		/// <summary>
		/// Device's security posture value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devicePosture")]
		public System.Nullable<SecurityPostureDevicePosture> DevicePosture { get; set; }
		
		/// <summary>
		/// Additional details regarding the security posture of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postureDetails")]
		public PostureDetail[] PostureDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecurityPostureDevicePosture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSTURE_UNSPECIFIED")]
		POSTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECURE")]
		SECURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AT_RISK")]
		AT_RISK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POTENTIALLY_COMPROMISED")]
		POTENTIALLY_COMPROMISED = 3,
	}
	
	/// <summary>
	/// Additional details regarding the security posture of the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostureDetail
	{
		
		/// <summary>
		/// Corresponding admin-facing advice to mitigate this security risk and improve the security posture of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advice")]
		public UserFacingMessage[] Advice { get; set; }
		
		/// <summary>
		/// A specific security risk that negatively affects the security posture of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityRisk")]
		public System.Nullable<PostureDetailSecurityRisk> SecurityRisk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PostureDetailSecurityRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECURITY_RISK_UNSPECIFIED")]
		SECURITY_RISK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_OS")]
		UNKNOWN_OS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPROMISED_OS")]
		COMPROMISED_OS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HARDWARE_BACKED_EVALUATION_FAILED")]
		HARDWARE_BACKED_EVALUATION_FAILED = 3,
	}
	
	/// <summary>
	/// Information about device software.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SoftwareInfo
	{
		
		/// <summary>
		/// Android build ID string meant for displaying to the user. For example, shamu-userdebug 6.0.1 MOB30I 2756745 dev-keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidBuildNumber")]
		public string AndroidBuildNumber { get; set; }
		
		/// <summary>
		/// Build time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidBuildTime")]
		public string AndroidBuildTime { get; set; }
		
		/// <summary>
		/// The Android Device Policy app version code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDevicePolicyVersionCode")]
		public System.Nullable<System.Int32> AndroidDevicePolicyVersionCode { get; set; }
		
		/// <summary>
		/// The Android Device Policy app version as displayed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDevicePolicyVersionName")]
		public string AndroidDevicePolicyVersionName { get; set; }
		
		/// <summary>
		/// The user-visible Android version string. For example, 6.0.1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidVersion")]
		public string AndroidVersion { get; set; }
		
		/// <summary>
		/// The system bootloader version number, e.g. 0.6.7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootloaderVersion")]
		public string BootloaderVersion { get; set; }
		
		/// <summary>
		/// SHA-256 hash of android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the system package, which can be used to verify that the system build hasn't been modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceBuildSignature")]
		public string DeviceBuildSignature { get; set; }
		
		/// <summary>
		/// Kernel version, for example, 2.6.32.9-g103d848.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceKernelVersion")]
		public string DeviceKernelVersion { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code for the primary locale on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryLanguageCode")]
		public string PrimaryLanguageCode { get; set; }
		
		/// <summary>
		/// Security patch level, e.g. 2016-05-01.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityPatchLevel")]
		public string SecurityPatchLevel { get; set; }
		
		/// <summary>
		/// Information about a potential pending system update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemUpdateInfo")]
		public SystemUpdateInfo SystemUpdateInfo { get; set; }
	}
	
	/// <summary>
	/// Information about a potential pending system update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemUpdateInfo
	{
		
		/// <summary>
		/// The time when the update was first available. A zero value indicates that this field is not set. This field is set only if an update is available (that is, updateStatus is neither UPDATE_STATUS_UNKNOWN nor UP_TO_DATE).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateReceivedTime")]
		public string UpdateReceivedTime { get; set; }
		
		/// <summary>
		/// The status of an update: whether an update exists and what type it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateStatus")]
		public System.Nullable<SystemUpdateInfoUpdateStatus> UpdateStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SystemUpdateInfoUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE_STATUS_UNKNOWN")]
		UPDATE_STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UP_TO_DATE")]
		UP_TO_DATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_UPDATE_AVAILABLE")]
		UNKNOWN_UPDATE_AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECURITY_UPDATE_AVAILABLE")]
		SECURITY_UPDATE_AVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OS_UPDATE_AVAILABLE")]
		OS_UPDATE_AVAILABLE = 4,
	}
	
	/// <summary>
	/// A user belonging to an enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// A unique identifier you create for this user, such as user342 or asset#44418. This field must be set when the user is created and can't be updated. This field must not contain personally identifiable information (PII). This identifier must be 1024 characters or less; otherwise, the update policy request will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIdentifier")]
		public string AccountIdentifier { get; set; }
	}
	
	/// <summary>
	/// Covers controls for device connectivity such as Wi-Fi, USB data access, keyboard/mouse connections, and more.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceConnectivityManagement
	{
		
		/// <summary>
		/// Controls Wi-Fi configuring privileges. Based on the option set, user will have either full or limited or no control in configuring Wi-Fi networks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configureWifi")]
		public System.Nullable<DeviceConnectivityManagementConfigureWifi> ConfigureWifi { get; set; }
		
		/// <summary>
		/// Controls tethering settings. Based on the value set, the user is partially or fully disallowed from using different forms of tethering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tetheringSettings")]
		public System.Nullable<DeviceConnectivityManagementTetheringSettings> TetheringSettings { get; set; }
		
		/// <summary>
		/// Controls what files and/or data can be transferred via USB. Supported only on company-owned devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usbDataAccess")]
		public System.Nullable<DeviceConnectivityManagementUsbDataAccess> UsbDataAccess { get; set; }
		
		/// <summary>
		/// Controls configuring and using Wi-Fi direct settings. Supported on company-owned devices running Android 13 and above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiDirectSettings")]
		public System.Nullable<DeviceConnectivityManagementWifiDirectSettings> WifiDirectSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceConnectivityManagementConfigureWifi
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURE_WIFI_UNSPECIFIED")]
		CONFIGURE_WIFI_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_CONFIGURING_WIFI")]
		ALLOW_CONFIGURING_WIFI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_ADD_WIFI_CONFIG")]
		DISALLOW_ADD_WIFI_CONFIG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_CONFIGURING_WIFI")]
		DISALLOW_CONFIGURING_WIFI = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceConnectivityManagementTetheringSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TETHERING_SETTINGS_UNSPECIFIED")]
		TETHERING_SETTINGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_ALL_TETHERING")]
		ALLOW_ALL_TETHERING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_WIFI_TETHERING")]
		DISALLOW_WIFI_TETHERING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_ALL_TETHERING")]
		DISALLOW_ALL_TETHERING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceConnectivityManagementUsbDataAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USB_DATA_ACCESS_UNSPECIFIED")]
		USB_DATA_ACCESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_USB_DATA_TRANSFER")]
		ALLOW_USB_DATA_TRANSFER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_USB_FILE_TRANSFER")]
		DISALLOW_USB_FILE_TRANSFER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_USB_DATA_TRANSFER")]
		DISALLOW_USB_DATA_TRANSFER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceConnectivityManagementWifiDirectSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIFI_DIRECT_SETTINGS_UNSPECIFIED")]
		WIFI_DIRECT_SETTINGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_WIFI_DIRECT")]
		ALLOW_WIFI_DIRECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOW_WIFI_DIRECT")]
		DISALLOW_WIFI_DIRECT = 2,
	}
	
	/// <summary>
	/// Controls for device radio settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceRadioState
	{
		
		/// <summary>
		/// Controls whether airplane mode can be toggled by the user or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airplaneModeState")]
		public System.Nullable<DeviceRadioStateAirplaneModeState> AirplaneModeState { get; set; }
		
		/// <summary>
		/// Controls whether cellular 2G setting can be toggled by the user or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellularTwoGState")]
		public System.Nullable<DeviceRadioStateCellularTwoGState> CellularTwoGState { get; set; }
		
		/// <summary>
		/// The minimum required security level of Wi-Fi networks that the device can connect to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumWifiSecurityLevel")]
		public System.Nullable<DeviceRadioStateMinimumWifiSecurityLevel> MinimumWifiSecurityLevel { get; set; }
		
		/// <summary>
		/// Controls the state of the ultra wideband setting and whether the user can toggle it on or off.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ultraWidebandState")]
		public System.Nullable<DeviceRadioStateUltraWidebandState> UltraWidebandState { get; set; }
		
		/// <summary>
		/// Controls current state of Wi-Fi and if user can change its state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiState")]
		public System.Nullable<DeviceRadioStateWifiState> WifiState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceRadioStateAirplaneModeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIRPLANE_MODE_STATE_UNSPECIFIED")]
		AIRPLANE_MODE_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIRPLANE_MODE_USER_CHOICE")]
		AIRPLANE_MODE_USER_CHOICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIRPLANE_MODE_DISABLED")]
		AIRPLANE_MODE_DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceRadioStateCellularTwoGState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CELLULAR_TWO_G_STATE_UNSPECIFIED")]
		CELLULAR_TWO_G_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CELLULAR_TWO_G_USER_CHOICE")]
		CELLULAR_TWO_G_USER_CHOICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CELLULAR_TWO_G_DISABLED")]
		CELLULAR_TWO_G_DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceRadioStateMinimumWifiSecurityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MINIMUM_WIFI_SECURITY_LEVEL_UNSPECIFIED")]
		MINIMUM_WIFI_SECURITY_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN_NETWORK_SECURITY")]
		OPEN_NETWORK_SECURITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSONAL_NETWORK_SECURITY")]
		PERSONAL_NETWORK_SECURITY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENTERPRISE_NETWORK_SECURITY")]
		ENTERPRISE_NETWORK_SECURITY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceRadioStateUltraWidebandState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ULTRA_WIDEBAND_STATE_UNSPECIFIED")]
		ULTRA_WIDEBAND_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ULTRA_WIDEBAND_USER_CHOICE")]
		ULTRA_WIDEBAND_USER_CHOICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ULTRA_WIDEBAND_DISABLED")]
		ULTRA_WIDEBAND_DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceRadioStateWifiState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIFI_STATE_UNSPECIFIED")]
		WIFI_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIFI_STATE_USER_CHOICE")]
		WIFI_STATE_USER_CHOICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIFI_ENABLED")]
		WIFI_ENABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIFI_DISABLED")]
		WIFI_DISABLED = 3,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// An enrollment token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollmentToken
	{
		
		/// <summary>
		/// Optional, arbitrary data associated with the enrollment token. This could contain, for example, the ID of an org unit the device is assigned to after enrollment. After a device enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data must be 1024 characters or less; otherwise, the creation request will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalData")]
		public string AdditionalData { get; set; }
		
		/// <summary>
		/// Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPersonalUsage")]
		public System.Nullable<EnrollmentTokenAllowPersonalUsage> AllowPersonalUsage { get; set; }
		
		/// <summary>
		/// The length of time the enrollment token is valid, ranging from 1 minute to Durations.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Durations.html#MAX_VALUE), approximately 10,000 years. If not specified, the default duration is 1 hour. Please note that if requested duration causes the resulting expiration_timestamp to exceed Timestamps.MAX_VALUE (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Timestamps.html#MAX_VALUE), then expiration_timestamp is coerced to Timestamps.MAX_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// The expiration time of the token. This is a read-only field generated by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTimestamp")]
		public string ExpirationTimestamp { get; set; }
		
		/// <summary>
		/// The name of the enrollment token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the enrollment token is for one time use only. If the flag is set to true, only one device can use it for registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneTimeOnly")]
		public System.Nullable<System.Boolean> OneTimeOnly { get; set; }
		
		/// <summary>
		/// The name of the policy initially applied to the enrolled device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device’s user is applied. If user_name is also not specified, enterprises/{enterpriseId}/policies/default is applied by default. When updating this field, you can specify only the policyId as long as the policyId doesn’t contain any slashes. The rest of the policy name will be inferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyName")]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qrCode")]
		public string QrCode { get; set; }
		
		/// <summary>
		/// A user belonging to an enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
		
		/// <summary>
		/// The token value that's passed to the device and authorizes the device to enroll. This is a read-only field generated by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EnrollmentTokenAllowPersonalUsage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOW_PERSONAL_USAGE_UNSPECIFIED")]
		ALLOW_PERSONAL_USAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSONAL_USAGE_ALLOWED")]
		PERSONAL_USAGE_ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERSONAL_USAGE_DISALLOWED")]
		PERSONAL_USAGE_DISALLOWED = 2,
	}
	
	/// <summary>
	/// The configuration applied to an enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Enterprise
	{
		
		/// <summary>
		/// Deprecated and unused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appAutoApprovalEnabled")]
		public System.Nullable<System.Boolean> AppAutoApprovalEnabled { get; set; }
		
		/// <summary>
		/// Contact details for managed Google Play enterprises.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactInfo")]
		public ContactInfo ContactInfo { get; set; }
		
		/// <summary>
		/// The types of Google Pub/Sub notifications enabled for the enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledNotificationTypes")]
		public string[] EnabledNotificationTypes { get; set; }
		
		/// <summary>
		/// The name of the enterprise displayed to users. This field has a maximum length of 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterpriseDisplayName")]
		public string EnterpriseDisplayName { get; set; }
		
		/// <summary>
		/// Data hosted at an external location. The data is to be downloaded by Android Device Policy and verified against the hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public ExternalData Logo { get; set; }
		
		/// <summary>
		/// The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A color in RGB format that indicates the predominant color to display in the device management app UI. The color components are stored as follows: (red << 16) | (green << 8) | blue, where the value of each component is between 0 and 255, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryColor")]
		public System.Nullable<System.Int32> PrimaryColor { get; set; }
		
		/// <summary>
		/// The topic which Pub/Sub notifications are published to, in the form projects/{project}/topics/{topic}. This field is only required if Pub/Sub notifications are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
		
		/// <summary>
		/// Sign-in details of the enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signinDetails")]
		public SigninDetail[] SigninDetails { get; set; }
		
		/// <summary>
		/// Terms and conditions that must be accepted when provisioning a device for this enterprise. A page of terms is generated for each value in this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsAndConditions")]
		public TermsAndConditions[] TermsAndConditions { get; set; }
	}
	
	/// <summary>
	/// Data hosted at an external location. The data is to be downloaded by Android Device Policy and verified against the hash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalData
	{
		
		/// <summary>
		/// The base-64 encoded SHA-256 hash of the content hosted at url. If the content doesn't match this hash, Android Device Policy won't use the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Hash")]
		public string Sha256Hash { get; set; }
		
		/// <summary>
		/// The absolute URL to the data, which must use either the http or https scheme. Android Device Policy doesn't provide any credentials in the GET request, so the URL must be publicly accessible. Including a long, random component in the URL may be used to prevent attackers from discovering the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A resource containing sign in details for an enterprise. Use enterprises to manage SigninDetails for a given enterprise.For an enterprise, we can have any number of SigninDetails that is uniquely identified by combination of the following three fields (signin_url, allow_personal_usage, token_tag). One cannot create two SigninDetails with the same (signin_url, allow_personal_usage, token_tag). (token_tag is an optional field).Patch: The operation updates the current list of SigninDetails with the new list of SigninDetails. If the stored SigninDetail configuration is passed, it returns the same signin_enrollment_token and qr_code. If we pass multiple identical SigninDetail configurations that are not stored, it will store the first one amongst those SigninDetail configurations. if the configuration already exists we cannot request it more than once in a particular patch API call, otherwise it will give a duplicate key error and the whole operation will fail. If we remove certain SigninDetail configuration from the request then it will get removed from the storage. We can then request another signin_enrollment_token and qr_code for the same SigninDetail configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SigninDetail
	{
		
		/// <summary>
		/// Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowPersonalUsage")]
		public EnrollmentTokenAllowPersonalUsage AllowPersonalUsage { get; set; }
		
		/// <summary>
		/// A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON. This is a read-only field generated by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qrCode")]
		public string QrCode { get; set; }
		
		/// <summary>
		/// An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only field generated by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signinEnrollmentToken")]
		public string SigninEnrollmentToken { get; set; }
		
		/// <summary>
		/// Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The sign-in endpoint should finish authentication flow with a URL in the form of https://enterprise.google.com/android/enroll?et= for a successful login, or https://enterprise.google.com/android/enroll/invalid for a failed login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signinUrl")]
		public string SigninUrl { get; set; }
		
		/// <summary>
		/// An EMM-specified metadata to distinguish between instances of SigninDetail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTag")]
		public string TokenTag { get; set; }
	}
	
	/// <summary>
	/// A terms and conditions page to be accepted during provisioning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TermsAndConditions
	{
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public UserFacingMessage Content { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public UserFacingMessage Header { get; set; }
	}
	
	/// <summary>
	/// A system freeze period. When a device’s clock is within the freeze period, all incoming system updates (including security patches) are blocked and won’t be installed.When the device is outside any set freeze periods, the normal policy behavior (automatic, windowed, or postponed) applies.Leap years are ignored in freeze period calculations, in particular: If Feb. 29th is set as the start or end date of a freeze period, the freeze period will start or end on Feb. 28th instead. When a device’s system clock reads Feb. 29th, it’s treated as Feb. 28th. When calculating the number of days in a freeze period or the time between two freeze periods, Feb. 29th is ignored and not counted as a day.Note: For Freeze Periods to take effect, SystemUpdateType cannot be specified as SYSTEM_UPDATE_TYPE_UNSPECIFIED, because freeze periods require a defined policy to be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FreezePeriod
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
	}
	
	/// <summary>
	/// Response on issuing a command. This is currently empty as a placeholder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IssueCommandResponse
	{
	}
	
	/// <summary>
	/// Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KioskCustomization
	{
		
		/// <summary>
		/// Specifies whether the Settings app is allowed in kiosk mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSettings")]
		public System.Nullable<KioskCustomizationDeviceSettings> DeviceSettings { get; set; }
		
		/// <summary>
		/// Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerButtonActions")]
		public System.Nullable<KioskCustomizationPowerButtonActions> PowerButtonActions { get; set; }
		
		/// <summary>
		/// Specifies whether system info and notifications are disabled in kiosk mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusBar")]
		public System.Nullable<KioskCustomizationStatusBar> StatusBar { get; set; }
		
		/// <summary>
		/// Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the "close app" option on the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemErrorWarnings")]
		public System.Nullable<KioskCustomizationSystemErrorWarnings> SystemErrorWarnings { get; set; }
		
		/// <summary>
		/// Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemNavigation")]
		public System.Nullable<KioskCustomizationSystemNavigation> SystemNavigation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KioskCustomizationDeviceSettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE_SETTINGS_UNSPECIFIED")]
		DEVICE_SETTINGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SETTINGS_ACCESS_ALLOWED")]
		SETTINGS_ACCESS_ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SETTINGS_ACCESS_BLOCKED")]
		SETTINGS_ACCESS_BLOCKED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KioskCustomizationPowerButtonActions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_BUTTON_ACTIONS_UNSPECIFIED")]
		POWER_BUTTON_ACTIONS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_BUTTON_AVAILABLE")]
		POWER_BUTTON_AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_BUTTON_BLOCKED")]
		POWER_BUTTON_BLOCKED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KioskCustomizationStatusBar
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATUS_BAR_UNSPECIFIED")]
		STATUS_BAR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED")]
		NOTIFICATIONS_AND_SYSTEM_INFO_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED")]
		NOTIFICATIONS_AND_SYSTEM_INFO_DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_INFO_ONLY")]
		SYSTEM_INFO_ONLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KioskCustomizationSystemErrorWarnings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_ERROR_WARNINGS_UNSPECIFIED")]
		SYSTEM_ERROR_WARNINGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_AND_WARNINGS_ENABLED")]
		ERROR_AND_WARNINGS_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_AND_WARNINGS_MUTED")]
		ERROR_AND_WARNINGS_MUTED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KioskCustomizationSystemNavigation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_NAVIGATION_UNSPECIFIED")]
		SYSTEM_NAVIGATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NAVIGATION_ENABLED")]
		NAVIGATION_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NAVIGATION_DISABLED")]
		NAVIGATION_DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOME_BUTTON_ONLY")]
		HOME_BUTTON_ONLY = 3,
	}
	
	/// <summary>
	/// An action to launch an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchAppAction
	{
		
		/// <summary>
		/// Package name of app to be launched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	/// <summary>
	/// Response to a request to list devices for a given enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDevicesResponse
	{
		
		/// <summary>
		/// The list of devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public Device[] Devices { get; set; }
		
		/// <summary>
		/// If there are more results, a token to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response to a request to list enrollment tokens for a given enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEnrollmentTokensResponse
	{
		
		/// <summary>
		/// The list of enrollment tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentTokens")]
		public EnrollmentToken[] EnrollmentTokens { get; set; }
		
		/// <summary>
		/// If there are more results, a token to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response to a request to list enterprises.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEnterprisesResponse
	{
		
		/// <summary>
		/// The list of enterprises.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterprises")]
		public Enterprise[] Enterprises { get; set; }
		
		/// <summary>
		/// If there are more results, a token to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response to a request to list policies for a given enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesResponse
	{
		
		/// <summary>
		/// If there are more results, a token to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
	}
	
	/// <summary>
	/// A policy resource represents a group of settings that govern the behavior of a managed device and the apps installed on it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		/// <summary>
		/// Account types that can't be managed by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountTypesWithManagementDisabled")]
		public string[] AccountTypesWithManagementDisabled { get; set; }
		
		/// <summary>
		/// Whether adding new users and profiles is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addUserDisabled")]
		public System.Nullable<System.Boolean> AddUserDisabled { get; set; }
		
		/// <summary>
		/// Whether adjusting the master volume is disabled. Also mutes the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adjustVolumeDisabled")]
		public System.Nullable<System.Boolean> AdjustVolumeDisabled { get; set; }
		
		/// <summary>
		/// Security policies set to secure values by default. To maintain the security posture of a device, we don't recommend overriding any of the default values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advancedSecurityOverrides")]
		public AdvancedSecurityOverrides AdvancedSecurityOverrides { get; set; }
		
		/// <summary>
		/// Configuration for an always-on VPN connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alwaysOnVpnPackage")]
		public AlwaysOnVpnPackage AlwaysOnVpnPackage { get; set; }
		
		/// <summary>
		/// The app tracks for Android Device Policy the device can access. The device receives the latest version among all accessible tracks. If no tracks are specified, then the device only uses the production track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidDevicePolicyTracks")]
		public string[] AndroidDevicePolicyTracks { get; set; }
		
		/// <summary>
		/// Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency.When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no effect.The app auto update policy, which controls when automatic app updates can be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appAutoUpdatePolicy")]
		public System.Nullable<PolicyAppAutoUpdatePolicy> AppAutoUpdatePolicy { get; set; }
		
		/// <summary>
		/// Policy applied to apps. This can have at most 3,000 elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public ApplicationPolicy[] Applications { get; set; }
		
		/// <summary>
		/// Whether auto date, time, and time zone are enabled on a company-owned device. If this is set, then autoTimeRequired is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDateAndTimeZone")]
		public System.Nullable<PolicyAutoDateAndTimeZone> AutoDateAndTimeZone { get; set; }
		
		/// <summary>
		/// Whether auto time is required, which prevents the user from manually setting the date and time. If autoDateAndTimeZone is set, this field is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoTimeRequired")]
		public System.Nullable<System.Boolean> AutoTimeRequired { get; set; }
		
		/// <summary>
		/// Whether applications other than the ones configured in applications are blocked from being installed. When set, applications that were installed under a previous policy but no longer appear in the policy are automatically uninstalled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockApplicationsEnabled")]
		public System.Nullable<System.Boolean> BlockApplicationsEnabled { get; set; }
		
		/// <summary>
		/// Whether configuring bluetooth is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bluetoothConfigDisabled")]
		public System.Nullable<System.Boolean> BluetoothConfigDisabled { get; set; }
		
		/// <summary>
		/// Whether bluetooth contact sharing is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bluetoothContactSharingDisabled")]
		public System.Nullable<System.Boolean> BluetoothContactSharingDisabled { get; set; }
		
		/// <summary>
		/// Whether bluetooth is disabled. Prefer this setting over bluetooth_config_disabled because bluetooth_config_disabled can be bypassed by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bluetoothDisabled")]
		public System.Nullable<System.Boolean> BluetoothDisabled { get; set; }
		
		/// <summary>
		/// Controls the use of the camera and whether the user has access to the camera access toggle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cameraAccess")]
		public System.Nullable<PolicyCameraAccess> CameraAccess { get; set; }
		
		/// <summary>
		/// If camera_access is set to any value other than CAMERA_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether cameras are disabled: If true, all cameras are disabled, otherwise they are available. For fully managed devices this field applies for all apps on the device. For work profiles, this field applies only to apps in the work profile, and the camera access of apps outside the work profile is unaffected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cameraDisabled")]
		public System.Nullable<System.Boolean> CameraDisabled { get; set; }
		
		/// <summary>
		/// Whether configuring cell broadcast is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellBroadcastsConfigDisabled")]
		public System.Nullable<System.Boolean> CellBroadcastsConfigDisabled { get; set; }
		
		/// <summary>
		/// Rules for determining apps' access to private keys. See ChoosePrivateKeyRule for details. This must be empty if any application has CERT_SELECTION delegation scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="choosePrivateKeyRules")]
		public ChoosePrivateKeyRule[] ChoosePrivateKeyRules { get; set; }
		
		/// <summary>
		/// Rules declaring which mitigating actions to take when a device is not compliant with its policy. When the conditions for multiple rules are satisfied, all of the mitigating actions for the rules are taken. There is a maximum limit of 100 rules. Use policy enforcement rules instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complianceRules")]
		public ComplianceRule[] ComplianceRules { get; set; }
		
		/// <summary>
		/// Whether creating windows besides app windows is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createWindowsDisabled")]
		public System.Nullable<System.Boolean> CreateWindowsDisabled { get; set; }
		
		/// <summary>
		/// Whether configuring user credentials is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsConfigDisabled")]
		public System.Nullable<System.Boolean> CredentialsConfigDisabled { get; set; }
		
		/// <summary>
		/// Controls the data from the work profile that can be accessed from the personal profile and vice versa. A nonComplianceDetail with MANAGEMENT_MODE is reported if the device does not have a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossProfilePolicies")]
		public CrossProfilePolicies CrossProfilePolicies { get; set; }
		
		/// <summary>
		/// Whether roaming data services are disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRoamingDisabled")]
		public System.Nullable<System.Boolean> DataRoamingDisabled { get; set; }
		
		/// <summary>
		/// Whether the user is allowed to enable debugging features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debuggingFeaturesAllowed")]
		public System.Nullable<System.Boolean> DebuggingFeaturesAllowed { get; set; }
		
		/// <summary>
		/// The default permission policy for runtime permission requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPermissionPolicy")]
		public ApplicationPolicyDefaultPermissionPolicy DefaultPermissionPolicy { get; set; }
		
		/// <summary>
		/// Covers controls for device connectivity such as Wi-Fi, USB data access, keyboard/mouse connections, and more.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceConnectivityManagement")]
		public DeviceConnectivityManagement DeviceConnectivityManagement { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceOwnerLockScreenInfo")]
		public UserFacingMessage DeviceOwnerLockScreenInfo { get; set; }
		
		/// <summary>
		/// Controls for device radio settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceRadioState")]
		public DeviceRadioState DeviceRadioState { get; set; }
		
		/// <summary>
		/// Whether encryption is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionPolicy")]
		public System.Nullable<PolicyEncryptionPolicy> EncryptionPolicy { get; set; }
		
		/// <summary>
		/// Whether app verification is force-enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ensureVerifyAppsEnabled")]
		public System.Nullable<System.Boolean> EnsureVerifyAppsEnabled { get; set; }
		
		/// <summary>
		/// Whether factory resetting from settings is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factoryResetDisabled")]
		public System.Nullable<System.Boolean> FactoryResetDisabled { get; set; }
		
		/// <summary>
		/// Email addresses of device administrators for factory reset protection. When the device is factory reset, it will require one of these admins to log in with the Google account email and password to unlock the device. If no admins are specified, the device won't provide factory reset protection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frpAdminEmails")]
		public string[] FrpAdminEmails { get; set; }
		
		/// <summary>
		/// Whether the user is allowed to have fun. Controls whether the Easter egg game in Settings is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="funDisabled")]
		public System.Nullable<System.Boolean> FunDisabled { get; set; }
		
		/// <summary>
		/// Whether user installation of apps is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installAppsDisabled")]
		public System.Nullable<System.Boolean> InstallAppsDisabled { get; set; }
		
		/// <summary>
		/// This field has no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installUnknownSourcesAllowed")]
		public System.Nullable<System.Boolean> InstallUnknownSourcesAllowed { get; set; }
		
		/// <summary>
		/// If true, this disables the Lock Screen (https://source.android.com/docs/core/display/multi_display/lock-screen) for primary and/or secondary displays.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyguardDisabled")]
		public System.Nullable<System.Boolean> KeyguardDisabled { get; set; }
		
		/// <summary>
		/// Disabled keyguard customizations, such as widgets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyguardDisabledFeatures")]
		public string[] KeyguardDisabledFeatures { get; set; }
		
		/// <summary>
		/// Whether the kiosk custom launcher is enabled. This replaces the home screen with a launcher that locks down the device to the apps installed via the applications setting. Apps appear on a single page in alphabetical order. Use kioskCustomization to further configure the kiosk device behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kioskCustomLauncherEnabled")]
		public System.Nullable<System.Boolean> KioskCustomLauncherEnabled { get; set; }
		
		/// <summary>
		/// Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kioskCustomization")]
		public KioskCustomization KioskCustomization { get; set; }
		
		/// <summary>
		/// The degree of location detection enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationMode")]
		public System.Nullable<PolicyLocationMode> LocationMode { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longSupportMessage")]
		public UserFacingMessage LongSupportMessage { get; set; }
		
		/// <summary>
		/// Maximum time in milliseconds for user activity until the device locks. A value of 0 means there is no restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumTimeToLock")]
		public string MaximumTimeToLock { get; set; }
		
		/// <summary>
		/// Controls the use of the microphone and whether the user has access to the microphone access toggle. This applies only on fully managed devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microphoneAccess")]
		public System.Nullable<PolicyMicrophoneAccess> MicrophoneAccess { get; set; }
		
		/// <summary>
		/// The minimum allowed Android API level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumApiLevel")]
		public System.Nullable<System.Int32> MinimumApiLevel { get; set; }
		
		/// <summary>
		/// Whether configuring mobile networks is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileNetworksConfigDisabled")]
		public System.Nullable<System.Boolean> MobileNetworksConfigDisabled { get; set; }
		
		/// <summary>
		/// Whether adding or removing accounts is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifyAccountsDisabled")]
		public System.Nullable<System.Boolean> ModifyAccountsDisabled { get; set; }
		
		/// <summary>
		/// Whether the user mounting physical external media is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mountPhysicalMediaDisabled")]
		public System.Nullable<System.Boolean> MountPhysicalMediaDisabled { get; set; }
		
		/// <summary>
		/// The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily connect to a network in order to refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue booting. This prevents being unable to connect to a network if there is no suitable network in the last policy and the device boots into an app in lock task mode, or the user is otherwise unable to reach device settings.Note: Setting wifiConfigDisabled to true will override this setting under specific circumstances. Please see wifiConfigDisabled for further details. Setting configureWifi to DISALLOW_CONFIGURING_WIFI will override this setting under specific circumstances. Please see DISALLOW_CONFIGURING_WIFI for further details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkEscapeHatchEnabled")]
		public System.Nullable<System.Boolean> NetworkEscapeHatchEnabled { get; set; }
		
		/// <summary>
		/// Whether resetting network settings is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkResetDisabled")]
		public System.Nullable<System.Boolean> NetworkResetDisabled { get; set; }
		
		/// <summary>
		/// This feature is not generally available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oncCertificateProviders")]
		public OncCertificateProvider[] OncCertificateProviders { get; set; }
		
		/// <summary>
		/// Network configuration for the device. See configure networks for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openNetworkConfiguration")]
		public System.Collections.Generic.Dictionary<string, object> OpenNetworkConfiguration { get; set; }
		
		/// <summary>
		/// Whether using NFC to beam data from apps is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outgoingBeamDisabled")]
		public System.Nullable<System.Boolean> OutgoingBeamDisabled { get; set; }
		
		/// <summary>
		/// Whether outgoing calls are disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outgoingCallsDisabled")]
		public System.Nullable<System.Boolean> OutgoingCallsDisabled { get; set; }
		
		/// <summary>
		/// Password requirement policies. Different policies can be set for work profile or fully managed devices by setting the password_scope field in the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordPolicies")]
		public PasswordRequirements[] PasswordPolicies { get; set; }
		
		/// <summary>
		/// Requirements for the password used to unlock a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordRequirements")]
		public PasswordRequirements PasswordRequirements { get; set; }
		
		/// <summary>
		/// Explicit permission or group grants or denials for all apps. These values override the default_permission_policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionGrants")]
		public PermissionGrant[] PermissionGrants { get; set; }
		
		/// <summary>
		/// A list of package names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permittedAccessibilityServices")]
		public PackageNameList PermittedAccessibilityServices { get; set; }
		
		/// <summary>
		/// A list of package names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permittedInputMethods")]
		public PackageNameList PermittedInputMethods { get; set; }
		
		/// <summary>
		/// Default intent handler activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistentPreferredActivities")]
		public PersistentPreferredActivity[] PersistentPreferredActivities { get; set; }
		
		/// <summary>
		/// Policies controlling personal usage on a company-owned device with a work profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalUsagePolicies")]
		public PersonalUsagePolicies PersonalUsagePolicies { get; set; }
		
		/// <summary>
		/// This mode controls which apps are available to the user in the Play Store and the behavior on the device when apps are removed from the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playStoreMode")]
		public System.Nullable<PolicyPlayStoreMode> PlayStoreMode { get; set; }
		
		/// <summary>
		/// Rules that define the behavior when a particular policy can not be applied on device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyEnforcementRules")]
		public PolicyEnforcementRule[] PolicyEnforcementRules { get; set; }
		
		/// <summary>
		/// Controls whether preferential network service is enabled on the work profile. For example, an organization may have an agreement with a carrier that all of the work data from its employees' devices will be sent via a network service dedicated for enterprise use. An example of a supported preferential network service is the enterprise slice on 5G networks. This has no effect on fully managed devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferentialNetworkService")]
		public System.Nullable<PolicyPreferentialNetworkService> PreferentialNetworkService { get; set; }
		
		/// <summary>
		/// Allows showing UI on a device for a user to choose a private key alias if there are no matching rules in ChoosePrivateKeyRules. For devices below Android P, setting this may leave enterprise keys vulnerable. This value will have no effect if any application has CERT_SELECTION delegation scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeySelectionEnabled")]
		public System.Nullable<System.Boolean> PrivateKeySelectionEnabled { get; set; }
		
		/// <summary>
		/// Configuration info for an HTTP proxy. For a direct proxy, set the host, port, and excluded_hosts fields. For a PAC script proxy, set the pac_uri field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedGlobalProxy")]
		public ProxyInfo RecommendedGlobalProxy { get; set; }
		
		/// <summary>
		/// Whether removing other users is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeUserDisabled")]
		public System.Nullable<System.Boolean> RemoveUserDisabled { get; set; }
		
		/// <summary>
		/// Whether rebooting the device into safe boot is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safeBootDisabled")]
		public System.Nullable<System.Boolean> SafeBootDisabled { get; set; }
		
		/// <summary>
		/// Whether screen capture is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenCaptureDisabled")]
		public System.Nullable<System.Boolean> ScreenCaptureDisabled { get; set; }
		
		/// <summary>
		/// Whether changing the user icon is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setUserIconDisabled")]
		public System.Nullable<System.Boolean> SetUserIconDisabled { get; set; }
		
		/// <summary>
		/// Whether changing the wallpaper is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setWallpaperDisabled")]
		public System.Nullable<System.Boolean> SetWallpaperDisabled { get; set; }
		
		/// <summary>
		/// Action to take during the setup process. At most one action may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setupActions")]
		public SetupAction[] SetupActions { get; set; }
		
		/// <summary>
		/// Whether location sharing is disabled. share_location_disabled is supported for both fully managed devices and personally owned work profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareLocationDisabled")]
		public System.Nullable<System.Boolean> ShareLocationDisabled { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortSupportMessage")]
		public UserFacingMessage ShortSupportMessage { get; set; }
		
		/// <summary>
		/// Flag to skip hints on the first use. Enterprise admin can enable the system recommendation for apps to skip their user tutorial and other introductory hints on first start-up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipFirstUseHintsEnabled")]
		public System.Nullable<System.Boolean> SkipFirstUseHintsEnabled { get; set; }
		
		/// <summary>
		/// Whether sending and receiving SMS messages is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsDisabled")]
		public System.Nullable<System.Boolean> SmsDisabled { get; set; }
		
		/// <summary>
		/// Whether the status bar is disabled. This disables notifications, quick settings, and other screen overlays that allow escape from full-screen mode. DEPRECATED. To disable the status bar on a kiosk device, use InstallType KIOSK or kioskCustomLauncherEnabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusBarDisabled")]
		public System.Nullable<System.Boolean> StatusBarDisabled { get; set; }
		
		/// <summary>
		/// Settings controlling the behavior of status reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusReportingSettings")]
		public StatusReportingSettings StatusReportingSettings { get; set; }
		
		/// <summary>
		/// The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear maximum_time_to_lock so that the device doesn't lock itself while it stays on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stayOnPluggedModes")]
		public string[] StayOnPluggedModes { get; set; }
		
		/// <summary>
		/// Configuration for managing system updates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemUpdate")]
		public SystemUpdate SystemUpdate { get; set; }
		
		/// <summary>
		/// Whether configuring tethering and portable hotspots is disabled. If tetheringSettings is set to anything other than TETHERING_SETTINGS_UNSPECIFIED, this setting is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tetheringConfigDisabled")]
		public System.Nullable<System.Boolean> TetheringConfigDisabled { get; set; }
		
		/// <summary>
		/// Whether user uninstallation of applications is disabled. This prevents apps from being uninstalled, even those removed using applications
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uninstallAppsDisabled")]
		public System.Nullable<System.Boolean> UninstallAppsDisabled { get; set; }
		
		/// <summary>
		/// If microphone_access is set to any value other than MICROPHONE_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether microphones are disabled: If true, all microphones are disabled, otherwise they are available. This is available only on fully managed devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmuteMicrophoneDisabled")]
		public System.Nullable<System.Boolean> UnmuteMicrophoneDisabled { get; set; }
		
		/// <summary>
		/// Controls types of device activity logs collected from the device and reported via Pub/Sub notification (https://developers.google.com/android/management/notifications).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageLog")]
		public UsageLog UsageLog { get; set; }
		
		/// <summary>
		/// Whether transferring files over USB is disabled. This is supported only on company-owned devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usbFileTransferDisabled")]
		public System.Nullable<System.Boolean> UsbFileTransferDisabled { get; set; }
		
		/// <summary>
		/// Whether USB storage is enabled. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usbMassStorageEnabled")]
		public System.Nullable<System.Boolean> UsbMassStorageEnabled { get; set; }
		
		/// <summary>
		/// The version of the policy. This is a read-only field. The version is incremented each time the policy is updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// Whether configuring VPN is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpnConfigDisabled")]
		public System.Nullable<System.Boolean> VpnConfigDisabled { get; set; }
		
		/// <summary>
		/// Whether configuring Wi-Fi networks is disabled. Supported on fully managed devices and work profiles on company-owned devices. For fully managed devices, setting this to true removes all configured networks and retains only the networks configured using openNetworkConfiguration. For work profiles on company-owned devices, existing configured networks are not affected and the user is not allowed to add, remove, or modify Wi-Fi networks. If configureWifi is set to anything other than CONFIGURE_WIFI_UNSPECIFIED, this setting is ignored. Note: If a network connection can't be made at boot time and configuring Wi-Fi is disabled then network escape hatch will be shown in order to refresh the device policy (see networkEscapeHatchEnabled).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiConfigDisabled")]
		public System.Nullable<System.Boolean> WifiConfigDisabled { get; set; }
		
		/// <summary>
		/// DEPRECATED - Use wifi_config_disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wifiConfigsLockdownEnabled")]
		public System.Nullable<System.Boolean> WifiConfigsLockdownEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyAppAutoUpdatePolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_AUTO_UPDATE_POLICY_UNSPECIFIED")]
		APP_AUTO_UPDATE_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHOICE_TO_THE_USER")]
		CHOICE_TO_THE_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEVER")]
		NEVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WIFI_ONLY")]
		WIFI_ONLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALWAYS")]
		ALWAYS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyAutoDateAndTimeZone
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_DATE_AND_TIME_ZONE_UNSPECIFIED")]
		AUTO_DATE_AND_TIME_ZONE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_DATE_AND_TIME_ZONE_USER_CHOICE")]
		AUTO_DATE_AND_TIME_ZONE_USER_CHOICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO_DATE_AND_TIME_ZONE_ENFORCED")]
		AUTO_DATE_AND_TIME_ZONE_ENFORCED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyCameraAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAMERA_ACCESS_UNSPECIFIED")]
		CAMERA_ACCESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAMERA_ACCESS_USER_CHOICE")]
		CAMERA_ACCESS_USER_CHOICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAMERA_ACCESS_DISABLED")]
		CAMERA_ACCESS_DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAMERA_ACCESS_ENFORCED")]
		CAMERA_ACCESS_ENFORCED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyEncryptionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENCRYPTION_POLICY_UNSPECIFIED")]
		ENCRYPTION_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED_WITHOUT_PASSWORD")]
		ENABLED_WITHOUT_PASSWORD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED_WITH_PASSWORD")]
		ENABLED_WITH_PASSWORD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyLocationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_MODE_UNSPECIFIED")]
		LOCATION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH_ACCURACY")]
		HIGH_ACCURACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SENSORS_ONLY")]
		SENSORS_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BATTERY_SAVING")]
		BATTERY_SAVING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_USER_CHOICE")]
		LOCATION_USER_CHOICE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_ENFORCED")]
		LOCATION_ENFORCED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_DISABLED")]
		LOCATION_DISABLED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyMicrophoneAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MICROPHONE_ACCESS_UNSPECIFIED")]
		MICROPHONE_ACCESS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MICROPHONE_ACCESS_USER_CHOICE")]
		MICROPHONE_ACCESS_USER_CHOICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MICROPHONE_ACCESS_DISABLED")]
		MICROPHONE_ACCESS_DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MICROPHONE_ACCESS_ENFORCED")]
		MICROPHONE_ACCESS_ENFORCED = 3,
	}
	
	/// <summary>
	/// This feature is not generally available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OncCertificateProvider
	{
		
		/// <summary>
		/// This feature is not generally available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public string[] CertificateReferences { get; set; }
		
		/// <summary>
		/// This feature is not generally available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentProviderEndpoint")]
		public ContentProviderEndpoint ContentProviderEndpoint { get; set; }
	}
	
	/// <summary>
	/// A default activity for handling intents that match a particular intent filter. Note: To set up a kiosk, use InstallType to KIOSK rather than use persistent preferred activities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersistentPreferredActivity
	{
		
		/// <summary>
		/// The intent actions to match in the filter. If any actions are included in the filter, then an intent's action must be one of those values for it to match. If no actions are included, the intent action is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// The intent categories to match in the filter. An intent includes the categories that it requires, all of which must be included in the filter in order to match. In other words, adding a category to the filter has no impact on matching unless that category is specified in the intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// The activity that should be the default intent handler. This should be an Android component name, e.g. com.android.enterprise.app/.MainActivity. Alternatively, the value may be the package name of an app, which causes Android Device Policy to choose an appropriate activity from the app to handle the intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverActivity")]
		public string ReceiverActivity { get; set; }
	}
	
	/// <summary>
	/// Policies controlling personal usage on a company-owned device with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalUsagePolicies
	{
		
		/// <summary>
		/// Account types that can't be managed by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountTypesWithManagementDisabled")]
		public string[] AccountTypesWithManagementDisabled { get; set; }
		
		/// <summary>
		/// If true, the camera is disabled on the personal profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cameraDisabled")]
		public System.Nullable<System.Boolean> CameraDisabled { get; set; }
		
		/// <summary>
		/// Controls how long the work profile can stay off. The minimum duration must be at least 3 days. Other details are as follows: - If the duration is set to 0, the feature is turned off. - If the duration is set to a value smaller than the minimum duration, the feature returns an error. *Note:* If you want to avoid personal profiles being suspended during long periods of off-time, you can temporarily set a large value for this parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDaysWithWorkOff")]
		public System.Nullable<System.Int32> MaxDaysWithWorkOff { get; set; }
		
		/// <summary>
		/// Policy applied to applications in the personal profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalApplications")]
		public PersonalApplicationPolicy[] PersonalApplications { get; set; }
		
		/// <summary>
		/// Used together with personalApplications to control how apps in the personal profile are allowed or blocked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personalPlayStoreMode")]
		public System.Nullable<PersonalUsagePoliciesPersonalPlayStoreMode> PersonalPlayStoreMode { get; set; }
		
		/// <summary>
		/// If true, screen capture is disabled for all users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenCaptureDisabled")]
		public System.Nullable<System.Boolean> ScreenCaptureDisabled { get; set; }
	}
	
	/// <summary>
	/// Policies for apps in the personal profile of a company-owned device with a work profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonalApplicationPolicy
	{
		
		/// <summary>
		/// The type of installation to perform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installType")]
		public System.Nullable<PersonalApplicationPolicyInstallType> InstallType { get; set; }
		
		/// <summary>
		/// The package name of the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PersonalApplicationPolicyInstallType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALL_TYPE_UNSPECIFIED")]
		INSTALL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED")]
		BLOCKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PersonalUsagePoliciesPersonalPlayStoreMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAY_STORE_MODE_UNSPECIFIED")]
		PLAY_STORE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACKLIST")]
		BLACKLIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKLIST")]
		BLOCKLIST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOWLIST")]
		ALLOWLIST = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyPlayStoreMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAY_STORE_MODE_UNSPECIFIED")]
		PLAY_STORE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHITELIST")]
		WHITELIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACKLIST")]
		BLACKLIST = 2,
	}
	
	/// <summary>
	/// A rule that defines the actions to take if a device or work profile is not compliant with the policy specified in settingName. In the case of multiple matching or multiple triggered enforcement rules, a merge will occur with the most severe action being taken. However, all triggered rules are still kept track of: this includes initial trigger time and all associated non-compliance details. In the situation where the most severe enforcement rule is satisfied, the next most appropriate action is applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyEnforcementRule
	{
		
		/// <summary>
		/// An action to block access to apps and data on a fully managed device or in a work profile. This action also triggers a device or work profile to displays a user-facing notification with information (where possible) on how to correct the compliance issue. Note: wipeAction must also be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockAction")]
		public BlockAction BlockAction { get; set; }
		
		/// <summary>
		/// The top-level policy to enforce. For example, applications or passwordPolicies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingName")]
		public string SettingName { get; set; }
		
		/// <summary>
		/// An action to reset a company owned device or delete a work profile. Note: blockAction must also be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wipeAction")]
		public WipeAction WipeAction { get; set; }
	}
	
	/// <summary>
	/// An action to reset a company owned device or delete a work profile. Note: blockAction must also be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WipeAction
	{
		
		/// <summary>
		/// Whether the factory-reset protection data is preserved on the device. This setting doesn’t apply to work profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preserveFrp")]
		public System.Nullable<System.Boolean> PreserveFrp { get; set; }
		
		/// <summary>
		/// Number of days the policy is non-compliant before the device or work profile is wiped. wipeAfterDays must be greater than blockAfterDays.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wipeAfterDays")]
		public System.Nullable<System.Int32> WipeAfterDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyPreferentialNetworkService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREFERENTIAL_NETWORK_SERVICE_UNSPECIFIED")]
		PREFERENTIAL_NETWORK_SERVICE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREFERENTIAL_NETWORK_SERVICE_DISABLED")]
		PREFERENTIAL_NETWORK_SERVICE_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREFERENTIAL_NETWORK_SERVICE_ENABLED")]
		PREFERENTIAL_NETWORK_SERVICE_ENABLED = 2,
	}
	
	/// <summary>
	/// Configuration info for an HTTP proxy. For a direct proxy, set the host, port, and excluded_hosts fields. For a PAC script proxy, set the pac_uri field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProxyInfo
	{
		
		/// <summary>
		/// For a direct proxy, the hosts for which the proxy is bypassed. The host names may contain wildcards such as *.example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedHosts")]
		public string[] ExcludedHosts { get; set; }
		
		/// <summary>
		/// The host of the direct proxy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The URI of the PAC script used to configure the proxy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacUri")]
		public string PacUri { get; set; }
		
		/// <summary>
		/// The port of the direct proxy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	/// <summary>
	/// An action executed during setup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetupAction
	{
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public UserFacingMessage Description { get; set; }
		
		/// <summary>
		/// An action to launch an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchApp")]
		public LaunchAppAction LaunchApp { get; set; }
		
		/// <summary>
		/// Provides a user-facing message with locale info. The maximum message length is 4096 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public UserFacingMessage Title { get; set; }
	}
	
	/// <summary>
	/// Settings controlling the behavior of status reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusReportingSettings
	{
		
		/// <summary>
		/// Settings controlling the behavior of application reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationReportingSettings")]
		public ApplicationReportingSettings ApplicationReportingSettings { get; set; }
		
		/// <summary>
		/// Whether app reports are enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationReportsEnabled")]
		public System.Nullable<System.Boolean> ApplicationReportsEnabled { get; set; }
		
		/// <summary>
		/// Whether Common Criteria Mode reporting is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commonCriteriaModeEnabled")]
		public System.Nullable<System.Boolean> CommonCriteriaModeEnabled { get; set; }
		
		/// <summary>
		/// Whether device settings reporting is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceSettingsEnabled")]
		public System.Nullable<System.Boolean> DeviceSettingsEnabled { get; set; }
		
		/// <summary>
		/// Whether displays reporting is enabled. Report data is not available for personally owned devices with work profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayInfoEnabled")]
		public System.Nullable<System.Boolean> DisplayInfoEnabled { get; set; }
		
		/// <summary>
		/// Whether hardware status reporting is enabled. Report data is not available for personally owned devices with work profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardwareStatusEnabled")]
		public System.Nullable<System.Boolean> HardwareStatusEnabled { get; set; }
		
		/// <summary>
		/// Whether memory event reporting is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryInfoEnabled")]
		public System.Nullable<System.Boolean> MemoryInfoEnabled { get; set; }
		
		/// <summary>
		/// Whether network info reporting is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkInfoEnabled")]
		public System.Nullable<System.Boolean> NetworkInfoEnabled { get; set; }
		
		/// <summary>
		/// Whether power management event reporting is enabled. Report data is not available for personally owned devices with work profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerManagementEventsEnabled")]
		public System.Nullable<System.Boolean> PowerManagementEventsEnabled { get; set; }
		
		/// <summary>
		/// Whether software info reporting is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareInfoEnabled")]
		public System.Nullable<System.Boolean> SoftwareInfoEnabled { get; set; }
		
		/// <summary>
		/// Whether system properties reporting is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemPropertiesEnabled")]
		public System.Nullable<System.Boolean> SystemPropertiesEnabled { get; set; }
	}
	
	/// <summary>
	/// Configuration for managing system updates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemUpdate
	{
		
		/// <summary>
		/// If the type is WINDOWED, the end of the maintenance window, measured as the number of minutes after midnight in device's local time. This value must be between 0 and 1439, inclusive. If this value is less than start_minutes, then the maintenance window spans midnight. If the maintenance window specified is smaller than 30 minutes, the actual window is extended to 30 minutes beyond the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endMinutes")]
		public System.Nullable<System.Int32> EndMinutes { get; set; }
		
		/// <summary>
		/// An annually repeating time period in which over-the-air (OTA) system updates are postponed to freeze the OS version running on a device. To prevent freezing the device indefinitely, each freeze period must be separated by at least 60 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freezePeriods")]
		public FreezePeriod[] FreezePeriods { get; set; }
		
		/// <summary>
		/// If the type is WINDOWED, the start of the maintenance window, measured as the number of minutes after midnight in the device's local time. This value must be between 0 and 1439, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startMinutes")]
		public System.Nullable<System.Int32> StartMinutes { get; set; }
		
		/// <summary>
		/// The type of system update to configure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SystemUpdateType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SystemUpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_UPDATE_TYPE_UNSPECIFIED")]
		SYSTEM_UPDATE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATIC")]
		AUTOMATIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WINDOWED")]
		WINDOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSTPONE")]
		POSTPONE = 3,
	}
	
	/// <summary>
	/// Controls types of device activity logs collected from the device and reported via Pub/Sub notification (https://developers.google.com/android/management/notifications).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageLog
	{
		
		/// <summary>
		/// Specifies which log types are enabled. Note that users will receive on-device messaging when usage logging is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledLogTypes")]
		public string[] EnabledLogTypes { get; set; }
		
		/// <summary>
		/// Specifies which of the enabled log types can be uploaded over mobile data. By default logs are queued for upload when the device connects to WiFi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadOnCellularAllowed")]
		public string[] UploadOnCellularAllowed { get; set; }
	}
	
	/// <summary>
	/// Response to a request to list web apps for a given enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebAppsResponse
	{
		
		/// <summary>
		/// If there are more results, a token to retrieve next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of web apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webApps")]
		public WebApp[] WebApps { get; set; }
	}
	
	/// <summary>
	/// A web app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebApp
	{
		
		/// <summary>
		/// The display mode of the web app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayMode")]
		public System.Nullable<WebAppDisplayMode> DisplayMode { get; set; }
		
		/// <summary>
		/// A list of icons for the web app. Must have at least one element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public WebAppIcon[] Icons { get; set; }
		
		/// <summary>
		/// The name of the web app, which is generated by the server during creation in the form enterprises/{enterpriseId}/webApps/{packageName}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The start URL, i.e. the URL that should load when the user opens the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startUrl")]
		public string StartUrl { get; set; }
		
		/// <summary>
		/// The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The current version of the app.Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public string VersionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebAppDisplayMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISPLAY_MODE_UNSPECIFIED")]
		DISPLAY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MINIMAL_UI")]
		MINIMAL_UI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDALONE")]
		STANDALONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL_SCREEN")]
		FULL_SCREEN = 3,
	}
	
	/// <summary>
	/// An icon for a web app. Supported formats are: png, jpg and webp.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebAppIcon
	{
		
		/// <summary>
		/// The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 "Base 64 Encoding with URL and Filename Safe Alphabet"). - The image type can be png or jpg. - The image should ideally be square. - The image should ideally have a size of 512x512. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageData")]
		public string ImageData { get; set; }
	}
	
	/// <summary>
	/// Information about a device that is available during setup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningInfo
	{
		
		/// <summary>
		/// The API level of the Android platform version running on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiLevel")]
		public System.Nullable<System.Int32> ApiLevel { get; set; }
		
		/// <summary>
		/// The brand of the device. For example, Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public string Brand { get; set; }
		
		/// <summary>
		/// The name of the enterprise in the form enterprises/{enterprise}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterprise")]
		public string Enterprise { get; set; }
		
		/// <summary>
		/// The management mode of the device or profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementMode")]
		public DeviceManagementMode ManagementMode { get; set; }
		
		/// <summary>
		/// The model of the device. For example, Asus Nexus 7.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The name of this resource in the form provisioningInfo/{provisioning_info}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Ownership of the managed device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownership")]
		public DeviceOwnership Ownership { get; set; }
	}
	
	/// <summary>
	/// An enterprise signup URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SignupUrl
	{
		
		/// <summary>
		/// The name of the resource. Use this value in the signupUrl field when calling enterprises.create to complete the enterprise signup flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A URL where an enterprise admin can register their enterprise. The page can't be rendered in an iframe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A web token used to access the managed Google Play iframe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebToken
	{
		
		/// <summary>
		/// The features to enable. Use this if you want to control exactly which feature(s) will be activated; leave empty to allow all features.Restrictions / things to note: - If no features are listed here, all features are enabled — this is the default behavior where you give access to all features to your admins. - This must not contain any FEATURE_UNSPECIFIED values. - Repeated values are ignored 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledFeatures")]
		public string[] EnabledFeatures { get; set; }
		
		/// <summary>
		/// The name of the web token, which is generated by the server during creation in the form enterprises/{enterpriseId}/webTokens/{webTokenId}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the https scheme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentFrameUrl")]
		public string ParentFrameUrl { get; set; }
		
		/// <summary>
		/// Permissions available to an admin in the embedded UI. An admin must have all of these permissions in order to view the UI. This field is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists EMM-managed enterprises. Only BASIC fields are returned.
		/// Androidmanagement_enterprises_list v1/enterprises
		/// </summary>
		/// <param name="pageSize">The requested page size. The actual page size may be fixed to a min or max value.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <param name="projectId">Required. The Cloud project ID of the EMM managing the enterprises.</param>
		/// <param name="view">Specifies which Enterprise fields to return. This method only supports BASIC.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEnterprisesResponse> Androidmanagement_enterprises_listAsync(int pageSize, string pageToken, string projectId, Androidmanagement_enterprises_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/enterprises?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEnterprisesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an enterprise. This is the last step in the enterprise signup flow. See also: SigninDetail
		/// Androidmanagement_enterprises_create v1/enterprises
		/// </summary>
		/// <param name="agreementAccepted">Whether the enterprise admin has seen and agreed to the managed Google Play Agreement (https://www.android.com/enterprise/terms/). Do not set this field for any customer-managed enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises). Set this to field to true for all EMM-managed enterprises (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).</param>
		/// <param name="enterpriseToken">The enterprise token appended to the callback URL. Set this when creating a customer-managed enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).</param>
		/// <param name="projectId">The ID of the Google Cloud Platform project which will own the enterprise.</param>
		/// <param name="signupUrlName">The name of the SignupUrl used to sign up for the enterprise. Set this when creating a customer-managed enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).</param>
		/// <returns>Successful response</returns>
		public async Task<Enterprise> Androidmanagement_enterprises_createAsync(bool agreementAccepted, string enterpriseToken, string projectId, string signupUrlName, Enterprise requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/enterprises?agreementAccepted="+agreementAccepted+"&enterpriseToken=" + (enterpriseToken==null? "" : System.Uri.EscapeDataString(enterpriseToken))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&signupUrlName=" + (signupUrlName==null? "" : System.Uri.EscapeDataString(signupUrlName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Enterprise>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an enterprise signup URL.
		/// Androidmanagement_signupUrls_create v1/signupUrls
		/// </summary>
		/// <param name="callbackUrl">The callback URL that the admin will be redirected to after successfully creating an enterprise. Before redirecting there the system will add a query parameter to this URL named enterpriseToken which will contain an opaque token to be used for the create enterprise request. The URL will be parsed then reformatted in order to add the enterpriseToken parameter, so there may be some minor formatting changes.</param>
		/// <param name="projectId">The ID of the Google Cloud Platform project which will own the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<SignupUrl> Androidmanagement_signupUrls_createAsync(string callbackUrl, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/signupUrls?callbackUrl=" + (callbackUrl==null? "" : System.Uri.EscapeDataString(callbackUrl))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SignupUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a web app.
		/// Androidmanagement_enterprises_webApps_delete v1/{name}
		/// </summary>
		/// <param name="name">The name of the web app in the form enterprises/{enterpriseId}/webApps/{packageName}.</param>
		/// <param name="wipeDataFlags">Optional flags that control the device wiping behavior.</param>
		/// <param name="wipeReasonMessage">Optional. A short message displayed to the user before wiping the work profile on personal devices. This has no effect on company owned devices. The maximum message length is 200 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Androidmanagement_enterprises_webApps_deleteAsync(string name, string[] wipeDataFlags, string wipeReasonMessage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", wipeDataFlags.Select(z => $"wipeDataFlags={System.Uri.EscapeDataString(z.ToString())}"))+"&wipeReasonMessage=" + (wipeReasonMessage==null? "" : System.Uri.EscapeDataString(wipeReasonMessage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the device provisioning information by the identifier provided in the sign-in url.
		/// Androidmanagement_provisioningInfo_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The identifier that Android Device Policy passes to the 3P sign-in page in the form of provisioningInfo/{provisioning_info}.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ProvisioningInfo> Androidmanagement_provisioningInfo_getAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProvisioningInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a web app.
		/// Androidmanagement_enterprises_webApps_patch v1/{name}
		/// </summary>
		/// <param name="name">The name of the web app in the form enterprises/{enterpriseId}/webApps/{packageName}.</param>
		/// <param name="updateMask">The field mask indicating the fields to update. If not set, all modifiable fields will be modified.</param>
		/// <returns>Successful response</returns>
		public async Task<WebApp> Androidmanagement_enterprises_webApps_patchAsync(string name, string updateMask, WebApp requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApp>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
		/// Androidmanagement_enterprises_devices_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Androidmanagement_enterprises_devices_operations_cancelAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Issues a command to a device. The Operation resource returned contains a Command in its metadata field. Use the get operation method to get the status of the command.
		/// Androidmanagement_enterprises_devices_issueCommand v1/{name}:issueCommand
		/// </summary>
		/// <param name="name">The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Androidmanagement_enterprises_devices_issueCommandAsync(string name, Command requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":issueCommand";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists devices for a given enterprise. Deleted devices are not returned in the response.
		/// Androidmanagement_enterprises_devices_list v1/{parent}/devices
		/// </summary>
		/// <param name="parent">The name of the enterprise in the form enterprises/{enterpriseId}.</param>
		/// <param name="pageSize">The requested page size. The actual page size may be fixed to a min or max value.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDevicesResponse> Androidmanagement_enterprises_devices_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists active, unexpired enrollment tokens for a given enterprise. The list items contain only a partial view of EnrollmentToken: all the fields but name and expiration_timestamp are empty. This method is meant to help manage active enrollment tokens lifecycle. For security reasons, it's recommended to delete active enrollment tokens as soon as they're not intended to be used anymore.
		/// Androidmanagement_enterprises_enrollmentTokens_list v1/{parent}/enrollmentTokens
		/// </summary>
		/// <param name="parent">Required. The name of the enterprise in the form enterprises/{enterpriseId}.</param>
		/// <param name="pageSize">The requested page size. The service may return fewer than this value. If unspecified, at most 10 items will be returned. The maximum value is 100; values above 100 will be coerced to 100.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEnrollmentTokensResponse> Androidmanagement_enterprises_enrollmentTokens_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/enrollmentTokens&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEnrollmentTokensResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an enrollment token for a given enterprise. It's up to the caller's responsibility to manage the lifecycle of newly created tokens and deleting them when they're not intended to be used anymore. Once an enrollment token has been created, it's not possible to retrieve the token's content anymore using AM API. It is recommended for EMMs to securely store the token if it's intended to be reused.
		/// Androidmanagement_enterprises_enrollmentTokens_create v1/{parent}/enrollmentTokens
		/// </summary>
		/// <param name="parent">The name of the enterprise in the form enterprises/{enterpriseId}.</param>
		/// <returns>Successful response</returns>
		public async Task<EnrollmentToken> Androidmanagement_enterprises_enrollmentTokens_createAsync(string parent, EnrollmentToken requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/enrollmentTokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnrollmentToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists policies for a given enterprise.
		/// Androidmanagement_enterprises_policies_list v1/{parent}/policies
		/// </summary>
		/// <param name="parent">The name of the enterprise in the form enterprises/{enterpriseId}.</param>
		/// <param name="pageSize">The requested page size. The actual page size may be fixed to a min or max value.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPoliciesResponse> Androidmanagement_enterprises_policies_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/policies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists web apps for a given enterprise.
		/// Androidmanagement_enterprises_webApps_list v1/{parent}/webApps
		/// </summary>
		/// <param name="parent">The name of the enterprise in the form enterprises/{enterpriseId}.</param>
		/// <param name="pageSize">The requested page size. This is a hint and the actual page size in the response may be different.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListWebAppsResponse> Androidmanagement_enterprises_webApps_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/webApps&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWebAppsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a web app.
		/// Androidmanagement_enterprises_webApps_create v1/{parent}/webApps
		/// </summary>
		/// <param name="parent">The name of the enterprise in the form enterprises/{enterpriseId}.</param>
		/// <returns>Successful response</returns>
		public async Task<WebApp> Androidmanagement_enterprises_webApps_createAsync(string parent, WebApp requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/webApps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebApp>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a web token to access an embeddable managed Google Play web UI for a given enterprise.
		/// Androidmanagement_enterprises_webTokens_create v1/{parent}/webTokens
		/// </summary>
		/// <param name="parent">The name of the enterprise in the form enterprises/{enterpriseId}.</param>
		/// <returns>Successful response</returns>
		public async Task<WebToken> Androidmanagement_enterprises_webTokens_createAsync(string parent, WebToken requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/webTokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Androidmanagement_enterprises_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENTERPRISE_VIEW_UNSPECIFIED")]
		ENTERPRISE_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
