//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Application
	{
		
		/// <summary>
		/// A series of links between resources in this API in the following [HAL specification](http://stateless.co/hal_specification.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public ApplicationBase Id { get; set; }
		
		/// <summary>
		/// The Nexmo product that you access with this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public Keys Keys { get; set; }
		
		/// <summary>
		/// The Nexmo product that you access with this application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Messages Messages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public ApplicationBase Name { get; set; }
		
		/// <summary>
		/// The Nexmo product that you access with this application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public Voice Voice { get; set; }
	}
	
	/// <summary>
	/// A series of links between resources in this API in the following [HAL specification](http://stateless.co/hal_specification.html).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Links
	{
		
		/// <summary>
		/// The link URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationBase
	{
		
		/// <summary>
		/// The ID allocated to your application by Nexmo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of your application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The Nexmo product that you access with this application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Keys
	{
		
		/// <summary>
		/// The public key used to validate the [JWT](https://en.wikipedia.org/wiki/JSON_Web_Token).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_key")]
		public string Public_key { get; set; }
	}
	
	/// <summary>
	/// The Nexmo product that you access with this application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Messages
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public MessagesWebhooks[] MessagesWebhooks { get; set; }
	}
	
	public class MessagesWebhooks
	{
		
		/// <summary>
		/// `inbound_url`: The URL where inbound messages are delivered. `status_url`: The URL where message status is delivered.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint_type")]
		public MessagesWebhooksEndpoint_type Endpoint_type { get; set; }
		
		/// <summary>
		/// The HTTP method used to send data to the `inbound_url` or `status_url`. Default is POST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public MessagesWebhooksHttp_method Http_method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessagesWebhooksEndpoint_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inbound_url = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		status_url = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessagesWebhooksHttp_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 1,
	}
	
	/// <summary>
	/// The Nexmo product that you access with this application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Voice
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public VoiceWebhooks[] VoiceWebhooks { get; set; }
	}
	
	public class VoiceWebhooks
	{
		
		/// <summary>
		/// `answer_url`: The URL where your webhook delivers the Nexmo Call Control Object that governs this call. As soon as your user answers a call Nexmo makes a request to answer_url. `event_url`: Nexmo sends event information asynchronously to this URL when status changes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpoint_type")]
		public VoiceWebhooksEndpoint_type Endpoint_type { get; set; }
		
		/// <summary>
		/// The HTTP method used to send event information to the `event_url` or `answer_url`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public MessagesWebhooksHttp_method Http_method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VoiceWebhooksEndpoint_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		answer_url = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		event_url = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationCreated : Application
	{
		
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public KeysWithPrivateKey Keys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Applications
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ApplicationsBase _embedded { get; set; }
		
		/// <summary>
		/// A series of links between resources in this API in the following [HAL specification](http://stateless.co/hal_specification.html).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Links _links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public ApplicationsBase Count { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page_index")]
		public ApplicationsBase Page_index { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public ApplicationsBase Page_size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationsBase
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationsBase_embedded _embedded { get; set; }
		
		/// <summary>
		/// The number of items associated with your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The offset from the first page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_index")]
		public System.Nullable<System.Int32> Page_index { get; set; }
		
		/// <summary>
		/// The number of items returned on each call to this endpoint. The default is 10 records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
	}
	
	public class ApplicationsBase_embedded
	{
		
		/// <summary>
		/// The collection of your applications. Each object contains information about an an individual application. The public_key is not included in the application information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public Application[] Applications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeysWithPrivateKey : Keys
	{
		
		/// <summary>
		/// The private key you use to generate the JSON Web Token (JWT) that authenticates your requests to Messages API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="private_key")]
		public string Private_key { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve all Applications
		/// You use a `GET` request to retrieve details of all applications associated with your account.
		/// RetrieveApplications 
		/// </summary>
		/// <param name="api_key">You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)</param>
		/// <param name="api_secret">You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)</param>
		/// <param name="page_size">Set the number of items returned on each call to this endpoint. The default is 10 records.</param>
		/// <param name="page_index">Set the offset from the first page. The default value is `0`.</param>
		/// <returns>OK</returns>
		public async Task<Applications> RetrieveApplicationsAsync(string api_key, string api_secret, int page_size, int page_index, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&api_secret=" + (api_secret==null? "" : System.Uri.EscapeDataString(api_secret))+"&page_size="+page_size+"&page_index="+page_index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Applications>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Application
		/// You use a `POST` request to create a new application.
		/// CreateApplication 
		/// </summary>
		public async Task CreateApplicationAsync(CreateApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Destroy Application
		/// You use a `DELETE` request to delete a single application.
		/// DeleteApplication {app_id}
		/// </summary>
		/// <param name="app_id">The ID allocated to your application by Nexmo.</param>
		public async Task DeleteApplicationAsync(string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (app_id==null? "" : System.Uri.EscapeDataString(app_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Application
		/// You use a `GET` request to retrieve details about a single application.
		/// RetrieveApplication {app_id}
		/// </summary>
		/// <param name="api_key">You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)</param>
		/// <param name="api_secret">You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)</param>
		/// <param name="app_id">The ID allocated to your application by Nexmo.</param>
		/// <returns>OK</returns>
		public async Task<Application> RetrieveApplicationAsync(string api_key, string api_secret, string app_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (app_id==null? "" : System.Uri.EscapeDataString(app_id))+"?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&api_secret=" + (api_secret==null? "" : System.Uri.EscapeDataString(api_secret));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Application
		/// You use a `PUT` request to update an existing application.
		/// UpdateApplication {app_id}
		/// </summary>
		/// <param name="app_id">The ID allocated to your application by Nexmo.</param>
		/// <returns>OK</returns>
		public async Task<Application> UpdateApplicationAsync(string app_id, UpdateApplicationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (app_id==null? "" : System.Uri.EscapeDataString(app_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Application>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateApplicationPostBody
	{
		
		/// <summary>
		/// The HTTP method used to make the request to `answer_url`. The default value is `GET`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_method")]
		public string Answer_method { get; set; }
		
		/// <summary>
		/// The URL where your webhook delivers the Nexmo Call Control Object that governs this call. As soon as your user answers a call Nexmo makes a request to `answer_url`. Required for inbound calls only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_url")]
		public string Answer_url { get; set; }
		
		/// <summary>
		/// You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_secret")]
		public string Api_secret { get; set; }
		
		/// <summary>
		/// The HTTP method used to send event information to `event_url`. The default value is `POST`. For `voice` type applications only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_method")]
		public string Event_method { get; set; }
		
		/// <summary>
		/// Nexmo sends event information asynchronously to this URL when status changes for `voice` applications. Always required for `voice` applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_url")]
		public string Event_url { get; set; }
		
		/// <summary>
		/// The HTTP method used to send event information to `inbound_url`. The default value is `POST`. For `messages` type applications only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inbound_method")]
		public string Inbound_method { get; set; }
		
		/// <summary>
		/// Nexmo sends a request to this URL when an inbound message is received. Required for `messages` type applications only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inbound_url")]
		public string Inbound_url { get; set; }
		
		/// <summary>
		/// The name of your application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The HTTP method used to send event information to `status_url`. The default value is `POST`. For `messages` type applications only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_method")]
		public string Status_method { get; set; }
		
		/// <summary>
		/// Nexmo sends event information asynchronously to this URL when status changes. Required for `messages` type applications only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_url")]
		public string Status_url { get; set; }
		
		/// <summary>
		/// The Nexmo product or products that you access with this application. Currently `voice` and `messages` application types are supported.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateApplicationPostBodyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateApplicationPostBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messages = 1,
	}
	
	public class UpdateApplicationPutBody
	{
		
		/// <summary>
		/// The HTTP method used to make the request to `answer_url`. The default value is `GET`.
		/// </summary>
		[System.ComponentModel.DefaultValue("GET")]
		[System.Runtime.Serialization.DataMember(Name="answer_method")]
		public string Answer_method { get; set; } = "GET";
		
		/// <summary>
		/// The URL where your webhook delivers the Nexmo Call Control Object that governs this call. As soon as your user answers a call Nexmo makes a request to `answer_url`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_url")]
		public string Answer_url { get; set; }
		
		/// <summary>
		/// You can find your API key in your [account overview](https://dashboard.nexmo.com/account-overview)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// You can find your API secret in your [account overview](https://dashboard.nexmo.com/account-overview)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_secret")]
		public string Api_secret { get; set; }
		
		/// <summary>
		/// The HTTP method used to send event information to `event_url`. The default value is POST.
		/// </summary>
		[System.ComponentModel.DefaultValue("POST")]
		[System.Runtime.Serialization.DataMember(Name="event_method")]
		public string Event_method { get; set; } = "POST";
		
		/// <summary>
		/// Nexmo sends event information asynchronously to this URL when status changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_url")]
		public string Event_url { get; set; }
		
		/// <summary>
		/// The name of your application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Nexmo product or products that you access with this application. Currently `voice` and `messages` application types are supported. You  can't change the type of application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateApplicationPostBodyType Type { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
