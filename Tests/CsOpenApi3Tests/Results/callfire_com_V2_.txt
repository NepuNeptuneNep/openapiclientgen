//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class A2pUpgradeLeaseDto
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public System.Nullable<System.DateTimeOffset> Blocked { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled")]
		public System.Nullable<System.Boolean> Canceled { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public System.Nullable<System.Int64> InvoiceId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextBilling")]
		public System.Nullable<System.DateTimeOffset> NextBilling { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packaged")]
		public System.Nullable<System.Boolean> Packaged { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prepaidDiscountId")]
		public System.Nullable<System.Int64> PrepaidDiscountId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<A2pUpgradeLeaseDtoType> Type { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum A2pUpgradeLeaseDtoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTRA = 1,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class A2pUpgradeLeasePage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public A2pUpgradeLeaseDto[] Items { get; set; }
	}
	
	/// <summary>
	/// Object represents user account in Callfire system
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public Duration Age { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyManagedAccounts")]
		public System.Nullable<System.Boolean> AgencyManagedAccounts { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedToCreateCampaign")]
		public System.Nullable<System.Boolean> AllowedToCreateCampaign { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiCallLimit")]
		public System.Nullable<System.Int32> ApiCallLimit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoAddDoNotContact")]
		public System.Nullable<System.Boolean> AutoAddDoNotContact { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public System.Nullable<AccountBrand> Brand { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceled")]
		public System.Nullable<System.Boolean> Canceled { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canceledOrArchived")]
		public System.Nullable<System.Boolean> CanceledOrArchived { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public System.Nullable<AccountCountry> Country { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryOrDefault")]
		public AccountCountry CountryOrDefault { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeZone")]
		public DateTimeZone DateTimeZone { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultNotificationTtlMillis")]
		public System.Nullable<System.Int64> DefaultNotificationTtlMillis { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultNumberId")]
		public System.Nullable<System.Int64> DefaultNumberId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ein")]
		public string Ein { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public System.Nullable<AccountEntityType> EntityType { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ez")]
		public System.Nullable<System.Boolean> Ez { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedVerificationAttempts")]
		public System.Nullable<System.Int32> FailedVerificationAttempts { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumberPool")]
		public string FromNumberPool { get; set; }
		
		/// <summary>
		/// An id of an account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="industry")]
		public System.Nullable<AccountIndustry> Industry { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="industryName")]
		public string IndustryName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localTimeZoneRestriction")]
		public LocalTimeZoneRestriction LocalTimeZoneRestriction { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public Locale Locale { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAgents")]
		public System.Nullable<System.Int32> MaxAgents { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageClass")]
		public string MessageClass { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageFlows")]
		public string[] MessageFlows { get; set; }
		
		/// <summary>
		/// Name associated with an account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outboundThreshold")]
		public System.Nullable<System.Int32> OutboundThreshold { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverPeriodCall")]
		public System.Nullable<System.Int32> ReceiverPeriodCall { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverPeriodEnabled")]
		public System.Nullable<System.Boolean> ReceiverPeriodEnabled { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverPeriodGlobal")]
		public System.Nullable<System.Int32> ReceiverPeriodGlobal { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverPeriodText")]
		public System.Nullable<System.Int32> ReceiverPeriodText { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverPeriodTimeUnit")]
		public System.Nullable<AccountReceiverPeriodTimeUnit> ReceiverPeriodTimeUnit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retainOnlyMetadata")]
		public System.Nullable<System.Boolean> RetainOnlyMetadata { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retainOnlyMetadataLastDetailRecordId")]
		public System.Nullable<System.Int64> RetainOnlyMetadataLastDetailRecordId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retainOnlyMetadataLastModified")]
		public System.Nullable<System.DateTimeOffset> RetainOnlyMetadataLastModified { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scrub")]
		public System.Nullable<System.Boolean> Scrub { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedShortCodeAllowed")]
		public System.Nullable<System.Boolean> SharedShortCodeAllowed { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedShortCodeId")]
		public System.Nullable<System.Int64> SharedShortCodeId { get; set; }
		
		/// <summary>
		/// Object represents user account in Callfire system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soaAccount")]
		public Account SoaAccount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startCapable")]
		public System.Nullable<System.Boolean> StartCapable { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AccountStatus> Status { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textOutboundThreshold")]
		public System.Nullable<System.Int32> TextOutboundThreshold { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public TimeZone TimeZone { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneId")]
		public ZoneId TimeZoneId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trustLevel")]
		public System.Nullable<AccountTrustLevel> TrustLevel { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tsrAgreement")]
		public System.Nullable<System.DateTimeOffset> TsrAgreement { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tsrInitials")]
		public string TsrInitials { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiContext")]
		public string UiContext { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="universal")]
		public System.Nullable<System.Boolean> Universal { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipcode")]
		public string Zipcode { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Duration
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="millis")]
		public System.Nullable<System.Int64> Millis { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardDays")]
		public System.Nullable<System.Int64> StandardDays { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardHours")]
		public System.Nullable<System.Int64> StandardHours { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardMinutes")]
		public System.Nullable<System.Int64> StandardMinutes { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardSeconds")]
		public System.Nullable<System.Int64> StandardSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountBrand
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EZTEXTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUBTEXTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUPTEXTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELLMYCELL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EZ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALLFIRE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESLA = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountCountry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 1,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateTimeZone
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public System.Nullable<System.Boolean> Fixed { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountIndustry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVERTISING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMOTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLECTIONS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSULTING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECLINE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDUCATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERTAINMENT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINANCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSPITALITY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHFITNESS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHCARE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSURANCE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEAD = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLITICAL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REAL_ESTATE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEARCH_MARKETING = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELECOM = 20,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalTimeZoneRestriction
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTime")]
		public System.Nullable<System.DateTimeOffset> StopTime { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Locale
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCountry")]
		public string DisplayCountry { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayLanguage")]
		public string DisplayLanguage { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayScript")]
		public string DisplayScript { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayVariant")]
		public string DisplayVariant { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensionKeys")]
		public string[] ExtensionKeys { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iso3Country")]
		public string Iso3Country { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iso3Language")]
		public string Iso3Language { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unicodeLocaleAttributes")]
		public string[] UnicodeLocaleAttributes { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unicodeLocaleKeys")]
		public string[] UnicodeLocaleKeys { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public string Variant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountReceiverPeriodTimeUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NANOSECONDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICROSECONDS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILLISECONDS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINUTES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 4,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeZone
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dstsavings")]
		public System.Nullable<System.Int32> Dstsavings { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawOffset")]
		public System.Nullable<System.Int32> RawOffset { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZoneId
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ZoneRules Rules { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZoneRules
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedOffset")]
		public System.Nullable<System.Boolean> FixedOffset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitionRules")]
		public ZoneOffsetTransitionRule[] TransitionRules { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitions")]
		public ZoneOffsetTransition[] Transitions { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZoneOffsetTransitionRule
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfMonthIndicator")]
		public System.Nullable<System.Int32> DayOfMonthIndicator { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public System.Nullable<ZoneOffsetTransitionRuleDayOfWeek> DayOfWeek { get; set; }
		
		/// <summary>
		/// Represents a time part of a given date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localTime")]
		public LocalTime LocalTime { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="midnightEndOfDay")]
		public System.Nullable<System.Boolean> MidnightEndOfDay { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<ZoneOffsetTransitionRuleMonth> Month { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetAfter")]
		public ZoneOffset OffsetAfter { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetBefore")]
		public ZoneOffset OffsetBefore { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardOffset")]
		public ZoneOffset StandardOffset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeDefinition")]
		public System.Nullable<ZoneOffsetTransitionRuleTimeDefinition> TimeDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ZoneOffsetTransitionRuleDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 6,
	}
	
	/// <summary>
	/// Represents a time part of a given date
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalTime
	{
		
		/// <summary>
		/// An hour of the day. Available values: 0-23
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hour")]
		public System.Nullable<System.Int32> Hour { get; set; }
		
		/// <summary>
		/// The minutes. Available values: 0-59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minute")]
		public System.Nullable<System.Int32> Minute { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nano")]
		public System.Nullable<System.Int32> Nano { get; set; }
		
		/// <summary>
		/// The seconds.  Available values: 0-59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="second")]
		public System.Nullable<System.Int32> Second { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ZoneOffsetTransitionRuleMonth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JANUARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEBRUARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APRIL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUNE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JULY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUGUST = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEPTEMBER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCTOBER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOVEMBER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECEMBER = 11,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZoneOffset
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public ZoneRules Rules { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSeconds")]
		public System.Nullable<System.Int32> TotalSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ZoneOffsetTransitionRuleTimeDefinition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 2,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZoneOffsetTransition
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeAfter")]
		public System.Nullable<System.DateTimeOffset> DateTimeAfter { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeBefore")]
		public System.Nullable<System.DateTimeOffset> DateTimeBefore { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public Duration Duration { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gap")]
		public System.Nullable<System.Boolean> Gap { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instant")]
		public System.Nullable<System.Int64> Instant { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetAfter")]
		public ZoneOffset OffsetAfter { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetBefore")]
		public ZoneOffset OffsetBefore { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overlap")]
		public System.Nullable<System.Boolean> Overlap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountTrustLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROBATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUSTED = 4,
	}
	
	/// <summary>
	/// Request object for adding new contacts to an existing contact list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddContactListContactsRequest
	{
		
		/// <summary>
		/// A list of ids of existing contacts in CallFire system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactIds")]
		public int[] ContactIds { get; set; }
		
		/// <summary>
		/// A phone number in E.164 format (11-digit). Examples: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactNumbers")]
		public string[] ContactNumbers { get; set; }
		
		/// <summary>
		/// A type of phone number (homePhone, workPhone, mobilePhone). This parameter works together with contactNumbers and specifies which types of numbers are included to a list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactNumbersField")]
		public string ContactNumbersField { get; set; }
		
		/// <summary>
		/// A list of new contact objects which need to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useCustomFields")]
		public System.Nullable<System.Boolean> UseCustomFields { get; set; }
	}
	
	/// <summary>
	/// Represents a contact in CallFire platform. Contains info about the people you want to contact. It allows you to store a user-defined properties for each contact
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact
	{
		
		/// <summary>
		/// A deleted contact, deleted contacts are hidden from search results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// An external id of a contact for syncing with external sources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// External system that external id refers to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalSystem")]
		public string ExternalSystem { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraPhone1")]
		public string ExtraPhone1 { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraPhone2")]
		public string ExtraPhone2 { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraPhone3")]
		public string ExtraPhone3 { get; set; }
		
		/// <summary>
		/// A first name of a contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		/// <summary>
		/// An id of a contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A last name of a contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Map of user-defined string properties for contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workPhone")]
		public string WorkPhone { get; set; }
		
		/// <summary>
		/// A Zip code of a contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipcode")]
		public string Zipcode { get; set; }
	}
	
	/// <summary>
	/// Request object for adding new Do-Not-Contact records to account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddDoNotContactRequest
	{
		
		/// <summary>
		/// If set to true add all given numbers to Do-Not-Call list. Default value: true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call")]
		public System.Nullable<System.Boolean> Call { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundCall")]
		public System.Nullable<System.Boolean> InboundCall { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundText")]
		public System.Nullable<System.Boolean> InboundText { get; set; }
		
		/// <summary>
		/// A list of phone numbers in E.164 format (11-digit), example: 12132000384, 14142777322
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numbers")]
		public string[] Numbers { get; set; }
		
		/// <summary>
		/// A list of new contact objects which need to be added. Default value: Api V2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// If set to true add all given numbers to Do-Not-Text list. Default value: true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public System.Nullable<System.Boolean> Text { get; set; }
	}
	
	/// <summary>
	/// An object represents API user in CallFire system. Use /me/api/credentials endpoint to manage API users on your account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiCredential
	{
		
		/// <summary>
		/// Is credential enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// An id of an API credential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A name of an API credential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A password for credential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Username for credential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiCredentialPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ApiCredential[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiExceptionHandler
	{
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiValidator
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exceptionHandler")]
		public ApiExceptionHandler ExceptionHandler { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthController
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public System.Nullable<System.Boolean> Admin { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authBrand")]
		public AccountBrand AuthBrand { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authToken")]
		public AuthToken AuthToken { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migration")]
		public System.Nullable<System.Boolean> Migration { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthToken
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminClient")]
		public System.Nullable<System.Boolean> AdminClient { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminToken")]
		public AuthToken AdminToken { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public AccountBrand Brand { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ezSpaClient")]
		public System.Nullable<System.Boolean> EzSpaClient { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migration")]
		public System.Nullable<System.Boolean> Migration { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="session")]
		public OAuthSession Session { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuthSession
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public OAuthSession Actor { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public AccountBrand Brand { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.Nullable<System.DateTimeOffset> Expires { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantType")]
		public System.Nullable<OAuthSessionGrantType> GrantType { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issued")]
		public System.Nullable<System.DateTimeOffset> Issued { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		public System.Nullable<System.Int64> Sid { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationRequired")]
		public System.Nullable<System.Boolean> VerificationRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OAuthSessionGrantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZATION_CODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH_TOKEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_CREDENTIALS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JWT_BEARER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPERSONATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE = 6,
	}
	
	/// <summary>
	/// A batch represents a group of contacts which can be dialed or texted via call/text broadcast
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Batch
	{
		
		/// <summary>
		/// An id of broadcast which batch belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="broadcastId")]
		public System.Nullable<System.Int64> BroadcastId { get; set; }
		
		/// <summary>
		/// A date and time when batch was created, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// An enabled batch. If batch is disabled its contacts remain undialed/untexted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// A id of a batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A batch name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A number of contacts remaining undialed/untexted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public System.Nullable<System.Int32> Remaining { get; set; }
		
		/// <summary>
		/// A total number of contacts in batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// A status of batch (NEW, VALIDATING, ERRORS, SOURCE_ERROR, ACTIVE). NEW - batch is queued for validation; VALIDATING - batch is currently validating; ERRORS - batch is processed, some validation errors occurred; SOURCE_ERROR - if contact source is contact list in CallFire system and it has an error; ACTIVE - batch is processed and ready
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BatchStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BatchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 4,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Batch[] Items { get; set; }
	}
	
	/// <summary>
	/// Request object is used for adding new batch to an existing broadcast
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchRequest
	{
		
		/// <summary>
		/// An id of existing contact list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactListId")]
		public System.Nullable<System.Int64> ContactListId { get; set; }
		
		/// <summary>
		/// A name of batch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of Recipient objects. For each recipient you can set its phone number or existing contact id to use contact which already exists in account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public Recipient[] Recipients { get; set; }
		
		/// <summary>
		/// Removes duplicate recipients from batch if true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scrubDuplicates")]
		public System.Nullable<System.Boolean> ScrubDuplicates { get; set; }
	}
	
	/// <summary>
	/// A recipient of a campaign action. It can be a phone number, contact, or contact list with attributes added to an action, one of these values should be set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Recipient
	{
		
		/// <summary>
		/// Map of user-defined string attributes associated with recipient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// An id of existing contact used as recipient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public System.Nullable<System.Int64> ContactId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// A recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// Contains statistics of billing plan usage
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingPlanUsage
	{
		
		/// <summary>
		/// End of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalEnd")]
		public System.Nullable<System.Int64> IntervalEnd { get; set; }
		
		/// <summary>
		/// Start of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalStart")]
		public System.Nullable<System.Int64> IntervalStart { get; set; }
		
		/// <summary>
		/// Remaining pay as you go credits are rounded to nearest whole value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingPayAsYouGoCredits")]
		public System.Nullable<System.Double> RemainingPayAsYouGoCredits { get; set; }
		
		/// <summary>
		/// Remaining credits are rounded to nearest whole value associated with a plan
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingPlanCredits")]
		public System.Nullable<System.Double> RemainingPlanCredits { get; set; }
		
		/// <summary>
		/// Total number of remaining credits (remainingPlanCredits + remainingPayAsYouGoCredits)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRemainingCredits")]
		public System.Nullable<System.Double> TotalRemainingCredits { get; set; }
	}
	
	/// <summary>
	/// Represents a call action sent or received by CallFire platform
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Call
	{
		
		/// <summary>
		/// An internal call to an agent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentCall")]
		public System.Nullable<System.Boolean> AgentCall { get; set; }
		
		/// <summary>
		/// Map of user-defined string attributes associated with an action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// An id of contact batch associated with an action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.Int64> BatchId { get; set; }
		
		/// <summary>
		/// An id of broadcast associated with an action if call is sent as part of call broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public System.Nullable<System.Int64> CampaignId { get; set; }
		
		/// <summary>
		/// Represents a contact in CallFire platform. Contains info about the people you want to contact. It allows you to store a user-defined properties for each contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalCallResult")]
		public System.Nullable<CallFinalCallResult> FinalCallResult { get; set; }
		
		/// <summary>
		/// A sender's phone number in E.164 (11-digit) format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// An id of  an action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Is action inbound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inbound")]
		public System.Nullable<System.Boolean> Inbound { get; set; }
		
		/// <summary>
		/// Labels associated with action or broadcast for this action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.Int64> Modified { get; set; }
		
		/// <summary>
		/// Notes of call added by an agent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public Note[] Notes { get; set; }
		
		/// <summary>
		/// List of call records, each record contains call details like originate time, duration, cost, notes made by agents. A single contact may have a multiple phone numbers. In this case if given call was sent as a part of broadcast with configured retry logic then each call record will contain details about attempted phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="records")]
		public CallRecord[] Records { get; set; }
		
		/// <summary>
		/// State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CallState> State { get; set; }
		
		/// <summary>
		/// A recipient's phone number in E.164 (11-digit) format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallFinalCallResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XFER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ANS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XFER_LEG = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_ERROR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_TEMP_ERROR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDIALED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTPONED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDONED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 14,
	}
	
	/// <summary>
	/// Represents a note which can be added to a call
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Note
	{
		
		/// <summary>
		/// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// A text of a note
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Represents a call sent to a contact's number
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallRecord
	{
		
		/// <summary>
		/// Timestamp when call was answered, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerTime")]
		public System.Nullable<System.Int64> AnswerTime { get; set; }
		
		/// <summary>
		/// A cost of the call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedAmount")]
		public System.Nullable<System.Single> BilledAmount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerName")]
		public string CallerName { get; set; }
		
		/// <summary>
		/// Duration of the call in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int64> Duration { get; set; }
		
		/// <summary>
		/// Timestamp when call was finished, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public System.Nullable<System.Int64> FinishTime { get; set; }
		
		/// <summary>
		/// An id of a call record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Labels associated with a call action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Notes of call added by agent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public Note[] Notes { get; set; }
		
		/// <summary>
		/// A date and time (timestamp) when call was originated by CallFire platform and went to downstream provider, formatted in unix time milliseconds (read only). Example: 1473781817000 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originateTime")]
		public System.Nullable<System.Int64> OriginateTime { get; set; }
		
		/// <summary>
		/// Notes of call added by an agent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionResponses")]
		public QuestionResponse[] QuestionResponses { get; set; }
		
		/// <summary>
		/// A list of voice recordings of the call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordings")]
		public CallRecording[] Recordings { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public CallFinalCallResult Result { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="switchId")]
		public string SwitchId { get; set; }
		
		/// <summary>
		/// A phone number to which a call was addressed. Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
	}
	
	/// <summary>
	/// Object represents the question and client's answer, used in cloud call center / IVR campaign
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuestionResponse
	{
		
		/// <summary>
		/// A text of a question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="question")]
		public string Question { get; set; }
		
		/// <summary>
		/// Client's answer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string Response { get; set; }
	}
	
	/// <summary>
	/// Represents a recording of a voice call
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallRecording
	{
		
		/// <summary>
		/// An id of a call action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callId")]
		public System.Nullable<System.Int64> CallId { get; set; }
		
		/// <summary>
		/// Contains broadcast id if call was sent as a part of voice broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public System.Nullable<System.Int64> CampaignId { get; set; }
		
		/// <summary>
		/// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// A unique string hash identifier of a recording
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// An id of a call recording
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A size of a recording file in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthInBytes")]
		public System.Nullable<System.Int64> LengthInBytes { get; set; }
		
		/// <summary>
		/// Duration of a recording in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthInSeconds")]
		public System.Nullable<System.Int32> LengthInSeconds { get; set; }
		
		/// <summary>
		/// A public URL of a call recording
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mp3Url")]
		public string Mp3Url { get; set; }
		
		/// <summary>
		/// A name of a recording
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Current state of a recording, available values: RECORDING - recording is in progress, READY - recording is ready, ERROR - error has occurred and recording can be broken
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CallRecordingState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallRecordingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECORDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALLBACK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERIOD_LIMIT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_NUMBER = 11,
	}
	
	/// <summary>
	/// Call broadcast can be used to send out a voice message to a group of numbers. It supports IVR scripting, scheduling, retry logic, playing pre-recorded sounds, answering machine detection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallBroadcast
	{
		
		/// <summary>
		/// Specifies which action should be taken if answering machine was detected, default value: AM_AND_LIVE. Available values: AM_ONLY - run AMD (Answering Machine Detection), hang up if LA (Live Answer); AM_AND_LIVE - run AMD, play separate live vs. machine sound; LIVE_WITH_AMD, run AMD, hang up if machine answers; LIVE_IMMEDIATE - no AMD, play live sound immediately
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answeringMachineConfig")]
		public System.Nullable<CallBroadcastAnsweringMachineConfig> AnsweringMachineConfig { get; set; }
		
		/// <summary>
		/// IVR xml is a document which describes the dialplan to setup the IVR broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialplanXml")]
		public string DialplanXml { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit) or short code for text. Example: 12132000384, 67076
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// A unique id of broadcast (readonly)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Labels of a broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// The time when a given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.Int64> LastModified { get; set; }
		
		/// <summary>
		/// Represents a range of time during which CallFire will send a call or text to recipients. Timeframe uses the local timezone of recipient's number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localTimeRestriction")]
		public LocalTimeRestriction LocalTimeRestriction { get; set; }
		
		/// <summary>
		/// Sets a maximum number of calls to be dialed by CallFire at once
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxActive")]
		public System.Nullable<System.Int32> MaxActive { get; set; }
		
		/// <summary>
		/// A maximum number of active transfers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxActiveTransfers")]
		public System.Nullable<System.Int32> MaxActiveTransfers { get; set; }
		
		/// <summary>
		/// A name of a broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Recipients of a call broadcast, can be either existing contacts or a new ones
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public Recipient[] Recipients { get; set; }
		
		/// <summary>
		/// If true resumes the unfinished campaign to the next day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resumeNextDay")]
		public System.Nullable<System.Boolean> ResumeNextDay { get; set; }
		
		/// <summary>
		/// Retry configuration will help you to resend a call or text if it was not delivered first time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryConfig")]
		public RetryConfig RetryConfig { get; set; }
		
		/// <summary>
		/// A list of schedule objects which specifies a range of time when broadcast should be started and stopped. Supports the scheduling per day of week
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedules")]
		public Schedule[] Schedules { get; set; }
		
		/// <summary>
		/// A set of sounds assigned to a voice broadcast to play according to an answering machine configuration. You can add the existing sounds from the account's sound library or to provide a text which will be converted into a speech. There are four sound options available for a Voice Broadcast campaign
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sounds")]
		public CallBroadcastSounds Sounds { get; set; }
		
		/// <summary>
		/// A status of a broadcast (read only). SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CallBroadcastStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallBroadcastAnsweringMachineConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM_AND_LIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE_WITH_AMD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE_IMMEDIATE = 3,
	}
	
	/// <summary>
	/// Represents a range of time during which CallFire will send a call or text to recipients. Timeframe uses the local timezone of recipient's number
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalTimeRestriction
	{
		
		/// <summary>
		/// An hour of restriction start
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginHour")]
		public System.Nullable<System.Int32> BeginHour { get; set; }
		
		/// <summary>
		/// The minutes to start a restriction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginMinute")]
		public System.Nullable<System.Int32> BeginMinute { get; set; }
		
		/// <summary>
		/// A restriction enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// An hour of restriction end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endHour")]
		public System.Nullable<System.Int32> EndHour { get; set; }
		
		/// <summary>
		/// The minutes of restriction end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endMinute")]
		public System.Nullable<System.Int32> EndMinute { get; set; }
	}
	
	/// <summary>
	/// Retry configuration will help you to resend a call or text if it was not delivered first time
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryConfig
	{
		
		/// <summary>
		/// Maximum number of retry attempts. Default value: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAttempts")]
		public System.Nullable<System.Int32> MaxAttempts { get; set; }
		
		/// <summary>
		/// A number of minutes between retry attempts. Default value: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesBetweenAttempts")]
		public System.Nullable<System.Int32> MinutesBetweenAttempts { get; set; }
		
		/// <summary>
		/// A list of phone number types to retry. Available values: FIRST_NUMBER, HOME_PHONE, WORK_PHONE, MOBILE_PHONE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryPhoneTypes")]
		public string[] RetryPhoneTypes { get; set; }
		
		/// <summary>
		/// List of result states when a call/text should be addressed to this contact again. Supports any combination of result statuses. Available values: LA, BUSY, AM, NO_ANS, SENT, RECEIVED, etc. See [call/text states and results](https://developers.callfire.com/results-responses-errors.html)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryResults")]
		public string[] RetryResults { get; set; }
	}
	
	/// <summary>
	/// A campaign schedule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Schedule
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public System.Nullable<System.Int64> CampaignId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysOfWeek")]
		public string[] DaysOfWeek { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Represents a date object (without time part)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public LocalDate StartDate { get; set; }
		
		/// <summary>
		/// Represents a time part of a given date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeOfDay")]
		public LocalTime StartTimeOfDay { get; set; }
		
		/// <summary>
		/// Represents a date object (without time part)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopDate")]
		public LocalDate StopDate { get; set; }
		
		/// <summary>
		/// Represents a time part of a given date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTimeOfDay")]
		public LocalTime StopTimeOfDay { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Represents a date object (without time part)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalDate
	{
		
		/// <summary>
		/// A day of the month. Available values: 1-31
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// A month of the year. Available values: 1-12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// A year. Example: 2020
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A set of sounds assigned to a voice broadcast to play according to an answering machine configuration. You can add the existing sounds from the account's sound library or to provide a text which will be converted into a speech. There are four sound options available for a Voice Broadcast campaign
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallBroadcastSounds
	{
		
		/// <summary>
		/// Digit pressed to place contact in DNC list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dncDigit")]
		public string DncDigit { get; set; }
		
		/// <summary>
		/// An id of sound file to play when recipient decided to opt out and pressed DNC digit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dncSoundId")]
		public System.Nullable<System.Int64> DncSoundId { get; set; }
		
		/// <summary>
		/// Text to be turned into sound, plays to notify that Do Not Call digit has been pressed and inform your contact of their placement on the Do Not Call list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dncSoundText")]
		public string DncSoundText { get; set; }
		
		/// <summary>
		/// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dncSoundTextVoice")]
		public System.Nullable<CallBroadcastSoundsDncSoundTextVoice> DncSoundTextVoice { get; set; }
		
		/// <summary>
		/// An id of sound file to play if phone is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveSoundId")]
		public System.Nullable<System.Int64> LiveSoundId { get; set; }
		
		/// <summary>
		/// Text to be used to turned into a sound. This text will be played when the phone is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveSoundText")]
		public string LiveSoundText { get; set; }
		
		/// <summary>
		/// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a live sound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveSoundTextVoice")]
		public CallBroadcastSoundsDncSoundTextVoice LiveSoundTextVoice { get; set; }
		
		/// <summary>
		/// An id of a sound file to play if answering machine is detected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineSoundId")]
		public System.Nullable<System.Int64> MachineSoundId { get; set; }
		
		/// <summary>
		/// Text to be turned into a sound. This text will be played when answering machine is detected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineSoundText")]
		public string MachineSoundText { get; set; }
		
		/// <summary>
		/// The voice to be used (MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1) for a machine sound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineSoundTextVoice")]
		public CallBroadcastSoundsDncSoundTextVoice MachineSoundTextVoice { get; set; }
		
		/// <summary>
		/// Digit pressed to initiate a transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferDigit")]
		public string TransferDigit { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit) to transfer call to.  Example: 12132000384, 67076
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferNumber")]
		public string TransferNumber { get; set; }
		
		/// <summary>
		/// An id of a file to play if call is transferred
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferSoundId")]
		public System.Nullable<System.Int64> TransferSoundId { get; set; }
		
		/// <summary>
		/// Text to be turned into a sound. This text will be played when the transfer digit is played
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferSoundText")]
		public string TransferSoundText { get; set; }
		
		/// <summary>
		/// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1) for a sound transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferSoundTextVoice")]
		public CallBroadcastSoundsDncSoundTextVoice TransferSoundTextVoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallBroadcastSoundsDncSoundTextVoice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALE1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMALE1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMALE2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPANISH1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRENCHCANADIAN1 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallBroadcastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SETUP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATING_START = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATING_EMAIL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCKED_SUSPICIOUS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECLINED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 13,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallBroadcastPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CallBroadcast[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallBroadcastStats
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answeringMachineCount")]
		public System.Nullable<System.Int32> AnsweringMachineCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedAmount")]
		public System.Nullable<System.Double> BilledAmount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedDuration")]
		public System.Nullable<System.Int32> BilledDuration { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="busyCount")]
		public System.Nullable<System.Int32> BusyCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callsAttempted")]
		public System.Nullable<System.Int32> CallsAttempted { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callsAwaitingRedial")]
		public System.Nullable<System.Int32> CallsAwaitingRedial { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callsDuration")]
		public System.Nullable<System.Int32> CallsDuration { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callsLiveAnswer")]
		public System.Nullable<System.Int32> CallsLiveAnswer { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callsPlaced")]
		public System.Nullable<System.Int32> CallsPlaced { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callsRemaining")]
		public System.Nullable<System.Int32> CallsRemaining { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialedCount")]
		public System.Nullable<System.Int32> DialedCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotCallCount")]
		public System.Nullable<System.Int32> DoNotCallCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCount")]
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveCount")]
		public System.Nullable<System.Int32> LiveCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="miscCount")]
		public System.Nullable<System.Int32> MiscCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noAnswerCount")]
		public System.Nullable<System.Int32> NoAnswerCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingOutboundCount")]
		public System.Nullable<System.Int32> RemainingOutboundCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseRatePercent")]
		public System.Nullable<System.Int32> ResponseRatePercent { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalOutboundCount")]
		public System.Nullable<System.Int32> TotalOutboundCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferCount")]
		public System.Nullable<System.Int32> TransferCount { get; set; }
	}
	
	/// <summary>
	/// Request object is used for creating sound via a phone call. This sound will appear in account's sound library
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallCreateSound
	{
		
		/// <summary>
		/// Name of a sound to create
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Phone number in E.164 11-digit format to call to record a sound.  Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Call[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Call[] Items { get; set; }
	}
	
	/// <summary>
	/// Recipient of a campaign action. Can be a phone number, contact, or contact list with attributes added to action. It is required to specify one of this values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallRecipient
	{
		
		/// <summary>
		/// Map of user-defined string attributes associated with recipient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// An id of existing contact used as recipient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public System.Nullable<System.Int64> ContactId { get; set; }
		
		/// <summary>
		/// An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialplanXml")]
		public string DialplanXml { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// Text to be turned into a sound, this text will be played when the phone is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveMessage")]
		public string LiveMessage { get; set; }
		
		/// <summary>
		/// An id of a sound file to play if phone is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveMessageSoundId")]
		public System.Nullable<System.Int64> LiveMessageSoundId { get; set; }
		
		/// <summary>
		/// Text to be used to turn into sound, this text will be played when answering machine is detected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineMessage")]
		public string MachineMessage { get; set; }
		
		/// <summary>
		/// An id of a sound file to play if answering machine is detected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineMessageSoundId")]
		public System.Nullable<System.Int64> MachineMessageSoundId { get; set; }
		
		/// <summary>
		/// Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// A digit pressed to initiate the transfer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferDigit")]
		public string TransferDigit { get; set; }
		
		/// <summary>
		/// Text to be turned into sound, this text will be played when the transfer digit is played
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferMessage")]
		public string TransferMessage { get; set; }
		
		/// <summary>
		/// An id of a sound file to play if call is transferred
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferMessageSoundId")]
		public System.Nullable<System.Int64> TransferMessageSoundId { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferNumber")]
		public string TransferNumber { get; set; }
		
		/// <summary>
		/// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public CallBroadcastSoundsDncSoundTextVoice Voice { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallRecordingList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CallRecording[] Items { get; set; }
	}
	
	/// <summary>
	/// Call tracking configuration allows you track incoming calls, analyze, respond to customers using sms or voice replies. For more information see [call tracking page](https://www.callfire.com/products/call-tracking)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallTrackingConfig
	{
		
		/// <summary>
		/// An id of sound file, played if caller can not be connected to transfer number for any reason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedTransferSoundId")]
		public System.Nullable<System.Int64> FailedTransferSoundId { get; set; }
		
		/// <summary>
		/// Google Analytics for Call Tracking
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAnalytics")]
		public GoogleAnalytics GoogleAnalytics { get; set; }
		
		/// <summary>
		/// An id of sound file, played if call is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="introSoundId")]
		public System.Nullable<System.Int64> IntroSoundId { get; set; }
		
		/// <summary>
		/// Records all inbound calls
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recorded")]
		public System.Nullable<System.Boolean> Recorded { get; set; }
		
		/// <summary>
		/// Screens the incoming calls
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screen")]
		public System.Nullable<System.Boolean> Screen { get; set; }
		
		/// <summary>
		/// List of phone numbers in E.164 format (11-digit) are used for transfer. Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferNumbers")]
		public string[] TransferNumbers { get; set; }
		
		/// <summary>
		/// Enables voicemail if call is not transferred
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voicemail")]
		public System.Nullable<System.Boolean> Voicemail { get; set; }
		
		/// <summary>
		/// An id of sound file, played if voicemail is enabled and a call isn't transferred
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voicemailSoundId")]
		public System.Nullable<System.Int64> VoicemailSoundId { get; set; }
		
		/// <summary>
		/// Weekly schedule allows to schedule operations by day of week and time of the day
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklySchedule")]
		public WeeklySchedule WeeklySchedule { get; set; }
		
		/// <summary>
		/// An id of sound file, played if call is screened
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whisperSoundId")]
		public System.Nullable<System.Int64> WhisperSoundId { get; set; }
	}
	
	/// <summary>
	/// Google Analytics for Call Tracking
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleAnalytics
	{
		
		/// <summary>
		/// A category to group. For example: Sales or Support
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// A domain name for analytics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// An id of a Google account, example: UA-XXXXX-2X
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAccountId")]
		public string GoogleAccountId { get; set; }
	}
	
	/// <summary>
	/// Weekly schedule allows to schedule operations by day of week and time of the day
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WeeklySchedule
	{
		
		/// <summary>
		/// A scheduled days when operation will trigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysOfWeek")]
		public string[] DaysOfWeek { get; set; }
		
		/// <summary>
		/// Represents a time part of a given date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeOfDay")]
		public LocalTime StartTimeOfDay { get; set; }
		
		/// <summary>
		/// Represents a time part of a given date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTimeOfDay")]
		public LocalTime StopTimeOfDay { get; set; }
		
		/// <summary>
		/// A user's timezone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallerId
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallerIdList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CallerId[] Items { get; set; }
	}
	
	/// <summary>
	/// Request which is used to verify a new caller id number
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallerIdVerificationRequest
	{
		
		/// <summary>
		/// The code used to verify a caller id number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		public string VerificationCode { get; set; }
	}
	
	/// <summary>
	/// Represents a sound recording from account's sound library which can be used in different API operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CampaignSound
	{
		
		/// <summary>
		/// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// True if the same sound file exists in a sound library of account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicate")]
		public System.Nullable<System.Boolean> Duplicate { get; set; }
		
		/// <summary>
		/// An id of a sound file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Length of a sound in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthInSeconds")]
		public System.Nullable<System.Int32> LengthInSeconds { get; set; }
		
		/// <summary>
		/// A name of a sound file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A current status of a sound, available values: UPLOAD - uploading is in progress, RECORDING - recording of sound is in progress, ACTIVE - sound is ready, FAILED, ARCHIVED - sound was archived, SCRUBBED - sound was scrubbed 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CampaignSoundStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CampaignSoundStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECORDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_SYSTEM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCRUBBED = 6,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CampaignSoundPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CampaignSound[] Items { get; set; }
	}
	
	/// <summary>
	/// Contains history of all calls and texts addressed to a given contact
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactHistory
	{
		
		/// <summary>
		/// List of Call objects addressed to a given contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calls")]
		public Call[] Calls { get; set; }
		
		/// <summary>
		/// An id of a contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// List of Text objects addressed to a given contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="texts")]
		public Text[] Texts { get; set; }
	}
	
	/// <summary>
	/// Represents a text action sent or received by CallFire platform
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Text
	{
		
		/// <summary>
		/// Map of user-defined string attributes associated with an action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// An id of contact batch associated with an action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public System.Nullable<System.Int64> BatchId { get; set; }
		
		/// <summary>
		/// An id of broadcast if given text was sent as a part of text broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public System.Nullable<System.Int64> CampaignId { get; set; }
		
		/// <summary>
		/// Represents a contact in CallFire platform. Contains info about the people you want to contact. It allows you to store a user-defined properties for each contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// Result of text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finalTextResult")]
		public System.Nullable<TextFinalTextResult> FinalTextResult { get; set; }
		
		/// <summary>
		/// Sender's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// An id of an action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// An action inbound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inbound")]
		public System.Nullable<System.Boolean> Inbound { get; set; }
		
		/// <summary>
		/// Labels associated with an action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media[] Media { get; set; }
		
		/// <summary>
		/// A text message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.Int64> Modified { get; set; }
		
		/// <summary>
		/// List of text records, each record contains additional details: time of sending, cost, current state.  A single contact may have multiple numbers. If given text was sent as part of broadcast with configured retry logic then each text record will contain details about attempted number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="records")]
		public TextRecord[] Records { get; set; }
		
		/// <summary>
		/// Current state of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public CallState State { get; set; }
		
		/// <summary>
		/// Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TextFinalTextResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_BIG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_TEMP_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDIALED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_NUMBER = 8,
	}
	
	/// <summary>
	/// Represents a media file which can be added to a text message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Media
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		/// <summary>
		/// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// An id of a media file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A size of a media file in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lengthInBytes")]
		public System.Nullable<System.Int64> LengthInBytes { get; set; }
		
		/// <summary>
		/// A MIME type of media file, ex: image/jpeg, image/png, video/mp4, audio/mp3, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public string MediaType { get; set; }
		
		/// <summary>
		/// A name of a media file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A public URL of a media file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicUrl")]
		public string PublicUrl { get; set; }
	}
	
	/// <summary>
	/// Represents a text message sent to a contact's number
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextRecord
	{
		
		/// <summary>
		/// A cost of a sent text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedAmount")]
		public System.Nullable<System.Single> BilledAmount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerName")]
		public string CallerName { get; set; }
		
		/// <summary>
		/// A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public System.Nullable<System.Int64> FinishTime { get; set; }
		
		/// <summary>
		/// An id of a text record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Labels associated with a text action
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// A text message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="switchId")]
		public string SwitchId { get; set; }
		
		/// <summary>
		/// Result of a text (SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textResult")]
		public TextFinalTextResult TextResult { get; set; }
		
		/// <summary>
		/// An attempted phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
	}
	
	/// <summary>
	/// Represents a contact list in CallFire system
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactList
	{
		
		/// <summary>
		/// A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// An Id of a contact list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A name of a contact list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A number of contacts in a contact list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// A current status of a contact list, available values: ACTIVE - contact list is ready, VALIDATING - contact list validation is in progress, IMPORTING - importing is in progress, IMPORT_FAILED - in case of errors occurred during the importing, ERRORS - contact list has validation errors, DELETED - contact list was deleted, PARSE_FAILED - contacts cannot be parsed, COLUMN_TOO_LARGE - if size of phone number or any other column exceeds 255 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ContactListStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContactListStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSE_FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_TOO_LARGE = 7,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactListPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ContactList[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Contact[] Items { get; set; }
	}
	
	/// <summary>
	/// A request object is used to create a contact list from one of available contact sources
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContactListRequest
	{
		
		/// <summary>
		/// A list of ids of existing contacts in CallFire system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactIds")]
		public int[] ContactIds { get; set; }
		
		/// <summary>
		/// List of numbers in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactNumbers")]
		public string[] ContactNumbers { get; set; }
		
		/// <summary>
		/// A type of a phone number (homePhone, workPhone, mobilePhone). This parameter is used with contactNumbers and specifies which types of phone numbers are included to a contact list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactNumbersField")]
		public string ContactNumbersField { get; set; }
		
		/// <summary>
		/// A list of new contact objects to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public Contact[] Contacts { get; set; }
		
		/// <summary>
		/// A name of a contact list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A flag to indicate how to define property names for contacts. If true, uses the field and property names exactly as defined. If false will assign custom properties and fields to A, B, C, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useCustomFields")]
		public System.Nullable<System.Boolean> UseCustomFields { get; set; }
	}
	
	/// <summary>
	/// Contains statistics of billing plan usage
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreditUsage
	{
		
		/// <summary>
		/// Sum of calls duration rounded to nearest whole minute
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callsDurationMinutes")]
		public System.Nullable<System.Int32> CallsDurationMinutes { get; set; }
		
		/// <summary>
		/// Total credits used calls and texts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditsUsed")]
		public System.Nullable<System.Double> CreditsUsed { get; set; }
		
		/// <summary>
		/// Start of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalBegin")]
		public System.Nullable<System.Int64> IntervalBegin { get; set; }
		
		/// <summary>
		/// End of usage period formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalEnd")]
		public System.Nullable<System.Int64> IntervalEnd { get; set; }
		
		/// <summary>
		/// Number of texts sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textsSent")]
		public System.Nullable<System.Int32> TextsSent { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeliveryReport
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public System.Nullable<System.Int64> CampaignId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryCategory")]
		public System.Nullable<DeliveryReportDeliveryCategory> DeliveryCategory { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryState")]
		public System.Nullable<DeliveryReportDeliveryState> DeliveryState { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeliveryReportDeliveryCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTED_OUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOUNCED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CREDITS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeliveryReportDeliveryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_OPTED_OUT_GLOBAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_OPTED_OUT_LOCAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_NO_CREDITS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GATEWAY_REJECTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_DELIVERED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_INVALID_NUMBER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_BAD_DATA = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_FORCE_STOPPED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_PERIOD_LIMIT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_INTERNATIONAL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_INVALID_TIMEZONE_OR_DNC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_ALREADY_SCRUBBED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_SYSTEM_ERROR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_NO_WIRELESS_CARRIER = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_MESSAGE_TOO_LONG = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_MESSAGE_BLOCKED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_QUEUE_LIMIT_REACHED = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_TOKEN_LIMIT_REACHED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_TIME_LIMIT_REACHED = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_SCHEDULER_CAPACITY_EXCEEDED = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPAM_DETECTED = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_NO_GATEWAY = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_DAILY_LIMIT_REACHED = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGINATED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORWARDED = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_GIVEN = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY_MMS_AS_SMS = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED_TRANSCODE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGINAL = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUNCATED = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEUED_RATE_LIMITED = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUFFERED = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE_LIMIT_EXCEEDED = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_UNAVAILABLE = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_MMS_AS_SMS = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEUED_RECOVERABLE_ERROR = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_WITH_ADDITIONAL_SPID = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSENT_FREE_TRIAL = 43,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DncListDto : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DoNotContact[] Items { get; set; }
	}
	
	/// <summary>
	/// Represents an opted out contact
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DoNotContact
	{
		
		/// <summary>
		/// A number on Do-Not-Call list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call")]
		public System.Nullable<System.Boolean> Call { get; set; }
		
		/// <summary>
		/// An Id of a campaign which was used to send a message to DNC number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public System.Nullable<System.Int64> CampaignId { get; set; }
		
		/// <summary>
		/// A time when a given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundCall")]
		public System.Nullable<System.Boolean> InboundCall { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundText")]
		public System.Nullable<System.Boolean> InboundText { get; set; }
		
		/// <summary>
		/// A single DNC number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// The name of DNC source (can be the name of DNC list that user uploads to CallFire)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// A number on Do-Not-Text list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public System.Nullable<System.Boolean> Text { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DoNotContactPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DoNotContact[] Items { get; set; }
	}
	
	/// <summary>
	/// Error response containing error info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMessage")]
		public string DeveloperMessage { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpLink")]
		public string HelpLink { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalCode")]
		public string InternalCode { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputStream
	{
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ItemList
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ItemListUniversalDoNotContact
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UniversalDoNotContact[] Items { get; set; }
	}
	
	/// <summary>
	/// Represents a Universal (platform-wide) Do-Not-Contact object for a given phone number. Shows whether inbound/outbound actions are allowed for a given number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UniversalDoNotContact
	{
		
		/// <summary>
		/// Optional source number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// If toNumber can receive calls or If toNumber can call fromNumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundCall")]
		public System.Nullable<System.Boolean> InboundCall { get; set; }
		
		/// <summary>
		/// If toNumber can receive texts or If toNumber can text fromNumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundText")]
		public System.Nullable<System.Boolean> InboundText { get; set; }
		
		/// <summary>
		/// If toNumber can send calls or If fromNumber can call toNumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outboundCall")]
		public System.Nullable<System.Boolean> OutboundCall { get; set; }
		
		/// <summary>
		/// If toNumber can send texts or If fromNumber can text toNumber.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outboundText")]
		public System.Nullable<System.Boolean> OutboundText { get; set; }
		
		/// <summary>
		/// destination DNC number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toNumber")]
		public string ToNumber { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ItemListWebhookResource
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public WebhookResource[] Items { get; set; }
	}
	
	/// <summary>
	/// WebhookResource describes a resource and a list of supported events, once event is triggered CallFire performs an HTTP POST request to a client's endpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookResource
	{
		
		/// <summary>
		/// A name of a webhook resource (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// A list of event names which are supported by webhook resource (ex: Started, Stopped, Finished, etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedEvents")]
		public string[] SupportedEvents { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IvrInboundConfig
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialplanXml")]
		public string DialplanXml { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Keyword
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword1 { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortCode")]
		public string ShortCode { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordConfig
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textInboundConfig")]
		public TextInboundConfig TextInboundConfig { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextInboundConfig
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardEnabled")]
		public System.Nullable<System.Boolean> ForwardEnabled { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardNumber")]
		public string ForwardNumber { get; set; }
	}
	
	/// <summary>
	/// Represents a lease object for a given keyword
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordLease
	{
		
		/// <summary>
		/// Enables the auto renewal of a keyword lease at the end of each billing cycle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenew")]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		/// <summary>
		/// Existing contact list ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactListId")]
		public System.Nullable<System.Int64> ContactListId { get; set; }
		
		/// <summary>
		/// Enable/disable double opt in feature
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleOptInEnabled")]
		public System.Nullable<System.Boolean> DoubleOptInEnabled { get; set; }
		
		/// <summary>
		/// A text used as a keyword
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// A time of a lease timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseBegin")]
		public System.Nullable<System.Int64> LeaseBegin { get; set; }
		
		/// <summary>
		/// A date and time when the keyword lease is finishes. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseEnd")]
		public System.Nullable<System.Int64> LeaseEnd { get; set; }
		
		/// <summary>
		/// A number assigned to keyword. Example: 12132212344
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Opt in confirmation message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optInConfirmationMessage")]
		public string OptInConfirmationMessage { get; set; }
		
		/// <summary>
		/// A short code assigned to keyword. Example: 67076 (Deprecated - please use number instead)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortCode")]
		public string ShortCode { get; set; }
		
		/// <summary>
		/// A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<KeywordLeaseStatus> Status { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public A2pUpgradeLeaseDtoType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum KeywordLeaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 3,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordLeasePage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeywordLease[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Keyword[] Items { get; set; }
	}
	
	/// <summary>
	/// Request object is used to purchase keywords
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordPurchaseRequest
	{
		
		/// <summary>
		/// A list of keywords
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedAccountDto
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountHolderId")]
		public string AccountHolderId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credits")]
		public System.Nullable<System.Double> Credits { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLogin")]
		public System.Nullable<System.DateTimeOffset> LastLogin { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ManagedAccountDtoState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ManagedAccountDtoState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VERIFICATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_REVIEW = 3,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedAccountsPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ManagedAccountDto[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaPage
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Media[] Items { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageTemplateCategory
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageTemplateCategoryPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public MessageTemplateCategory[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Number
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nationalFormat")]
		public string NationalFormat { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number1 { get; set; }
		
		/// <summary>
		/// Every local number associated with a region. You can query regions to use them in subsequent purchase requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public Region Region { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendEmailOnCreate")]
		public System.Nullable<System.Boolean> SendEmailOnCreate { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tollFree")]
		public System.Nullable<System.Boolean> TollFree { get; set; }
	}
	
	/// <summary>
	/// Every local number associated with a region. You can query regions to use them in subsequent purchase requests
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Region
	{
		
		/// <summary>
		/// A city of a region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// A country of a region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A latitude of a region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		/// <summary>
		/// A longitude of a region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		/// <summary>
		/// A country prefix of a region. 4-7 digit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// A two-letter state code of region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// A timezone of a region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// A five-digit zip code of a region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipcode")]
		public string Zipcode { get; set; }
	}
	
	/// <summary>
	/// Represents the configuration of a phone number purchased by user. You can configure number to accept inbound calls, play sounds to customer, make a transfer or setup an IVR script to interact with customer. See [CallFire IVR](https://www.callfire.com/products/ivr) for more info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberConfig
	{
		
		/// <summary>
		/// Call tracking configuration allows you track incoming calls, analyze, respond to customers using sms or voice replies. For more information see [call tracking page](https://www.callfire.com/products/call-tracking)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callTrackingConfig")]
		public CallTrackingConfig CallTrackingConfig { get; set; }
		
		/// <summary>
		/// A type of config. Available values: TRACKING, IVR
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configType")]
		public System.Nullable<NumberConfigConfigType> ConfigType { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ivrInboundConfig")]
		public IvrInboundConfig IvrInboundConfig { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textInboundConfig")]
		public TextInboundConfig TextInboundConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NumberConfigConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IVR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACKING = 1,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberConfigPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NumberConfig[] Items { get; set; }
	}
	
	/// <summary>
	/// Represents a lease object for a given phone number
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberLease
	{
		
		/// <summary>
		/// Enables the auto renewal of number lease at end of each billing cycle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenew")]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		/// <summary>
		/// A status of a call feature. Available values: DISABLED, ENABLED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callFeatureStatus")]
		public System.Nullable<NumberLeaseCallFeatureStatus> CallFeatureStatus { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// A date and time of a lease start. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseBegin")]
		public System.Nullable<System.Int64> LeaseBegin { get; set; }
		
		/// <summary>
		/// A data and time of a lease finish. Timestamp, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaseEnd")]
		public System.Nullable<System.Int64> LeaseEnd { get; set; }
		
		/// <summary>
		/// Formatted number with a country code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nationalFormat")]
		public string NationalFormat { get; set; }
		
		/// <summary>
		/// A phone number in E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Every local number associated with a region. You can query regions to use them in subsequent purchase requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public Region Region { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendEmailOnCreate")]
		public System.Nullable<System.Boolean> SendEmailOnCreate { get; set; }
		
		/// <summary>
		/// A lease status. Available values: PENDING, ACTIVE, RELEASED, UNAVAILABLE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public KeywordLeaseStatus Status { get; set; }
		
		/// <summary>
		/// A status of a text feature. Available values: DISABLED, ENABLED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFeatureStatus")]
		public NumberLeaseCallFeatureStatus TextFeatureStatus { get; set; }
		
		/// <summary>
		/// A  toll-free number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tollFree")]
		public System.Nullable<System.Boolean> TollFree { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public A2pUpgradeLeaseDtoType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NumberLeaseCallFeatureStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 3,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberLeasePage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NumberLease[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Number[] Items { get; set; }
	}
	
	/// <summary>
	/// Represents an order created on the CallFire platform
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberOrder
	{
		
		/// <summary>
		/// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.Int64> Created { get; set; }
		
		/// <summary>
		/// An id of an order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Represents an order item of a particular order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public NumberOrderItem Keywords { get; set; }
		
		/// <summary>
		/// Represents an order item of a particular order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localNumbers")]
		public NumberOrderItem LocalNumbers { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="salesTax")]
		public System.Nullable<System.Single> SalesTax { get; set; }
		
		/// <summary>
		/// A current status of an order. Available values: NEW, PROCESSING, FINISHED, ERRORED, VOID, WAIT_FOR_PAYMENT, REJECTED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<NumberOrderStatus> Status { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public System.Nullable<System.Single> Summary { get; set; }
		
		/// <summary>
		/// Represents an order item of a particular order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tollFreeNumbers")]
		public NumberOrderItem TollFreeNumbers { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
		
		/// <summary>
		/// A total cost of an order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public System.Nullable<System.Single> TotalCost { get; set; }
	}
	
	/// <summary>
	/// Represents an order item of a particular order
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberOrderItem
	{
		
		/// <summary>
		/// List of fulfilled items, e.g. phone numbers, keywords
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fulfilled")]
		public string[] Fulfilled { get; set; }
		
		/// <summary>
		/// A total number of items bought within a single order item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordered")]
		public System.Nullable<System.Int32> Ordered { get; set; }
		
		/// <summary>
		/// A cost of unit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitCost")]
		public System.Nullable<System.Single> UnitCost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NumberOrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAIT_FOR_PAYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIALLY_ADJUSTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADJUSTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVE_TIER_ONE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVE_TIER_TWO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 11,
	}
	
	/// <summary>
	/// Request object is used to order a local or toll-free numbers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberPurchaseRequest
	{
		
		/// <summary>
		/// City of requested numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Total count of local numbers requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localCount")]
		public System.Nullable<System.Int32> LocalCount { get; set; }
		
		/// <summary>
		/// A list of phone numbers in E.164 format (11-digit) to buy. Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numbers")]
		public string[] Numbers { get; set; }
		
		/// <summary>
		/// Country prefix of requested numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promo")]
		public string Promo { get; set; }
		
		/// <summary>
		/// A two-letter state code of requested numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Total count of toll-free numbers requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tollFreeCount")]
		public System.Nullable<System.Int32> TollFreeCount { get; set; }
		
		/// <summary>
		/// A five-digit Zip code of requested numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipcode")]
		public string Zipcode { get; set; }
	}
	
	/// <summary>
	/// Represents a page with results returned by query operation. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Page
	{
		
		/// <summary>
		/// A list of returned items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
		
		/// <summary>
		/// A maximum number of returned items. If items.size() < limit assume no more items
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// An offset from a start of paging source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// Total count of available results. -1 if unknown
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageDeliveryReport
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DeliveryReport[] Items { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageKeywordLease
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeywordLease[] Items { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageNumberOrder
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NumberOrder[] Items { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageText
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Text[] Items { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageWebhook
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Webhook[] Items { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Webhook is a user-defined callback, which can be maintained via API. CallFire will send POST request to a client's endpoint defined in webhook once one of assigned events is triggered. See [webhooks guide](https://developers.callfire.com/webhooks-guide.html) for more information about CallFire Webhooks API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webhook
	{
		
		/// <summary>
		/// URL that webhook will send POST to on resource event trigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback")]
		public string Callback { get; set; }
		
		/// <summary>
		/// A time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.Int64> CreatedAt { get; set; }
		
		/// <summary>
		/// A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Comma separated list of events on resource that will trigger callbacks (ex: STARTED, STOPPED, FINISHED, etc...). 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public string[] Events { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.Nullable<System.Int64> ExpiresAt { get; set; }
		
		/// <summary>
		/// A limit callback response to a particular fields
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// An id of a webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A name of a webhook
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonStrictSsl")]
		public System.Nullable<System.Boolean> NonStrictSsl { get; set; }
		
		/// <summary>
		/// A resource name that webhook is watching events on. Use GET /webhooks/resources to determine resources and events available (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Webhook secret token which is used as a signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// If true is set then webhook triggers only once. Afterwards the webhook will be deleted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleUse")]
		public System.Nullable<System.Boolean> SingleUse { get; set; }
		
		/// <summary>
		/// A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.Int64> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Region[] Items { get; set; }
	}
	
	/// <summary>
	/// An id of a resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceId
	{
		
		/// <summary>
		/// An id of a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceIdList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ResourceId[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamingOutput
	{
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemporalUnit
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateBased")]
		public System.Nullable<System.Boolean> DateBased { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public Duration Duration { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationEstimated")]
		public System.Nullable<System.Boolean> DurationEstimated { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeBased")]
		public System.Nullable<System.Boolean> TimeBased { get; set; }
	}
	
	/// <summary>
	/// CallFire allows you to set up auto reply messages for your numbers CallFire allows you to set up auto reply messages for your numbers and keywords. You can set a general auto reply for anyone who texts your number (keyword). Also you can include a text to match, so that the auto reply would be sent only to those recipients whose texts the matched text
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextAutoReply
	{
		
		/// <summary>
		/// An id of a text auto reply
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Setup autoreply for a given keyword
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// Text to match. If it is set then autoreply will be sent to a person who texted message with matched text. Case insensitive, if parameter is not specified then all texts will be matched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match")]
		public string Match { get; set; }
		
		/// <summary>
		/// A text message to return as an auto reply
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Setup autoreply for a given phone number, E.164 format (11-digit). Example: 12132000384
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextAutoReplyPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TextAutoReply[] Items { get; set; }
	}
	
	/// <summary>
	/// A text campaign allows you to send a text message to a number of recipients. It supports scheduling, retry logic and pattern-based messages
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextBroadcast
	{
		
		/// <summary>
		/// If message length exceeds 160 characters, multiple messages will be sent, SEND_MULTIPLE strategy is chosen by default. Available values: SEND_MULTIPLE - send text as multiple messages, DO_NOT_SEND - do not send text if it exceeds 160 characters, TRIM - trims text message to 160 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigMessageStrategy")]
		public System.Nullable<TextBroadcastBigMessageStrategy> BigMessageStrategy { get; set; }
		
		/// <summary>
		/// A phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// A unique id of a broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// A labels of a broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.Int64> LastModified { get; set; }
		
		/// <summary>
		/// Represents a range of time during which CallFire will send a call or text to recipients. Timeframe uses the local timezone of recipient's number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localTimeRestriction")]
		public LocalTimeRestriction LocalTimeRestriction { get; set; }
		
		/// <summary>
		/// A maximum number of texts that CallFire dials at once
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxActive")]
		public System.Nullable<System.Int32> MaxActive { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media[] Media { get; set; }
		
		/// <summary>
		/// A text message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A name of a broadcast
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Recipients of a text campaign, can be an existing contacts or a new one
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public TextRecipient[] Recipients { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resumeNextDay")]
		public System.Nullable<System.Boolean> ResumeNextDay { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedules")]
		public Schedule[] Schedules { get; set; }
		
		/// <summary>
		/// A status of a broadcast. SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CallBroadcastStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TextBroadcastBigMessageStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_MULTIPLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOT_SEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MMS = 3,
	}
	
	/// <summary>
	/// A recipient of a text message. You should provide either phone number or contact id of existing contact
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextRecipient
	{
		
		/// <summary>
		/// A map of string attributes associated with a recipient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		/// <summary>
		/// An id of existing contact in account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public System.Nullable<System.Int64> ContactId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromNumber")]
		public string FromNumber { get; set; }
		
		/// <summary>
		/// A list of media objects' ids associated with a text message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media[] Media { get; set; }
		
		/// <summary>
		/// A text message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextBroadcastCreateResponse
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextBroadcastPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TextBroadcast[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextBroadcastStatsDto
	{
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billedAmount")]
		public System.Nullable<System.Double> BilledAmount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotTextCount")]
		public System.Nullable<System.Int32> DoNotTextCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCount")]
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recievedCount")]
		public System.Nullable<System.Int32> RecievedCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingOutboundCount")]
		public System.Nullable<System.Int32> RemainingOutboundCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentCount")]
		public System.Nullable<System.Int32> SentCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tooBigCount")]
		public System.Nullable<System.Int32> TooBigCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalOutboundCount")]
		public System.Nullable<System.Int32> TotalOutboundCount { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsentCount")]
		public System.Nullable<System.Int32> UnsentCount { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextList : ItemList
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Text[] Items { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Text[] Items { get; set; }
	}
	
	/// <summary>
	/// Request object is used to create a sound from provided text using text to speech engine
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextToSpeech
	{
		
		/// <summary>
		/// A text to be turned into sound
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A voice to be used. Available values: MALE1, FEMALE1 , FEMALE2, SPANISH1, FRENCHCANADIAN1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public CallBroadcastSoundsDncSoundTextVoice Voice { get; set; }
	}
	
	/// <summary>
	/// A request object which is used to update a contact list
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateContactListRequest
	{
		
		/// <summary>
		/// A name of a contact list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Object represents user account in Callfire system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountHolder")]
		public System.Nullable<System.Boolean> AccountHolder { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiPasswordLastFour")]
		public string ApiPasswordLastFour { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		public AccountBrand Brand { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cccAgent")]
		public System.Nullable<System.Boolean> CccAgent { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public System.Nullable<System.DateTimeOffset> DateOfBirth { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="industryName")]
		public string IndustryName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="musicOnHold")]
		public System.Nullable<UserMusicOnHold> MusicOnHold { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSoundEnabled")]
		public System.Nullable<System.Boolean> NotificationSoundEnabled { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optIn")]
		public System.Nullable<System.Boolean> OptIn { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optInNumber")]
		public string OptInNumber { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumberExtension")]
		public string PhoneNumberExtension { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumberExtensionDelaySec")]
		public System.Nullable<System.Int32> PhoneNumberExtensionDelaySec { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumberForDisplay")]
		public string PhoneNumberForDisplay { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumberVerified")]
		public System.Nullable<System.Boolean> PhoneNumberVerified { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileEmail")]
		public string ProfileEmail { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signupComplete")]
		public System.Nullable<System.Boolean> SignupComplete { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="soaUser")]
		public User SoaUser { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamSeat")]
		public System.Nullable<System.Boolean> TeamSeat { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userState")]
		public System.Nullable<UserUserState> UserState { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userStatePending")]
		public System.Nullable<System.Boolean> UserStatePending { get; set; }
		
		/// <summary>
		/// ~
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserMusicOnHold
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SILENCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CELTIC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASSICAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTAL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAZZ = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEOPUNK = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_AGE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROCK = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWING = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TECHNO = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserUserState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_AUTH_INVITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_USER_INVITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXISTING_USER_INVITE = 3,
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserController
	{
	}
	
	/// <summary>
	/// ~
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookPage : Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Webhook[] Items { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Find calls
		/// To search for all calls sent or received by the user. Use "id=0" for the campaignId parameter to query for all calls sent through the POST /calls API. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
		/// FindCalls calls
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="id">Lists the Call ids to search for. If calls ids are specified then other query parameters can be ignored</param>
		/// <param name="campaignId">An id of a campaign, queries for calls included to a particular campaign. Specify null for all campaigns and 0 for default campaign</param>
		/// <param name="batchId">An id of a contact batch, queries for calls of a particular contact batch</param>
		/// <param name="fromNumber">Phone number in E.164 format (11-digit) that call was from. Example: 12132000384</param>
		/// <param name="toNumber">Phone number in E.164 format (11-digit) that call was sent to. Example: 12132000384</param>
		/// <param name="label">A label for a specific call</param>
		/// <param name="states">Searches for all calls which correspond to statuses listed in a comma separated string. Available values: READY, SELECTED, CALLBACK, FINISHED, DISABLED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT. See [call states and results](https://developers.callfire.com/results-responses-errors.html)</param>
		/// <param name="results">Searches for all calls with statuses listed in a comma separated string. Available values: SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED. See [call states and results](https://developers.callfire.com/results-responses-errors.html)</param>
		/// <param name="inbound">Filters inbound calls for "true" value and outbound calls for "false" value</param>
		/// <param name="intervalBegin">Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <param name="intervalEnd">End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <returns>successful operation</returns>
		public async Task<CallPage> FindCallsAsync(string fields, int limit, int offset, int[] id, long campaignId, long batchId, string fromNumber, string toNumber, string label, string states, string results, bool inbound, long intervalBegin, long intervalEnd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&"+string.Join("&", id.Select(z => $"id={z}"))+"&campaignId="+campaignId+"&batchId="+batchId+"&fromNumber=" + (fromNumber==null? "" : System.Uri.EscapeDataString(fromNumber))+"&toNumber=" + (toNumber==null? "" : System.Uri.EscapeDataString(toNumber))+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&states=" + (states==null? "" : System.Uri.EscapeDataString(states))+"&results=" + (results==null? "" : System.Uri.EscapeDataString(results))+"&inbound="+inbound+"&intervalBegin="+intervalBegin+"&intervalEnd="+intervalEnd;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send calls
		/// Use the /calls API to send individual calls quickly. A verified Caller ID and sufficient credits are required to make a call. CallRecipient represents a single recipient identified by phone number or contact id in CallFire system. You can attach user-defined attributes to a Call action via CallRecipient.attributes property, attributes are available in Call action response
		/// SendCalls calls
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="campaignId">Specifies a campaignId to send calls quickly on a previously created campaign</param>
		/// <param name="defaultLiveMessage">Text to be turned into a sound, this text will be played when the phone is answered. Parameter can be overridden for any particular CallRecipient</param>
		/// <param name="defaultMachineMessage">Text to be turned into a sound, this text will be played when answering machine is detected. Parameter can be overridden for any particular CallRecipient</param>
		/// <param name="defaultLiveMessageSoundId">Id of sound file to play if phone is answered. Parameter can be overridden for any particular CallRecipient</param>
		/// <param name="defaultMachineMessageSoundId">An id of a sound file to play if answering machine is detected. Parameter can be overridden for any particular CallRecipient</param>
		/// <param name="defaultVoice">The voice set by default for all text-to-speech messages defined in CallRecipient objects or as default *Message properties</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">An array of CallRecipient objects. 
		///Limitations:
		///1. Max number of CallRecipient objects is 10
		///</param>
		/// <returns>successful operation</returns>
		public async Task<CallList> SendCallsAsync(string fields, long campaignId, string defaultLiveMessage, string defaultMachineMessage, long defaultLiveMessageSoundId, long defaultMachineMessageSoundId, CallBroadcastSoundsDncSoundTextVoice defaultVoice, bool strictValidation, CallRecipient[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&campaignId="+campaignId+"&defaultLiveMessage=" + (defaultLiveMessage==null? "" : System.Uri.EscapeDataString(defaultLiveMessage))+"&defaultMachineMessage=" + (defaultMachineMessage==null? "" : System.Uri.EscapeDataString(defaultMachineMessage))+"&defaultLiveMessageSoundId="+defaultLiveMessageSoundId+"&defaultMachineMessageSoundId="+defaultMachineMessageSoundId+"&defaultVoice=" + defaultVoice+"&strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find call broadcasts
		/// Searches for all voice broadcasts created by user. Can query on label, name, and the current running status of the campaign. Returns a paged list of voice broadcasts
		/// FindCallBroadcasts calls/broadcasts
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="label">A label of a voice broadcast</param>
		/// <param name="name">A name of voice broadcast</param>
		/// <param name="running">Specify whether the campaigns should be running or not</param>
		/// <param name="scheduled">Specify whether the campaigns should be scheduled or not</param>
		/// <param name="intervalBegin">Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <param name="intervalEnd">End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <returns>successful operation</returns>
		public async Task<CallBroadcastPage> FindCallBroadcastsAsync(string fields, int limit, int offset, string label, string name, bool running, bool scheduled, long intervalBegin, long intervalEnd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&running="+running+"&scheduled="+scheduled+"&intervalBegin="+intervalBegin+"&intervalEnd="+intervalEnd;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallBroadcastPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a call broadcast
		/// Creates a call broadcast campaign using the Call Broadcast API. Send a CallBroadcast in the message body to add details in a voice broadcast campaign. The campaign can be created without contacts and bare minimum configuration, but contacts will have to be added further on to use the campaign
		/// CreateCallBroadcast calls/broadcasts
		/// </summary>
		/// <param name="start">Specify whether to immediately start this campaign (not required)</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A CallBroadcast object</param>
		public async Task CreateCallBroadcastAsync(bool start, bool strictValidation, CallBroadcast requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts?start="+start+"&strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find a specific call broadcast
		/// Returns a single CallBroadcast instance for a given call broadcast campaign id
		/// GetCallBroadcast calls/broadcasts/{id}
		/// </summary>
		/// <param name="id">An id of a CallBroadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<CallBroadcast> GetCallBroadcastAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallBroadcast>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a call broadcast
		/// This operation lets the user modify the configuration of a voice broadcast campaign after call broadcast campaign is created. See CallBroadcast for more information on what can/can't be updated on this API
		/// UpdateCallBroadcast calls/broadcasts/{id}
		/// </summary>
		/// <param name="id">An id of a voice broadcast</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A CallBroadcast object</param>
		public async Task UpdateCallBroadcastAsync(long id, bool strictValidation, CallBroadcast requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"?strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Archive voice broadcast
		/// Archives a voice broadcast (voice broadcast will be hidden in search results)
		/// ArchiveVoiceBroadcast calls/broadcasts/{id}/archive
		/// </summary>
		/// <param name="id">An id of a voice broadcast to archive</param>
		public async Task ArchiveVoiceBroadcastAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find batches in a call broadcast
		/// This endpoint will enable the user to page through all of the batches for a particular voice broadcast campaign
		/// GetCallBroadcastBatches calls/broadcasts/{id}/batches
		/// </summary>
		/// <param name="id">An id of a call broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <returns>successful operation</returns>
		public async Task<BatchPage> GetCallBroadcastBatchesAsync(long id, string fields, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/batches?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add batches to a call broadcast
		/// The 'add batch' API allows user to add additional batches to an already created voice broadcast campaign. The added batch will go through the CallFire validation process, unlike in the recipients version of this API. That is why you can use the scrubDuplicates flag to remove duplicates from your batch. Batches may be added as a contact list id, a list of contact ids, or a list of numbers
		/// AddCallBroadcastBatch calls/broadcasts/{id}/batches
		/// </summary>
		/// <param name="id">An id of a call broadcast</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A request object</param>
		public async Task AddCallBroadcastBatchAsync(long id, bool strictValidation, BatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/batches?strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find calls in a call broadcast
		/// This endpoint will enable the user to page through all calls for a particular call broadcast campaign
		/// GetCallBroadcastCalls calls/broadcasts/{id}/calls
		/// </summary>
		/// <param name="id">An Id of a call broadcast</param>
		/// <param name="batchId">An id of a particular batch associated with broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <returns>successful operation</returns>
		public async Task<CallPage> GetCallBroadcastCallsAsync(long id, long batchId, string fields, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/calls?batchId="+batchId+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add recipients to a call broadcast
		/// Use this API to add the recipients to an existing voice broadcast. Post a list of Recipient objects to be added to the voice broadcast campaign. These contacts will not go through validation process, and will be acted upon as they are added. Recipients may be added as a list of contact ids, or list of numbers
		/// AddCallBroadcastRecipients calls/broadcasts/{id}/recipients
		/// </summary>
		/// <param name="id">An id of a call broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A list of CallRecipient objects</param>
		/// <returns>successful operation</returns>
		public async Task<CallList> AddCallBroadcastRecipientsAsync(long id, string fields, bool strictValidation, Recipient[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/recipients?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start voice broadcast
		/// Start a voice broadcast
		/// StartVoiceBroadcast calls/broadcasts/{id}/start
		/// </summary>
		/// <param name="id">An id of voice broadcast to start</param>
		public async Task StartVoiceBroadcastAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get statistics on call broadcast
		/// Returns broadcast statistics like total number of sent/received actions, total cost, number of remaining outbound actions, error count, etc
		/// GetCallBroadcastStats calls/broadcasts/{id}/stats
		/// </summary>
		/// <param name="id">An id of a call broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="begin">Start of the search time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <param name="end">End of the search time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <returns>successful operation</returns>
		public async Task<CallBroadcastStats> GetCallBroadcastStatsAsync(long id, string fields, long begin, long end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/stats?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&begin="+begin+"&end="+end;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallBroadcastStats>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop voice broadcast
		/// Stop a voice broadcast
		/// StopVoiceBroadcast calls/broadcasts/{id}/stop
		/// </summary>
		/// <param name="id">An id of voice broadcast to stop</param>
		public async Task StopVoiceBroadcastAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable/enable undialed recipients in broadcast
		/// This operation lets the user to disable/enable undialed recipients in created broadcast
		/// ToggleCallBroadcastRecipientsStatus calls/broadcasts/{id}/toggleRecipientsStatus
		/// </summary>
		/// <param name="id">An id of a voice broadcast</param>
		/// <param name="enable">Flag which indicate what to do with calls (true will enable call in DISABLED status and vice versa)</param>
		/// <param name="requestBody">List of Recipient objects. By recipient we mean either phone number or contact id.</param>
		public async Task ToggleCallBroadcastRecipientsStatusAsync(long id, bool enable, Recipient[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/broadcasts/"+id+"/toggleRecipientsStatus?enable="+enable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get call recording by id
		/// Returns metadata of recording of a particular call. Metadata contains a link to a MP3 recording
		/// GetCallRecording calls/recordings/{id}
		/// </summary>
		/// <param name="id">~</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<CallRecording> GetCallRecordingAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/recordings/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallRecording>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get call recording in mp3 format
		/// Returns an MP3 recording of particular call, response contains binary data, content type is 'audio/mpeg'
		/// GetCallRecordingMp3 calls/recordings/{id}.mp3
		/// </summary>
		/// <param name="id">An id of a call</param>
		/// <returns>successful operation</returns>
		public async Task<InputStream> GetCallRecordingMp3Async(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/recordings/"+id+".mp3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InputStream>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific call
		/// Returns a single Call instance for a given call id.
		/// GetCall calls/{id}
		/// </summary>
		/// <param name="id">An id of a call</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Call> GetCallAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Call>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get call recordings for a call
		/// Returns a list of recordings metadata of particular call. Metadata contains link to a MP3 recording
		/// GetCallRecordings calls/{id}/recordings
		/// </summary>
		/// <param name="id">An id of a call</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<CallRecordingList> GetCallRecordingsAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/"+id+"/recordings?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallRecordingList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get call recording by name
		/// Returns recording metadata of particular call. Metadata contains link to a MP3 recording
		/// GetCallRecordingByName calls/{id}/recordings/{name}
		/// </summary>
		/// <param name="id">An id of a call</param>
		/// <param name="name">A name of a recording</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<CallRecording> GetCallRecordingByNameAsync(long id, string name, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/"+id+"/recordings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallRecording>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get call mp3 recording by name
		/// Returns a MP3 recording of a particular call, response contains binary data, content type is 'audio/mpeg'
		/// GetCallRecordingMp3ByName calls/{id}/recordings/{name}.mp3
		/// </summary>
		/// <param name="id">An id of a call</param>
		/// <param name="name">A name of a recording</param>
		/// <returns>successful operation</returns>
		public async Task GetCallRecordingMp3ByNameAsync(long id, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calls/"+id+"/recordings/"+ (name==null? "" : System.Uri.EscapeDataString(name))+".mp3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific batch
		/// Returns a single Batch instance for a given batch id. This API is useful for determining the state of a validating batch
		/// GetCampaignBatch campaigns/batches/{id}
		/// </summary>
		/// <param name="id">An id of a batch</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Batch> GetCampaignBatchAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/batches/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Batch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a batch
		/// Updates a single Batch instance, currently batch can only be turned "on/off"
		/// UpdateCampaignBatch campaigns/batches/{id}
		/// </summary>
		/// <param name="id">An id of a batch to update</param>
		/// <param name="requestBody">A batch instance</param>
		public async Task UpdateCampaignBatchAsync(long id, Batch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/batches/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find sounds
		/// To find all campaign sounds which were created by user. Returns all sounds available to be used in campaigns
		/// FindCampaignSounds campaigns/sounds
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="filter">value to filter file names again; this value is used to check if the filename contains the filter value.</param>
		/// <param name="includeArchived">Includes ARCHIVED sounds for "true" value</param>
		/// <param name="includePending">Includes UPLOAD/RECORDING sounds for "true" value</param>
		/// <param name="includeScrubbed">Includes SCRUBBED sounds for "true" value</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<CampaignSoundPage> FindCampaignSoundsAsync(int limit, int offset, string filter, bool includeArchived, bool includePending, bool includeScrubbed, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/sounds?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&includeArchived="+includeArchived+"&includePending="+includePending+"&includeScrubbed="+includeScrubbed+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CampaignSoundPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add sound via call
		/// Use this API to create a sound via a phone call. Provide the required phone number in the CallCreateSound object inside the request, and user will receive a call shortly after with instructions on how to record a sound over the phone.
		/// PostCallCampaignSound campaigns/sounds/calls
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="requestBody">Request object containing the name of a new campaign sound and phone number to call up</param>
		/// <returns>successful operation</returns>
		public async Task<CampaignSound> PostCallCampaignSoundAsync(string fields, CallCreateSound requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/sounds/calls?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CampaignSound>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add sound via text-to-speech
		/// Use this API to create a sound file via a supplied string of text. Add a text in the TextToSpeech.message field, and pick a voice in the TextToSpeech.voice field. Available voices are: MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1
		/// PostTTSCampaignSound campaigns/sounds/tts
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="requestBody">textToSpeech</param>
		/// <returns>successful operation</returns>
		public async Task<CampaignSound> PostTTSCampaignSoundAsync(string fields, TextToSpeech requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/sounds/tts?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CampaignSound>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a specific sound
		/// Deletes a single campaign sound instance for a specific campaign sound id, this operation does not delete sound completely, it sets sound status to ARCHIVED which means that sound will no longer appear in 'find' operation results, but still accessible via 'get' operation
		/// DeleteCampaignSound campaigns/sounds/{id}
		/// </summary>
		/// <param name="id">An id of a campaign sound</param>
		public async Task DeleteCampaignSoundAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/sounds/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific sound
		/// Returns a single CampaignSound instance for a given sound id in campaign. This is a meta data to the sounds. No audio data is returned from this API
		/// GetCampaignSound campaigns/sounds/{id}
		/// </summary>
		/// <param name="id">An id of a sound campaign</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<CampaignSound> GetCampaignSoundAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/sounds/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CampaignSound>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a MP3 sound
		/// Download the MP3 version of a hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
		/// GetCampaignSoundDataMp3 campaigns/sounds/{id}.mp3
		/// </summary>
		/// <param name="id">An id of a campaign sound</param>
		/// <returns>successful operation</returns>
		public async Task GetCampaignSoundDataMp3Async(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/sounds/"+id+".mp3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a WAV sound
		/// Download the WAV version of the hosted file. This is an audio data endpoint. Returns binary response of the 'audio/mpeg' content type
		/// GetCampaignSoundDataWav campaigns/sounds/{id}.wav
		/// </summary>
		/// <param name="id">An id of a campaign sound</param>
		/// <returns>successful operation</returns>
		public async Task GetCampaignSoundDataWavAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/sounds/"+id+".wav";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find contacts
		/// Find user's contacts by id, contact list, or on any property name. Returns a paged list of contacts
		/// FindContacts contacts
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="id">A list of contact IDs. If the id parameter is included, the other query parameters are ignored.</param>
		/// <param name="number">Multiple contact numbers can be specified. If the number parameter is included, the other query parameters are ignored.</param>
		/// <param name="contactListId">Filters contacts by a particular contact list</param>
		/// <param name="propertyName">Name of a contact property to search by</param>
		/// <param name="propertyValue">Value of a contact property to search by</param>
		/// <returns>successful operation</returns>
		public async Task<ContactPage> FindContactsAsync(string fields, int limit, int offset, int[] id, string[] number, long contactListId, string propertyName, string propertyValue, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&"+string.Join("&", id.Select(z => $"id={z}"))+"&"+string.Join("&", number.Select(z => $"number={System.Uri.EscapeDataString(z.ToString())}"))+"&contactListId="+contactListId+"&propertyName=" + (propertyName==null? "" : System.Uri.EscapeDataString(propertyName))+"&propertyValue=" + (propertyValue==null? "" : System.Uri.EscapeDataString(propertyValue));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create contacts
		/// Creates contacts in CallFire system. Only values from the next list can be used as external system parameter in contact creation: **NATION_BUILDER, SALES_FORCE_CONTACTS, SALES_FORCE_LEADS, SALES_FORCE_REPORTS, ZOHO, MAIL_CHIMP**. See [contacts validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
		/// CreateContacts contacts
		/// </summary>
		/// <param name="requestBody">A list of a contact objects</param>
		/// <returns>successful operation</returns>
		public async Task<ResourceIdList> CreateContactsAsync(Contact[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceIdList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find do not contact (dnc) items
		/// Searches for all Do Not Contact (DNC) objects created by user. These DoNotContact entries only affect calls/texts/campaigns on this account. Returns a paged list of DoNotContact objects
		/// FindDoNotContacts contacts/dncs
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="prefix">Prefix (1-10 digits) of phone numbers</param>
		/// <param name="campaignId">A campaign id which was used to send a message to a DNC number</param>
		/// <param name="source">A DNC source name to search for DNCs</param>
		/// <param name="call">Show only Do-Not-Call numbers</param>
		/// <param name="text">Show only Do-Not-Text numbers</param>
		/// <param name="inboundCall">~</param>
		/// <param name="inboundText">~</param>
		/// <param name="number">~</param>
		/// <returns>successful operation</returns>
		public async Task<DoNotContactPage> FindDoNotContactsAsync(string fields, int limit, int offset, string prefix, long campaignId, string source, bool call, bool text, bool inboundCall, bool inboundText, string[] number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/dncs?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&campaignId="+campaignId+"&source=" + (source==null? "" : System.Uri.EscapeDataString(source))+"&call="+call+"&text="+text+"&inboundCall="+inboundCall+"&inboundText="+inboundText+"&"+string.Join("&", number.Select(z => $"number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DoNotContactPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add do not contact (dnc) numbers
		/// Add or update a list of Do Not Contact (DNC) contact entries. Can toggle whether the DNCs are enabled for calls/texts.
		/// AddDoNotContacts contacts/dncs
		/// </summary>
		/// <param name="requestBody">AddDoNotContactsRequest object</param>
		public async Task AddDoNotContactsAsync(AddDoNotContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/dncs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete do not contact (dnc) numbers contained in source.
		/// Delete Do Not Contact (DNC) contact entries contained in source.
		/// DeleteDoNotContactsBySource contacts/dncs/sources/{source}
		/// </summary>
		/// <param name="source">Source associated with Do Not Contact (DNC) entry.</param>
		public async Task DeleteDoNotContactsBySourceAsync(string source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/dncs/sources/"+ (source==null? "" : System.Uri.EscapeDataString(source));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find universal do not contacts (udnc) associated with toNumber
		/// Searches for a UniversalDoNotContact object for a given phone number. Shows whether inbound/outbound actions are allowed for a given number
		/// GetUniversalDoNotContacts contacts/dncs/universals/{toNumber}
		/// </summary>
		/// <param name="toNumber">A required destination phone number in E.164 format (11-digit). Example: 12132000384</param>
		/// <param name="fromNumber">An optional destination/source number for DNC, specified in E.164 format (11-digit). Example: 12132000384</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<ItemListUniversalDoNotContact> GetUniversalDoNotContactsAsync(string toNumber, string fromNumber, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/dncs/universals/"+ (toNumber==null? "" : System.Uri.EscapeDataString(toNumber))+"&fromNumber=" + (fromNumber==null? "" : System.Uri.EscapeDataString(fromNumber))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ItemListUniversalDoNotContact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete do not contact (dnc) number. If number contains commas treat as list of numbers
		/// Delete a Do Not Contact (DNC) contact entry.
		/// DeleteDoNotContact contacts/dncs/{number}
		/// </summary>
		/// <param name="number">Number associated with Do Not Contact (DNC) entry.</param>
		public async Task DeleteDoNotContactAsync(string number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/dncs/"+ (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get do not contact (dnc)
		/// Get Do Not Contact (DNC) object create by user. This DoNotContact entry only affects calls/texts/campaigns on this account.
		/// GetDoNotContact contacts/dncs/{number}
		/// </summary>
		/// <param name="number">Number associated with Do Not Contact (DNC) entry.</param>
		/// <returns>successful operation</returns>
		public async Task<DoNotContact> GetDoNotContactAsync(string number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/dncs/"+ (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DoNotContact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an individual do not contact (dnc) number
		/// Update a Do Not Contact (DNC) contact entry. Can toggle whether the DNC is enabled for calls/texts.
		/// UpdateDoNotContact contacts/dncs/{number}
		/// </summary>
		/// <param name="number">~</param>
		/// <param name="requestBody">DoNotContact object</param>
		public async Task UpdateDoNotContactAsync(string number, DoNotContact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/dncs/"+ (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find contact lists
		/// Searches for all contact lists which are available for the current user. Returns a paged list of contact lists
		/// FindContactLists contacts/lists
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="name">A name or a partial name of a contact list</param>
		/// <param name="exactMatch">~</param>
		/// <param name="contactCount">~</param>
		/// <param name="orderBy">~</param>
		/// <returns>successful operation</returns>
		public async Task<ContactListPage> FindContactListsAsync(string fields, int limit, int offset, string name, bool exactMatch, int contactCount, string orderBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&exactMatch="+exactMatch+"&contactCount="+contactCount+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactListPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create contact lists
		/// Creates a contact list for use with campaigns using 1 of 3 inputs. A List of Contact objects, a list of String E.164 numbers, or a list of CallFire contactIds can be used as the data source for the created contact list. After contact list is added into the CallFire system, contact lists goes through seven system safeguards that check the accuracy and consistency of the data. For example, our system checks that contact number is formatted correctly, is valid, is not duplicated in another contact list, or is not added on a specific DNC list. You can configure to keep/merge or remove contacts which do not complies these rules. If contacts were not added to a contact list after the validation, this means the data needs to be properly formatted and corrected before calling this API
		/// CreateContactList contacts/lists
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="requestBody">A request object</param>
		/// <returns>successful operation</returns>
		public async Task<ContactList> CreateContactListAsync(string fields, CreateContactListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a contact list
		/// Deletes a contact list, included contacts will not be deleted.
		/// DeleteContactList contacts/lists/{id}
		/// </summary>
		/// <param name="id">An id of the contact list to be deleted</param>
		public async Task DeleteContactListAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific contact list
		/// Returns a single ContactList instance for a given contact list id
		/// GetContactList contacts/lists/{id}
		/// </summary>
		/// <param name="id">An id of a contact list to return</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<ContactList> GetContactListAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a contact list
		/// Updates contact list instance.
		/// UpdateContactList contacts/lists/{id}
		/// </summary>
		/// <param name="id">An id of contact list to update</param>
		/// <param name="requestBody">A request object</param>
		public async Task UpdateContactListAsync(long id, UpdateContactListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete contacts from a contact list
		/// Deletes contacts from a contact list. List the contact ids in request to delete multiple contacts with one request.
		/// RemoveContactListItems contacts/lists/{id}/items
		/// </summary>
		/// <param name="id">A id of a contact list</param>
		/// <param name="contactId">An id of a contact entity in the CallFire system</param>
		public async Task RemoveContactListItemsAsync(long id, int[] contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists/"+id+"/items?"+string.Join("&", contactId.Select(z => $"contactId={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find contacts in a contact list
		/// Searches for all entries in a contact list with specified id. Returns a paged list of contact entries
		/// GetContactListItems contacts/lists/{id}/items
		/// </summary>
		/// <param name="id">An id of a contact list</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <returns>successful operation</returns>
		public async Task<ContactPage> GetContactListItemsAsync(long id, string fields, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists/"+id+"/items?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add contacts to a contact list
		/// Adds contacts to a contact list. Available contact sources are: list of the contact entities, list of ids of existing contacts in user's account, list of phone numbers in E.164 format (11-digits)
		/// AddContactListItems contacts/lists/{id}/items
		/// </summary>
		/// <param name="id">An id of a contact list</param>
		/// <param name="requestBody">A request object</param>
		public async Task AddContactListItemsAsync(long id, AddContactListContactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists/"+id+"/items";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a contact from a contact list
		/// Deletes a single contact from a contact list
		/// RemoveContactListItem contacts/lists/{id}/items/{contactId}
		/// </summary>
		/// <param name="id">An id of a contact list</param>
		/// <param name="contactId">An id of a contact</param>
		public async Task RemoveContactListItemAsync(long id, long contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/lists/"+id+"/items/"+contactId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a contact
		/// Deletes a contact instance from account
		/// DeleteContact contacts/{id}
		/// </summary>
		/// <param name="id">An Id of a contact</param>
		public async Task DeleteContactAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific contact
		/// Returns a Contact instance for a given contact id. Deleted contacts can be still retrieved but will be marked as deleted. Deleted contacts will not be shown in search request.
		/// GetContact contacts/{id}
		/// </summary>
		/// <param name="id">An id of a contact</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Contact> GetContactAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Contact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a contact
		/// Updates a single contact instance with id specified. See [contact validation rules](https://www.callfire.com/help/docs/getting-started/managing-contacts/validating-contacts#section1)
		/// UpdateContact contacts/{id}
		/// </summary>
		/// <param name="id">An id of a contact</param>
		/// <param name="requestBody">A contact object</param>
		public async Task UpdateContactAsync(long id, Contact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find a contact's history
		/// Searches for all texts and calls attributed to a contact. Returns a list of calls and texts a contact has been involved with
		/// GetContactHistory contacts/{id}/history
		/// </summary>
		/// <param name="id">An Id of a contact</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<ContactHistory> GetContactHistoryAsync(long id, int limit, int offset, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+id+"/history?limit="+limit+"&offset="+offset+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find keywords
		/// Searches for all keywords available for purchase on the CallFire platform. If a keyword appears in the response, it is available for purchase. List the 'keywords' in a query parameter to search for multiple keywords (at least one keyword should be sent in request). Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
		/// FindKeywords keywords
		/// </summary>
		/// <param name="keywords">A keyword to search for</param>
		/// <returns>successful operation</returns>
		public async Task<KeywordList> FindKeywordsAsync(string[] keywords, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords?"+string.Join("&", keywords.Select(z => $"keywords={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find keyword leases
		/// Searches for all keywords owned by user. A keyword lease is the ownership information involving a keyword
		/// FindKeywordLeases keywords/leases
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="filter">Filter by part of Keyword name or Label name of Keyword</param>
		/// <param name="labelName">An exact label name to search by</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<KeywordLeasePage> FindKeywordLeasesAsync(int limit, int offset, string filter, string labelName, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/leases?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&labelName=" + (labelName==null? "" : System.Uri.EscapeDataString(labelName))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordLeasePage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find keyword lease configs
		/// Searches for all keyword lease configs for the user. Returns a paged list of KeywordConfig
		/// FindKeywordLeaseConfigs keywords/leases/configs
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="filter">Filter by part of Keyword name or Label name of Keyword</param>
		/// <param name="labelName">An exact label name to search by</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Page> FindKeywordLeaseConfigsAsync(int limit, int offset, string filter, string labelName, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/leases/configs?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&labelName=" + (labelName==null? "" : System.Uri.EscapeDataString(labelName))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Page>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific keyword lease config
		/// Returns a single KeywordConfig instance for a given keyword lease
		/// GetKeywordLeaseConfig keywords/leases/configs/{keyword}
		/// </summary>
		/// <param name="keyword">A Keyword to get KeywordConfig by</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<KeywordConfig> GetKeywordLeaseConfigAsync(string keyword, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/leases/configs/"+ (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a keyword lease config
		/// Updates a keyword lease configuration. Use this API endpoint to enable/disable inbound SMS forwarding, set forward number. Forward number must be in E.164 format)
		/// UpdateKeywordLeaseConfig keywords/leases/configs/{keyword}
		/// </summary>
		/// <param name="keyword">To update a keyword lease config</param>
		/// <param name="requestBody">The configuration of a keyword lease object.</param>
		public async Task UpdateKeywordLeaseConfigAsync(string keyword, KeywordConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/leases/configs/"+ (keyword==null? "" : System.Uri.EscapeDataString(keyword));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find a keyword by id
		/// Get keyword by id
		/// GetKeywordLeaseById keywords/leases/id/{id}
		/// </summary>
		/// <param name="id">~</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<KeywordLease> GetKeywordLeaseByIdAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/leases/id/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordLease>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific lease
		/// Searches for all keywords owned by user
		/// GetKeywordLease keywords/leases/{keyword}
		/// </summary>
		/// <param name="keyword">Keyword text that a lease is desired for</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<KeywordLease> GetKeywordLeaseAsync(string keyword, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/leases/"+ (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordLease>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a lease
		/// Updates a keyword lease. Turns the autoRenew on/off. Configure double opt in feature. Add/remove contact list from keyword.
		/// UpdateKeywordLease keywords/leases/{keyword}
		/// </summary>
		/// <param name="keyword">To update a keyword lease</param>
		/// <param name="requestBody">A keyword lease object</param>
		public async Task UpdateKeywordLeaseAsync(string keyword, KeywordLease requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/leases/"+ (keyword==null? "" : System.Uri.EscapeDataString(keyword));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Check for a specific keyword
		/// Searches for the specific keyword to purchase on the CallFire platform. Returns 'true' if keyword is available. Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
		/// IsKeywordAvailable keywords/{keyword}/available
		/// </summary>
		/// <param name="keyword">To specify a keyword to search for. Example: SUN, MOON</param>
		/// <returns>successful operation</returns>
		public async Task<bool> IsKeywordAvailableAsync(string keyword, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "keywords/"+ (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find account details
		/// Searches for the user account details. Details include name, email, and basic account permissions. For authentication use api credentials.
		/// GetAccount me/account
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Account> GetAccountAsync(string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/account?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find api credentials
		/// Searches for all credentials generated by user. Returns a paged list of the API credentials. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
		/// FindApiCredentials me/api/credentials
		/// </summary>
		/// <param name="name">Filter by name</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <returns>successful operation</returns>
		public async Task<ApiCredentialPage> FindApiCredentialsAsync(string name, string fields, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/api/credentials?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiCredentialPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create api credentials
		/// Creates an API credentials for the CallFire API. This endpoint requires full CallFire account credentials to be used, authenticated using Basic Authentication. At the moment user provides only the name for the credentials. The generated credentials can be used to access any CallFire APIs. For authentication use account credentials.
		/// CreateApiCredential me/api/credentials
		/// </summary>
		/// <param name="requestBody">To create the API credentials</param>
		/// <returns>successful operation</returns>
		public async Task<ApiCredential> CreateApiCredentialAsync(ApiCredential requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/api/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiCredential>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete api credentials
		/// Deletes a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
		/// DeleteApiCredential me/api/credentials/{id}
		/// </summary>
		/// <param name="id">An id of an API credential</param>
		public async Task DeleteApiCredentialAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/api/credentials/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific api credential
		/// Returns an API credential instance for a given api credential id. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
		/// GetApiCredential me/api/credentials/{id}
		/// </summary>
		/// <param name="id">An id of an API credential</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<ApiCredential> GetApiCredentialAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/api/credentials/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiCredential>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable specified API credentials
		/// Disables a specified API credential. Currently, removes the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
		/// DisableApiCredentials me/api/credentials/{id}/disable
		/// </summary>
		/// <param name="id">An id of an API credential</param>
		public async Task DisableApiCredentialsAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/api/credentials/"+id+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable specified API credentials
		/// Enables a specified API credential. Currently, adds the ability to access the API. Only ACCOUNT_HOLDER can invoke this API. For authentication use account credentials.
		/// EnableApiCredentials me/api/credentials/{id}/enable
		/// </summary>
		/// <param name="id">An id of an API credential</param>
		public async Task EnableApiCredentialsAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/api/credentials/"+id+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find credit usage
		/// Find credit usage for the user. Returns credits usage for time period specified or if unspecified then total for all time. For authentication use api credentials.
		/// GetCreditUsage me/billing/credit-usage
		/// </summary>
		/// <param name="intervalBegin">Beginning of usage period formatted in unix time milliseconds. Example: 1473781817000</param>
		/// <param name="intervalEnd">End of usage period formatted in unix time milliseconds. Example: 1473781817000</param>
		/// <returns>successful operation</returns>
		public async Task<CreditUsage> GetCreditUsageAsync(long intervalBegin, long intervalEnd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/billing/credit-usage?intervalBegin="+intervalBegin+"&intervalEnd="+intervalEnd;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreditUsage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find plan usage
		/// Searches for the data of a billing plan usage for the user. Returns the data of a billing plan usage for the current month. For authentication use api credentials.
		/// GetBillingPlanUsage me/billing/plan-usage
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<BillingPlanUsage> GetBillingPlanUsageAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/billing/plan-usage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingPlanUsage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find caller ids
		/// Returns a list of verified caller ids. If the number is not shown in the list, then it is not verified. In this case sending of a verification code is required. For authentication use api credentials.
		/// GetCallerIds me/callerids
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<CallerIdList> GetCallerIdsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/callerids";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallerIdList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a caller id
		/// Generates and sends a verification code to the phone number provided in the path. The verification code is delivered via a phone call. This code needs to be submitted to the verify caller id API endpoint to complete verification. For authentication use api credentials.
		/// SendVerificationCodeToCallerId me/callerids/{callerid}
		/// </summary>
		/// <param name="callerid">A phone number in E.164 format (11-digit) which needs to be verified. Example: 12132000384</param>
		public async Task SendVerificationCodeToCallerIdAsync(string callerid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/callerids/"+ (callerid==null? "" : System.Uri.EscapeDataString(callerid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify a caller id
		/// With the verification code received from the Create caller id endpoint, a call to this endpoint is required to finish verification. For authentication use api credentials.
		/// VerifyCallerId me/callerids/{callerid}/verification-code
		/// </summary>
		/// <param name="callerid">A phone number in E.164 format (11-digit) which needs to be verified. Example: 12132000384</param>
		/// <param name="requestBody">request</param>
		/// <returns>successful operation</returns>
		public async Task<bool> VerifyCallerIdAsync(string callerid, CallerIdVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/callerids/"+ (callerid==null? "" : System.Uri.EscapeDataString(callerid))+"/verification-code";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find media
		/// Find media files created by user
		/// FindMedia media
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="filter">value to filter file names again; this value is used to check if the filename contains the filter value.</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<MediaPage> FindMediaAsync(int limit, int offset, string filter, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media?limit="+limit+"&offset="+offset+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MediaPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download media by extension
		/// Download a media file. Available types of files: bmp, gif, jpg, m4a, mp3, mp4, png, wav. Content type in response depends on 'extension' parameter, e.g. image/jpeg, image/png, audio/mp3, etc
		/// GetMediaDataByKey media/public/{key}.{extension}
		/// </summary>
		/// <param name="key">A hash-key of a media resource</param>
		/// <param name="extension">Media file type, available types: bmp, gif, jpg, m4a, mp3, mp4, png, wav</param>
		/// <returns>successful operation</returns>
		public async Task GetMediaDataByKeyAsync(string key, string extension, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/public/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"."+ (extension==null? "" : System.Uri.EscapeDataString(extension));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific media
		/// Get media resource by id
		/// GetMedia media/{id}
		/// </summary>
		/// <param name="id">An id of a media resource</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Media> GetMediaAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Media>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download media by extension
		/// Download a media file. Available types of files: bmp, gif, jpg, m4a, mp3, mp4, png, wav. Content type in response depends on 'extension' parameter, e.g. image/jpeg, image/png, audio/mp3, etc
		/// GetMediaData media/{id}.{extension}
		/// </summary>
		/// <param name="id">An id of a media resource</param>
		/// <param name="extension">Media file type. Available types: bmp, gif, jpg, m4a, mp3, mp4, png, wav</param>
		/// <returns>successful operation</returns>
		public async Task GetMediaDataAsync(long id, string extension, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/"+id+"."+ (extension==null? "" : System.Uri.EscapeDataString(extension));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a MP3 media
		/// Download a MP3 media, endpoint returns application/binary content-type
		/// GetMediaDataBinary media/{id}/file
		/// </summary>
		/// <param name="id">An id of a media resource</param>
		/// <returns>successful operation</returns>
		public async Task GetMediaDataBinaryAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "media/"+id+"/file";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find leases
		/// Searches for all numbers leased by account user. This API is useful for finding all numbers currently owned by the user. Returns a paged list of number leases.
		/// FindNumberLeases numbers/leases
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="prefix">A 4-7 digit prefix</param>
		/// <param name="city">A city name</param>
		/// <param name="state">A two-letter state code. Example: CA, IL, etc.</param>
		/// <param name="zipcode">A five-digit Zipcode</param>
		/// <param name="labelName">A label name</param>
		/// <param name="tollFree">~</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<NumberLeasePage> FindNumberLeasesAsync(int limit, int offset, string prefix, string city, string state, string zipcode, string labelName, bool tollFree, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/leases?limit="+limit+"&offset="+offset+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&zipcode=" + (zipcode==null? "" : System.Uri.EscapeDataString(zipcode))+"&labelName=" + (labelName==null? "" : System.Uri.EscapeDataString(labelName))+"&tollFree="+tollFree+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NumberLeasePage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find lease configs
		/// Searches for all number lease configs for the user. Returns a paged list of NumberConfig
		/// FindNumberLeaseConfigs numbers/leases/configs
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="prefix">A 4-7 digit prefix</param>
		/// <param name="city">A city name</param>
		/// <param name="state">A two-letter state code. Example: CA, IL, etc.</param>
		/// <param name="zipcode">A five-digit Zipcode</param>
		/// <param name="labelName">A label name</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<NumberConfigPage> FindNumberLeaseConfigsAsync(int limit, int offset, string prefix, string city, string state, string zipcode, string labelName, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/leases/configs?limit="+limit+"&offset="+offset+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&zipcode=" + (zipcode==null? "" : System.Uri.EscapeDataString(zipcode))+"&labelName=" + (labelName==null? "" : System.Uri.EscapeDataString(labelName))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NumberConfigPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific lease config
		/// Returns a single NumberConfig instance for a given number lease
		/// GetNumberLeaseConfig numbers/leases/configs/{number}
		/// </summary>
		/// <param name="number">A phone number in E.164 format (11-digit). Example: 12132000384</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<NumberConfig> GetNumberLeaseConfigAsync(string number, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/leases/configs/"+ (number==null? "" : System.Uri.EscapeDataString(number))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NumberConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a lease config
		/// Updates a phone number lease configuration. Use this API endpoint to add an Inbound IVR or Call Tracking feature to a CallFire phone number. Call tracking configuration allows you to track the incoming calls, to analyze and to respond customers using sms or voice replies. For more information see [call tracking page](https://www.callfire.com/products/call-tracking)
		/// UpdateNumberLeaseConfig numbers/leases/configs/{number}
		/// </summary>
		/// <param name="number">A phone number in E.164 format (11-digit) which needs to be verified. Example: 12132000384</param>
		/// <param name="requestBody">The configuration of a number lease object. There are two available types of configuration: IVR, TRACKING </param>
		public async Task UpdateNumberLeaseConfigAsync(string number, NumberConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/leases/configs/"+ (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find a specific lease
		/// Returns a single NumberLease instance for a given number
		/// GetNumberLease numbers/leases/{number}
		/// </summary>
		/// <param name="number">A phone number in E.164 format (11-digit). Example: 12132000384</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<NumberLease> GetNumberLeaseAsync(string number, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/leases/"+ (number==null? "" : System.Uri.EscapeDataString(number))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NumberLease>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a lease
		/// Updates a number lease instance. Ability to turn on/off autoRenew and toggle call/text features for a particular number
		/// UpdateNumberLease numbers/leases/{number}
		/// </summary>
		/// <param name="number">A phone number in E.164 format (11-digit). Example: 12132000384</param>
		/// <param name="requestBody">A NumberLease object to update</param>
		public async Task UpdateNumberLeaseAsync(string number, NumberLease requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/leases/"+ (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find local numbers
		/// Searches for numbers available for purchase in CallFire local numbers catalog . At least one additional parameter is required. User may filter local numbers by their region information. If all numbers with desirable zip code is already busy search will return available numbers with nearest zip code.
		/// FindNumbersLocal numbers/local
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="prefix">A 4-7 digit prefix</param>
		/// <param name="city">A city name</param>
		/// <param name="state">A two-letter state code. Example: CA, IL, etc.</param>
		/// <param name="zipcode">A five-digit Zipcode</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<NumberList> FindNumbersLocalAsync(int limit, string prefix, string city, string state, string zipcode, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/local?limit="+limit+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&zipcode=" + (zipcode==null? "" : System.Uri.EscapeDataString(zipcode))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NumberList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find number regions
		/// Searches for region information. Use this API to obtain detailed region information that can be used to query for more specific phone numbers than a general query.
		/// FindNumberRegions numbers/regions
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="prefix">A 4-7 digit prefix</param>
		/// <param name="city">A city name</param>
		/// <param name="cityPrefix">~</param>
		/// <param name="state">A two-letter state code. Example: CA, IL, etc.</param>
		/// <param name="zipcode">A five-digit Zipcode</param>
		/// <param name="country">~</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<RegionPage> FindNumberRegionsAsync(int limit, int offset, string prefix, string city, string cityPrefix, string state, string zipcode, string country, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/regions?limit="+limit+"&offset="+offset+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&cityPrefix=" + (cityPrefix==null? "" : System.Uri.EscapeDataString(cityPrefix))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&zipcode=" + (zipcode==null? "" : System.Uri.EscapeDataString(zipcode))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegionPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find tollfree numbers
		/// Searches for the toll free numbers which are available for purchase in the CallFire catalog
		/// FindNumbersTollfree numbers/tollfree
		/// </summary>
		/// <param name="pattern">Filter toll free numbers by prefix, pattern must be 3 char long and should end with '*'. Examples: 8**, 85*, 87* (but 855 will fail because pattern must end with '*').</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<NumberList> FindNumbersTollfreeAsync(string pattern, int limit, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "numbers/tollfree?pattern=" + (pattern==null? "" : System.Uri.EscapeDataString(pattern))+"&limit="+limit+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NumberList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find orders
		/// Searches for account orders
		/// FindOrders orders
		/// </summary>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="status">Filter by order status, accepts multiple values in comma separated string, available values: [PROCESSING, FINISHED, PAYMENT_ERROR, VOID, WAIT_FOR_PAYMENT, PARTIALLY_ADJUSTED, ADJUSTED]</param>
		/// <param name="intervalBegin">Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000</param>
		/// <param name="intervalEnd">End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000</param>
		/// <returns>successful operation</returns>
		public async Task<PageNumberOrder> FindOrdersAsync(int limit, int offset, string fields, string[] status, long intervalBegin, long intervalEnd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders?limit="+limit+"&offset="+offset+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&"+string.Join("&", status.Select(z => $"status={System.Uri.EscapeDataString(z.ToString())}"))+"&intervalBegin="+intervalBegin+"&intervalEnd="+intervalEnd;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageNumberOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Purchase keywords
		/// Purchase keywords. Send a list of available keywords into this API to purchase them using CallFire credits. Make sure the account has enough credits before trying to purchase the keywords. Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
		/// OrderKeywords orders/keywords
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="requestBody">Request object which contains a list of keywords to buy</param>
		public async Task OrderKeywordsAsync(string fields, KeywordPurchaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/keywords?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Purchase numbers
		/// Purchase numbers. There are many ways to purchase a number. Set either 'tollFreeCount' or 'localCount' along with some querying fields to purchase numbers by bulk query. Set the list of numbers to purchase by list. Available numbers will be purchased using CallFire credits owned by the user. Make sure the account has enough credits before trying to purchase
		/// OrderNumbers orders/numbers
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="requestBody">Request object contains a list of numbers to buy, you can filter the numbers by their region information: city, state, zipcode, etc</param>
		public async Task OrderNumbersAsync(string fields, NumberPurchaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/numbers?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find a specific order
		/// Returns a single NumberOrder instance for a given order id. Order contains information about purchased keywords, local, toll-free numbers
		/// GetOrder orders/{id}
		/// </summary>
		/// <param name="id">An id of an order</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<NumberOrder> GetOrderAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NumberOrder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get delivery reports by ad hoc criteria
		/// Get delivery reports
		/// GetDeliveryReports reports/delivery
		/// </summary>
		/// <param name="startDate">~</param>
		/// <param name="endDate">~</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="campaignId">~</param>
		/// <param name="fromNumber">~</param>
		/// <param name="toNumber">~</param>
		/// <param name="deliveryCategory">~</param>
		/// <param name="deliveryState">~</param>
		/// <param name="carrier">~</param>
		/// <param name="messageText">~</param>
		/// <returns>successful operation</returns>
		public async Task<PageDeliveryReport> GetDeliveryReportsAsync(string startDate, string endDate, int limit, int offset, long campaignId, string fromNumber, string toNumber, DeliveryReportDeliveryCategory deliveryCategory, DeliveryReportDeliveryState deliveryState, string carrier, string messageText, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/delivery?startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&limit="+limit+"&offset="+offset+"&campaignId="+campaignId+"&fromNumber=" + (fromNumber==null? "" : System.Uri.EscapeDataString(fromNumber))+"&toNumber=" + (toNumber==null? "" : System.Uri.EscapeDataString(toNumber))+"&deliveryCategory=" + deliveryCategory+"&deliveryState=" + deliveryState+"&carrier=" + (carrier==null? "" : System.Uri.EscapeDataString(carrier))+"&messageText=" + (messageText==null? "" : System.Uri.EscapeDataString(messageText));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageDeliveryReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find texts
		/// Searches for texts sent or received by user. Use "campaignId=0" parameter to query for all texts sent through the POST /texts API. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
		/// FindTexts texts
		/// </summary>
		/// <param name="id">List of Text ids to search for, if ids specified other query params ignored</param>
		/// <param name="campaignId">An id of a campaign, queries for texts inside a particular campaign. Specify null to list texts of all campaigns or 0 for a default campaign</param>
		/// <param name="batchId">An Id of a contact batch, queries for texts which are used in the particular contact batch</param>
		/// <param name="fromNumber">A phone number in E.164 format (11-digit). Example: 12132000384, 67076</param>
		/// <param name="toNumber">A phone number in E.164 format (11-digit). Example: 12132000384, 67076</param>
		/// <param name="label">A label of a text message</param>
		/// <param name="states">Expected text statuses in comma separated string, available values: READY, SELECTED, CALLBACK, FINISHED, DISABLED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT. See [call states and results](https://developers.callfire.com/results-responses-errors.html)</param>
		/// <param name="results">Expected text results in comma separated string, available values: SENT, RECEIVED, DNT, TOO_BIG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED. See [call states and results](https://developers.callfire.com/results-responses-errors.html)</param>
		/// <param name="inbound">Specify true for inbound or false for outbounds. Do not specify this parameter if you need to get both inbound and outbound texts listed in response</param>
		/// <param name="intervalBegin">Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000</param>
		/// <param name="intervalEnd">End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<TextPage> FindTextsAsync(int[] id, long campaignId, long batchId, string fromNumber, string toNumber, string label, string states, string results, bool inbound, long intervalBegin, long intervalEnd, int limit, int offset, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts?"+string.Join("&", id.Select(z => $"id={z}"))+"&campaignId="+campaignId+"&batchId="+batchId+"&fromNumber=" + (fromNumber==null? "" : System.Uri.EscapeDataString(fromNumber))+"&toNumber=" + (toNumber==null? "" : System.Uri.EscapeDataString(toNumber))+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&states=" + (states==null? "" : System.Uri.EscapeDataString(states))+"&results=" + (results==null? "" : System.Uri.EscapeDataString(results))+"&inbound="+inbound+"&intervalBegin="+intervalBegin+"&intervalEnd="+intervalEnd+"&limit="+limit+"&offset="+offset+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send texts
		/// Use the /texts API to send individual texts quickly. By default all texts are going out from CallFire's dedicated short code. Example: 67076, 818818 etc
		/// SendTexts texts
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="campaignId">Specifies a campaignId to send texts through a previously created campaign</param>
		/// <param name="defaultMessage">Text message can be overridden by TextRecipient.message field. If multiple recipients have the same text message to a different recipients it is better to specify a single default message and do not duplicate it in each recipient.</param>
		/// <param name="strictValidation">Turns on strict validation for recipients</param>
		/// <param name="requestBody">List of TextRecipient objects. By recipient we mean either phone number or contact with user-defined attributes added to action. Text messaging supports media files, provide a list of ids of media files for recipient to attach media to the message.</param>
		/// <returns>successful operation</returns>
		public async Task<TextList> SendTextsAsync(string fields, long campaignId, string defaultMessage, bool strictValidation, TextRecipient[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&campaignId="+campaignId+"&defaultMessage=" + (defaultMessage==null? "" : System.Uri.EscapeDataString(defaultMessage))+"&strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find auto replies
		/// Find all text autoreplies created by user. Returns a paged list of TextAutoReply
		/// FindTextAutoReplys texts/auto-replys
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="number">Phone number in E.164 format (11-digit) which contains a TextAutoReply. Example: 12132000384. If number is empty then operator returns all autoreplies configured for the user's account</param>
		/// <returns>successful operation</returns>
		public async Task<TextAutoReplyPage> FindTextAutoReplysAsync(string fields, int limit, int offset, string number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/auto-replys?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&number=" + (number==null? "" : System.Uri.EscapeDataString(number));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextAutoReplyPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an auto reply
		/// CallFire gives you possibility to set up auto reply messages for your numbers and keywords. You can set a general auto reply for anyone who texts your number, keyword, and/or include a text to match, so that the auto reply would be sent only to those who text the matched text
		/// CreateTextAutoReply texts/auto-replys
		/// </summary>
		/// <param name="requestBody">TextAutoReply object, keyword or number should be specified with response message and text to match if needed</param>
		public async Task CreateTextAutoReplyAsync(TextAutoReply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/auto-replys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an auto reply
		/// Deletes a text auto reply and removes the configuration. Can not delete a TextAutoReply which is currently active for a campaign
		/// DeleteTextAutoReply texts/auto-replys/{id}
		/// </summary>
		/// <param name="id">An id of a text auto reply</param>
		public async Task DeleteTextAutoReplyAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/auto-replys/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific auto reply
		/// Returns a single TextAutoReply instance for a given text auto reply id
		/// GetTextAutoReply texts/auto-replys/{id}
		/// </summary>
		/// <param name="id">An id of a text auto reply</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<TextAutoReply> GetTextAutoReplyAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/auto-replys/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextAutoReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find text broadcasts
		/// Searches for all text broadcasts created by user. Can query on label, name, and the current running status of the campaign. Returns a paged list of text broadcasts
		/// FindTextBroadcasts texts/broadcasts
		/// </summary>
		/// <param name="name">A name of text broadcast</param>
		/// <param name="label">A label of a text broadcast</param>
		/// <param name="running">Returns broadcasts only in running state.</param>
		/// <param name="scheduled">Specify whether the campaigns should be scheduled or not</param>
		/// <param name="intervalBegin">Start of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <param name="intervalEnd">End of the find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<TextBroadcastPage> FindTextBroadcastsAsync(string name, string label, bool running, bool scheduled, long intervalBegin, long intervalEnd, int limit, int offset, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&running="+running+"&scheduled="+scheduled+"&intervalBegin="+intervalBegin+"&intervalEnd="+intervalEnd+"&limit="+limit+"&offset="+offset+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextBroadcastPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a text broadcast
		/// Creates a text broadcast campaign using the Text Broadcast API. Send a TextBroadcast object in the message body to detail a text broadcast campaign. A campaign can be created without contacts and with bare minimum configuration, but contacts have to be added further on to use the campaign. It supports scheduling, retry logic, pattern-based messages.
		/// CreateTextBroadcast texts/broadcasts
		/// </summary>
		/// <param name="start">If true then starts the campaign immediately (not required).</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A TextBroadcast object</param>
		public async Task CreateTextBroadcastAsync(bool start, bool strictValidation, TextBroadcast requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts?start="+start+"&strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find a specific text broadcast
		/// Returns a single TextBroadcast instance for a given text broadcast id
		/// GetTextBroadcast texts/broadcasts/{id}
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<TextBroadcast> GetTextBroadcastAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextBroadcast>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a text broadcast
		/// Allows modifying the configuration of existing text broadcast campaign. See TextBroadcast for more information on what can/can't be updated on this API
		/// UpdateTextBroadcast texts/broadcasts/{id}
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A TextBroadcast object</param>
		/// <returns>successful operation</returns>
		public async Task<TextBroadcastCreateResponse> UpdateTextBroadcastAsync(long id, bool strictValidation, TextBroadcast requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"?strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextBroadcastCreateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Archive text broadcast
		/// Archives a text broadcast (and hides it in the search results)
		/// ArchiveTextBroadcast texts/broadcasts/{id}/archive
		/// </summary>
		/// <param name="id">An id of a text broadcast to archive</param>
		public async Task ArchiveTextBroadcastAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/archive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find batches in a text broadcast
		/// This endpoint will enable the user to page through all of the batches for a particular text broadcast campaign
		/// GetTextBroadcastBatches texts/broadcasts/{id}/batches
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <returns>successful operation</returns>
		public async Task<BatchPage> GetTextBroadcastBatchesAsync(long id, string fields, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/batches?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add batches to a text broadcast
		/// Allows adding an extra batches to an already created text broadcast campaign. The batches which being  added pass the CallFire validation process (unlike in the recipients version of this API). That is why using of a scrubDuplicates flag remove duplicates from your batch. Batches may be added as a contact list id, a list of contact ids, or a list of numbers
		/// AddTextBroadcastBatch texts/broadcasts/{id}/batches
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A request object</param>
		public async Task AddTextBroadcastBatchAsync(long id, bool strictValidation, BatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/batches?strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add recipients to a text broadcast
		/// Use this API to add recipients to a text broadcast which is already created. Post a list of Recipient objects to be immediately added to the text broadcast campaign. These contacts will not go through validation process, and will be acted upon as they are added. Recipients may be added as a list of contact ids, or list of numbers
		/// AddTextBroadcastRecipients texts/broadcasts/{id}/recipients
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="strictValidation">Turns on strict validation for recipients. System will reply with BAD_REQUEST(400) if strictValidation = true and one of numbers didn't pass validation</param>
		/// <param name="requestBody">A list of the TextRecipient objects</param>
		/// <returns>successful operation</returns>
		public async Task<TextList> AddTextBroadcastRecipientsAsync(long id, string fields, bool strictValidation, TextRecipient[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/recipients?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&strictValidation="+strictValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start text broadcast
		/// Starts a text broadcast
		/// StartTextBroadcast texts/broadcasts/{id}/start
		/// </summary>
		/// <param name="id">An id of a text broadcast to start</param>
		public async Task StartTextBroadcastAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get statistics on text broadcast
		/// Returns the broadcast statistics. Example: total number of the sent/received actions, total cost, number of remaining outbound actions, error count, etc
		/// GetTextBroadcastStats texts/broadcasts/{id}/stats
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="begin">Start of a search find time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <param name="end">End of a search time interval, formatted in unix time milliseconds. Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT</param>
		/// <returns>successful operation</returns>
		public async Task<TextBroadcastStatsDto> GetTextBroadcastStatsAsync(long id, string fields, long begin, long end, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/stats?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&begin="+begin+"&end="+end;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextBroadcastStatsDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop text broadcast
		/// Stops a text broadcast
		/// StopTextBroadcast texts/broadcasts/{id}/stop
		/// </summary>
		/// <param name="id">An Id of a text broadcast. To stop the broadcast</param>
		public async Task StopTextBroadcastAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find texts in a text broadcast
		/// This endpoint will enable the user to page through all of the texts for a particular text broadcast campaign
		/// GetTextBroadcastTexts texts/broadcasts/{id}/texts
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="batchId">~</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <returns>successful operation</returns>
		public async Task<TextPage> GetTextBroadcastTextsAsync(long id, long batchId, string fields, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/texts?batchId="+batchId+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TextPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable/enable undialed recipients in broadcast
		/// This operation lets the user to disable/enable undialed contacts in created broadcast
		/// ToggleTextBroadcastRecipientsStatus texts/broadcasts/{id}/toggleRecipientsStatus
		/// </summary>
		/// <param name="id">An id of a text broadcast</param>
		/// <param name="enable">Flag which indicate what to do with texts (true will enable texts in DISABLED status and vice versa)</param>
		/// <param name="requestBody">List of Recipient objects. By recipient we mean either phone number or contact id.</param>
		public async Task ToggleTextBroadcastRecipientsStatusAsync(long id, bool enable, Recipient[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/broadcasts/"+id+"/toggleRecipientsStatus?enable="+enable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find a specific text
		/// Returns a single Text instance for a given text id
		/// GetText texts/{id}
		/// </summary>
		/// <param name="id">An id of a text</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Text> GetTextAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "texts/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Text>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find webhooks
		/// Searches all webhooks available for a current user. Searches by name, resource, event, callback URL, or whether they are enabled. Returns a paged list of Webhooks
		/// FindWebhooks webhooks
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <param name="limit">To set the maximum number of records to return in a paged list response. The default is 100</param>
		/// <param name="offset">Offset to the start of a given page. The default is 0. Check [pagination](https://developers.callfire.com/docs.html#pagination) page for more information about pagination in CallFire API.</param>
		/// <param name="name">A name of a webhook</param>
		/// <param name="resource">A name of a resource, available values: 'CccCampaign', 'CallBroadcast', 'TextBroadcast',  'OutboundCall', 'OutboundText', 'InboundCall', 'InboundText', 'ContactList'</param>
		/// <param name="_event">A name of event, available values: 'started', 'stopped', 'finished'</param>
		/// <param name="callback">A callback URL</param>
		/// <param name="enabled">Specifies whether webhook is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<WebhookPage> FindWebhooksAsync(string fields, int limit, int offset, string name, string resource, string _event, string callback, bool enabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&resource=" + (resource==null? "" : System.Uri.EscapeDataString(resource))+"&event=" + (_event==null? "" : System.Uri.EscapeDataString(_event))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&enabled="+enabled;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhookPage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a webhook
		/// Create a Webhook for notification in the CallFire system. Use the webhooks API to receive notifications of important CallFire events. Select the resource to listen to, and then choose the resource events to receive notifications on. When an event triggers, a POST will be made to the callback URL with a payload of notification information. Available resources and their events include 'CccCampaign': ['started', 'stopped', 'finished'], 'CallBroadcast': ['started', 'stopped', 'finished'], 'TextBroadcast': ['started', 'stopped', 'finished'], 'OutboundCall': ['finished'], 'InboundCall': ['finished'], 'OutboundText': ['finished'], 'InboundText': ['finished'], 'ContactList': ['validationFinished', 'validationFailed'], 'MonthlyRenewal': ['failed', 'finished'], 'LowBalance': ['failed', 'finished']. Webhooks support secret token which is used as signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
		/// CreateWebhook webhooks
		/// </summary>
		/// <param name="requestBody">A webhook object</param>
		public async Task CreateWebhookAsync(Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Find webhook resources
		/// Searches for webhook resources. Available resources include 'CccCampaign': ['started', 'stopped', 'finished'], 'CallBroadcast': ['started', 'stopped', 'finished'], 'TextBroadcast': ['started', 'stopped', 'finished'], 'OutboundCall': ['finished'], 'InboundCall': ['finished'], 'OutboundText': ['finished'], 'InboundText': ['finished'], 'ContactList': ['validationFinished', 'validationFailed'], 'MonthlyRenewal': ['failed', 'finished'], 'LowBalance': ['failed', 'finished']
		/// FindWebhookResources webhooks/resources
		/// </summary>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<ItemListWebhookResource> FindWebhookResourcesAsync(string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/resources?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ItemListWebhookResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find specific webhook resource
		/// Returns information about supported events for a given webhook resource
		/// GetWebhookResource webhooks/resources/{resource}
		/// </summary>
		/// <param name="resource">A name of a webhook resource. Available resources include 'CccCampaign': ['started', 'stopped', 'finished'], 'CallBroadcast': ['started', 'stopped', 'finished'], 'TextBroadcast': ['started', 'stopped', 'finished'], 'OutboundCall': ['finished'], 'InboundCall': ['finished'], 'OutboundText': ['finished'], 'InboundText': ['finished'], 'ContactList': ['validationFinished', 'validationFailed'], 'MonthlyRenewal': ['failed', 'finished'], 'LowBalance': ['failed', 'finished']</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<WebhookResource> GetWebhookResourceAsync(string resource, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/resources/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhookResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a webhook
		/// Deletes a webhook instance. Will be removed permanently
		/// DeleteWebhook webhooks/{id}
		/// </summary>
		/// <param name="id">An Id of a webhook</param>
		public async Task DeleteWebhookAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a specific webhook
		/// Returns a single Webhook instance for a given webhook id
		/// GetWebhook webhooks/{id}
		/// </summary>
		/// <param name="id">An id of a webhook</param>
		/// <param name="fields">Limit fields received in response. E.g. fields: id, name or fields items (id, name), see more at [partial response](https://developers.callfire.com/docs.html#partial-response) page.</param>
		/// <returns>successful operation</returns>
		public async Task<Webhook> GetWebhookAsync(long id, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+id+"?fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Webhook>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a webhook
		/// Updates the information in existing webhook
		/// UpdateWebhook webhooks/{id}
		/// </summary>
		/// <param name="id">An id of a webhook</param>
		/// <param name="requestBody">A webhook object</param>
		public async Task UpdateWebhookAsync(long id, Webhook requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
