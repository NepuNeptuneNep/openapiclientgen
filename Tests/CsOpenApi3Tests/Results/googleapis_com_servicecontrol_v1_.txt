//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllocateInfo
	{
		
		/// <summary>
		/// A list of label keys that were unused by the server in processing the request. Thus, for similar requests repeated in a certain future time window, the caller can choose to ignore these labels in the requests to achieve better client-side cache hits and quota aggregation for rate quota. This field is not populated for allocation quota checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unusedArguments")]
		public string[] UnusedArguments { get; set; }
	}
	
	/// <summary>
	/// Request message for the AllocateQuota method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllocateQuotaRequest
	{
		
		/// <summary>
		/// Represents information regarding a quota operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocateOperation")]
		public QuotaOperation AllocateOperation { get; set; }
		
		/// <summary>
		/// Specifies which version of service configuration should be used to process the request. If unspecified or no matching version can be found, the latest one will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
	}
	
	/// <summary>
	/// Represents information regarding a quota operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuotaOperation
	{
		
		/// <summary>
		/// Identity of the consumer for whom this quota operation is being performed. This can be in one of the following formats: project:, project_number:, api_key:.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerId")]
		public string ConsumerId { get; set; }
		
		/// <summary>
		/// Labels describing the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Fully qualified name of the API method for which this quota operation is requested. This name is used for matching quota rules or metric rules and billing status rules defined in service configuration. This field should not be set if any of the following is true: (1) the quota operation is performed on non-API resources. (2) quota_metrics is set because the caller is doing quota override. Example of an RPC method name: google.example.library.v1.LibraryService.CreateShelf
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodName")]
		public string MethodName { get; set; }
		
		/// <summary>
		/// Identity of the operation. For Allocation Quota, this is expected to be unique within the scope of the service that generated the operation, and guarantees idempotency in case of retries. In order to ensure best performance and latency in the Quota backends, operation_ids are optimally associated with time, so that related operations can be accessed fast in storage. For this reason, the recommended token for services that intend to operate at a high QPS is Unix time in nanos + UUID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error. This field is mutually exclusive with method_name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaMetrics")]
		public MetricValueSet[] QuotaMetrics { get; set; }
		
		/// <summary>
		/// Quota mode for this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaMode")]
		public System.Nullable<QuotaOperationQuotaMode> QuotaMode { get; set; }
	}
	
	/// <summary>
	/// Represents a set of metric values in the same metric. Each metric value in the set should have a unique combination of start time, end time, and label values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricValueSet
	{
		
		/// <summary>
		/// The metric name defined in the service configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// The values in this metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public MetricValue[] MetricValues { get; set; }
	}
	
	/// <summary>
	/// Represents a single metric value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricValue
	{
		
		/// <summary>
		/// A boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionValue")]
		public Distribution DistributionValue { get; set; }
		
		/// <summary>
		/// A double precision floating point value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// The end of the time period over which this metric value's measurement applies. If not specified, google.api.servicecontrol.v1.Operation.end_time will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// A signed 64-bit integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="int64Value")]
		public string Int64Value { get; set; }
		
		/// <summary>
		/// The labels describing the metric value. See comments on google.api.servicecontrol.v1.Operation.labels for the overriding relationship. Note that this map must not contain monitored resource labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moneyValue")]
		public Money MoneyValue { get; set; }
		
		/// <summary>
		/// The start of the time period over which this metric value's measurement applies. The time period has different semantics for different metric types (cumulative, delta, and gauge). See the metric definition documentation in the service configuration for details. If not specified, google.api.servicecontrol.v1.Operation.start_time will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// A text string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	/// <summary>
	/// Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Distribution
	{
		
		/// <summary>
		/// The number of samples in each histogram bucket. `bucket_counts` are optional. If present, they must sum to the `count` value. The buckets are defined below in `bucket_option`. There are N buckets. `bucket_counts[0]` is the number of samples in the underflow bucket. `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples in each of the finite buckets. And `bucket_counts[N] is the number of samples in the overflow bucket. See the comments of `bucket_option` below for more details. Any suffix of trailing zeros may be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketCounts")]
		public string[] BucketCounts { get; set; }
		
		/// <summary>
		/// The total number of samples in the distribution. Must be >= 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// Example points. Must be in increasing order of `value` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemplars")]
		public Exemplar[] Exemplars { get; set; }
		
		/// <summary>
		/// Describing buckets with arbitrary user-provided width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitBuckets")]
		public ExplicitBuckets ExplicitBuckets { get; set; }
		
		/// <summary>
		/// Describing buckets with exponentially growing width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exponentialBuckets")]
		public ExponentialBuckets ExponentialBuckets { get; set; }
		
		/// <summary>
		/// Describing buckets with constant width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linearBuckets")]
		public LinearBuckets LinearBuckets { get; set; }
		
		/// <summary>
		/// The maximum of the population of values. Ignored if `count` is zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		/// <summary>
		/// The arithmetic mean of the samples in the distribution. If `count` is zero then this field must be zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mean")]
		public System.Nullable<System.Double> Mean { get; set; }
		
		/// <summary>
		/// The minimum of the population of values. Ignored if `count` is zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		/// <summary>
		/// The sum of squared deviations from the mean: Sum[i=1..count]((x_i - mean)^2) where each x_i is a sample values. If `count` is zero then this field must be zero, otherwise validation of the request fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sumOfSquaredDeviation")]
		public System.Nullable<System.Double> SumOfSquaredDeviation { get; set; }
	}
	
	/// <summary>
	/// Exemplars are example points that may be used to annotate aggregated distribution values. They are metadata that gives information about a particular value added to a Distribution bucket, such as a trace ID that was active when a value was added. They may contain further information, such as a example values and timestamps, origin, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Exemplar
	{
		
		/// <summary>
		/// Contextual information about the example value. Examples are: Trace: type.googleapis.com/google.monitoring.v3.SpanContext Literal string: type.googleapis.com/google.protobuf.StringValue Labels dropped during aggregation: type.googleapis.com/google.monitoring.v3.DroppedLabels There may be only a single attachment of any given message type in a single exemplar, and this is enforced by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		/// <summary>
		/// The observation (sampling) time of the above value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Value of the exemplar point. This value determines to which bucket the exemplar belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Describing buckets with arbitrary user-provided width.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExplicitBuckets
	{
		
		/// <summary>
		/// 'bound' is a list of strictly increasing boundaries between buckets. Note that a list of length N-1 defines N buckets because of fenceposting. See comments on `bucket_options` for details. The i'th finite bucket covers the interval [bound[i-1], bound[i]) where i ranges from 1 to bound_size() - 1. Note that there are no finite buckets at all if 'bound' only contains a single element; in that special case the single bound defines the boundary between the underflow and overflow buckets. bucket number lower bound upper bound i == 0 (underflow) -inf bound[i] 0 < i < bound_size() bound[i-1] bound[i] i == bound_size() (overflow) bound[i-1] +inf
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bounds")]
		public double[] Bounds { get; set; }
	}
	
	/// <summary>
	/// Describing buckets with exponentially growing width.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExponentialBuckets
	{
		
		/// <summary>
		/// The i'th exponential bucket covers the interval [scale * growth_factor^(i-1), scale * growth_factor^i) where i ranges from 1 to num_finite_buckets inclusive. Must be larger than 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="growthFactor")]
		public System.Nullable<System.Double> GrowthFactor { get; set; }
		
		/// <summary>
		/// The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numFiniteBuckets")]
		public System.Nullable<System.Int32> NumFiniteBuckets { get; set; }
		
		/// <summary>
		/// The i'th exponential bucket covers the interval [scale * growth_factor^(i-1), scale * growth_factor^i) where i ranges from 1 to num_finite_buckets inclusive. Must be > 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Double> Scale { get; set; }
	}
	
	/// <summary>
	/// Describing buckets with constant width.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinearBuckets
	{
		
		/// <summary>
		/// The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numFiniteBuckets")]
		public System.Nullable<System.Int32> NumFiniteBuckets { get; set; }
		
		/// <summary>
		/// The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Double> Offset { get; set; }
		
		/// <summary>
		/// The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive. Must be strictly positive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QuotaOperationQuotaMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEST_EFFORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_ONLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADJUST_ONLY = 4,
	}
	
	/// <summary>
	/// Response message for the AllocateQuota method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllocateQuotaResponse
	{
		
		/// <summary>
		/// Indicates the decision of the allocate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocateErrors")]
		public QuotaError[] AllocateErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocateInfo")]
		public AllocateInfo AllocateInfo { get; set; }
		
		/// <summary>
		/// The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : "serviceruntime.googleapis.com/api/consumer/quota_used_count" 2. The quota limit reached condition will be specified using the following boolean metric : "serviceruntime.googleapis.com/quota/exceeded"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaMetrics")]
		public MetricValueSet[] QuotaMetrics { get; set; }
		
		/// <summary>
		/// ID of the actual config used to process the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
	}
	
	/// <summary>
	/// Represents error information for QuotaOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuotaError
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<QuotaErrorCode> Code { get; set; }
		
		/// <summary>
		/// Free-form text that provides details on the cause of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// Subject to whom this error applies. See the specific enum for more details on this field. For example, "clientip:" or "project:".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QuotaErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_EXHAUSTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_RANGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_NOT_ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT_DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_KEY_INVALID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_KEY_EXPIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPATULA_HEADER_INVALID = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAS_ROLE_INVALID = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LOAS_PROJECT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT_STATUS_UNAVAILABLE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_STATUS_UNAVAILABLE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_STATUS_UNAVAILABLE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTA_SYSTEM_UNAVAILABLE = 13,
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeValue
	{
		
		/// <summary>
		/// A Boolean value represented by `true` or `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// A 64-bit signed integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public string IntValue { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public TruncatableString StringValue { get; set; }
	}
	
	/// <summary>
	/// Represents a string that might be shortened to a specified length.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TruncatableString
	{
		
		/// <summary>
		/// The number of bytes removed from the original string. If this value is 0, then the string was not shortened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="truncatedByteCount")]
		public System.Nullable<System.Int32> TruncatedByteCount { get; set; }
		
		/// <summary>
		/// The shortened string. For example, if the original string is 500 bytes long and the limit of the string is 128 bytes, then `value` contains the first 128 bytes of the 500-byte string. Truncation always happens on a UTF8 character boundary. If there are multi-byte characters in the string, then the length of the shortened string might be less than the size limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A set of attributes, each in the format `[KEY]:[VALUE]`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attributes
	{
		
		/// <summary>
		/// The set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the Boolean values `true` and `false`. For example: "/instance_id": "my-instance" "/http/user_agent": "" "/http/request_bytes": 300 "abc.com/myattribute": true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeMap")]
		public System.Collections.Generic.Dictionary<string, AttributeValue> AttributeMap { get; set; }
		
		/// <summary>
		/// The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="droppedAttributesCount")]
		public System.Nullable<System.Int32> DroppedAttributesCount { get; set; }
	}
	
	/// <summary>
	/// Common audit log format for Google Cloud Platform API operations. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLog
	{
		
		/// <summary>
		/// Authentication information for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authenticationInfo")]
		public AuthenticationInfo AuthenticationInfo { get; set; }
		
		/// <summary>
		/// Authorization information. If there are multiple resources or permissions involved, then there is one AuthorizationInfo element for each {resource, permission} tuple.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationInfo")]
		public AuthorizationInfo[] AuthorizationInfo { get; set; }
		
		/// <summary>
		/// Other service-specific data about the request, response, and other information associated with the current audited event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The name of the service method or operation. For API calls, this should be the name of the API method. For example, "google.cloud.bigquery.v2.TableService.InsertTable" "google.logging.v2.ConfigServiceV2.CreateSink"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="methodName")]
		public string MethodName { get; set; }
		
		/// <summary>
		/// The number of items returned from a List or Query API method, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numResponseItems")]
		public string NumResponseItems { get; set; }
		
		/// <summary>
		/// Information related to policy violations for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyViolationInfo")]
		public PolicyViolationInfo PolicyViolationInfo { get; set; }
		
		/// <summary>
		/// The operation request. This may not include all request parameters, such as those that are too large, privacy-sensitive, or duplicated elsewhere in the log record. It should never include user-generated data, such as file contents. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public System.Collections.Generic.Dictionary<string, object> Request { get; set; }
		
		/// <summary>
		/// Metadata about the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestMetadata")]
		public RequestMetadata RequestMetadata { get; set; }
		
		/// <summary>
		/// Location information about a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLocation")]
		public ResourceLocation ResourceLocation { get; set; }
		
		/// <summary>
		/// The resource or collection that is the target of the operation. The name is a scheme-less URI, not including the API service name. For example: "projects/PROJECT_ID/zones/us-central1-a/instances" "projects/PROJECT_ID/datasets/DATASET_ID"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The resource's original state before mutation. Present only for operations which have successfully modified the targeted resource(s). In general, this field should contain all changed fields, except those that are already been included in `request`, `response`, `metadata` or `service_data` fields. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceOriginalState")]
		public System.Collections.Generic.Dictionary<string, object> ResourceOriginalState { get; set; }
		
		/// <summary>
		/// The operation response. This may not include all response elements, such as those that are too large, privacy-sensitive, or duplicated elsewhere in the log record. It should never include user-generated data, such as file contents. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
		
		/// <summary>
		/// Deprecated. Use the `metadata` field instead. Other service-specific data about the request, response, and other activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceData")]
		public System.Collections.Generic.Dictionary<string, object> ServiceData { get; set; }
		
		/// <summary>
		/// The name of the API service performing the operation. For example, `"compute.googleapis.com"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Authentication information for the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthenticationInfo
	{
		
		/// <summary>
		/// The authority selector specified by the requestor, if any. It is not guaranteed that the principal was allowed to use this authority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authoritySelector")]
		public string AuthoritySelector { get; set; }
		
		/// <summary>
		/// The email address of the authenticated user (or service account on behalf of third party principal) making the request. For third party identity callers, the `principal_subject` field is populated instead of this field. For privacy reasons, the principal email address is sometimes redacted. For more information, see [Caller identities in audit logs](https://cloud.google.com/logging/docs/audit#user-id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalEmail")]
		public string PrincipalEmail { get; set; }
		
		/// <summary>
		/// String representation of identity of requesting party. Populated for both first and third party identities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalSubject")]
		public string PrincipalSubject { get; set; }
		
		/// <summary>
		/// Identity delegation history of an authenticated service account that makes the request. It contains information on the real authorities that try to access GCP resources by delegating on a service account. When multiple authorities present, they are guaranteed to be sorted based on the original ordering of the identity delegation events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountDelegationInfo")]
		public ServiceAccountDelegationInfo[] ServiceAccountDelegationInfo { get; set; }
		
		/// <summary>
		/// The name of the service account key used to create or exchange credentials for authenticating the service account making the request. This is a scheme-less URI full resource name. For example: "//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountKeyName")]
		public string ServiceAccountKeyName { get; set; }
		
		/// <summary>
		/// The history of delegation across multiple services as the result of the original user's action. Such as "service A uses its own account to do something for user B". This differs from ServiceAccountDelegationInfo, which only tracks the history of direct token exchanges (impersonation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDelegationHistory")]
		public ServiceDelegationHistory ServiceDelegationHistory { get; set; }
		
		/// <summary>
		/// The third party identification (if any) of the authenticated user making the request. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyPrincipal")]
		public System.Collections.Generic.Dictionary<string, object> ThirdPartyPrincipal { get; set; }
	}
	
	/// <summary>
	/// Identity delegation history of an authenticated service account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccountDelegationInfo
	{
		
		/// <summary>
		/// First party identity principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPartyPrincipal")]
		public FirstPartyPrincipal FirstPartyPrincipal { get; set; }
		
		/// <summary>
		/// A string representing the principal_subject associated with the identity. For most identities, the format will be `principal://iam.googleapis.com/{identity pool name}/subject/{subject)` except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format `serviceAccount:{identity pool name}[{subject}]`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalSubject")]
		public string PrincipalSubject { get; set; }
		
		/// <summary>
		/// Third party identity principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyPrincipal")]
		public ThirdPartyPrincipal ThirdPartyPrincipal { get; set; }
	}
	
	/// <summary>
	/// First party identity principal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstPartyPrincipal
	{
		
		/// <summary>
		/// The email address of a Google account. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalEmail")]
		public string PrincipalEmail { get; set; }
		
		/// <summary>
		/// Metadata about the service that uses the service account. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceMetadata")]
		public System.Collections.Generic.Dictionary<string, object> ServiceMetadata { get; set; }
	}
	
	/// <summary>
	/// Third party identity principal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyPrincipal
	{
		
		/// <summary>
		/// Metadata about third party identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyClaims")]
		public System.Collections.Generic.Dictionary<string, object> ThirdPartyClaims { get; set; }
	}
	
	/// <summary>
	/// The history of delegation across multiple services as the result of the original user's action. Such as "service A uses its own account to do something for user B". This differs from ServiceAccountDelegationInfo, which only tracks the history of direct token exchanges (impersonation).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceDelegationHistory
	{
		
		/// <summary>
		/// The original end user who initiated the request to GCP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalPrincipal")]
		public string OriginalPrincipal { get; set; }
		
		/// <summary>
		/// Data identifying the service specific jobs or units of work that were involved in a chain of service calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceMetadata")]
		public ServiceMetadata[] ServiceMetadata { get; set; }
	}
	
	/// <summary>
	/// Metadata describing the service and additional service specific information used to identify the job or unit of work at hand.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceMetadata
	{
		
		/// <summary>
		/// Additional metadata provided by service teams to describe service specific job information that was triggered by the original principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobMetadata")]
		public System.Collections.Generic.Dictionary<string, object> JobMetadata { get; set; }
		
		/// <summary>
		/// A string representing the principal_subject associated with the identity. For most identities, the format will be `principal://iam.googleapis.com/{identity pool name}/subject/{subject)` except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format `serviceAccount:{identity pool name}[{subject}]` If the identity is a Google account (e.g. workspace user account or service account), this will be the email of the prefixed by `serviceAccount:`. For example: `serviceAccount:my-service-account@project-1.iam.gserviceaccount.com`. If the identity is an individual user, the identity will be formatted as: `user:user_ABC@email.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalSubject")]
		public string PrincipalSubject { get; set; }
		
		/// <summary>
		/// The service's fully qualified domain name, e.g. "dataproc.googleapis.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDomain")]
		public string ServiceDomain { get; set; }
	}
	
	/// <summary>
	/// Authorization information for the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationInfo
	{
		
		/// <summary>
		/// Whether or not authorization for `resource` and `permission` was granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="granted")]
		public System.Nullable<System.Boolean> Granted { get; set; }
		
		/// <summary>
		/// The required IAM permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string Permission { get; set; }
		
		/// <summary>
		/// The resource being accessed, as a REST-style or cloud resource string. For example: bigquery.googleapis.com/projects/PROJECTID/datasets/DATASETID or projects/PROJECTID/datasets/DATASETID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// This message defines core attributes for a resource. A resource is an addressable (named) entity provided by the destination service. For example, a file stored on a network storage service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceAttributes")]
		public Resource ResourceAttributes { get; set; }
	}
	
	/// <summary>
	/// This message defines core attributes for a resource. A resource is an addressable (named) entity provided by the destination service. For example, a file stored on a network storage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		/// <summary>
		/// Annotations is an unstructured key-value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was created. This may be either the time creation was initiated or when it was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was deleted. If the resource is not deleted, this must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Mutable. The display name set by clients. Must be <= 63 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. An opaque value that uniquely identifies a version or generation of a resource. It can be used to confirm that the client and server agree on the ordering of a resource being written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The labels or tags on the resource, such as AWS resource tags and Kubernetes resource labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Immutable. The location of the resource. The location encoding is specific to the service provider, and new encoding may be introduced as the service evolves. For Google Cloud products, the encoding is what is used by Google Cloud APIs, such as `us-east1`, `aws-us-east-1`, and `azure-eastus2`. The semantics of `location` is identical to the `cloud.googleapis.com/location` label used by some Google Cloud APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The stable identifier (name) of a resource on the `service`. A resource can be logically identified as "//{resource.service}/{resource.name}". The differences between a resource name and a URI are: * Resource name is a logical identifier, independent of network protocol and API version. For example, `//pubsub.googleapis.com/projects/123/topics/news-feed`. * URI often includes protocol and version information, so it can be used directly by applications. For example, `https://pubsub.googleapis.com/v1/projects/123/topics/news-feed`. See https://cloud.google.com/apis/design/resource_names for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the service that this resource belongs to, such as `pubsub.googleapis.com`. The service may be different from the DNS hostname that actually serves the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		/// <summary>
		/// The type of the resource. The syntax is platform-specific because different platforms define their resources differently. For Google APIs, the type format must be "{service}/{kind}", such as "pubsub.googleapis.com/Topic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The unique identifier of the resource. UID is unique in the time and space for this resource within the scope of the service. It is typically generated by the server on successful creation of a resource and must not be changed. UID is used to uniquely identify resources with resource name reuses. This should be a UUID4.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was last updated. Any change to the resource made by users must refresh this value. Changes to a resource made by the service should refresh this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Information related to policy violations for this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyViolationInfo
	{
		
		/// <summary>
		/// Represents OrgPolicy Violation information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgPolicyViolationInfo")]
		public OrgPolicyViolationInfo OrgPolicyViolationInfo { get; set; }
	}
	
	/// <summary>
	/// Represents OrgPolicy Violation information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrgPolicyViolationInfo
	{
		
		/// <summary>
		/// Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Collections.Generic.Dictionary<string, object> Payload { get; set; }
		
		/// <summary>
		/// Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public System.Collections.Generic.Dictionary<string, string> ResourceTags { get; set; }
		
		/// <summary>
		/// Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Optional. Policy violations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="violationInfo")]
		public ViolationInfo[] ViolationInfo { get; set; }
	}
	
	/// <summary>
	/// Provides information about the Policy violation info for this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViolationInfo
	{
		
		/// <summary>
		/// Optional. Value that is being checked for the policy. This could be in encrypted form (if pii sensitive). This field will only be emitted in LIST_POLICY types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkedValue")]
		public string CheckedValue { get; set; }
		
		/// <summary>
		/// Optional. Constraint name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraint")]
		public string Constraint { get; set; }
		
		/// <summary>
		/// Optional. Error message that policy is indicating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Optional. Indicates the type of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyType")]
		public System.Nullable<ViolationInfoPolicyType> PolicyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ViolationInfoPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLICY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN_CONSTRAINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST_CONSTRAINT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CONSTRAINT = 3,
	}
	
	/// <summary>
	/// Metadata about the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestMetadata
	{
		
		/// <summary>
		/// The IP address of the caller. For a caller from the internet, this will be the public IPv4 or IPv6 address. For calls made from inside Google's internal production network from one GCP service to another, `caller_ip` will be redacted to "private". For a caller from a Compute Engine VM with a external IP address, `caller_ip` will be the VM's external IP address. For a caller from a Compute Engine VM without a external IP address, if the VM is in the same organization (or project) as the accessed resource, `caller_ip` will be the VM's internal IPv4 address, otherwise `caller_ip` will be redacted to "gce-internal-ip". See https://cloud.google.com/compute/docs/vpc/ for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerIp")]
		public string CallerIp { get; set; }
		
		/// <summary>
		/// The network of the caller. Set only if the network host project is part of the same GCP organization (or project) as the accessed resource. See https://cloud.google.com/compute/docs/vpc/ for more information. This is a scheme-less URI full resource name. For example: "//compute.googleapis.com/projects/PROJECT_ID/global/networks/NETWORK_ID"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerNetwork")]
		public string CallerNetwork { get; set; }
		
		/// <summary>
		/// The user agent of the caller. This information is not authenticated and should be treated accordingly. For example: + `google-api-python-client/1.4.0`: The request was made by the Google API client for Python. + `Cloud SDK Command Line Tool apitools-client/1.0 gcloud/0.9.62`: The request was made by the Google Cloud SDK CLI (gcloud). + `AppEngine-Google; (+http://code.google.com/appengine; appid: s~my-project`: The request was made from the `my-project` App Engine app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callerSuppliedUserAgent")]
		public string CallerSuppliedUserAgent { get; set; }
		
		/// <summary>
		/// This message defines attributes for a node that handles a network request. The node can be either a service or an application that sends, forwards, or receives the request. Service peers should fill in `principal` and `labels` as appropriate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationAttributes")]
		public Peer DestinationAttributes { get; set; }
		
		/// <summary>
		/// This message defines attributes for an HTTP request. If the actual request is not an HTTP request, the runtime system should try to map the actual request to an equivalent HTTP request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public Request RequestAttributes { get; set; }
	}
	
	/// <summary>
	/// This message defines attributes for a node that handles a network request. The node can be either a service or an application that sends, forwards, or receives the request. Service peers should fill in `principal` and `labels` as appropriate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Peer
	{
		
		/// <summary>
		/// The IP address of the peer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// The labels associated with the peer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The network port of the peer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
		
		/// <summary>
		/// The identity of this peer. Similar to `Request.auth.principal`, but relative to the peer instead of the request. For example, the identity associated with a load balancer that forwarded the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The CLDR country/region code associated with the above IP address. If the IP address is private, the `region_code` should reflect the physical location where this peer is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
	}
	
	/// <summary>
	/// This message defines attributes for an HTTP request. If the actual request is not an HTTP request, the runtime system should try to map the actual request to an equivalent HTTP request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request
	{
		
		/// <summary>
		/// This message defines request authentication attributes. Terminology is based on the JSON Web Token (JWT) standard, but the terms also correlate to concepts in other standards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public Auth Auth { get; set; }
		
		/// <summary>
		/// The HTTP request headers. If multiple headers share the same key, they must be merged according to the HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
		
		/// <summary>
		/// The HTTP request `Host` header value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The unique ID for a request, which can be propagated to downstream systems. The ID should have low probability of collision within a single day for a specific service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The HTTP request method, such as `GET`, `POST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// The HTTP URL path, excluding the query parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The network protocol used with the request, such as "http/1.1", "spdy/3", "h2", "h2c", "webrtc", "tcp", "udp", "quic". See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// The HTTP URL query in the format of `name1=value1&name2=value2`, as it appears in the first line of the HTTP request. No decoding is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// A special parameter for request reason. It is used by security systems to associate auditing information with a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The HTTP URL scheme, such as `http` and `https`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheme")]
		public string Scheme { get; set; }
		
		/// <summary>
		/// The HTTP request size in bytes. If unknown, it must be -1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The timestamp when the `destination` service receives the last byte of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// This message defines request authentication attributes. Terminology is based on the JSON Web Token (JWT) standard, but the terms also correlate to concepts in other standards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Auth
	{
		
		/// <summary>
		/// A list of access level resource names that allow resources to be accessed by authenticated requester. It is part of Secure GCP processing for the incoming request. An access level string has the format: "//{api_service_name}/accessPolicies/{policy_id}/accessLevels/{short_name}" Example: "//accesscontextmanager.googleapis.com/accessPolicies/MY_POLICY_ID/accessLevels/MY_LEVEL"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessLevels")]
		public string[] AccessLevels { get; set; }
		
		/// <summary>
		/// The intended audience(s) for this authentication information. Reflects the audience (`aud`) claim within a JWT. The audience value(s) depends on the `issuer`, but typically include one or more of the following pieces of information: * The services intended to receive the credential. For example, ["https://pubsub.googleapis.com/", "https://storage.googleapis.com/"]. * A set of service-based scopes. For example, ["https://www.googleapis.com/auth/cloud-platform"]. * The client id of an app, such as the Firebase project id for JWTs from Firebase Auth. Consult the documentation for the credential issuer to determine the information provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audiences")]
		public string[] Audiences { get; set; }
		
		/// <summary>
		/// Structured claims presented with the credential. JWTs include `{key: value}` pairs for standard and private claims. The following is a subset of the standard required and optional claims that would typically be presented for a Google-based JWT: {'iss': 'accounts.google.com', 'sub': '113289723416554971153', 'aud': ['123456789012', 'pubsub.googleapis.com'], 'azp': '123456789012.apps.googleusercontent.com', 'email': 'jsmith@example.com', 'iat': 1353601026, 'exp': 1353604926} SAML assertions are similarly specified, but with an identity provider dependent structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public System.Collections.Generic.Dictionary<string, object> Claims { get; set; }
		
		/// <summary>
		/// The authorized presenter of the credential. Reflects the optional Authorized Presenter (`azp`) claim within a JWT or the OAuth client id. For example, a Google Cloud Platform client id looks as follows: "123456789012.apps.googleusercontent.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presenter")]
		public string Presenter { get; set; }
		
		/// <summary>
		/// The authenticated principal. Reflects the issuer (`iss`) and subject (`sub`) claims within a JWT. The issuer and subject should be `/` delimited, with `/` percent-encoded within the subject fragment. For Google accounts, the principal format is: "https://accounts.google.com/{id}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
	}
	
	/// <summary>
	/// Location information about a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceLocation
	{
		
		/// <summary>
		/// The locations of a resource after the execution of the operation. Requests to create or delete a location based resource must populate the 'current_locations' field and not the 'original_locations' field. For example: "europe-west1-a" "us-east1" "nam3"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLocations")]
		public string[] CurrentLocations { get; set; }
		
		/// <summary>
		/// The locations of a resource prior to the execution of the operation. Requests that mutate the resource's location must populate both the 'original_locations' as well as the 'current_locations' fields. For example: "europe-west1-a" "us-east1" "nam3"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalLocations")]
		public string[] OriginalLocations { get; set; }
	}
	
	/// <summary>
	/// Defines the errors to be returned in google.api.servicecontrol.v1.CheckResponse.check_errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckError
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<CheckErrorCode> Code { get; set; }
		
		/// <summary>
		/// Free-form text providing details on the error cause of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// Subject to whom this error applies. See the specific code enum for more details on this field. For example: - "project:" - "folder:" - "organization:"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_EXHAUSTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUDGET_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENIAL_OF_SERVICE_DETECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAD_SHEDDING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABUSER_DETECTED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_NOT_ACTIVATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISIBILITY_DENIED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_DISABLED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT_DELETED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT_INVALID = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSUMER_INVALID = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IP_ADDRESS_BLOCKED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFERER_BLOCKED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_APP_BLOCKED = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_TARGET_BLOCKED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_KEY_INVALID = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_KEY_EXPIRED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_KEY_NOT_FOUND = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPATULA_HEADER_INVALID = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAS_ROLE_INVALID = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LOAS_PROJECT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAS_PROJECT_DISABLED = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_POLICY_VIOLATED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CREDENTIAL = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATION_POLICY_VIOLATED = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAMESPACE_LOOKUP_UNAVAILABLE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_STATUS_UNAVAILABLE = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_STATUS_UNAVAILABLE = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTA_CHECK_UNAVAILABLE = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAS_PROJECT_LOOKUP_UNAVAILABLE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_POLICY_BACKEND_UNAVAILABLE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATION_POLICY_BACKEND_UNAVAILABLE = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INJECTED_ERROR = 36,
	}
	
	/// <summary>
	/// Contains additional information about the check operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckInfo
	{
		
		/// <summary>
		/// `ConsumerInfo` provides information about the consumer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerInfo")]
		public ConsumerInfo ConsumerInfo { get; set; }
		
		/// <summary>
		/// A list of fields and label keys that are ignored by the server. The client doesn't need to send them for following requests to improve performance and allow better aggregation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unusedArguments")]
		public string[] UnusedArguments { get; set; }
	}
	
	/// <summary>
	/// `ConsumerInfo` provides information about the consumer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConsumerInfo
	{
		
		/// <summary>
		/// The consumer identity number, can be Google cloud project number, folder number or organization number e.g. 1234567890. A value of 0 indicates no consumer number is found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerNumber")]
		public string ConsumerNumber { get; set; }
		
		/// <summary>
		/// The Google cloud project number, e.g. 1234567890. A value of 0 indicates no project number is found. NOTE: This field is deprecated after Chemist support flexible consumer id. New code should not depend on this field anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectNumber")]
		public string ProjectNumber { get; set; }
		
		/// <summary>
		/// The type of the consumer which should have been defined in [Google Resource Manager](https://cloud.google.com/resource-manager/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ConsumerInfoType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConsumerInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSUMER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLDER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_SPECIFIC = 4,
	}
	
	/// <summary>
	/// Request message for the Check method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckRequest
	{
		
		/// <summary>
		/// Represents information regarding an operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
		
		/// <summary>
		/// Requests the project settings to be returned as part of the check response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestProjectSettings")]
		public System.Nullable<System.Boolean> RequestProjectSettings { get; set; }
		
		/// <summary>
		/// Specifies which version of service configuration should be used to process the request. If unspecified or no matching version can be found, the latest one will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
		
		/// <summary>
		/// Indicates if service activation check should be skipped for this request. Default behavior is to perform the check and apply relevant quota. WARNING: Setting this flag to "true" will disable quota enforcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipActivationCheck")]
		public System.Nullable<System.Boolean> SkipActivationCheck { get; set; }
	}
	
	/// <summary>
	/// Represents information regarding an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// Identity of the consumer who is using the service. This field should be filled in for the operations initiated by a consumer, but not for service-initiated operations that are not related to a specific consumer. - This can be in one of the following formats: - project:PROJECT_ID, - project`_`number:PROJECT_NUMBER, - projects/PROJECT_ID or PROJECT_NUMBER, - folders/FOLDER_NUMBER, - organizations/ORGANIZATION_NUMBER, - api`_`key:API_KEY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerId")]
		public string ConsumerId { get; set; }
		
		/// <summary>
		/// End time of the operation. Required when the operation is used in ServiceController.Report, but optional when the operation is used in ServiceController.Check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// DO NOT USE. This is an experimental field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importance")]
		public System.Nullable<OperationImportance> Importance { get; set; }
		
		/// <summary>
		/// Labels describing the operation. Only the following labels are allowed: - Labels describing monitored resources as defined in the service configuration. - Default labels of metric values. When specified, labels defined in the metric value override these default. - The following labels defined by Google Cloud Platform: - `cloud.googleapis.com/location` describing the location where the operation happened, - `servicecontrol.googleapis.com/user_agent` describing the user agent of the API request, - `servicecontrol.googleapis.com/service_agent` describing the service used to handle the API request (e.g. ESP), - `servicecontrol.googleapis.com/platform` describing the platform where the API is served, such as App Engine, Compute Engine, or Kubernetes Engine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Represents information to be logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logEntries")]
		public LogEntry[] LogEntries { get; set; }
		
		/// <summary>
		/// Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValueSets")]
		public MetricValueSet[] MetricValueSets { get; set; }
		
		/// <summary>
		/// Identity of the operation. This must be unique within the scope of the service that generated the operation. If the service calls Check() and Report() on the same operation, the two calls should carry the same id. UUID version 4 is recommended, though not required. In scenarios where an operation is computed from existing information and an idempotent id is desirable for deduplication purpose, UUID version 5 is recommended. See RFC 4122 for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Fully qualified name of the operation. Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public string OperationName { get; set; }
		
		/// <summary>
		/// Represents the properties needed for quota operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaProperties")]
		public QuotaProperties QuotaProperties { get; set; }
		
		/// <summary>
		/// The resources that are involved in the operation. The maximum supported number of entries in this field is 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceInfo[] Resources { get; set; }
		
		/// <summary>
		/// Required. Start time of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Unimplemented. A list of Cloud Trace spans. The span names shall contain the id of the destination project which can be either the produce or the consumer project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traceSpans")]
		public TraceSpan[] TraceSpans { get; set; }
		
		/// <summary>
		/// Private Preview. This feature is only available for approved services. User defined labels for the resource that this operation is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLabels")]
		public System.Collections.Generic.Dictionary<string, string> UserLabels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationImportance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROMOTED = 3,
	}
	
	/// <summary>
	/// An individual log entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogEntry
	{
		
		/// <summary>
		/// A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpRequest")]
		public HttpRequest HttpRequest { get; set; }
		
		/// <summary>
		/// A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertId")]
		public string InsertId { get; set; }
		
		/// <summary>
		/// A set of user-defined (key, value) data that provides additional information about the log entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The log to which this log entry belongs. Examples: `"syslog"`, `"book_log"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional information about a potentially long-running operation with which a log entry is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public LogEntryOperation Operation { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protoPayload")]
		public System.Collections.Generic.Dictionary<string, object> ProtoPayload { get; set; }
		
		/// <summary>
		/// The severity of the log entry. The default value is `LogSeverity.DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<LogEntrySeverity> Severity { get; set; }
		
		/// <summary>
		/// Additional information about the source code location that produced the log entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLocation")]
		public LogEntrySourceLocation SourceLocation { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a structure that is expressed as a JSON object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structPayload")]
		public System.Collections.Generic.Dictionary<string, object> StructPayload { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a Unicode string (UTF-8).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textPayload")]
		public string TextPayload { get; set; }
		
		/// <summary>
		/// The time the event described by the log entry occurred. If omitted, defaults to operation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trace")]
		public string Trace { get; set; }
	}
	
	/// <summary>
	/// A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpRequest
	{
		
		/// <summary>
		/// The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheFillBytes")]
		public string CacheFillBytes { get; set; }
		
		/// <summary>
		/// Whether or not an entity was served from cache (with or without validation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHit")]
		public System.Nullable<System.Boolean> CacheHit { get; set; }
		
		/// <summary>
		/// Whether or not a cache lookup was attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheLookup")]
		public System.Nullable<System.Boolean> CacheLookup { get; set; }
		
		/// <summary>
		/// Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if `cache_hit` is True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheValidatedWithOriginServer")]
		public System.Nullable<System.Boolean> CacheValidatedWithOriginServer { get; set; }
		
		/// <summary>
		/// The request processing latency on the server, from the time the request was received until the response was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency")]
		public string Latency { get; set; }
		
		/// <summary>
		/// Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// The referer URL of the request, as defined in [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referer")]
		public string Referer { get; set; }
		
		/// <summary>
		/// The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteIp")]
		public string RemoteIp { get; set; }
		
		/// <summary>
		/// The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestMethod")]
		public string RequestMethod { get; set; }
		
		/// <summary>
		/// The size of the HTTP request message in bytes, including the request headers and the request body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestSize")]
		public string RequestSize { get; set; }
		
		/// <summary>
		/// The scheme (http, https), the host name, the path, and the query portion of the URL that was requested. Example: `"http://example.com/some/info?color=red"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestUrl")]
		public string RequestUrl { get; set; }
		
		/// <summary>
		/// The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseSize")]
		public string ResponseSize { get; set; }
		
		/// <summary>
		/// The IP address (IPv4 or IPv6) of the origin server that the request was sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// The response code indicating the status of the response. Examples: 200, 404.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The user agent sent by the client. Example: `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
	}
	
	/// <summary>
	/// Additional information about a potentially long-running operation with which a log entry is associated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogEntryOperation
	{
		
		/// <summary>
		/// Optional. Set this to True if this is the first log entry in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public System.Nullable<System.Boolean> First { get; set; }
		
		/// <summary>
		/// Optional. An arbitrary operation identifier. Log entries with the same identifier are assumed to be part of the same operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. Set this to True if this is the last log entry in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Boolean> Last { get; set; }
		
		/// <summary>
		/// Optional. An arbitrary producer identifier. The combination of `id` and `producer` must be globally unique. Examples for `producer`: `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producer")]
		public string Producer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogEntrySeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALERT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 8,
	}
	
	/// <summary>
	/// Additional information about the source code location that produced the log entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogEntrySourceLocation
	{
		
		/// <summary>
		/// Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function` (Python).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// Optional. Line within the source file. 1-based; 0 indicates no line number available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
	}
	
	/// <summary>
	/// Represents the properties needed for quota operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuotaProperties
	{
		
		/// <summary>
		/// Quota mode for this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaMode")]
		public System.Nullable<QuotaPropertiesQuotaMode> QuotaMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QuotaPropertiesQuotaMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACQUIRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACQUIRE_BEST_EFFORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK = 2,
	}
	
	/// <summary>
	/// Describes a resource associated with this operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceInfo
	{
		
		/// <summary>
		/// The resource permission required for this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string Permission { get; set; }
		
		/// <summary>
		/// The identifier of the parent of this resource instance. Must be in one of the following formats: - `projects/` - `folders/` - `organizations/`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceContainer")]
		public string ResourceContainer { get; set; }
		
		/// <summary>
		/// The location of the resource. If not empty, the resource will be checked against location policy. The value must be a valid zone, region or multiregion. For example: "europe-west4" or "northamerica-northeast1-a"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceLocation")]
		public string ResourceLocation { get; set; }
		
		/// <summary>
		/// Name of the resource. This is used for auditing purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous—there may be gaps or overlaps between spans in a trace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TraceSpan
	{
		
		/// <summary>
		/// A set of attributes, each in the format `[KEY]:[VALUE]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childSpanCount")]
		public System.Nullable<System.Int32> ChildSpanCount { get; set; }
		
		/// <summary>
		/// Represents a string that might be shortened to a specified length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public TruncatableString DisplayName { get; set; }
		
		/// <summary>
		/// The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The resource name of the span in the following format: projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentSpanId")]
		public string ParentSpanId { get; set; }
		
		/// <summary>
		/// (Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sameProcessAsParentSpan")]
		public System.Nullable<System.Boolean> SameProcessAsParentSpan { get; set; }
		
		/// <summary>
		/// The [SPAN_ID] portion of the span's resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanId")]
		public string SpanId { get; set; }
		
		/// <summary>
		/// Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanKind")]
		public System.Nullable<TraceSpanSpanKind> SpanKind { get; set; }
		
		/// <summary>
		/// The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TraceSpanSpanKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPAN_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSUMER = 5,
	}
	
	/// <summary>
	/// Response message for the Check method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckResponse
	{
		
		/// <summary>
		/// Indicate the decision of the check. If no check errors are present, the service should process the operation. Otherwise the service should use the list of errors to determine the appropriate action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkErrors")]
		public CheckError[] CheckErrors { get; set; }
		
		/// <summary>
		/// Contains additional information about the check operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkInfo")]
		public CheckInfo CheckInfo { get; set; }
		
		/// <summary>
		/// The same operation_id value used in the CheckRequest. Used for logging and diagnostics purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// Contains the quota information for a quota check response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaInfo")]
		public QuotaInfo QuotaInfo { get; set; }
		
		/// <summary>
		/// The actual config id used to process the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
		
		/// <summary>
		/// The current service rollout id used to process the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceRolloutId")]
		public string ServiceRolloutId { get; set; }
	}
	
	/// <summary>
	/// Contains the quota information for a quota check response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuotaInfo
	{
		
		/// <summary>
		/// Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota Deprecated: Use quota_metrics to get per quota group limit exceeded status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public string[] LimitExceeded { get; set; }
		
		/// <summary>
		/// Map of quota group name to the actual number of tokens consumed. If the quota check was not successful, then this will not be populated due to no quota consumption. We are not merging this field with 'quota_metrics' field because of the complexity of scaling in Chemist client code base. For simplicity, we will keep this field for Castor (that scales quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage). 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaConsumed")]
		public System.Collections.Generic.Dictionary<string, int> QuotaConsumed { get; set; }
		
		/// <summary>
		/// Quota metrics to indicate the usage. Depending on the check request, one or more of the following metrics will be included: 1. For rate quota, per quota group or per quota metric incremental usage will be specified using the following delta metric: "serviceruntime.googleapis.com/api/consumer/quota_used_count" 2. For allocation quota, per quota metric total usage will be specified using the following gauge metric: "serviceruntime.googleapis.com/allocation/consumer/quota_used_count" 3. For both rate quota and allocation quota, the quota limit reached condition will be specified using the following boolean metric: "serviceruntime.googleapis.com/quota/exceeded"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaMetrics")]
		public MetricValueSet[] QuotaMetrics { get; set; }
	}
	
	/// <summary>
	/// Represents the processing error of one Operation in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportError
	{
		
		/// <summary>
		/// The Operation.operation_id value from the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Request message for the Report method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRequest
	{
		
		/// <summary>
		/// Operations to be reported. Typically the service should report one operation per request. Putting multiple operations into a single request is allowed, but should be used only when multiple operations are natually available at the time of the report. There is no limit on the number of operations in the same ReportRequest, however the ReportRequest size should be no larger than 1MB. See ReportResponse.report_errors for partial failure behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
		
		/// <summary>
		/// Specifies which version of service config should be used to process the request. If unspecified or no matching version can be found, the latest one will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
	}
	
	/// <summary>
	/// Response message for the Report method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportResponse
	{
		
		/// <summary>
		/// Partial failures, one for each `Operation` in the request that failed processing. There are three possible combinations of the RPC status: 1. The combination of a successful RPC status and an empty `report_errors` list indicates a complete success where all `Operations` in the request are processed successfully. 2. The combination of a successful RPC status and a non-empty `report_errors` list indicates a partial success where some `Operations` in the request succeeded. Each `Operation` that failed processing has a corresponding item in this list. 3. A failed RPC status indicates a general non-deterministic failure. When this happens, it's impossible to know which of the 'Operations' in the request succeeded or failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportErrors")]
		public ReportError[] ReportErrors { get; set; }
		
		/// <summary>
		/// The actual config id used to process the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceConfigId")]
		public string ServiceConfigId { get; set; }
		
		/// <summary>
		/// The current service rollout id used to process the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceRolloutId")]
		public string ServiceRolloutId { get; set; }
	}
	
	/// <summary>
	/// The context of a span. This is attached to an Exemplar in Distribution values during aggregation. It contains the name of a span with format: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpanContext
	{
		
		/// <summary>
		/// The resource name of the span. The format is: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID] `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanName")]
		public string SpanName { get; set; }
	}
	
	/// <summary>
	/// A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V1HttpRequest
	{
		
		/// <summary>
		/// The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheFillBytes")]
		public string CacheFillBytes { get; set; }
		
		/// <summary>
		/// Whether or not an entity was served from cache (with or without validation).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheHit")]
		public System.Nullable<System.Boolean> CacheHit { get; set; }
		
		/// <summary>
		/// Whether or not a cache lookup was attempted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheLookup")]
		public System.Nullable<System.Boolean> CacheLookup { get; set; }
		
		/// <summary>
		/// Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if `cache_hit` is True.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheValidatedWithOriginServer")]
		public System.Nullable<System.Boolean> CacheValidatedWithOriginServer { get; set; }
		
		/// <summary>
		/// The request processing latency on the server, from the time the request was received until the response was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency")]
		public string Latency { get; set; }
		
		/// <summary>
		/// Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// The referer URL of the request, as defined in [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referer")]
		public string Referer { get; set; }
		
		/// <summary>
		/// The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteIp")]
		public string RemoteIp { get; set; }
		
		/// <summary>
		/// The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestMethod")]
		public string RequestMethod { get; set; }
		
		/// <summary>
		/// The size of the HTTP request message in bytes, including the request headers and the request body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestSize")]
		public string RequestSize { get; set; }
		
		/// <summary>
		/// The scheme (http, https), the host name, the path, and the query portion of the URL that was requested. Example: `"http://example.com/some/info?color=red"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestUrl")]
		public string RequestUrl { get; set; }
		
		/// <summary>
		/// The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseSize")]
		public string ResponseSize { get; set; }
		
		/// <summary>
		/// The IP address (IPv4 or IPv6) of the origin server that the request was sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// The response code indicating the status of the response. Examples: 200, 404.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// The user agent sent by the client. Example: `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
	}
	
	/// <summary>
	/// An individual log entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V1LogEntry
	{
		
		/// <summary>
		/// A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpRequest")]
		public V1HttpRequest HttpRequest { get; set; }
		
		/// <summary>
		/// A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertId")]
		public string InsertId { get; set; }
		
		/// <summary>
		/// A set of user-defined (key, value) data that provides additional information about the log entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// A set of user-defined (key, value) data that provides additional information about the moniotored resource that the log entry belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoredResourceLabels")]
		public System.Collections.Generic.Dictionary<string, string> MonitoredResourceLabels { get; set; }
		
		/// <summary>
		/// Required. The log to which this log entry belongs. Examples: `"syslog"`, `"book_log"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional information about a potentially long-running operation with which a log entry is associated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public V1LogEntryOperation Operation { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protoPayload")]
		public System.Collections.Generic.Dictionary<string, object> ProtoPayload { get; set; }
		
		/// <summary>
		/// The severity of the log entry. The default value is `LogSeverity.DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public LogEntrySeverity Severity { get; set; }
		
		/// <summary>
		/// Additional information about the source code location that produced the log entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLocation")]
		public V1LogEntrySourceLocation SourceLocation { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a structure that is expressed as a JSON object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structPayload")]
		public System.Collections.Generic.Dictionary<string, object> StructPayload { get; set; }
		
		/// <summary>
		/// The log entry payload, represented as a Unicode string (UTF-8).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textPayload")]
		public string TextPayload { get; set; }
		
		/// <summary>
		/// The time the event described by the log entry occurred. If omitted, defaults to operation start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trace")]
		public string Trace { get; set; }
	}
	
	/// <summary>
	/// Additional information about a potentially long-running operation with which a log entry is associated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V1LogEntryOperation
	{
		
		/// <summary>
		/// Optional. Set this to True if this is the first log entry in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public System.Nullable<System.Boolean> First { get; set; }
		
		/// <summary>
		/// Optional. An arbitrary operation identifier. Log entries with the same identifier are assumed to be part of the same operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional. Set this to True if this is the last log entry in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Boolean> Last { get; set; }
		
		/// <summary>
		/// Optional. An arbitrary producer identifier. The combination of `id` and `producer` must be globally unique. Examples for `producer`: `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producer")]
		public string Producer { get; set; }
	}
	
	/// <summary>
	/// Additional information about the source code location that produced the log entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class V1LogEntrySourceLocation
	{
		
		/// <summary>
		/// Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function` (Python).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// Optional. Line within the source file. 1-based; 0 indicates no line number available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Attempts to allocate quota for the specified consumer. It should be called before the operation is executed. This method requires the `servicemanagement.services.quota` permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam). **NOTE:** The client **must** fail-open on server errors `INTERNAL`, `UNKNOWN`, `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system reliability, the server may inject these errors to prohibit any hard dependency on the quota functionality.
		/// Servicecontrol_services_allocateQuota v1/services/{serviceName}:allocateQuota
		/// </summary>
		/// <param name="serviceName">Name of the service as specified in the service configuration. For example, `"pubsub.googleapis.com"`. See google.api.Service for the definition of a service name.</param>
		/// <returns>Successful response</returns>
		public async Task<AllocateQuotaResponse> Servicecontrol_services_allocateQuotaAsync(string serviceName, AllocateQuotaRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+":allocateQuota";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AllocateQuotaResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether an operation on a service should be allowed to proceed based on the configuration of the service and related policies. It must be called before the operation is executed. If feasible, the client should cache the check results and reuse them for 60 seconds. In case of any server errors, the client should rely on the cached results for much longer time to avoid outage. WARNING: There is general 60s delay for the configuration and policy propagation, therefore callers MUST NOT depend on the `Check` method having the latest policy information. NOTE: the CheckRequest has the size limit (wire-format byte size) of 1MB. This method requires the `servicemanagement.services.check` permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam).
		/// Servicecontrol_services_check v1/services/{serviceName}:check
		/// </summary>
		/// <param name="serviceName">The service name as specified in its service configuration. For example, `"pubsub.googleapis.com"`. See [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service) for the definition of a service name.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckResponse> Servicecontrol_services_checkAsync(string serviceName, CheckRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+":check";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reports operation results to Google Service Control, such as logs and metrics. It should be called after an operation is completed. If feasible, the client should aggregate reporting data for up to 5 seconds to reduce API traffic. Limiting aggregation to 5 seconds is to reduce data loss during client crashes. Clients should carefully choose the aggregation time window to avoid data loss risk more than 0.01% for business and compliance reasons. NOTE: the ReportRequest has the size limit (wire-format byte size) of 1MB. This method requires the `servicemanagement.services.report` permission on the specified service. For more information, see [Google Cloud IAM](https://cloud.google.com/iam).
		/// Servicecontrol_services_report v1/services/{serviceName}:report
		/// </summary>
		/// <param name="serviceName">The service name as specified in its service configuration. For example, `"pubsub.googleapis.com"`. See [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service) for the definition of a service name.</param>
		/// <returns>Successful response</returns>
		public async Task<ReportResponse> Servicecontrol_services_reportAsync(string serviceName, ReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/services/"+ (serviceName==null? "" : System.Uri.EscapeDataString(serviceName))+":report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
