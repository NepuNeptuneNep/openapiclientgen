//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a Google Tag Manager Account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		/// <summary>
		/// The Account ID uniquely identifies the GTM Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Account as computed at storage time. This value is recomputed whenever the account is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Account display name. @mutable tagmanager.accounts.create @mutable tagmanager.accounts.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the account shares data anonymously with Google and others. @mutable tagmanager.accounts.create @mutable tagmanager.accounts.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareData")]
		public System.Nullable<System.Boolean> ShareData { get; set; }
	}
	
	/// <summary>
	/// Defines the Google Tag Manager Account access permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountAccess
	{
		
		/// <summary>
		/// List of Account permissions. Valid account permissions are read and manage. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string[] Permission { get; set; }
	}
	
	/// <summary>
	/// Represents a predicate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Condition
	{
		
		/// <summary>
		/// A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public Parameter[] Parameter { get; set; }
		
		/// <summary>
		/// The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ConditionType> Type { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Parameter
	{
		
		/// <summary>
		/// The named key that uniquely identifies a parameter. Required for top-level parameters, as well as map values. Ignored for list values. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// This list parameter's parameters (keys will be ignored). @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public Parameter[] List { get; set; }
		
		/// <summary>
		/// This map parameter's parameters (must have keys; keys must be unique). @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="map")]
		public Parameter[] Map { get; set; }
		
		/// <summary>
		/// The parameter type. Valid values are: - boolean: The value represents a boolean, represented as 'true' or 'false' - integer: The value represents a 64-bit signed integer value, in base 10 - list: A list of parameters should be specified - map: A map of parameters should be specified - template: The value represents any text; this can include variable references (even variable references that might return non-string types) - trigger_reference: The value represents a trigger, represented as the trigger id - tag_reference: The value represents a tag, represented as the tag name @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ParameterType> Type { get; set; }
		
		/// <summary>
		/// A parameter's value (may contain variable references such as "{{myVariable}}") as appropriate to the specified type. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		template = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		list = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		map = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		triggerReference = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tagReference = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConditionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contains = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		startsWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		endsWith = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		matchRegex = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		greater = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		greaterOrEquals = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		less = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lessOrEquals = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cssSelector = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		urlMatches = 10,
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Container
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The Container ID uniquely identifies the GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// Optional list of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string[] DomainName { get; set; }
		
		/// <summary>
		/// List of enabled built-in variables. Valid values include: pageUrl, pageHostname, pagePath, referrer, event, clickElement, clickClasses, clickId, clickTarget, clickUrl, clickText, formElement, formClasses, formId, formTarget, formUrl, formText, errorMessage, errorUrl, errorLine, newHistoryFragment, oldHistoryFragment, newHistoryState, oldHistoryState, historySource, containerVersion, debugMode, randomNumber, containerId. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledBuiltInVariable")]
		public string[] EnabledBuiltInVariable { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Container Public ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicId")]
		public string PublicId { get; set; }
		
		/// <summary>
		/// Container Country ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneCountryId")]
		public string TimeZoneCountryId { get; set; }
		
		/// <summary>
		/// Container Time Zone ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneId")]
		public string TimeZoneId { get; set; }
		
		/// <summary>
		/// List of Usage Contexts for the Container. Valid values include: web, android, ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usageContext")]
		public string[] UsageContext { get; set; }
	}
	
	/// <summary>
	/// Defines the Google Tag Manager Container access permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerAccess
	{
		
		/// <summary>
		/// GTM Container ID. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// List of Container permissions. Valid container permissions are: read, edit, delete, publish. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string[] Permission { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Container Version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerVersion
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public Container Container { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// The Container Version ID uniquely identifies the GTM Container Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerVersionId")]
		public string ContainerVersionId { get; set; }
		
		/// <summary>
		/// A value of true indicates this container version has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// The folders in the container that this version was taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public Folder[] Folder { get; set; }
		
		/// <summary>
		/// The macros in the container that this version was taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macro")]
		public Macro[] Macro { get; set; }
		
		/// <summary>
		/// Container version display name. @mutable tagmanager.accounts.containers.versions.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The rules in the container that this version was taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public Rule[] Rule { get; set; }
		
		/// <summary>
		/// The tags in the container that this version was taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public Tag[] Tag { get; set; }
		
		/// <summary>
		/// The triggers in the container that this version was taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public Trigger[] Trigger { get; set; }
		
		/// <summary>
		/// The variables in the container that this version was taken from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variable")]
		public Variable[] Variable { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Folder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Folder
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Folder as computed at storage time. This value is recomputed whenever the folder is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// The Folder ID uniquely identifies the GTM Folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderId")]
		public string FolderId { get; set; }
		
		/// <summary>
		/// Folder display name. @mutable tagmanager.accounts.containers.folders.create @mutable tagmanager.accounts.containers.folders.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Macro.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Macro
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// For mobile containers only: A list of rule IDs for disabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disablingRuleId")]
		public string[] DisablingRuleId { get; set; }
		
		/// <summary>
		/// For mobile containers only: A list of rule IDs for enabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablingRuleId")]
		public string[] EnablingRuleId { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Macro as computed at storage time. This value is recomputed whenever the macro is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// The Macro ID uniquely identifies the GTM Macro.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="macroId")]
		public string MacroId { get; set; }
		
		/// <summary>
		/// Macro display name. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes on how to apply this macro in the container. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The macro's parameters. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public Parameter[] Parameter { get; set; }
		
		/// <summary>
		/// Parent folder id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentFolderId")]
		public string ParentFolderId { get; set; }
		
		/// <summary>
		/// The end timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleEndMs")]
		public string ScheduleEndMs { get; set; }
		
		/// <summary>
		/// The start timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleStartMs")]
		public string ScheduleStartMs { get; set; }
		
		/// <summary>
		/// GTM Macro Type. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rule
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The list of conditions that make up this rule (implicit AND between them). @mutable tagmanager.accounts.containers.rules.create @mutable tagmanager.accounts.containers.rules.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Condition[] Condition { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Rule as computed at storage time. This value is recomputed whenever the rule is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Rule display name. @mutable tagmanager.accounts.containers.rules.create @mutable tagmanager.accounts.containers.rules.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes on how to apply this rule in the container. @mutable tagmanager.accounts.containers.rules.create @mutable tagmanager.accounts.containers.rules.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The Rule ID uniquely identifies the GTM Rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleId")]
		public string RuleId { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockingRuleId")]
		public string[] BlockingRuleId { get; set; }
		
		/// <summary>
		/// Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockingTriggerId")]
		public string[] BlockingTriggerId { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firingRuleId")]
		public string[] FiringRuleId { get; set; }
		
		/// <summary>
		/// Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firingTriggerId")]
		public string[] FiringTriggerId { get; set; }
		
		/// <summary>
		/// If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveOnly")]
		public System.Nullable<System.Boolean> LiveOnly { get; set; }
		
		/// <summary>
		/// Tag display name. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The tag's parameters. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public Parameter[] Parameter { get; set; }
		
		/// <summary>
		/// Parent folder id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentFolderId")]
		public string ParentFolderId { get; set; }
		
		/// <summary>
		/// True if the tag is paused. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paused")]
		public System.Nullable<System.Boolean> Paused { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public Parameter Priority { get; set; }
		
		/// <summary>
		/// The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleEndMs")]
		public string ScheduleEndMs { get; set; }
		
		/// <summary>
		/// The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleStartMs")]
		public string ScheduleStartMs { get; set; }
		
		/// <summary>
		/// The list of setup tags. Currently we only allow one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setupTag")]
		public SetupTag[] SetupTag { get; set; }
		
		/// <summary>
		/// Option to fire this tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagFiringOption")]
		public System.Nullable<TagTagFiringOption> TagFiringOption { get; set; }
		
		/// <summary>
		/// The Tag ID uniquely identifies the GTM Tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagId")]
		public string TagId { get; set; }
		
		/// <summary>
		/// The list of teardown tags. Currently we only allow one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teardownTag")]
		public TeardownTag[] TeardownTag { get; set; }
		
		/// <summary>
		/// GTM Tag Type. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetupTag
	{
		
		/// <summary>
		/// If true, fire the main tag if and only if the setup tag fires successfully. If false, fire the main tag regardless of setup tag firing status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopOnSetupFailure")]
		public System.Nullable<System.Boolean> StopOnSetupFailure { get; set; }
		
		/// <summary>
		/// The name of the setup tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TagTagFiringOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unlimited = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oncePerEvent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		oncePerLoad = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeardownTag
	{
		
		/// <summary>
		/// If true, fire the teardown tag if and only if the main tag fires successfully. If false, fire the teardown tag regardless of main tag firing status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTeardownOnFailure")]
		public System.Nullable<System.Boolean> StopTeardownOnFailure { get; set; }
		
		/// <summary>
		/// The name of the teardown tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Trigger
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Trigger
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoEventFilter")]
		public Condition[] AutoEventFilter { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkValidation")]
		public Parameter CheckValidation { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuousTimeMinMilliseconds")]
		public Parameter ContinuousTimeMinMilliseconds { get; set; }
		
		/// <summary>
		/// Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customEventFilter")]
		public Condition[] CustomEventFilter { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public Parameter EventName { get; set; }
		
		/// <summary>
		/// The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Condition[] Filter { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalScrollPercentageList")]
		public Parameter HorizontalScrollPercentageList { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public Parameter Interval { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		public Parameter IntervalSeconds { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public Parameter Limit { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTimerLengthSeconds")]
		public Parameter MaxTimerLengthSeconds { get; set; }
		
		/// <summary>
		/// Trigger display name. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public Parameter[] Parameter { get; set; }
		
		/// <summary>
		/// Parent folder id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentFolderId")]
		public string ParentFolderId { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selector")]
		public Parameter Selector { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalTimeMinMilliseconds")]
		public Parameter TotalTimeMinMilliseconds { get; set; }
		
		/// <summary>
		/// The Trigger ID uniquely identifies the GTM Trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerId")]
		public string TriggerId { get; set; }
		
		/// <summary>
		/// Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TriggerType> Type { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueTriggerId")]
		public Parameter UniqueTriggerId { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalScrollPercentageList")]
		public Parameter VerticalScrollPercentageList { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibilitySelector")]
		public Parameter VisibilitySelector { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visiblePercentageMax")]
		public Parameter VisiblePercentageMax { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visiblePercentageMin")]
		public Parameter VisiblePercentageMin { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForTags")]
		public Parameter WaitForTags { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitForTagsTimeout")]
		public Parameter WaitForTagsTimeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pageview = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		domReady = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		windowLoaded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		customEvent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		triggerGroup = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		always = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		formSubmission = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		click = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		linkClick = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jsError = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		historyChange = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timer = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ampClick = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ampTimer = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ampScroll = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ampVisibility = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		youTubeVideo = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scrollDepth = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		elementVisibility = 18,
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Variable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Variable
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// For mobile containers only: A list of trigger IDs for disabling conditional variables; the variable is enabled if one of the enabling trigger is true while all the disabling trigger are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disablingTriggerId")]
		public string[] DisablingTriggerId { get; set; }
		
		/// <summary>
		/// For mobile containers only: A list of trigger IDs for enabling conditional variables; the variable is enabled if one of the enabling triggers is true while all the disabling triggers are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablingTriggerId")]
		public string[] EnablingTriggerId { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM Variable as computed at storage time. This value is recomputed whenever the variable is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Variable display name. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes on how to apply this variable in the container. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The variable's parameters. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public Parameter[] Parameter { get; set; }
		
		/// <summary>
		/// Parent folder id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentFolderId")]
		public string ParentFolderId { get; set; }
		
		/// <summary>
		/// The end timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleEndMs")]
		public string ScheduleEndMs { get; set; }
		
		/// <summary>
		/// The start timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleStartMs")]
		public string ScheduleStartMs { get; set; }
		
		/// <summary>
		/// GTM Variable Type. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The Variable ID uniquely identifies the GTM Variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableId")]
		public string VariableId { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Container Version Header.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerVersionHeader
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		/// <summary>
		/// The Container Version ID uniquely identifies the GTM Container Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerVersionId")]
		public string ContainerVersionId { get; set; }
		
		/// <summary>
		/// A value of true indicates this container version has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Container version display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of macros in the container version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numMacros")]
		public string NumMacros { get; set; }
		
		/// <summary>
		/// Number of rules in the container version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numRules")]
		public string NumRules { get; set; }
		
		/// <summary>
		/// Number of tags in the container version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numTags")]
		public string NumTags { get; set; }
		
		/// <summary>
		/// Number of triggers in the container version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numTriggers")]
		public string NumTriggers { get; set; }
		
		/// <summary>
		/// Number of variables in the container version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numVariables")]
		public string NumVariables { get; set; }
	}
	
	/// <summary>
	/// Options for new container versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateContainerVersionRequestVersionOptions
	{
		
		/// <summary>
		/// The name of the container version to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The notes of the container version to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The creation of this version may be for quick preview and shouldn't be saved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quickPreview")]
		public System.Nullable<System.Boolean> QuickPreview { get; set; }
	}
	
	/// <summary>
	/// Create container versions response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateContainerVersionResponse
	{
		
		/// <summary>
		/// Compiler errors or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compilerError")]
		public System.Nullable<System.Boolean> CompilerError { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Container Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerVersion")]
		public ContainerVersion ContainerVersion { get; set; }
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Environment. Note that a user can create, delete and update environments of type USER, but can only update the enable_debug and url fields of environments of other types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Environment
	{
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The environment authorization code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationCode")]
		public string AuthorizationCode { get; set; }
		
		/// <summary>
		/// The last update time-stamp for the authorization code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationTimestampMs")]
		public string AuthorizationTimestampMs { get; set; }
		
		/// <summary>
		/// GTM Container ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerVersionId")]
		public string ContainerVersionId { get; set; }
		
		/// <summary>
		/// The environment description. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether or not to enable debug by default on for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableDebug")]
		public System.Nullable<System.Boolean> EnableDebug { get; set; }
		
		/// <summary>
		/// GTM Environment ID uniquely identifies the GTM Environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The fingerprint of the GTM environment as computed at storage time. This value is recomputed whenever the environment is modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// The environment display name. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of this environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EnvironmentType> Type { get; set; }
		
		/// <summary>
		/// Default preview page url for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		live = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		latest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 3,
	}
	
	/// <summary>
	/// Represents a Google Tag Manager Folder's contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FolderEntities
	{
		
		/// <summary>
		/// The list of tags inside the folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public Tag[] Tag { get; set; }
		
		/// <summary>
		/// The list of triggers inside the folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public Trigger[] Trigger { get; set; }
		
		/// <summary>
		/// The list of variables inside the folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variable")]
		public Variable[] Variable { get; set; }
	}
	
	/// <summary>
	/// List AccountUsers Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountUsersResponse
	{
		
		/// <summary>
		/// All GTM AccountUsers of a GTM Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccess")]
		public UserAccess[] UserAccess { get; set; }
	}
	
	/// <summary>
	/// Represents a user's permissions to an account and its container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccess
	{
		
		/// <summary>
		/// Defines the Google Tag Manager Account access permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountAccess")]
		public AccountAccess AccountAccess { get; set; }
		
		/// <summary>
		/// GTM Account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// GTM Container access permissions. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerAccess")]
		public ContainerAccess[] ContainerAccess { get; set; }
		
		/// <summary>
		/// User's email address. @mutable tagmanager.accounts.permissions.create
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Account Permission ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
	}
	
	/// <summary>
	/// List Accounts Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccountsResponse
	{
		
		/// <summary>
		/// List of GTM Accounts that a user has access to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
	}
	
	/// <summary>
	/// List container versions response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListContainerVersionsResponse
	{
		
		/// <summary>
		/// All versions of a GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerVersion")]
		public ContainerVersion[] ContainerVersion { get; set; }
		
		/// <summary>
		/// All container version headers of a GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerVersionHeader")]
		public ContainerVersionHeader[] ContainerVersionHeader { get; set; }
	}
	
	/// <summary>
	/// List Containers Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListContainersResponse
	{
		
		/// <summary>
		/// All Containers of a GTM Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public Container[] Containers { get; set; }
	}
	
	/// <summary>
	/// List Environments Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEnvironmentsResponse
	{
		
		/// <summary>
		/// All Environments of a GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public Environment[] Environments { get; set; }
	}
	
	/// <summary>
	/// List Folders Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFoldersResponse
	{
		
		/// <summary>
		/// All GTM Folders of a GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folders")]
		public Folder[] Folders { get; set; }
	}
	
	/// <summary>
	/// List Tags Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsResponse
	{
		
		/// <summary>
		/// All GTM Tags of a GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// List triggers response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTriggersResponse
	{
		
		/// <summary>
		/// All GTM Triggers of a GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public Trigger[] Triggers { get; set; }
	}
	
	/// <summary>
	/// List Variables Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVariablesResponse
	{
		
		/// <summary>
		/// All GTM Variables of a GTM Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public Variable[] Variables { get; set; }
	}
	
	/// <summary>
	/// Publish container version response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublishContainerVersionResponse
	{
		
		/// <summary>
		/// Compiler errors or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compilerError")]
		public System.Nullable<System.Boolean> CompilerError { get; set; }
		
		/// <summary>
		/// Represents a Google Tag Manager Container Version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containerVersion")]
		public ContainerVersion ContainerVersion { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all GTM Accounts that a user has access to.
		/// Tagmanager_accounts_list tagmanager/v1/accounts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ListAccountsResponse> Tagmanager_accounts_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAccountsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a GTM Account.
		/// Tagmanager_accounts_get tagmanager/v1/accounts/{accountId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Tagmanager_accounts_getAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a GTM Account.
		/// Tagmanager_accounts_update tagmanager/v1/accounts/{accountId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the account in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Tagmanager_accounts_updateAsync(string accountId, string fingerprint, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Containers that belongs to a GTM Account.
		/// Tagmanager_accounts_containers_list tagmanager/v1/accounts/{accountId}/containers
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ListContainersResponse> Tagmanager_accounts_containers_listAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListContainersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Container.
		/// Tagmanager_accounts_containers_create tagmanager/v1/accounts/{accountId}/containers
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Container> Tagmanager_accounts_containers_createAsync(string accountId, Container requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Container>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Container.
		/// Tagmanager_accounts_containers_delete tagmanager/v1/accounts/{accountId}/containers/{containerId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_deleteAsync(string accountId, string containerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Container.
		/// Tagmanager_accounts_containers_get tagmanager/v1/accounts/{accountId}/containers/{containerId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Container> Tagmanager_accounts_containers_getAsync(string accountId, string containerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Container>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Container.
		/// Tagmanager_accounts_containers_update tagmanager/v1/accounts/{accountId}/containers/{containerId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the container in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<Container> Tagmanager_accounts_containers_updateAsync(string accountId, string containerId, string fingerprint, Container requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Container>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all GTM Environments of a GTM Container.
		/// Tagmanager_accounts_containers_environments_list tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEnvironmentsResponse> Tagmanager_accounts_containers_environments_listAsync(string accountId, string containerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/environments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListEnvironmentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a GTM Environment.
		/// Tagmanager_accounts_containers_environments_create tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Environment> Tagmanager_accounts_containers_environments_createAsync(string accountId, string containerId, Environment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/environments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Environment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a GTM Environment.
		/// Tagmanager_accounts_containers_environments_delete tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="environmentId">The GTM Environment ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_environments_deleteAsync(string accountId, string containerId, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a GTM Environment.
		/// Tagmanager_accounts_containers_environments_get tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="environmentId">The GTM Environment ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Environment> Tagmanager_accounts_containers_environments_getAsync(string accountId, string containerId, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Environment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a GTM Environment.
		/// Tagmanager_accounts_containers_environments_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="environmentId">The GTM Environment ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the environment in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<Environment> Tagmanager_accounts_containers_environments_updateAsync(string accountId, string containerId, string environmentId, string fingerprint, Environment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Environment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all GTM Folders of a Container.
		/// Tagmanager_accounts_containers_folders_list tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFoldersResponse> Tagmanager_accounts_containers_folders_listAsync(string accountId, string containerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/folders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFoldersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a GTM Folder.
		/// Tagmanager_accounts_containers_folders_create tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Folder> Tagmanager_accounts_containers_folders_createAsync(string accountId, string containerId, Folder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/folders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Folder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a GTM Folder.
		/// Tagmanager_accounts_containers_folders_delete tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="folderId">The GTM Folder ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_folders_deleteAsync(string accountId, string containerId, string folderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/folders/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a GTM Folder.
		/// Tagmanager_accounts_containers_folders_get tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="folderId">The GTM Folder ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Folder> Tagmanager_accounts_containers_folders_getAsync(string accountId, string containerId, string folderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/folders/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Folder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a GTM Folder.
		/// Tagmanager_accounts_containers_folders_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="folderId">The GTM Folder ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the folder in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<Folder> Tagmanager_accounts_containers_folders_updateAsync(string accountId, string containerId, string folderId, string fingerprint, Folder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/folders/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Folder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all entities in a GTM Folder.
		/// Tagmanager_accounts_containers_folders_entities_list tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}/entities
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="folderId">The GTM Folder ID.</param>
		/// <returns>Successful response</returns>
		public async Task<FolderEntities> Tagmanager_accounts_containers_folders_entities_listAsync(string accountId, string containerId, string folderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/folders/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"/entities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FolderEntities>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves entities to a GTM Folder.
		/// Tagmanager_accounts_containers_move_folders_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/move_folders/{folderId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="folderId">The GTM Folder ID.</param>
		/// <param name="tagId">The tags to be moved to the folder.</param>
		/// <param name="triggerId">The triggers to be moved to the folder.</param>
		/// <param name="variableId">The variables to be moved to the folder.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_move_folders_updateAsync(string accountId, string containerId, string folderId, string[] tagId, string[] triggerId, string[] variableId, Folder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/move_folders/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"&"+string.Join("&", tagId.Select(z => $"tagId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", triggerId.Select(z => $"triggerId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", variableId.Select(z => $"variableId={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Re-generates the authorization code for a GTM Environment.
		/// Tagmanager_accounts_containers_reauthorize_environments_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/reauthorize_environments/{environmentId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="environmentId">The GTM Environment ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Environment> Tagmanager_accounts_containers_reauthorize_environments_updateAsync(string accountId, string containerId, string environmentId, Environment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/reauthorize_environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Environment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all GTM Tags of a Container.
		/// Tagmanager_accounts_containers_tags_list tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTagsResponse> Tagmanager_accounts_containers_tags_listAsync(string accountId, string containerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a GTM Tag.
		/// Tagmanager_accounts_containers_tags_create tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Tag> Tagmanager_accounts_containers_tags_createAsync(string accountId, string containerId, Tag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a GTM Tag.
		/// Tagmanager_accounts_containers_tags_delete tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="tagId">The GTM Tag ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_tags_deleteAsync(string accountId, string containerId, string tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/tags/"+ (tagId==null? "" : System.Uri.EscapeDataString(tagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a GTM Tag.
		/// Tagmanager_accounts_containers_tags_get tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="tagId">The GTM Tag ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Tag> Tagmanager_accounts_containers_tags_getAsync(string accountId, string containerId, string tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/tags/"+ (tagId==null? "" : System.Uri.EscapeDataString(tagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a GTM Tag.
		/// Tagmanager_accounts_containers_tags_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="tagId">The GTM Tag ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the tag in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<Tag> Tagmanager_accounts_containers_tags_updateAsync(string accountId, string containerId, string tagId, string fingerprint, Tag requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/tags/"+ (tagId==null? "" : System.Uri.EscapeDataString(tagId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all GTM Triggers of a Container.
		/// Tagmanager_accounts_containers_triggers_list tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTriggersResponse> Tagmanager_accounts_containers_triggers_listAsync(string accountId, string containerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/triggers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTriggersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a GTM Trigger.
		/// Tagmanager_accounts_containers_triggers_create tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Trigger> Tagmanager_accounts_containers_triggers_createAsync(string accountId, string containerId, Trigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/triggers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Trigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a GTM Trigger.
		/// Tagmanager_accounts_containers_triggers_delete tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="triggerId">The GTM Trigger ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_triggers_deleteAsync(string accountId, string containerId, string triggerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/triggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a GTM Trigger.
		/// Tagmanager_accounts_containers_triggers_get tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="triggerId">The GTM Trigger ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Trigger> Tagmanager_accounts_containers_triggers_getAsync(string accountId, string containerId, string triggerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/triggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Trigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a GTM Trigger.
		/// Tagmanager_accounts_containers_triggers_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="triggerId">The GTM Trigger ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the trigger in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<Trigger> Tagmanager_accounts_containers_triggers_updateAsync(string accountId, string containerId, string triggerId, string fingerprint, Trigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/triggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Trigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all GTM Variables of a Container.
		/// Tagmanager_accounts_containers_variables_list tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVariablesResponse> Tagmanager_accounts_containers_variables_listAsync(string accountId, string containerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/variables";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVariablesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a GTM Variable.
		/// Tagmanager_accounts_containers_variables_create tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Variable> Tagmanager_accounts_containers_variables_createAsync(string accountId, string containerId, Variable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/variables";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Variable>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a GTM Variable.
		/// Tagmanager_accounts_containers_variables_delete tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="variableId">The GTM Variable ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_variables_deleteAsync(string accountId, string containerId, string variableId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/variables/"+ (variableId==null? "" : System.Uri.EscapeDataString(variableId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a GTM Variable.
		/// Tagmanager_accounts_containers_variables_get tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="variableId">The GTM Variable ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Variable> Tagmanager_accounts_containers_variables_getAsync(string accountId, string containerId, string variableId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/variables/"+ (variableId==null? "" : System.Uri.EscapeDataString(variableId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Variable>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a GTM Variable.
		/// Tagmanager_accounts_containers_variables_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="variableId">The GTM Variable ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the variable in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<Variable> Tagmanager_accounts_containers_variables_updateAsync(string accountId, string containerId, string variableId, string fingerprint, Variable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/variables/"+ (variableId==null? "" : System.Uri.EscapeDataString(variableId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Variable>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Container Versions of a GTM Container.
		/// Tagmanager_accounts_containers_versions_list tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="headers">Retrieve headers only when true.</param>
		/// <param name="includeDeleted">Also retrieve deleted (archived) versions when true.</param>
		/// <returns>Successful response</returns>
		public async Task<ListContainerVersionsResponse> Tagmanager_accounts_containers_versions_listAsync(string accountId, string containerId, bool headers, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions&headers="+headers+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListContainerVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Container Version.
		/// Tagmanager_accounts_containers_versions_create tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <returns>Successful response</returns>
		public async Task<CreateContainerVersionResponse> Tagmanager_accounts_containers_versions_createAsync(string accountId, string containerId, CreateContainerVersionRequestVersionOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateContainerVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Container Version.
		/// Tagmanager_accounts_containers_versions_delete tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="containerVersionId">The GTM Container Version ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_containers_versions_deleteAsync(string accountId, string containerId, string containerVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions/"+ (containerVersionId==null? "" : System.Uri.EscapeDataString(containerVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Container Version.
		/// Tagmanager_accounts_containers_versions_get tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="containerVersionId">The GTM Container Version ID. Specify published to retrieve the currently published version.</param>
		/// <returns>Successful response</returns>
		public async Task<ContainerVersion> Tagmanager_accounts_containers_versions_getAsync(string accountId, string containerId, string containerVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions/"+ (containerVersionId==null? "" : System.Uri.EscapeDataString(containerVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Container Version.
		/// Tagmanager_accounts_containers_versions_update tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="containerVersionId">The GTM Container Version ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the container version in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<ContainerVersion> Tagmanager_accounts_containers_versions_updateAsync(string accountId, string containerId, string containerVersionId, string fingerprint, ContainerVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions/"+ (containerVersionId==null? "" : System.Uri.EscapeDataString(containerVersionId))+"&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publishes a Container Version.
		/// Tagmanager_accounts_containers_versions_publish tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/publish
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="containerVersionId">The GTM Container Version ID.</param>
		/// <param name="fingerprint">When provided, this fingerprint must match the fingerprint of the container version in storage.</param>
		/// <returns>Successful response</returns>
		public async Task<PublishContainerVersionResponse> Tagmanager_accounts_containers_versions_publishAsync(string accountId, string containerId, string containerVersionId, string fingerprint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions/"+ (containerVersionId==null? "" : System.Uri.EscapeDataString(containerVersionId))+"/publish&fingerprint=" + (fingerprint==null? "" : System.Uri.EscapeDataString(fingerprint));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublishContainerVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a Container Version. This will overwrite the container's current configuration (including its variables, triggers and tags). The operation will not have any effect on the version that is being served (i.e. the published version).
		/// Tagmanager_accounts_containers_versions_restore tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/restore
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="containerVersionId">The GTM Container Version ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ContainerVersion> Tagmanager_accounts_containers_versions_restoreAsync(string accountId, string containerId, string containerVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions/"+ (containerVersionId==null? "" : System.Uri.EscapeDataString(containerVersionId))+"/restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Undeletes a Container Version.
		/// Tagmanager_accounts_containers_versions_undelete tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/undelete
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="containerId">The GTM Container ID.</param>
		/// <param name="containerVersionId">The GTM Container Version ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ContainerVersion> Tagmanager_accounts_containers_versions_undeleteAsync(string accountId, string containerId, string containerVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/containers/"+ (containerId==null? "" : System.Uri.EscapeDataString(containerId))+"/versions/"+ (containerVersionId==null? "" : System.Uri.EscapeDataString(containerVersionId))+"/undelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContainerVersion>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all users that have access to the account along with Account and Container Permissions granted to each of them.
		/// Tagmanager_accounts_permissions_list tagmanager/v1/accounts/{accountId}/permissions
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAccountUsersResponse> Tagmanager_accounts_permissions_listAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAccountUsersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a user's Account & Container Permissions.
		/// Tagmanager_accounts_permissions_create tagmanager/v1/accounts/{accountId}/permissions
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserAccess> Tagmanager_accounts_permissions_createAsync(string accountId, UserAccess requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserAccess>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a user from the account, revoking access to it and all of its containers.
		/// Tagmanager_accounts_permissions_delete tagmanager/v1/accounts/{accountId}/permissions/{permissionId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="permissionId">The GTM User ID.</param>
		/// <returns>Successful response</returns>
		public async Task Tagmanager_accounts_permissions_deleteAsync(string accountId, string permissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a user's Account & Container Permissions.
		/// Tagmanager_accounts_permissions_get tagmanager/v1/accounts/{accountId}/permissions/{permissionId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="permissionId">The GTM User ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserAccess> Tagmanager_accounts_permissions_getAsync(string accountId, string permissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserAccess>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a user's Account & Container Permissions.
		/// Tagmanager_accounts_permissions_update tagmanager/v1/accounts/{accountId}/permissions/{permissionId}
		/// </summary>
		/// <param name="accountId">The GTM Account ID.</param>
		/// <param name="permissionId">The GTM User ID.</param>
		/// <returns>Successful response</returns>
		public async Task<UserAccess> Tagmanager_accounts_permissions_updateAsync(string accountId, string permissionId, UserAccess requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tagmanager/v1/accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserAccess>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
