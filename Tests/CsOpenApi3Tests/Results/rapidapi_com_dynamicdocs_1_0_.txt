//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Compile New Document PDF
		/// Compile a PDF document from a specific template
		/// Compile templates/{template_token}/compile
		/// </summary>
		/// <param name="doc_url_expires_in">The doc-url-expires-in is a numerical parameter which takes integers and describes after how many seconds the provided URL is available to download the document.</param>
		/// <param name="latex_compiler">The latex-compiler parameter can take the following values:  pdflatex lualatex</param>
		/// <param name="latex_runs ">The latex-runs is a numerical parameter and can take values of 1, 2 and 3. </param>
		/// <param name="main_file_name">The main-file-name is a string parameter which identifies the main file to compile.</param>
		/// <param name="doc_file_name">The doc-file-name is a string parameter which determines the name of the file. Note that the extension of the file is not required.</param>
		/// <param name="requestBody">Post the dynamic data for the template to compile the document PDF.</param>
		/// <returns>Document Status URL Created</returns>
		public async Task<string> CompileAsync(int doc_url_expires_in, CompileLatex_compiler latex_compiler, int latex_runs , string main_file_name, string doc_file_name, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/{template_token}/compile?doc-url-expires-in="+doc_url_expires_in+"&latex-compiler=" + latex_compiler+"&latex-runs ="+latex_runs +"&main-file-name=" + (main_file_name==null? "" : System.Uri.EscapeDataString(main_file_name))+"&doc-file-name=" + (doc_file_name==null? "" : System.Uri.EscapeDataString(doc_file_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum CompileLatex_compiler
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pdflatex = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lualatex = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
