//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Encapsulates impression event details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3Impression
	{
		
		/// <summary>
		/// An arbitrary, developer-defined type identifier for each type of game object used in your game. Since players interact with differ types of game objects in different ways, this field allows you to segregate impression data by type for analysis. You should assign a unique `game_object_type` ID to represent a distinct type of game object in your game. For example, 1=monster location, 2=powerup location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gameObjectType")]
		public System.Nullable<System.Int32> GameObjectType { get; set; }
		
		/// <summary>
		/// Required. The type of impression event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionType")]
		public System.Nullable<GoogleMapsPlayablelocationsV3ImpressionImpressionType> ImpressionType { get; set; }
		
		/// <summary>
		/// Required. The name of the playable location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleMapsPlayablelocationsV3ImpressionImpressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESENTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTED = 2,
	}
	
	/// <summary>
	/// A request for logging impressions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3LogImpressionsRequest
	{
		
		/// <summary>
		/// Client information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientInfo")]
		public GoogleMapsUnityClientInfo ClientInfo { get; set; }
		
		/// <summary>
		/// Required. Impression event details. The maximum number of impression reports that you can log at once is 50.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressions")]
		public GoogleMapsPlayablelocationsV3Impression[] Impressions { get; set; }
		
		/// <summary>
		/// Required. A string that uniquely identifies the log impressions request. This allows you to detect duplicate requests. We recommend that you use UUIDs for this value. The value must not exceed 50 characters. You should reuse the `request_id` only when retrying a request in case of failure. In this case, the request must be identical to the one that failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Client information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsUnityClientInfo
	{
		
		/// <summary>
		/// API client name and version. For example, the SDK calling the API. The exact format is up to the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiClient")]
		public string ApiClient { get; set; }
		
		/// <summary>
		/// Application ID, such as the package name on Android and the bundle identifier on iOS platforms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Application version number, such as "1.2.3". The exact format is application-dependent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationVersion")]
		public string ApplicationVersion { get; set; }
		
		/// <summary>
		/// Device model as reported by the device. The exact format is platform-dependent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceModel")]
		public string DeviceModel { get; set; }
		
		/// <summary>
		/// Language code (in BCP-47 format) indicating the UI language of the client. Examples are "en", "en-US" or "ja-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Operating system name and version as reported by the OS. For example, "Mac OS X 10.10.4". The exact format is platform-dependent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystem")]
		public string OperatingSystem { get; set; }
		
		/// <summary>
		/// Build number/version of the operating system. e.g., the contents of android.os.Build.ID in Android, or the contents of sysctl "kern.osversion" in iOS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemBuild")]
		public string OperatingSystemBuild { get; set; }
		
		/// <summary>
		/// Platform where the application is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public System.Nullable<GoogleMapsUnityClientInfoPlatform> Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleMapsUnityClientInfoPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAC_OS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_GL = 7,
	}
	
	/// <summary>
	/// A response for the LogImpressions method. This method returns no data upon success.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3LogImpressionsResponse
	{
	}
	
	/// <summary>
	/// A request for logging your player's bad location reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3LogPlayerReportsRequest
	{
		
		/// <summary>
		/// Client information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientInfo")]
		public GoogleMapsUnityClientInfo ClientInfo { get; set; }
		
		/// <summary>
		/// Required. Player reports. The maximum number of player reports that you can log at once is 50.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerReports")]
		public GoogleMapsPlayablelocationsV3PlayerReport[] PlayerReports { get; set; }
		
		/// <summary>
		/// Required. A string that uniquely identifies the log player reports request. This allows you to detect duplicate requests. We recommend that you use UUIDs for this value. The value must not exceed 50 characters. You should reuse the `request_id` only when retrying a request in the case of a failure. In that case, the request must be identical to the one that failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A report submitted by a player about a playable location that is considered inappropriate for use in the game.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3PlayerReport
	{
		
		/// <summary>
		/// Language code (in BCP-47 format) indicating the language of the freeform description provided in `reason_details`. Examples are "en", "en-US" or "ja-Latn". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Required. The name of the playable location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationName")]
		public string LocationName { get; set; }
		
		/// <summary>
		/// Required. A free-form description detailing why the playable location is considered bad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonDetails")]
		public string ReasonDetails { get; set; }
		
		/// <summary>
		/// Required. One or more reasons why this playable location is considered bad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public string[] Reasons { get; set; }
	}
	
	/// <summary>
	/// A response for the LogPlayerReports method. This method returns no data upon success.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3LogPlayerReportsResponse
	{
	}
	
	/// <summary>
	/// Specifies the area to search for playable locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SampleAreaFilter
	{
		
		/// <summary>
		/// Required. The S2 cell ID of the area you want. This must be between cell level 11 and 14 (inclusive). S2 cells are 64-bit integers that identify areas on the Earth. They are hierarchical, and can therefore be used for spatial indexing. The S2 geometry library is available in a number of languages: * [C++](https://github.com/google/s2geometry) * [Java](https://github.com/google/s2-geometry-library-java) * [Go](https://github.com/golang/geo) * [Python](https://github.com/google/s2geometry/tree/master/src/python)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s2CellId")]
		public string S2CellId { get; set; }
	}
	
	/// <summary>
	/// Encapsulates a filter criterion for searching for a set of playable locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SampleCriterion
	{
		
		/// <summary>
		/// Specifies which `PlayableLocation` fields are returned. `name` (which is used for logging impressions), `center_point` and `place_id` (or `plus_code`) are always returned. The following fields are omitted unless you specify them here: * snapped_point * types Note: The more fields you include, the more expensive in terms of data and associated latency your query will be.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldsToReturn")]
		public string FieldsToReturn { get; set; }
		
		/// <summary>
		/// Specifies the filters to use when searching for playable locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public GoogleMapsPlayablelocationsV3SampleFilter Filter { get; set; }
		
		/// <summary>
		/// Required. An arbitrary, developer-defined identifier of the type of game object that the playable location is used for. This field allows you to specify criteria per game object type when searching for playable locations. You should assign a unique `game_object_type` ID across all `request_criteria` to represent a distinct type of game object. For example, 1=monster location, 2=powerup location. The response contains a map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gameObjectType")]
		public System.Nullable<System.Int32> GameObjectType { get; set; }
	}
	
	/// <summary>
	/// Specifies the filters to use when searching for playable locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SampleFilter
	{
		
		/// <summary>
		/// Restricts the set of playable locations to just the [types](/maps/documentation/gaming/tt/types) that you want.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedTypes")]
		public string[] IncludedTypes { get; set; }
		
		/// <summary>
		/// Specifies the maximum number of playable locations to return. This value must not be greater than 1000. The default value is 100. Only the top-ranking playable locations are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLocationCount")]
		public System.Nullable<System.Int32> MaxLocationCount { get; set; }
		
		/// <summary>
		/// A set of options that specifies the separation between playable locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spacing")]
		public GoogleMapsPlayablelocationsV3SampleSpacingOptions Spacing { get; set; }
	}
	
	/// <summary>
	/// A set of options that specifies the separation between playable locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SampleSpacingOptions
	{
		
		/// <summary>
		/// Required. The minimum spacing between any two playable locations, measured in meters. The minimum value is 30. The maximum value is 1000. Inputs will be rounded up to the next 10 meter interval. The default value is 200m. Set this field to remove tight clusters of playable locations. Note: The spacing is a greedy algorithm. It optimizes for selecting the highest ranking locations first, not to maximize the number of locations selected. Consider the following scenario: * Rank: A: 2, B: 1, C: 3. * Distance: A--200m--B--200m--C If spacing=250, it will pick the highest ranked location [B], not [A, C]. Note: Spacing works within the game object type itself, as well as the previous ones. Suppose three game object types, each with the following spacing: * X: 400m, Y: undefined, Z: 200m. 1. Add locations for X, within 400m of each other. 2. Add locations for Y, without any spacing. 3. Finally, add locations for Z within 200m of each other as well X and Y. The distance diagram between those locations end up as: * From->To. * X->X: 400m * Y->X, Y->Y: unspecified. * Z->X, Z->Y, Z->Z: 200m.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minSpacingMeters")]
		public System.Nullable<System.Double> MinSpacingMeters { get; set; }
		
		/// <summary>
		/// Specifies whether the minimum spacing constraint applies to the center-point or to the snapped point of playable locations. The default value is `CENTER_POINT`. If a snapped point is not available for a playable location, its center-point is used instead. Set this to the point type used in your game.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointType")]
		public System.Nullable<GoogleMapsPlayablelocationsV3SampleSpacingOptionsPointType> PointType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleMapsPlayablelocationsV3SampleSpacingOptionsPointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POINT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER_POINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPED_POINT = 2,
	}
	
	/// <summary>
	/// A geographical point suitable for placing game objects in location-based games.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SamplePlayableLocation
	{
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="centerPoint")]
		public GoogleTypeLatLng CenterPoint { get; set; }
		
		/// <summary>
		/// Required. The name of this playable location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A [place ID] (https://developers.google.com/places/place-id)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeId")]
		public string PlaceId { get; set; }
		
		/// <summary>
		/// A [plus code] (http://openlocationcode.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plusCode")]
		public string PlusCode { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snappedPoint")]
		public GoogleTypeLatLng SnappedPoint { get; set; }
		
		/// <summary>
		/// A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this playable location. The first type in the collection is the primary type. Type information might not be available for all playable locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleTypeLatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// A list of PlayableLocation objects that satisfies a single Criterion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SamplePlayableLocationList
	{
		
		/// <summary>
		/// A list of playable locations for this game object type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public GoogleMapsPlayablelocationsV3SamplePlayableLocation[] Locations { get; set; }
	}
	
	/// <summary>
	///  Life of a query: - When a game starts in a new location, your game server issues a SamplePlayableLocations request. The request specifies the S2 cell, and contains one or more "criteria" for filtering: - Criterion 0: i locations for long-lived bases, or level 0 monsters, or... - Criterion 1: j locations for short-lived bases, or level 1 monsters, ... - Criterion 2: k locations for random objects. - etc (up to 5 criterion may be specified). `PlayableLocationList` will then contain mutually exclusive lists of `PlayableLocation` objects that satisfy each of the criteria. Think of it as a collection of real-world locations that you can then associate with your game state. Note: These points are impermanent in nature. E.g, parks can close, and places can be removed. The response specifies how long you can expect the playable locations to last. Once they expire, you should query the `samplePlayableLocations` API again to get a fresh view of the real world.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest
	{
		
		/// <summary>
		/// Specifies the area to search for playable locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areaFilter")]
		public GoogleMapsPlayablelocationsV3SampleAreaFilter AreaFilter { get; set; }
		
		/// <summary>
		/// Required. Specifies one or more (up to 5) criteria for filtering the returned playable locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public GoogleMapsPlayablelocationsV3SampleCriterion[] Criteria { get; set; }
	}
	
	/// <summary>
	///  Response for the SamplePlayableLocations method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse
	{
		
		/// <summary>
		/// Each PlayableLocation object corresponds to a game_object_type specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationsPerGameObjectType")]
		public System.Collections.Generic.Dictionary<string, GoogleMapsPlayablelocationsV3SamplePlayableLocationList> LocationsPerGameObjectType { get; set; }
		
		/// <summary>
		/// Required. Specifies the "time-to-live" for the set of playable locations. You can use this value to determine how long to cache the set of playable locations. After this length of time, your back-end game server should issue a new SamplePlayableLocations request to get a fresh set of playable locations (because for example, they might have been removed, a park might have closed for the day, a business might have closed permanently).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Logs new events when playable locations are displayed, and when they are interacted with. Impressions are not partially saved; either all impressions are saved and this request succeeds, or no impressions are saved, and this request fails.
		/// Playablelocations_logImpressions v3:logImpressions
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GoogleMapsPlayablelocationsV3LogImpressionsResponse> Playablelocations_logImpressionsAsync(GoogleMapsPlayablelocationsV3LogImpressionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3:logImpressions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleMapsPlayablelocationsV3LogImpressionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Logs bad playable location reports submitted by players. Reports are not partially saved; either all reports are saved and this request succeeds, or no reports are saved, and this request fails.
		/// Playablelocations_logPlayerReports v3:logPlayerReports
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GoogleMapsPlayablelocationsV3LogPlayerReportsResponse> Playablelocations_logPlayerReportsAsync(GoogleMapsPlayablelocationsV3LogPlayerReportsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3:logPlayerReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleMapsPlayablelocationsV3LogPlayerReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a set of playable locations that lie within a specified area, that satisfy optional filter criteria. Note: Identical `SamplePlayableLocations` requests can return different results as the state of the world changes over time.
		/// Playablelocations_samplePlayableLocations v3:samplePlayableLocations
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse> Playablelocations_samplePlayableLocationsAsync(GoogleMapsPlayablelocationsV3SamplePlayableLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3:samplePlayableLocations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleMapsPlayablelocationsV3SamplePlayableLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
