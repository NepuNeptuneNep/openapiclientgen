//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An AGCO Power ECU
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AGCOPowerServicesModelsECU
	{
		
		/// <summary>
		/// The code used to activate the ECU. May not be modified. Returned only on activation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActivationCode { get; set; }
		
		/// <summary>
		/// A description why the ECU cannot be deactivated.
		/// Pattern: ^[a-zA-Z0-9]{0,4096}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]{0,4096}$")]
		public string DamagedDescription { get; set; }
		
		/// <summary>
		/// The serial number of the ECU’s engine
		/// Required
		/// Pattern: (^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMBL][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMBL][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)")]
		public string EngineSerialNumber { get; set; }
		
		/// <summary>
		/// The serial number of the ECU that this ECU replaces. Required if activating an ECU..
		/// Pattern: ^0?\d{23}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^0?\d{23}$")]
		public string ReplacesECUSerialNumber { get; set; }
		
		/// <summary>
		/// The serial number of the ECU
		/// Required
		/// Pattern: ^0?\d{23}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^0?\d{23}$")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The state of the ECU
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AGCOPowerServicesModelsECUState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AGCOPowerServicesModelsECUState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Damaged = 2,
	}
	
	/// <summary>
	/// Production data for an AGCO Power engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AGCOPowerServicesModelsProductionData
	{
		
		/// <summary>
		/// Type of data. Valid types are (but not limited to)
		///            'PowerCalibration'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		/// <summary>
		/// Raw values of the calibration data
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataValues { get; set; }
	}
	
	/// <summary>
	/// Status of a voucher in the AGCO Power system
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AGCOPowerServicesModelsUserStatus
	{
		
		/// <summary>
		/// The dealer code of the voucher
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// The state of the voucher
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AGCOPowerServicesModelsUserStatusState> State { get; set; }
		
		/// <summary>
		/// The voucher code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AGCOPowerServicesModelsUserStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationCodeDefinition_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsAuthorizationCodeDefinition[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Represents the model used to define how a type of authorization code is generated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsAuthorizationCodeDefinition
	{
		
		/// <summary>
		/// The value used for securing codes generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationID { get; set; }
		
		/// <summary>
		/// The ID of the user that created this definition. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CreatedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this definition was created. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The defined fields to include in authorization codes generated from this definition. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsDataField[] DataFields { get; set; }
		
		/// <summary>
		/// The ID of the user that deleted this definition. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeletedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this definition was deleted. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// A description of this definition. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The number of bits used for timestamp verification. Defaults to 5. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationAccuracy { get; set; }
		
		/// <summary>
		/// The amount of duration for the specified duration unit used to calculate the Authorization Code. Defaults to 1. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationAmount { get; set; }
		
		/// <summary>
		/// The units of duration used to calculate the Authorization Code. Defaults to 'Days'. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AuthorizationCodesSharedModelsAuthorizationCodeDefinitionDurationUnits> DurationUnits { get; set; }
		
		/// <summary>
		/// The bit length of the hash data which will be used for the authorization code. Defaults to 20. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HashLength { get; set; }
		
		/// <summary>
		/// The ID of the authorization code definition. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Indicates whether this definition is enabled. True if generating codes is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// The name of the authorization code definition. May not be updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The bit length of random data which will be included in the authorization code.  This is necessary to allow creation of "identical" authorization codes containing the same timestamp. Defaults to 5. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RandomLength { get; set; }
		
		/// <summary>
		/// The defined fields to verify when reading authorization codes generated from this definition. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsValidationField[] ValidationFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsDataField
	{
		
		/// <summary>
		/// The number of decimal digits to be used by this data field. Required only by the 'Float' data type. Must be in range 1 - 15.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DigitsPrecision { get; set; }
		
		/// <summary>
		/// The maximum exponent to be used by this data field. Required only by the 'Float' data type. May not be greater than 307.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxExponent { get; set; }
		
		/// <summary>
		/// The maximum value that can be represented by this data field. Required only by the 'Decimal' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// The minimum exponent to be used by this data field. Required only by the 'Float' data type. May not be less than -292.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinExponent { get; set; }
		
		/// <summary>
		/// The minimum value that can be represented by this data field. Required only by the 'Decimal' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinValue { get; set; }
		
		/// <summary>
		/// The name of the field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The resolution of values that can be represented by this data field. The base value is multiplied by this to compute the final value. Required only by the 'Decimal' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ScaleFactor { get; set; }
		
		/// <summary>
		/// Indicates whether this value is signed. Required only by the 'Float' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Signed { get; set; }
		
		/// <summary>
		/// The type of this data field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsDataFieldType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthorizationCodesSharedModelsDataFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VariableLengthByteArray = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthorizationCodesSharedModelsAuthorizationCodeDefinitionDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weeks = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Days = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minutes = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsValidationField
	{
		
		/// <summary>
		/// The name of the field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The type for this validation field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsValidationFieldType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthorizationCodesSharedModelsValidationFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringCaseInsensitive = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringCaseSensitive = 4,
	}
	
	/// <summary>
	/// Metadata for the paged response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponseMetadata
	{
		
		/// <summary>
		/// The number of entities this paged response is limited to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		/// <summary>
		/// The number of entities prior to this page of items.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		/// <summary>
		/// The total number of entities matching the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationCode_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsAuthorizationCode[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Represents the model containing an authorization code used to unlock a feature in machines and EDT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsAuthorizationCode
	{
		
		/// <summary>
		/// The code to enter to unlock a feature. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The ID of the user that created this authorization code. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CreatedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this code was created. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The parameters and values contained as data in this authorization code. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsParameter[] DataParameters { get; set; }
		
		/// <summary>
		/// The id of the definition for this authorization code. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefinitionID { get; set; }
		
		/// <summary>
		/// The ID of the user that deleted this authorization code. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeletedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this authorization code was deleted. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// A date at which this code should begin being valid. Optional. Set on create only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		/// <summary>
		/// The identifier for the authorization code. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// Indicates whether this code is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// The parameters and values used to validate this authorization code. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsParameter[] ValidationParameters { get; set; }
	}
	
	/// <summary>
	/// A parameter used to create an authorization code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsParameter
	{
		
		/// <summary>
		/// The name of the parameter. May not be updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the parameter. May not be updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationContactInformation_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsAuthorizationContactInformation[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsAuthorizationContactInformation
	{
		
		/// <summary>
		/// AuthorizationCode ID that the contact information ties into.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int AuthorizationCodeID { get; set; }
		
		/// <summary>
		/// The authorization code. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Name of contact requesting an authorization code. Minimum length of 3 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Contact { get; set; }
		
		/// <summary>
		/// The name of the user that created this code. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// The date the authorization code was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Dealer code that relates to the dealership. Minimum length of 3 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// Name of dealership. Minimum length of 3 characters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Dealership { get; set; }
		
		/// <summary>
		/// The name of the definition used for generating this authorization code. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefinitionName { get; set; }
		
		/// <summary>
		/// Email of contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// ID of authorizationContactInformation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// Optional notes used for internal use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Phone number of contact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_AuthorizationCodesSharedModelsCategoryUserReport_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsCategoryUserReport[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsCategoryUserReport
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsCategory[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsAuthorizationCodeUser User { get; set; }
	}
	
	/// <summary>
	/// A category for Authorization Code Definitions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsCategory
	{
		
		/// <summary>
		/// A description of the Category.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the Category.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// The Name of the Category.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsAuthorizationCodeUser
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_AuthorizationCodesSharedModelsCategory_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodesSharedModelsCategory[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsFileDownload_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsFileDownload[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A language used for string translations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsFileDownload
	{
		
		/// <summary>
		/// The crc of the file (SHA256, HEX-encoded). Must be provided when creating a file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CRC { get; set; }
		
		/// <summary>
		/// The type of file; sent as the content-type header.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The description of the file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The Id of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates whether this file is available to the public for download.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsPublic { get; set; }
		
		/// <summary>
		/// The name of the file when downloaded.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Path of the file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Indicates the state of this file. Must be 'Created' when created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsFileDownloadState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GlobalResourcesSharedModelsFileDownloadState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Removed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsGlobalImageCategory_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsGlobalImageCategory[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// An image category from the Global Image library.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsGlobalImageCategory
	{
		
		/// <summary>
		/// The Id of the GlobalImage Categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the globalImage Catetory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsGlobalImage_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsGlobalImage[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// An image from the Global Image library.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsGlobalImage
	{
		
		/// <summary>
		/// The Hash of the file (SHA256, HEX-encoded).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CRC { get; set; }
		
		/// <summary>
		/// The category of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsGlobalImageCategory[] Categories { get; set; }
		
		/// <summary>
		/// The date of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The description of the file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The height of the file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Height { get; set; }
		
		/// <summary>
		/// The Id of the GlobalImage Metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the file when downloaded.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Publisher of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The size of the file in bytes. Null until assigned by server when marked as 'Available'. Read Only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Indicates the state of this file. Must be 'Created' when created. Read Only.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsFileDownloadState State { get; set; }
		
		/// <summary>
		/// The Hash of the thumbnail file (SHA256, HEX-encoded).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThumbnailCRC { get; set; }
		
		/// <summary>
		/// The size of the thumbnail file in bytes. Null until assigned by server when marked as 'Available'. Read Only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ThumbnailSize { get; set; }
		
		/// <summary>
		/// The width of the file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsLanguage_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsLanguage[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A language used for string translations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsLanguage
	{
		
		/// <summary>
		/// The description of the language (e.g. “English – United States”).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether the API supports the language. Must be false when created. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// The Locale Id of the language.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int LocaleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsStringDefinition_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsStringDefinition[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// The definition of a string to be translated
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsStringDefinition
	{
		
		/// <summary>
		/// The description of the string to be translated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DescriptionForTranslator { get; set; }
		
		/// <summary>
		/// True if the string should not be translated. False by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DoNotTranslate { get; set; }
		
		/// <summary>
		/// The identifier for the string. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The number of parameters expected for the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParameterCount { get; set; }
		
		/// <summary>
		/// A value indicating the last modification of this string. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Translations for the string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsStringTranslation[] Translations { get; set; }
	}
	
	/// <summary>
	/// A translation of a string in a specific language
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsStringTranslation
	{
		
		/// <summary>
		/// The id of the user to last edit thie translation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorId { get; set; }
		
		/// <summary>
		/// The id of the language of the translation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LanguageId { get; set; }
		
		/// <summary>
		/// The state of the translation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<GlobalResourcesSharedModelsStringTranslationState> State { get; set; }
		
		/// <summary>
		/// The id of the string that is translated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StringId { get; set; }
		
		/// <summary>
		/// The translated string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StringValue { get; set; }
		
		/// <summary>
		/// A value indicating the last modification of this translation. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GlobalResourcesSharedModelsStringTranslationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Original = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Requested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Validated = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalidated = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestPending = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatePending = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsStringTranslation_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsStringTranslation[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsTranslationRequest_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationRequest[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A request to translate specified strings into specified locales
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsTranslationRequest
	{
		
		/// <summary>
		/// The ID of the user from which approval for the request is required
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ApprovalUserId { get; set; }
		
		/// <summary>
		/// Additional email addresses to CC on emails pertaining to the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] CCEmailAddresses { get; set; }
		
		/// <summary>
		/// The account to charge for the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ChargeToAccount { get; set; }
		
		/// <summary>
		/// The date by which the translations in the request are needed. Defaults to 30 days from the current date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Deadline { get; set; }
		
		/// <summary>
		/// The ID of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Locale IDs to which these strings are requested to be translated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int[] LocaleIds { get; set; }
		
		/// <summary>
		/// Additional notes or comments about the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// The ID of the user to which to address questions regarding the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> QuestionsUserId { get; set; }
		
		/// <summary>
		/// The state of the request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationRequestState State { get; set; }
		
		/// <summary>
		/// The ID of the User that submitted the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubmittedBy { get; set; }
		
		/// <summary>
		/// The email address for the translator
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TranslatorEmail { get; set; }
		
		/// <summary>
		/// The name of the translator
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TranslatorName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GlobalResourcesSharedModelsTranslationRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSubmitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Submitted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetAttribute_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationSetAttribute[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// An attribute of a
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsTranslationSetAttribute
	{
		
		/// <summary>
		/// The ID of this attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// The name of this Attribute.
		/// Required
		/// Pattern: [a-zA-Z0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the translation set to which this attribute belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TranslationSetID { get; set; }
		
		/// <summary>
		/// The value of this Attribute
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetSourceString_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationSetSourceString[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Information needed to translate a string in a translation set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsTranslationSetSourceString
	{
		
		/// <summary>
		/// A description of the string to translate. This should contain context and parameter count.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DescriptionForTranslator { get; set; }
		
		/// <summary>
		/// The ID of the language from which to translate the string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LanguageID { get; set; }
		
		/// <summary>
		/// The ID of the string to translate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StringID { get; set; }
		
		/// <summary>
		/// The string to translate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetString_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationSetString[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// The resulting translation in a translation set.  is the  to which the string will be translated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsTranslationSetString
	{
		
		/// <summary>
		/// The ID of the language into which to translate the string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int LanguageID { get; set; }
		
		/// <summary>
		/// The Id of the string translation that has been requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StringID { get; set; }
		
		/// <summary>
		/// The string value returned from the translator
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StringValue { get; set; }
		
		/// <summary>
		/// The id of the TranslationSet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TranslationSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_GlobalResourcesSharedModelsTranslationSet_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationSet[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A set of strings submitted for translation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsTranslationSet
	{
		
		/// <summary>
		/// Attributes of the Translation Set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationSetAttribute[] Attributes { get; set; }
		
		/// <summary>
		/// IDs for files related to this translation set. For example, the original and processed files
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FileIDs { get; set; }
		
		/// <summary>
		/// The id of the TranslationSet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Read Only. The date the translation set was returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InDate { get; set; }
		
		/// <summary>
		/// Notes on the TranslationSet
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Read Only. The date the translation set was sent out.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OutDate { get; set; }
		
		/// <summary>
		/// An enum indicating the state of the translation set
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GlobalResourcesSharedModelsTranslationSetState State { get; set; }
		
		/// <summary>
		/// Read Only. The Id of the TranslationRequest which generated this translation set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TranslationRequestID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GlobalResourcesSharedModelsTranslationSetState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OutForProcessing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingApproval = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OutForTranslation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIIPagedResponse_OASSupportSharedModelsTranslationKey_
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OASSupportSharedModelsTranslationKey[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A translation key to map the relationship of keyNames, usually for ODX, and string Ids
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OASSupportSharedModelsTranslationKey
	{
		
		/// <summary>
		/// The identifier for the translationKey. Read Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// The key name of the item. One example is tkODX_HWIKM14R01
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Foreign key to StringDefinitionID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StringID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsApiError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeveloperMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MoreInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsAuthenticatedUser
	{
		
		/// <summary>
		/// The user's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The MAC identifier to use for API access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MACId { get; set; }
		
		/// <summary>
		/// The MAC token to use for API access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MACToken { get; set; }
		
		/// <summary>
		/// The user's name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The token to use for API access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
		
		/// <summary>
		/// The user ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		/// <summary>
		/// The username used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsCredentials
	{
		
		/// <summary>
		/// The action to perform on the bearer token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<APIModelsCredentialsBearerAction> BearerAction { get; set; }
		
		/// <summary>
		/// The action to perform on the MAC token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIModelsCredentialsBearerAction MACAction { get; set; }
		
		/// <summary>
		/// A secret word or phrase that must be used to gain admission
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// A unique ID a user needs to login with
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum APIModelsCredentialsBearerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reset = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsLog
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsNotification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CC_Addresses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsBodyHtml { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MessageBody { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] To_Addresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsPasswordReset
	{
		
		/// <summary>
		/// The new password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// The password reset token
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsPasswordResetRequest
	{
		
		/// <summary>
		/// The query string parameter name to use for supplying the password reset token
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		/// <summary>
		/// The URL to direct the user to reset the password.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// The username to reset the password for
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsPermission
	{
		
		/// <summary>
		/// Description of data to be provided with Role Authorization
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataDescription { get; set; }
		
		/// <summary>
		/// Indicates if data is required or optional
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsPermissionDataRequired DataRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The name of the permission.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum APIModelsPermissionDataRequired
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		No = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optional = 2,
	}
	
	/// <summary>
	/// Defines an API Role
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsRole
	{
		
		/// <summary>
		/// Role description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The role's identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The name of the role. Must be alpha-numeric strings separated by a period (.).
		/// Required
		/// Pattern: ^[0-9a-zA-Z]*?[a-zA-Z]+[0-9a-zA-Z]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z]*?[a-zA-Z]+[0-9a-zA-Z]*$")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Change to the Permissions that a Role is given.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsRolePermissionChange
	{
		
		/// <summary>
		/// The action to take.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsRolePermissionChangeAction Action { get; set; }
		
		/// <summary>
		/// The name of the permission to grant or revoke.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Permission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum APIModelsRolePermissionChangeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoke = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsRoleUserChange
	{
		
		/// <summary>
		/// The action to take with the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsRolePermissionChangeAction Action { get; set; }
		
		/// <summary>
		/// The Id of the User
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsTokenOptions
	{
		
		/// <summary>
		/// The action to perform on the bearer token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIModelsCredentialsBearerAction BearerAction { get; set; }
		
		/// <summary>
		/// The action to perform on the MAC token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public APIModelsCredentialsBearerAction MACAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsUser
	{
		
		/// <summary>
		/// Never Returned.  When changing a user's password, this field must contain the new password.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChangePassword { get; set; }
		
		/// <summary>
		/// The user's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The user's name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Never Returned.  Required when creating a new user or updating a user.  When changing a user's password this field must contain the current password.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// The user ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		/// <summary>
		/// The username used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsUserEffectivePermission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PermissionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PermissionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIModelsUserRoleChange
	{
		
		/// <summary>
		/// The action to take with the role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsRolePermissionChangeAction Action { get; set; }
		
		/// <summary>
		/// The name of the role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_APIModelsLog_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsLog[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_APIModelsPermission_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsPermission[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_APIModelsRole_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsRole[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_APIModelsUserEffectivePermission_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsUserEffectivePermission[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_APIModelsUser_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIModelsUser[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_BuildSystemSharedDTOActivityRun_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityRun[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IActivityRun
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOActivityRun
	{
		
		/// <summary>
		/// The identifier for the ActivityRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityRunID { get; set; }
		
		/// <summary>
		/// Read Only. The UTC date and time when the activity completed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the Job Activity that defines this activity run
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobActivityID { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the JobRun under which this ActivityRun is executing
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		/// <summary>
		/// The parameters used for this run of the activity.  Parameters cannot be added or removed, but output parameter values may be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameterValue[] Parameters { get; set; }
		
		/// <summary>
		/// Read Only. The UTC date and time when the activity started
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// A DTO for an IActivityRunStatus
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityRunStatus Status { get; set; }
		
		/// <summary>
		/// Read Only. The steps to be executed for the activity.  These steps come from the relationship through JobActivity down to ActivityStep
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IParameterValue
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOParameterValue
	{
		
		/// <summary>
		/// The parameter direction (Input or Output)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<BuildSystemSharedDTOParameterValueDirection> Direction { get; set; }
		
		/// <summary>
		/// The name of the parameter this value is for
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameter value in string representation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildSystemSharedDTOParameterValueDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Input = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Output = 1,
	}
	
	/// <summary>
	/// A DTO for an IActivityRunStatus
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOActivityRunStatus
	{
		
		/// <summary>
		/// The activity step currently executing, indicated by numeric order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentStep { get; set; }
		
		/// <summary>
		/// The status of the ActivityRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<BuildSystemSharedDTOActivityRunStatusStatus> Status { get; set; }
		
		/// <summary>
		/// The percent progress from the currently executing step.  This value shall be null if progress is not available
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepProgress { get; set; }
		
		/// <summary>
		/// The status text from the currently executing step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StepStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildSystemSharedDTOActivityRunStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// A DTO for an IActivityStep
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOActivityStep
	{
		
		/// <summary>
		/// The id of the activity this activity step belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityID { get; set; }
		
		/// <summary>
		/// The id of this activity step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityStepID { get; set; }
		
		/// <summary>
		/// The implementation id which is used to look up the step implementation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImplementationID { get; set; }
		
		/// <summary>
		/// The mapping of values from a source to be used for the step parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameterMapping[] ParameterMappings { get; set; }
		
		/// <summary>
		/// The order of this activity step relative to other activity steps
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunOrder { get; set; }
		
		/// <summary>
		/// The id of the step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepID { get; set; }
		
		/// <summary>
		/// The name of the step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StepName { get; set; }
		
		/// <summary>
		/// Indicates the configuration for the ActivityStep to use at runtime.  The build agent must provide this configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UseConfig { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IParameterMapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOParameterMapping
	{
		
		/// <summary>
		/// The name of the parameter this mapping applies to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The source of the value.  The meaning of this value is determined by the source type.  When the source type is “Constant” then source is the value formatted as a string.  When the source type is “Variable” then the source is the name of the variable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		/// <summary>
		/// The source type used for supplying the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<BuildSystemSharedDTOParameterMappingSourceType> SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildSystemSharedDTOParameterMappingSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Constant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 1,
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_BuildSystemSharedDTOActivity_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivity[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IActivity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOActivity
	{
		
		/// <summary>
		/// The ID of the activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The name of the activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for this activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameter[] Parameters { get; set; }
		
		/// <summary>
		/// The steps which are performed for this activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IParameter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOParameter
	{
		
		/// <summary>
		/// The parameter direction (Input or Output)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameterValueDirection Direction { get; set; }
		
		/// <summary>
		/// The name of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The data type of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<BuildSystemSharedDTOParameterType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildSystemSharedDTOParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringDictionary = 4,
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_BuildSystemSharedDTOAgent_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOAgent[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IAgent
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOAgent
	{
		
		/// <summary>
		/// The id of the Agent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AgentID { get; set; }
		
		/// <summary>
		/// The 'Heartbeat Interval' used by the Build Agent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int KeepAliveInterval { get; set; }
		
		/// <summary>
		/// The machine name of the computer the agent is running on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MachineName { get; set; }
		
		/// <summary>
		/// A DTO for an IAgentStatus
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOAgentStatus Status { get; set; }
		
		/// <summary>
		/// The agent's step configurations
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOStepConfiguration[] StepConfigurations { get; set; }
		
		/// <summary>
		/// The UserID of the Agent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int UserID { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IAgentStatus
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOAgentStatus
	{
		
		/// <summary>
		/// ReadOnly. The UTC date and time of the last status update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStatusUpdate { get; set; }
		
		/// <summary>
		/// Indicates if the agent is online
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Online { get; set; }
	}
	
	/// <summary>
	/// Step Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOStepConfiguration
	{
		
		/// <summary>
		/// The configuration names supported.  The configurations collection is empty for steps which do not require configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Configurations { get; set; }
		
		/// <summary>
		/// The Implementation ID of the step this configuration is for
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StepImplementationID { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_BuildSystemSharedDTOJobRun_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOJobRun[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IJobRun
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOJobRun
	{
		
		/// <summary>
		/// The activity runs belonging to this JobRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityRun[] ActivityRuns { get; set; }
		
		/// <summary>
		/// The UTC date and time when the job completed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The ID of the job that defines the run
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// The ID of this JobRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		/// <summary>
		/// The parameters used for this run of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameterValue[] Parameters { get; set; }
		
		/// <summary>
		/// The UTC date and time when the job started
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// The status of this JobRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityRunStatusStatus Status { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_BuildSystemSharedDTOJob_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOJob[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IJob
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOJob
	{
		
		/// <summary>
		/// The activities which are performed for the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOJobActivity[] Activities { get; set; }
		
		/// <summary>
		/// Indicates if the job has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The ID of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// The name of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IJobActivity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOJobActivity
	{
		
		/// <summary>
		/// The ID of the activity to be run as part of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityID { get; set; }
		
		/// <summary>
		/// The ID of this job activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobActivityID { get; set; }
		
		/// <summary>
		/// The ID of the job this job activity belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// The mapping of values from a source to be used for the activity parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameterMapping[] ParameterMappings { get; set; }
		
		/// <summary>
		/// The order of this job activity relative to others in the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunOrder { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_BuildSystemSharedDTOStep_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOStep[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Step
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedDTOStep
	{
		
		/// <summary>
		/// Indicates if the step requires configuration values to be provided by the build agent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ConfigRequired { get; set; }
		
		/// <summary>
		/// Read Only.  Indicates if the record is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// A description of the step to be presented to a user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The implementation ID used to lookup the step implementation when it is executed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImplementationID { get; set; }
		
		/// <summary>
		/// The name of the step
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for this step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameter[] Parameters { get; set; }
		
		/// <summary>
		/// The ID of the step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepID { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// An attribute of a definition of the content for submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute
	{
		
		/// <summary>
		/// The ID of the content definition to which this attribute belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		/// <summary>
		/// The ID of this attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// The name of this Attribute.
		/// Required
		/// Pattern: [a-zA-Z0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of this Attribute
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentDefinition_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentDefinition[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// The definition of the content for submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesContentDefinition
	{
		
		/// <summary>
		/// Attributes of this ContentDefinition
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute[] Attributes { get; set; }
		
		/// <summary>
		/// The ID of this content definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		/// <summary>
		/// The description used on the package type in the AGCO Update System
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of this content. Name must be valid for Attribute on PackageType.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the package type used for this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// The type of content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TypeID { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentReleaseVersion_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentReleaseVersion[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// ContentReleaseVersion class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesContentReleaseVersion
	{
		
		/// <summary>
		/// ContentDefinitionID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		/// <summary>
		/// ContentReleaseID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentReleaseID { get; set; }
		
		/// <summary>
		/// deleted flag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// PublisherUser ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PublisherUserID { get; set; }
		
		/// <summary>
		/// rele4ase Id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReleaseID { get; set; }
		
		/// <summary>
		/// The URL at which test reports for this content can be found
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TestReportUrl { get; set; }
		
		/// <summary>
		/// Updated Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDate { get; set; }
		
		/// <summary>
		/// version
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// The definition of the content for submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute
	{
		
		/// <summary>
		/// The ID of the content submission to which this attribute belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentSubmissionID { get; set; }
		
		/// <summary>
		/// The ID of this attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// The name of this Attribute.
		/// Required
		/// Pattern: [a-zA-Z0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of this Attribute
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentSubmission_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentSubmission[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A content submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesContentSubmission
	{
		
		/// <summary>
		/// Attributes of this ContentSubmission
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute[] Attributes { get; set; }
		
		/// <summary>
		/// ReadOnly. The ID of the Azure DevOps Build which will build the content package.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BuildID { get; set; }
		
		/// <summary>
		/// The ID of the Content Definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		/// <summary>
		/// The ID of this Content Submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentSubmissionID { get; set; }
		
		/// <summary>
		/// The definition of the content for submission
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesContentDefinition Definition { get; set; }
		
		/// <summary>
		/// ReadOnly. The ID of the JobRun which will build the content package.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		/// <summary>
		/// The ID of package generated by this content submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		/// <summary>
		/// Release Notes for this ContentSubmission
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNotes { get; set; }
		
		/// <summary>
		/// The SVN repository used as the source of this content submission
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Repository { get; set; }
		
		/// <summary>
		/// The SVN revision used as the source of this content submission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Read Only. The UTC date and time the content submission was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmissionDate { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the user who submitted the content
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		/// <summary>
		/// Optional.  The version number assigned to this Content Submission and the resulting Package.
		///            If not provided, version shall be 1 if it is the first content submission for the 
		///            ContentDefinitionID otherwise it shall be the highest content submission version for the
		///            specified ContentDefinitionID incremented by 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_ContentSubmissionSharedBusinessEntitiesRelease_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesRelease[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Release class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesRelease
	{
		
		/// <summary>
		/// Build Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> BuildDate { get; set; }
		
		/// <summary>
		/// IDs of AUC Bundles associated with this Release.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] BundleIDs { get; set; }
		
		/// <summary>
		/// Release Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		/// <summary>
		/// Release ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReleaseID { get; set; }
		
		/// <summary>
		/// Release Number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNumber { get; set; }
		
		/// <summary>
		/// Visible
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_ContentSubmissionSharedBusinessEntitiesUserContentDefinition_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmissionSharedBusinessEntitiesUserContentDefinition[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Relationship indicating that a User can manage submissions for the Content
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesUserContentDefinition
	{
		
		/// <summary>
		/// The ID of the ContentDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the User to ContentDefinition relationship.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserContentDefinitionID { get; set; }
		
		/// <summary>
		/// The ID of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_DealerDBModelsDealer_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDBModelsDealer[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsDealer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingZip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Brands { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerStatusUpdateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Filler { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsValid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguagePreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionMapping { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleBrand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingStreet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingZip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Telephone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VATCode { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_DealerDBModelsDealersPerCountry_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDBModelsDealersPerCountry[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsDealersPerCountry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_DealerDBModelsLicense_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDBModelsLicense[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsLicense
	{
		
		/// <summary>
		/// True if license is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The date the license was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The date the license was deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeactivatedDate { get; set; }
		
		/// <summary>
		/// The type of license (e.g. EDT, EDT Lite)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DealerDBModelsLicenseLicenseActivationType> LicenseActivationType { get; set; }
		
		/// <summary>
		/// The LicenseID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseID { get; set; }
		
		/// <summary>
		/// The version of the license.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseVersion { get; set; }
		
		/// <summary>
		/// The date the license was refreshed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RefreshDate { get; set; }
		
		/// <summary>
		/// Information about the system which is licensed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SystemInfo { get; set; }
		
		/// <summary>
		/// The updated version of the license.  A value in this field indicates that the update has not been confirmed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedLicenseVersion { get; set; }
		
		/// <summary>
		/// The voucher code that generated the license.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealerDBModelsLicenseLicenseActivationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDTLite = 1,
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_DealerDBModelsVoucherHistory_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDBModelsVoucherHistory[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsVoucherHistory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ChangedDate { get; set; }
		
		/// <summary>
		/// Read-Only. The date the voucher was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The dealer code the voucher is assigned to.  Required for commercial vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// Read-Only. True if voucher has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The email address. Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The expiration date of the voucher. Required for Temporary Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// The id of the voucher history item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseTo { get; set; }
		
		/// <summary>
		/// Read-Only. The user that made the last modification to the voucher.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ModifiedBy { get; set; }
		
		/// <summary>
		/// The order number of a commercial license. Required for Commercial Vouchers. Not supported for other Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderNumber { get; set; }
		
		/// <summary>
		/// True if voucher has aleady been used.  False if the voucher has not been used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Punched { get; set; }
		
		/// <summary>
		/// Read-Only. The date the voucher was punched.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PunchedDate { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Purpose { get; set; }
		
		/// <summary>
		/// The type of voucher.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DealerDBModelsVoucherHistoryType> Type { get; set; }
		
		/// <summary>
		/// The voucher code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DealerDBModelsVoucherHistoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commercial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Internal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Temporary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RightToRepair = 3,
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_DealerDBModelsVoucher_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDBModelsVoucher[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A voucher for EDT activation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsVoucher
	{
		
		/// <summary>
		/// Read-Only. The date the voucher was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The dealer code the voucher is assigned to.  Required for commercial and right to repair vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// Read-Only. True if voucher has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Required for internal vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The expiration date of the voucher. Required for Temporary and Right to Repair Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseTo { get; set; }
		
		/// <summary>
		/// Read-Only. The user that made the last modification to the voucher.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ModifiedBy { get; set; }
		
		/// <summary>
		/// The order number of a license. Required for Commercial and Right To Repair Vouchers. Not supported for other Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderNumber { get; set; }
		
		/// <summary>
		/// True if voucher has aleady been used.  False if the voucher has not been used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Punched { get; set; }
		
		/// <summary>
		/// Read-Only. The date the voucher was punched.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PunchedDate { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers. Not supported for other Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Purpose { get; set; }
		
		/// <summary>
		/// The type of voucher. Commercial is the default if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DealerDBModelsVoucherHistoryType Type { get; set; }
		
		/// <summary>
		/// The voucher code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsAvailableUpdateGroupSubscription_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsAvailableUpdateGroupSubscription[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsAvailableUpdateGroupSubscription
	{
		
		/// <summary>
		/// The available subscriptions for this update group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsAvailableSubscription[] AvailableSubscriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsUpdateGroup UpdateGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsAvailableSubscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackageType PackageType { get; set; }
		
		/// <summary>
		/// The type of subscription supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<UpdateSystemModelsAvailableSubscriptionSubscriptionType> SubscriptionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPackageType
	{
		
		/// <summary>
		/// The inventory attribute (from the InventoryPackage) used to determine what version of this package type is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute { get; set; }
		
		/// <summary>
		/// The inventory category (from the InventoryPackage) used to determine what version of this package type is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		/// <summary>
		/// The description of the package type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional.  The icon to use for the PackageType, in base 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Icon { get; set; }
		
		/// <summary>
		/// The number of minutes to wait before requesting another inventory.  The default value is 1440 (24 hours).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InventoryFrequency { get; set; }
		
		/// <summary>
		/// The inventory package used to determine what version of this package type is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryPackage { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the description of the PackageType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedDescription { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the name of the PackageType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		/// <summary>
		/// The maximum number of "chained" delta packages to use when updating the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDeltaPackages { get; set; }
		
		/// <summary>
		/// Read Only. The package type id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateSystemModelsAvailableSubscriptionSubscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IncludeByDefault = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExcludeByDefault = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsUpdateGroup
	{
		
		/// <summary>
		/// The description of the update group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// The time in minutes between inventory checks. Default value is 1440 minutes (one day).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InventoryFrequency { get; set; }
		
		/// <summary>
		/// The Package ID of the package used for inventory
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryPackage { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the description of the update group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedDescription { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the name of the update group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		/// <summary>
		/// The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.
		/// Required
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public int Priority { get; set; }
		
		/// <summary>
		/// A field to return in the status report for this update group.
		///            Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportField { get; set; }
		
		/// <summary>
		/// The update type name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateType { get; set; }
		
		/// <summary>
		/// A field used for validation in the status report for this update group.
		///            Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ValidatingField { get; set; }
		
		/// <summary>
		/// The value to validate the ValidationField against.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ValueToValidate { get; set; }
		
		/// <summary>
		/// The version of the UpdateGroup, this value is incremented with each modification to a related Bundle or PackageType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsBundle_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsBundle[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsBundle
	{
		
		/// <summary>
		/// Default Value: false. During the creation of the Bundle, this field must be false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Read-Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BundleID { get; set; }
		
		/// <summary>
		/// The bundle number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BundleNumber { get; set; }
		
		/// <summary>
		/// The Bundle description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The update group this bundle belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateGroupID { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsClientStatus_UpdateSystemModelsPagedClientStatusMetadata_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsClientStatus[] Entities { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPagedClientStatusMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsClientStatus
	{
		
		/// <summary>
		/// The Client ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// The time of the client's last check-in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastCheckin { get; set; }
		
		/// <summary>
		/// The number of minutes that have passed since the last check-in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinutesElapsed { get; set; }
		
		/// <summary>
		/// The result for the client included in the UpdateGroup's report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportResult { get; set; }
		
		/// <summary>
		/// True if the result for the client matches what is expected for the UpdateGroup
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReportResultIsValid { get; set; }
		
		/// <summary>
		/// The value for the client included in the UpdateGroup's report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportValue { get; set; }
		
		/// <summary>
		/// A descriptive name for the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPagedClientStatusMetadata
	{
		
		/// <summary>
		/// The number of entities this paged response is limited to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		/// <summary>
		/// The number of entities prior to this page of items.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		/// <summary>
		/// The label for data contained in ClientStatus.ReportResults
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportResultExpected { get; set; }
		
		/// <summary>
		/// The label for data contained in ClientStatus.ReportResults
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportResultLabel { get; set; }
		
		/// <summary>
		/// The label for data contained in ClientStatus.ReportValue
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportValueLabel { get; set; }
		
		/// <summary>
		/// The total number of entities matching the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalCount { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsClient_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsClient[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsClient
	{
		
		/// <summary>
		/// Read Only. The id of the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// Read Only. The time of the client's last checkin with the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastCheckin { get; set; }
		
		/// <summary>
		/// A description of the client that can be used for easy reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsPackageStatusSummary_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackageStatusSummary[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPackageStatusSummary
	{
		
		/// <summary>
		/// The average time required to complete the download
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AverageDownloadTime { get; set; }
		
		/// <summary>
		/// The average time required to complete the install
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AverageInstallTime { get; set; }
		
		/// <summary>
		/// The number of clients that have completed the download
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Downloaded { get; set; }
		
		/// <summary>
		/// The result of the install
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Error { get; set; }
		
		/// <summary>
		/// The number of clients that have completed the install
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Installed { get; set; }
		
		/// <summary>
		/// The name of the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Package { get; set; }
		
		/// <summary>
		/// The ID of the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		/// <summary>
		/// The individual package status items
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackageStatus[] PackageStatusItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPackageStatus
	{
		
		/// <summary>
		/// The id of the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// The client's tag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// The amount of time spent downloading
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DownloadTime { get; set; }
		
		/// <summary>
		/// The number of bytes downloaded
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Downloaded { get; set; }
		
		/// <summary>
		/// The time the package completed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallCompleted { get; set; }
		
		/// <summary>
		/// The package result
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallResult { get; set; }
		
		/// <summary>
		/// The time the package was started
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallStarted { get; set; }
		
		/// <summary>
		/// The amount of time required to run the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallTime { get; set; }
		
		/// <summary>
		/// The download completion percentage
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Percentage { get; set; }
		
		/// <summary>
		/// The total size of the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Size { get; set; }
		
		/// <summary>
		/// The time the status was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsPackageTypeIDtoBundle_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackageTypeIDtoBundle[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPackageTypeIDtoBundle
	{
		
		/// <summary>
		/// The bundle to include the package in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BundleID { get; set; }
		
		/// <summary>
		/// The package type id of the package to include
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// The package version of the package to include
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int PackageVersion { get; set; }
		
		/// <summary>
		/// The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.
		/// Required
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public int Priority { get; set; }
		
		/// <summary>
		/// Optional. The type of subscription supported.  The default subscription type is Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsAvailableSubscriptionSubscriptionType SubscriptionType { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsPackageType_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackageType[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsPackage_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackage[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPackage
	{
		
		/// <summary>
		/// Value is true if package should run automatically. Default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Autorun { get; set; }
		
		/// <summary>
		/// The CRC used to validate the download.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CRC { get; set; }
		
		/// <summary>
		/// The package description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the name of the Package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		/// <summary>
		/// Notes about the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Read Only. The package ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		/// <summary>
		/// The id of the package type this package belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// For delta packages, the previous version required.  For non-delta packages, the Previous version is 0.  Default value is 0.
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> PreviousVersion { get; set; }
		
		/// <summary>
		/// The date the package was released
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ReleaseDate { get; set; }
		
		/// <summary>
		/// True if the package is released.  Default value is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Released { get; set; }
		
		/// <summary>
		/// True to remove the package after successful execution.  Default value is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveOnSuccess { get; set; }
		
		/// <summary>
		/// The size of the file at the specified URL.  If a size is not supplied at creation time, the size will be determined by the response from the URL.
		///            If the size provided does not match the size in the response from the URL an error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// The command line arguments for the package.  Default value is an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Switches { get; set; }
		
		/// <summary>
		/// The Url to download the package from.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// The version.
		/// Required
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public int Version { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsPriorityPackage_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPriorityPackage[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPriorityPackage
	{
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		///            Value is true if package should run automatically. Default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Autorun { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CRC { get; set; }
		
		/// <summary>
		/// The ID of the client to receive the priority package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// The ID of the package to push as a priority package.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PreviousVersion { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the priority package.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PriorityPackageID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		///            The date the package was released
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Released { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveOnSuccess { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// The command line arguments for the priority package.  Default value is an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Switches { get; set; }
		
		/// <summary>
		/// Read Only. The timestamp of the priority package.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsUpdateGroupClientRelationship_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsUpdateGroupClientRelationship[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsUpdateGroupClientRelationship
	{
		
		/// <summary>
		/// The subscription status.  The status is active by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Read Only after creation. The client id of the subscriber.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// ReadOnly. The timestamp of the last checkin.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastCheckin { get; set; }
		
		/// <summary>
		/// Read Only after creation. The relationship id.  A relationship id will be assigned if not provided on creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipID { get; set; }
		
		/// <summary>
		/// Read Only after creation. The update group to subscribe to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateGroupID { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsUpdateGroupSubscription_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsUpdateGroupSubscription[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsUpdateGroupSubscription
	{
		
		/// <summary>
		/// The ClientID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// True to receive content of type indicated by PackageTypeID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Include { get; set; }
		
		/// <summary>
		/// The PackageType to set subscription status for
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// The Update Group this subscription is relevant for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateGroupID { get; set; }
		
		/// <summary>
		/// The Update Group Subscription ID.  This ID will be automatically assigned when creating an Update Group Subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UpdateGroupSubscriptionID { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIPagedResponse_UpdateSystemModelsUpdateGroup_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsUpdateGroup[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public APIPagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizationCodesSharedModelsCodeValidationModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsValid { get; set; }
	}
	
	/// <summary>
	/// IActivityRun
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedInterfacesIActivityRun
	{
		
		/// <summary>
		/// ActivityRunID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityRunID { get; set; }
		
		/// <summary>
		/// EndDate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// JobActivityID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobActivityID { get; set; }
		
		/// <summary>
		/// JobRunID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		/// <summary>
		/// Parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedInterfacesIParameterValue[] Parameters { get; set; }
		
		/// <summary>
		/// StartDate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Declares members of objects that communicate the progress of an 
		///            asynchronous activity run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedInterfacesIActivityRunStatus Status { get; set; }
		
		/// <summary>
		/// Steps
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedInterfacesIActivityStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// Declares members that must be implemented by parameter value objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedInterfacesIParameterValue
	{
		
		/// <summary>
		/// Gets or sets a value indicating whether the parameter value is an 
		///            input to the build part or an output from the build part.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameterValueDirection Direction { get; set; }
		
		/// <summary>
		/// Gets or sets the name of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the value of the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Declares members of objects that communicate the progress of an 
	///            asynchronous activity run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedInterfacesIActivityRunStatus
	{
		
		/// <summary>
		/// Gets or sets the number of the step the activity is currently running.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentStep { get; set; }
		
		/// <summary>
		/// Gets or sets the status of the activity run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityRunStatusStatus Status { get; set; }
		
		/// <summary>
		/// Gets or sets a measurement of the current progress of the current step.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepProgress { get; set; }
		
		/// <summary>
		/// Gets or sets a description of the current status of the currently 
		///            running step.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StepStatus { get; set; }
	}
	
	/// <summary>
	/// IActivityStep
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedInterfacesIActivityStep
	{
		
		/// <summary>
		/// ActivityID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityID { get; set; }
		
		/// <summary>
		/// ActivityStepID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityStepID { get; set; }
		
		/// <summary>
		/// Implementation ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImplementationID { get; set; }
		
		/// <summary>
		/// ParameterMappings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedInterfacesIParameterMapping[] ParameterMappings { get; set; }
		
		/// <summary>
		/// run order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunOrder { get; set; }
		
		/// <summary>
		/// step id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepID { get; set; }
		
		/// <summary>
		/// steo name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StepName { get; set; }
		
		/// <summary>
		/// UseConfig
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UseConfig { get; set; }
	}
	
	/// <summary>
	/// IParameterMapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedInterfacesIParameterMapping
	{
		
		/// <summary>
		/// name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Source
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		/// <summary>
		/// SourceType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOParameterMappingSourceType SourceType { get; set; }
	}
	
	/// <summary>
	/// interface of JobRun
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildSystemSharedInterfacesIJobRun
	{
		
		/// <summary>
		/// ActivityRuns
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedInterfacesIActivityRun[] ActivityRuns { get; set; }
		
		/// <summary>
		/// end date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// job id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// JobRunID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		/// <summary>
		/// Parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedInterfacesIParameterValue[] Parameters { get; set; }
		
		/// <summary>
		/// Start Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystemSharedDTOActivityRunStatusStatus Status { get; set; }
	}
	
	/// <summary>
	/// A type of content available for submission
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentSubmissionSharedBusinessEntitiesContentSubmissionType
	{
		
		/// <summary>
		/// A template for the Attribute from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttributeTemplate { get; set; }
		
		/// <summary>
		/// The ID of the Azure DevOps Build Definition for which to create a Build. Either 'BuildDefinitionID' or 'JobID' is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BuildDefinitionID { get; set; }
		
		/// <summary>
		/// A template for the category from which to read the version of the package installed. The following placeholders are valid: {ContentDefinitionType}, {ContentDefinitionID}, {ContentDefinitionName}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CategoryTemplate { get; set; }
		
		/// <summary>
		/// A description for the Content Submission Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Indicates whether this submission type is available to be used
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The ID of the Content Submission Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// The ID of the Inventory Package from which to read the version of the package installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryPackageID { get; set; }
		
		/// <summary>
		/// The ID of the JobDefinition for which to initiate a Job. A value of '0' will cause a submission to fail. Either 'BuildDefinitionID' or 'JobID' is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// The Name of the Content Submission Type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A description of how release notes for this Content Submission Type are used
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNotesDescription { get; set; }
	}
	
	/// <summary>
	/// Registration for an EDT Lite
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsEDTLiteRegistration
	{
		
		/// <summary>
		/// The dealer code with which the EDT Lite was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// The date at which the content of the EDT Lite expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		/// <summary>
		/// The identifier for the EDT Lite.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceID { get; set; }
		
		/// <summary>
		/// The voucher code with which the EDT Lite was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsLicenseActivation
	{
		
		/// <summary>
		/// The license key in base64 format.  This is only provided when the LicenseData is a new license.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// The license data in base64 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsLicenseActivationConfirm
	{
		
		/// <summary>
		/// The license version to confirm
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LicenseVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsLicenseActivationCreate
	{
		
		/// <summary>
		/// The Dealer Code of the dealer activating the license
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// The type of license to create (e.g. EDT, EDT Lite)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DealerDBModelsLicenseLicenseActivationType LicenseActivationType { get; set; }
		
		/// <summary>
		/// The dealer's postal code (zip code)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Information about  the system being activated
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SystemInfo { get; set; }
		
		/// <summary>
		/// The Voucher Code to use for activation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DealerDBModelsLicenseActivationUpdate
	{
		
		/// <summary>
		/// The license version to update
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LicenseVersion { get; set; }
		
		/// <summary>
		/// Information about  the system being activated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SystemInfo { get; set; }
	}
	
	/// <summary>
	/// Statistics for a translation set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlobalResourcesSharedModelsTranslationSetStatistics
	{
		
		/// <summary>
		/// The IDs of languages for which translaions in this translation set have been requested
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] LanguageIDs { get; set; }
		
		/// <summary>
		/// The count of unique string definitions contained in this translation set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StringCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsAttributeValue
	{
		
		/// <summary>
		/// The attribute name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Read Only. The timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		/// <summary>
		/// The value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsCategory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsAttributeValue[] Values { get; set; }
		
		/// <summary>
		/// The category name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsCheckinResult
	{
		
		/// <summary>
		/// The packages for the client to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackage[] Packages { get; set; }
		
		/// <summary>
		/// The package ids for the client to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] RemovePackages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsClientInfo
	{
		
		/// <summary>
		/// The id of the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// The packages
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsPackageReport[] Package { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsPackageReport
	{
		
		/// <summary>
		/// The package report's categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsCategory[] Categories { get; set; }
		
		/// <summary>
		/// Read Only. The package description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageDescription { get; set; }
		
		/// <summary>
		/// The PackageID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
	}
	
	/// <summary>
	/// Model that retrieves the data for UpdateMetrics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsUpdateMetricsData
	{
		
		/// <summary>
		/// Active version (bundle number) of update type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActiveVersion { get; set; }
		
		/// <summary>
		/// Generic collection that is of type ActiveVersionByClientRecord
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsUpdateMetricsDataActiveVersionByClientRecord[] ActiveVersionByClient { get; set; }
		
		/// <summary>
		/// Generic collection that is of type CurrentStateByClientRecord
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsUpdateMetricsDataCurrentStateByClientRecord[] CurrentStateByClient { get; set; }
		
		/// <summary>
		/// Date that has been configured to only show the most recent clients with a cut off date. (Ex. year from current date)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDate { get; set; }
		
		/// <summary>
		/// Data was refreshed at this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DataRefreshed { get; set; }
		
		/// <summary>
		/// Sum of clients represented
		///            Filtered by updateType and lastCheckedInDate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilteredClientCount { get; set; }
		
		/// <summary>
		/// Generic collection that is of type PackageErrorsRecord
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystemModelsUpdateMetricsDataPackageErrorsRecord[] PackageErrors { get; set; }
		
		/// <summary>
		/// Total clients we have ever serviced
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalClientCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsUpdateMetricsDataActiveVersionByClientRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BundleNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClientCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsUpdateMetricsDataCurrentStateByClientRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClientCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemModelsUpdateMetricsDataPackageErrorsRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClientCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LongDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShortDescription { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// AftermarketServices_GetCerts api/v2/AftermarketServices/Certificates
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> AftermarketServices_GetCertsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Certificates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate or Deactivate an ECU, or Report an ECU as Damaged.
		/// No Documentation Found.
		/// AftermarketServices_PutECU api/v2/AftermarketServices/ECUs/{serialNumber}
		/// </summary>
		/// <param name="serialNumber">The serial number of the ECU.</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <param name="requestBody">The ecu to modify.</param>
		/// <returns>OK</returns>
		public async Task<AGCOPowerServicesModelsECU> AftermarketServices_PutECUAsync(string serialNumber, string EDTInstanceId, AGCOPowerServicesModelsECU requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/ECUs/"+ (serialNumber==null? "" : System.Uri.EscapeDataString(serialNumber))+"&EDTInstanceId=" + (EDTInstanceId==null? "" : System.Uri.EscapeDataString(EDTInstanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AGCOPowerServicesModelsECU>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get injector codes given engine.
		/// No Documentation Found.
		/// AftermarketServices_GetEngineIQACodes api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes
		/// </summary>
		/// <param name="serialNumber">The serial number of the engine.</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <returns>OK</returns>
		public async Task<string[]> AftermarketServices_GetEngineIQACodesAsync(string serialNumber, string EDTInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Engines/"+ (serialNumber==null? "" : System.Uri.EscapeDataString(serialNumber))+"/IQACodes&EDTInstanceId=" + (EDTInstanceId==null? "" : System.Uri.EscapeDataString(EDTInstanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report the IQA codes used by an engine
		/// No Documentation Found.
		/// AftermarketServices_PutIQACodes api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes
		/// </summary>
		/// <param name="serialNumber">The serial number of the Engine</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <param name="requestBody">A string array of IQA codes in physical order</param>
		/// <returns>OK</returns>
		public async Task<bool> AftermarketServices_PutIQACodesAsync(string serialNumber, string EDTInstanceId, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Engines/"+ (serialNumber==null? "" : System.Uri.EscapeDataString(serialNumber))+"/IQACodes&EDTInstanceId=" + (EDTInstanceId==null? "" : System.Uri.EscapeDataString(EDTInstanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get production calibration data for given engine.
		/// No Documentation Found.
		/// AftermarketServices_GetProductionData api/v2/AftermarketServices/Engines/{serialNumber}/ProductionData
		/// </summary>
		/// <param name="serialNumber">The serial number of the engine.</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <returns>OK</returns>
		public async Task<AGCOPowerServicesModelsProductionData[]> AftermarketServices_GetProductionDataAsync(string serialNumber, string EDTInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Engines/"+ (serialNumber==null? "" : System.Uri.EscapeDataString(serialNumber))+"/ProductionData&EDTInstanceId=" + (EDTInstanceId==null? "" : System.Uri.EscapeDataString(EDTInstanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AGCOPowerServicesModelsProductionData[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check whether there is connectivity to AGCO Power Web Services
		/// No Documentation Found.
		/// AftermarketServices_GetConnectionStatus api/v2/AftermarketServices/Hello
		/// </summary>
		/// <returns>OK</returns>
		public async Task<bool> AftermarketServices_GetConnectionStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Hello";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the status of an EDT Kit Registration with AGCO Power Web Services
		/// No Documentation Found.
		/// AftermarketServices_GetUserStatus api/v2/AftermarketServices/UserStatuses
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AGCOPowerServicesModelsUserStatus> AftermarketServices_GetUserStatusAsync(string voucherCode, string dealerCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/UserStatuses?voucherCode=" + (voucherCode==null? "" : System.Uri.EscapeDataString(voucherCode))+"&dealerCode=" + (dealerCode==null? "" : System.Uri.EscapeDataString(dealerCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AGCOPowerServicesModelsUserStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the status of an EDT Kit Registration with AGCO Power Web Services
		/// No Documentation Found.
		/// AftermarketServices_UpdateUserStatus api/v2/AftermarketServices/UserStatuses
		/// </summary>
		/// <returns>OK</returns>
		public async Task<bool> AftermarketServices_UpdateUserStatusAsync(AGCOPowerServicesModelsUserStatus requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/UserStatuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Manage API tokens.
		/// No Documentation Found.
		/// Authentication_PutManageTokens api/v2/AuthenticatedUsers/{UserID}/Tokens
		/// </summary>
		/// <param name="requestBody">The options for token management.</param>
		public async Task Authentication_PutManageTokensAsync(int UserID, APIModelsTokenOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthenticatedUsers/"+UserID+"/Tokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authenticate a user.
		/// No Documentation Found.
		/// Authentication_Default api/v2/Authentication
		/// </summary>
		/// <param name="requestBody">Create a user account.</param>
		/// <returns>OK</returns>
		public async Task<APIModelsAuthenticatedUser> Authentication_DefaultAsync(APIModelsCredentials requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIModelsAuthenticatedUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Acknowledges the connection to the API
		/// No Documentation Found.
		/// Authentication_IsAlive api/v2/Authentication/IsAlive
		/// </summary>
		public async Task Authentication_IsAliveAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication/IsAlive";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request a password reset.
		/// No Documentation Found.
		/// Authentication_RequestPasswordReset api/v2/Authentication/RequestPasswordReset
		/// </summary>
		/// <param name="requestBody">The password reset request.</param>
		public async Task Authentication_RequestPasswordResetAsync(APIModelsPasswordResetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication/RequestPasswordReset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reset a password
		/// No Documentation Found.
		/// Authentication_ResetPasword api/v2/Authentication/ResetPasword
		/// </summary>
		/// <param name="requestBody">The password reset detail.</param>
		public async Task Authentication_ResetPaswordAsync(APIModelsPasswordReset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication/ResetPasword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get authorization categories.
		/// No Documentation Found.
		/// AuthorizationCategories_Get api/v2/AuthorizationCategories
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="userID">Optional. Filter by categories visible to the provided user with the provided userID.</param>
		/// <param name="definitionID">Optional. Filter by categories containing a definition with the provided ID.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_AuthorizationCodesSharedModelsCategory_> AuthorizationCategories_GetAsync(int limit, int offset, int userID, string definitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCategories?limit="+limit+"&offset="+offset+"&userID="+userID+"&definitionID=" + (definitionID==null? "" : System.Uri.EscapeDataString(definitionID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_AuthorizationCodesSharedModelsCategory_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an authorization category.
		/// No Documentation Found.
		/// AuthorizationCategories_Post api/v2/AuthorizationCategories
		/// </summary>
		/// <param name="requestBody">An authorization category.</param>
		/// <returns>OK</returns>
		public async Task<string> AuthorizationCategories_PostAsync(AuthorizationCodesSharedModelsCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a report of access that users have to Authorization Categories.
		/// No Documentation Found.
		/// AuthorizationCategories_GetUsers api/v2/AuthorizationCategories/Users
		/// </summary>
		/// <param name="limit">Optional. Defaults to 10.</param>
		/// <param name="offset">Optional. Defaults to 0.</param>
		/// <param name="userIDs">Optional. Includes only users with IDs on the provided comma-separated list.</param>
		/// <param name="categoryIDs">Optional. Includes only users with categories with IDs on the provided comma-separated list.</param>
		/// <param name="includeCategories">If true, include full Authorization Category detail. Defaults to false.</param>
		/// <param name="includeUsers">If true, include full User detail. Defaults to false.</param>
		/// <param name="userSearch">Optional. Includes only users with a Name, Username, or Email containing the provided value.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_AuthorizationCodesSharedModelsCategoryUserReport_> AuthorizationCategories_GetUsersAsync(int limit, int offset, string userIDs, string categoryIDs, bool includeCategories, bool includeUsers, string userSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCategories/Users?limit="+limit+"&offset="+offset+"&userIDs=" + (userIDs==null? "" : System.Uri.EscapeDataString(userIDs))+"&categoryIDs=" + (categoryIDs==null? "" : System.Uri.EscapeDataString(categoryIDs))+"&includeCategories="+includeCategories+"&includeUsers="+includeUsers+"&userSearch=" + (userSearch==null? "" : System.Uri.EscapeDataString(userSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_AuthorizationCodesSharedModelsCategoryUserReport_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an authorization category.
		/// No Documentation Found.
		/// AuthorizationCategories_Delete api/v2/AuthorizationCategories/{id}
		/// </summary>
		/// <param name="id">The ID of the authorization category.</param>
		public async Task AuthorizationCategories_DeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCategories/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an authorization category.
		/// No Documentation Found.
		/// AuthorizationCategories_Put api/v2/AuthorizationCategories/{id}
		/// </summary>
		/// <param name="requestBody">An authorization category.</param>
		public async Task AuthorizationCategories_PutAsync(string id, AuthorizationCodesSharedModelsCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCategories/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a category a user could see.
		/// No Documentation Found.
		/// AuthorizationCategories_RemoveUser api/v2/AuthorizationCategories/{id}/Users/{userID}
		/// </summary>
		public async Task AuthorizationCategories_RemoveUserAsync(string id, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCategories/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Users/"+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a category that a user can see.
		/// No Documentation Found.
		/// AuthorizationCategories_AddUser api/v2/AuthorizationCategories/{id}/Users/{userID}
		/// </summary>
		public async Task AuthorizationCategories_AddUserAsync(string id, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCategories/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Users/"+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get authorization code definitions.
		/// Additional searches: validationFields[Name]=true and dataFields[Name]=true. These can be used to search for authorization code definitions that have the specified data or validation fields.
		/// AuthorizationCodeDefinitions_GetAuthorizationCodeDefinition api/v2/AuthorizationCodeDefinitions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="name">Optional. If specified, filters definitions by name. Starting and ending wildcards (*) supported.</param>
		/// <param name="createdByUserID">Optional. If specified, filters definitions to those created by the given User ID.</param>
		/// <param name="deletedByUserID">Optional. If specified, filters definitions to those deleted by the given User ID.</param>
		/// <param name="includeDeleted">Optional. Whether to include deleted definitions. 'False' by default.</param>
		/// <param name="categoryID">Optional. If specified, filters definitions with the designated categoryID.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationCodeDefinition_> AuthorizationCodeDefinitions_GetAuthorizationCodeDefinitionAsync(int limit, int offset, string name, int createdByUserID, int deletedByUserID, bool includeDeleted, string categoryID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&createdByUserID="+createdByUserID+"&deletedByUserID="+deletedByUserID+"&includeDeleted="+includeDeleted+"&categoryID=" + (categoryID==null? "" : System.Uri.EscapeDataString(categoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationCodeDefinition_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an authorization code definition.
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_PostAuthorizationCodeDefinition api/v2/AuthorizationCodeDefinitions
		/// </summary>
		/// <param name="requestBody">An authorization code definition.</param>
		/// <returns>OK</returns>
		public async Task<string> AuthorizationCodeDefinitions_PostAuthorizationCodeDefinitionAsync(AuthorizationCodesSharedModelsAuthorizationCodeDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the category from the authorization code definition.
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_RemoveCategoryFromDefinition api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}
		/// </summary>
		/// <param name="categoryID">A category ID, as a GUID.</param>
		public async Task AuthorizationCodeDefinitions_RemoveCategoryFromDefinitionAsync(string ID, string categoryID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/Categories/"+ (categoryID==null? "" : System.Uri.EscapeDataString(categoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a category to an authorizationCodeDefintion.
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_AddCategoryToDefinition api/v2/AuthorizationCodeDefinitions/{ID}/Categories/{categoryID}
		/// </summary>
		/// <param name="categoryID">A category ID, as a GUID.</param>
		public async Task AuthorizationCodeDefinitions_AddCategoryToDefinitionAsync(string ID, string categoryID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/Categories/"+ (categoryID==null? "" : System.Uri.EscapeDataString(categoryID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable an authorization code definition
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_DeleteAuthorizationCodeDefinition api/v2/AuthorizationCodeDefinitions/{id}
		/// </summary>
		/// <param name="id">The ID of the authorization code definition.</param>
		public async Task AuthorizationCodeDefinitions_DeleteAuthorizationCodeDefinitionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an authorization code definition by its ID
		/// No Documentation Found.
		/// AuthorizationCodeDefinitionsGetById api/v2/AuthorizationCodeDefinitions/{id}
		/// </summary>
		/// <param name="id">The ID of the authorization code definition.</param>
		/// <returns>OK</returns>
		public async Task<AuthorizationCodesSharedModelsAuthorizationCodeDefinition> AuthorizationCodeDefinitionsGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationCodesSharedModelsAuthorizationCodeDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an authorization code definition
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_PutAuthorizationCodeDefinition api/v2/AuthorizationCodeDefinitions/{id}
		/// </summary>
		/// <param name="id">The ID of the authorization code definition.</param>
		/// <param name="requestBody">An authorization code definition.</param>
		public async Task AuthorizationCodeDefinitions_PutAuthorizationCodeDefinitionAsync(string id, AuthorizationCodesSharedModelsAuthorizationCodeDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get authorization codes.
		/// Additional searches: validationParameters[Name]=Value and dataParameters[Name]=Value. These can be used to search for authorization codes that have been generated using specified values for data or validation parameters.
		/// AuthorizationCodes_GetAuthorizationCodes api/v2/AuthorizationCodes
		/// </summary>
		/// <param name="code">Optional. If provided, searches for entities with the provided authorization code.</param>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="definitionID">Optional. If specified, filters codes by definition id.</param>
		/// <param name="createdByUserID">Optional. If specified, filters codes to those created by the given User ID.</param>
		/// <param name="deletedByUserID">Optional. If specified, filters codes to those deleted by the given User ID.</param>
		/// <param name="includeDeleted">Optional. Whether to include deleted codes. 'False' by default.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationCode_> AuthorizationCodes_GetAuthorizationCodesAsync(string code, int limit, int offset, string definitionID, int createdByUserID, int deletedByUserID, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes?code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&limit="+limit+"&offset="+offset+"&definitionID=" + (definitionID==null? "" : System.Uri.EscapeDataString(definitionID))+"&createdByUserID="+createdByUserID+"&deletedByUserID="+deletedByUserID+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationCode_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates an authorization code using the provided definition and parameters.
		/// No Documentation Found.
		/// AuthorizationCodes_PostAuthorizationCode api/v2/AuthorizationCodes
		/// </summary>
		/// <param name="requestBody">The model from which to generate an authorization code.</param>
		/// <returns>OK</returns>
		public async Task<int> AuthorizationCodes_PostAuthorizationCodeAsync(AuthorizationCodesSharedModelsAuthorizationCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Hide an authorization code.
		/// No Documentation Found.
		/// AuthorizationCodes_DeleteAuthorizationCode api/v2/AuthorizationCodes/{id}
		/// </summary>
		/// <param name="id">The id of the authorization code.</param>
		public async Task AuthorizationCodes_DeleteAuthorizationCodeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an authorization code by its ID.
		/// No Documentation Found.
		/// AuthorizationCodes_GetAuthorizationCode api/v2/AuthorizationCodes/{id}
		/// </summary>
		/// <param name="id">The id of the authorization code.</param>
		/// <returns>OK</returns>
		public async Task<AuthorizationCodesSharedModelsAuthorizationCode> AuthorizationCodes_GetAuthorizationCodeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationCodesSharedModelsAuthorizationCode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an authorization code.
		/// No Documentation Found.
		/// AuthorizationCodes_PutAuthorizationCode api/v2/AuthorizationCodes/{id}
		/// </summary>
		/// <param name="id">The id of the authorization code.</param>
		/// <param name="requestBody">The model from which to update an authorization code.</param>
		public async Task AuthorizationCodes_PutAuthorizationCodeAsync(int id, AuthorizationCodesSharedModelsAuthorizationCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get contact information for an authorization code.
		/// No Documentation Found.
		/// AuthorizationCodes_GetContactInformation api/v2/AuthorizationCodes/{id}/ContactInformation
		/// </summary>
		/// <param name="id">The id of the authorization code.</param>
		/// <returns>OK</returns>
		public async Task<AuthorizationCodesSharedModelsAuthorizationContactInformation> AuthorizationCodes_GetContactInformationAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id+"/ContactInformation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationCodesSharedModelsAuthorizationContactInformation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// AuthorizationCodes_ValidateAuthorizationCode api/v2/AuthorizationCodes/{id}/Validate
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AuthorizationCodesSharedModelsCodeValidationModel> AuthorizationCodes_ValidateAuthorizationCodeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id+"/Validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizationCodesSharedModelsCodeValidationModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get contact information for authorization codes.
		/// No Documentation Found.
		/// AuthorizationContactInformation_Get api/v2/AuthorizationContactInformation
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="authorizationCode">Optional. Search by authorization code.</param>
		/// <param name="afterDate">Optional. Include only data for authorization codes created after a provided date.</param>
		/// <param name="beforeDate">Optional. Include only data for authorization codes created before a provided date.</param>
		/// <param name="dealerCode">Optional. Search by dealer code.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationContactInformation_> AuthorizationContactInformation_GetAsync(int limit, int offset, string authorizationCode, System.DateTimeOffset afterDate, System.DateTimeOffset beforeDate, string dealerCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationContactInformation?limit="+limit+"&offset="+offset+"&authorizationCode=" + (authorizationCode==null? "" : System.Uri.EscapeDataString(authorizationCode))+"&afterDate=" + afterDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&beforeDate=" + beforeDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&dealerCode=" + (dealerCode==null? "" : System.Uri.EscapeDataString(dealerCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_AuthorizationCodesSharedModelsAuthorizationContactInformation_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add contact information for authorization code.
		/// No Documentation Found.
		/// AuthorizationContactInformation_Post api/v2/AuthorizationContactInformation
		/// </summary>
		/// <param name="requestBody">A contact information.</param>
		/// <returns>OK</returns>
		public async Task<int> AuthorizationContactInformation_PostAsync(AuthorizationCodesSharedModelsAuthorizationContactInformation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationContactInformation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Brands.
		/// No Documentation Found.
		/// Brands_Brands api/v2/Brands
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Brands_BrandsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Brands";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of bundles.
		/// No Documentation Found.
		/// Bundles_GetBundles api/v2/Bundles
		/// </summary>
		/// <param name="UpdateGroupID">Optional. Filter by UpdateGroup ID.</param>
		/// <param name="Active">Optional. Filter by active status.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="BundleNumber">Optional. If provided, filters by BundleNumber.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsBundle_> Bundles_GetBundlesAsync(string UpdateGroupID, bool Active, int limit, int offset, int BundleNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles?UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&Active="+Active+"&limit="+limit+"&offset="+offset+"&BundleNumber="+BundleNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsBundle_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Bundle to the Update System.
		/// No Documentation Found.
		/// Bundles_PostBundle api/v2/Bundles
		/// </summary>
		/// <param name="requestBody">The bundle to add</param>
		/// <returns>OK</returns>
		public async Task<string> Bundles_PostBundleAsync(UpdateSystemModelsBundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Bundle.
		/// No Documentation Found.
		/// Bundles_DeleteBundle api/v2/Bundles/{ID}
		/// </summary>
		/// <param name="ID">The Bundle ID to Delete</param>
		public async Task Bundles_DeleteBundleAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Bundle by ID.
		/// No Documentation Found.
		/// Bundles_GetBundle api/v2/Bundles/{ID}
		/// </summary>
		/// <param name="ID">The Bundle ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsBundle> Bundles_GetBundleAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsBundle>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify a Bundle in the Update System.
		/// No Documentation Found.
		/// Bundles_PutBundle api/v2/Bundles/{ID}
		/// </summary>
		/// <param name="ID">The unique ID of the Bundle</param>
		/// <param name="requestBody">The bundle to modify</param>
		public async Task Bundles_PutBundleAsync(string ID, UpdateSystemModelsBundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a List of Clients in the Update System.
		/// No Documentation Found.
		/// Clients_Get api/v2/Clients
		/// </summary>
		/// <param name="Tag">Optional. Filter clients by Tag. Wildcards are supported (*).</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsClient_> Clients_GetAsync(string Tag, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients?Tag=" + (Tag==null? "" : System.Uri.EscapeDataString(Tag))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsClient_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Cached Files installed on the client Machine.
		/// No Documentation Found.
		/// UpdateSystem_GetCachedFiles api/v2/Clients/{ClientID}/CachedFiles
		/// </summary>
		/// <param name="ClientID">The ClientID of the Client</param>
		/// <param name="Expired">Only Expired Files (true|false)</param>
		/// <returns>OK</returns>
		public async Task<string[]> UpdateSystem_GetCachedFilesAsync(string ClientID, bool Expired, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"/CachedFiles&Expired="+Expired;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the package reports for a client.
		/// No Documentation Found.
		/// PackageReports_Default api/v2/Clients/{ClientID}/PackageReports
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsPackageReport[]> PackageReports_DefaultAsync(string ClientID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"/PackageReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsPackageReport[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a package report
		/// No Documentation Found.
		/// PackageReportsPutByClientID api/v2/Clients/{ClientID}/PackageReports
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <param name="requestBody">The Package Report</param>
		public async Task PackageReportsPutByClientIDAsync(string ClientID, UpdateSystemModelsPackageReport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"/PackageReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Submit a batch of package reports
		/// No Documentation Found.
		/// PackageReports_Batch api/v2/Clients/{ClientID}/PackageReports/Batch
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <param name="requestBody">The Package Reports</param>
		public async Task PackageReports_BatchAsync(string ClientID, UpdateSystemModelsPackageReport[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"/PackageReports/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Client in the Update System.
		/// No Documentation Found.
		/// ClientsGetByID api/v2/Clients/{ID}
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsClient> ClientsGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsClient>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Client.
		/// No Documentation Found.
		/// Clients_Put api/v2/Clients/{ID}
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <param name="requestBody">Updated Client Object.</param>
		public async Task Clients_PutAsync(string ID, UpdateSystemModelsClient requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Client's Available Update Group Subscriptions
		/// No Documentation Found.
		/// Clients_GetAvailableSubscriptions api/v2/Clients/{ID}/AvailableUpdateGroupSubscriptions
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsAvailableUpdateGroupSubscription_> Clients_GetAvailableSubscriptionsAsync(string ID, string UpdateGroupID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/AvailableUpdateGroupSubscriptions&UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsAvailableUpdateGroupSubscription_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Client's Current Update Group Subscriptions
		/// No Documentation Found.
		/// Clients_GetSubscriptions api/v2/Clients/{ID}/UpdateGroupSubscriptions
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsUpdateGroupSubscription_> Clients_GetSubscriptionsAsync(string ID, string UpdateGroupID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/UpdateGroupSubscriptions&UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsUpdateGroupSubscription_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// ContentDefinitions_PutContentDefinitionAttributes api/v2/ContentDefinitionAttributes/Batch
		/// </summary>
		public async Task ContentDefinitions_PutContentDefinitionAttributesAsync(ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitionAttributes/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an Attribute from a ContentDefinition
		/// No Documentation Found.
		/// ContentDefinitions_DeleteContentDefinitionAttribute api/v2/ContentDefinitionAttributes/{contentDefinitionAttributeID}
		/// </summary>
		/// <param name="contentDefinitionAttributeID">The ID of the Attribute to remove.</param>
		public async Task ContentDefinitions_DeleteContentDefinitionAttributeAsync(int contentDefinitionAttributeID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitionAttributes/"+contentDefinitionAttributeID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Attribute for a ContentDefinition
		/// No Documentation Found.
		/// ContentDefinitions_PutContentDefinitionAttribute api/v2/ContentDefinitionAttributes/{contentDefinitionAttributeID}
		/// </summary>
		/// <param name="contentDefinitionAttributeID">The ID of the Attribute to update.</param>
		/// <param name="requestBody">The Attribute to update.</param>
		public async Task ContentDefinitions_PutContentDefinitionAttributeAsync(int contentDefinitionAttributeID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitionAttributes/"+contentDefinitionAttributeID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get ContentDefinitions
		/// Gets a collection of ContentDefinitions. When successful, the response is a PagedResponse of ContentDefinitions.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_GetContentDefinitions api/v2/ContentDefinitions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="userID">Optional. Filter by UserID.</param>
		/// <param name="includeAttributes">Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If '*', all Attributes are included.</param>
		/// <param name="name">Optional. Filter by Name. Supports beginning and ending wildcard (*).</param>
		/// <param name="typeID">Optional. Filter by TypeID.</param>
		/// <param name="packageTypeID">Optional. Filter by PackageTypeID.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentDefinition_> ContentDefinitions_GetContentDefinitionsAsync(int limit, int offset, int userID, string includeAttributes, string name, int typeID, string packageTypeID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions?limit="+limit+"&offset="+offset+"&userID="+userID+"&includeAttributes=" + (includeAttributes==null? "" : System.Uri.EscapeDataString(includeAttributes))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&typeID="+typeID+"&packageTypeID=" + (packageTypeID==null? "" : System.Uri.EscapeDataString(packageTypeID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentDefinition_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a ContentDefinition
		/// Creates a ContentDefinition.  The body of the POST is the ContentDefinition to create.
		/// The ContentDefinitionID will be assigned on creation of the Job.  When successful, the response
		/// is the JobID.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_PostContentDefinition api/v2/ContentDefinitions
		/// </summary>
		/// <param name="requestBody">The ContentDefinition to create.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentDefinitions_PostContentDefinitionAsync(ContentSubmissionSharedBusinessEntitiesContentDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a ContentDefinition
		/// Deletes an ContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// ContentDefinitions_DeleteContentDefinition api/v2/ContentDefinitions/{contentDefinitionID}
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition to delete</param>
		public async Task ContentDefinitions_DeleteContentDefinitionAsync(int contentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a ContentDefinition by ID
		/// Gets a ContentDefinition by ID. When successful, the response is the requested ContentDefinition.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_GetContentDefinition api/v2/ContentDefinitions/{contentDefinitionID}
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition to get.</param>
		/// <param name="includeAttributes">Names of Attributes to include when retrieving this definition. This should be a comma-separated list. If not provided, Attributes are not included. If '*', all Attributes are included.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmissionSharedBusinessEntitiesContentDefinition> ContentDefinitions_GetContentDefinitionAsync(int contentDefinitionID, string includeAttributes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID+"?includeAttributes=" + (includeAttributes==null? "" : System.Uri.EscapeDataString(includeAttributes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentSubmissionSharedBusinessEntitiesContentDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a ContentDefinition
		/// Updates a ContentDefinition.  The body of the PUT is the updated ContentDefinition.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_PutContentDefinition api/v2/ContentDefinitions/{contentDefinitionID}
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition to update</param>
		/// <param name="requestBody">The updated ContentDefinition</param>
		public async Task ContentDefinitions_PutContentDefinitionAsync(int contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Attributes for a ContentDefinition
		/// No Documentation Found.
		/// ContentDefinitions_GetContentDefinitionAttributes api/v2/ContentDefinitions/{contentDefinitionID}/Attributes
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition.</param>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="name">Optional. Filter the attributes by Name.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute_> ContentDefinitions_GetContentDefinitionAttributesAsync(int contentDefinitionID, int limit, int offset, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID+"/Attributes?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an Attribute to a ContentDefinition
		/// No Documentation Found.
		/// ContentDefinitions_PostContentDefinitionAttribute api/v2/ContentDefinitions/{contentDefinitionID}/Attributes
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition</param>
		/// <param name="requestBody">The Attribute to add.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentDefinitions_PostContentDefinitionAttributeAsync(int contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID+"/Attributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// ContentDefinitions_PostContentDefinitionAttributes api/v2/ContentDefinitions/{contentDefinitionID}/Attributes/Batch
		/// </summary>
		public async Task ContentDefinitions_PostContentDefinitionAttributesAsync(int contentDefinitionID, ContentSubmissionSharedBusinessEntitiesContentDefinitionAttribute[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID+"/Attributes/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get ContentReleaseVersion
		/// Gets a collection of ContentReleaseVersion. When successful, the response is a PagedResponse of ContentReleaseVersion.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentRelease_GetContentReleaseVersion api/v2/ContentReleases
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="deleted">Optional. Filter by deleted.</param>
		/// <param name="releaseID">Optional. Filter by releaseID.</param>
		/// <param name="userId">Optional. Filter by UserID.</param>
		/// <param name="contentDefinitionID">Optional. Filter by ContentDefinitionID.</param>
		/// <param name="version">Optional. Filter by Version.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentReleaseVersion_> ContentRelease_GetContentReleaseVersionAsync(int limit, int offset, bool deleted, int releaseID, int userId, int contentDefinitionID, int version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases?limit="+limit+"&offset="+offset+"&deleted="+deleted+"&releaseID="+releaseID+"&userId="+userId+"&contentDefinitionID="+contentDefinitionID+"&version="+version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentReleaseVersion_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a ContentReleaseVersion
		/// Creates a ContentReleaseVersion.  The body of the POST is the ContentReleaseVersion to create.
		/// The ContentReleaseId will be assigned on creation of the Job.  When successful, the response
		/// is the contentReleaseId.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentRelease_PostContentRelease api/v2/ContentReleases
		/// </summary>
		/// <param name="requestBody">The ContentReleaseVersion to create.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentRelease_PostContentReleaseAsync(ContentSubmissionSharedBusinessEntitiesContentReleaseVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a ContentReleaseVersion
		/// Deletes an ContentReleaseVersion. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// ContentRelease_DeleteContentReleaseVersionn api/v2/ContentReleases/{ContentReleaseId}
		/// </summary>
		/// <param name="ContentReleaseId">The ID of the ContentReleaseVersion to delete</param>
		public async Task ContentRelease_DeleteContentReleaseVersionnAsync(int ContentReleaseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases/"+ContentReleaseId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Content Release Version by ID
		/// Gets a ContentReleaseVersion by ID. When successful, the response is the requested ContentReleaseVersion.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentReleaseGetByContentReleaseId api/v2/ContentReleases/{ContentReleaseId}
		/// </summary>
		/// <param name="ContentReleaseId">The ID of the ContentReleaseVersion to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmissionSharedBusinessEntitiesContentReleaseVersion> ContentReleaseGetByContentReleaseIdAsync(int ContentReleaseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases/"+ContentReleaseId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentSubmissionSharedBusinessEntitiesContentReleaseVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a ContentReleaseVersion
		/// Updates a ContentReleaseVersion.  The body of the PUT is the updated ContentReleaseVersion.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentRelease_PutContentDefinition api/v2/ContentReleases/{ContentReleaseId}
		/// </summary>
		/// <param name="ContentReleaseId">The ID of the ContentReleaseVersion to update</param>
		/// <param name="requestBody">The updated ContentReleaseVersion</param>
		public async Task ContentRelease_PutContentDefinitionAsync(int ContentReleaseId, ContentSubmissionSharedBusinessEntitiesContentReleaseVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases/"+ContentReleaseId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// ContentSubmissions_PutContentSubmissionAttributes api/v2/ContentSubmissionAttributes/Batch
		/// </summary>
		public async Task ContentSubmissions_PutContentSubmissionAttributesAsync(ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionAttributes/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an Attribute from a ContentSubmission
		/// No Documentation Found.
		/// ContentSubmissions_DeleteContentSubmissionAttribute api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}
		/// </summary>
		/// <param name="contentSubmissionAttributeID">The ID of the Attribute to remove.</param>
		public async Task ContentSubmissions_DeleteContentSubmissionAttributeAsync(int contentSubmissionAttributeID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionAttributes/"+contentSubmissionAttributeID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Attribute for a ContentSubmission
		/// No Documentation Found.
		/// ContentSubmissions_PutContentSubmissionAttribute api/v2/ContentSubmissionAttributes/{contentSubmissionAttributeID}
		/// </summary>
		/// <param name="contentSubmissionAttributeID">The ID of the Attribute to update.</param>
		/// <param name="requestBody">The Attribute to update.</param>
		public async Task ContentSubmissions_PutContentSubmissionAttributeAsync(int contentSubmissionAttributeID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionAttributes/"+contentSubmissionAttributeID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns available Content Submission Types.
		/// No Documentation Found.
		/// ContentSubmissionTypes_GetContentSubmissionTypes api/v2/ContentSubmissionTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ContentSubmissionSharedBusinessEntitiesContentSubmissionType[]> ContentSubmissionTypes_GetContentSubmissionTypesAsync(bool enabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes?enabled="+enabled;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentSubmissionSharedBusinessEntitiesContentSubmissionType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Content Submission Type
		/// No Documentation Found.
		/// ContentSubmissionTypes_PostContentSubmissionType api/v2/ContentSubmissionTypes
		/// </summary>
		/// <param name="requestBody">The Content Submission Type</param>
		/// <returns>OK</returns>
		public async Task<int> ContentSubmissionTypes_PostContentSubmissionTypeAsync(ContentSubmissionSharedBusinessEntitiesContentSubmissionType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a Content Submission Type
		/// No Documentation Found.
		/// ContentSubmissionTypes_DeleteContentSubmissionType api/v2/ContentSubmissionTypes/{id}
		/// </summary>
		/// <param name="id">The ID of the Content Submission Type</param>
		public async Task ContentSubmissionTypes_DeleteContentSubmissionTypeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a Content Submission Type by its ID.
		/// No Documentation Found.
		/// ContentSubmissionTypes_GetContentSubmissionType api/v2/ContentSubmissionTypes/{id}
		/// </summary>
		/// <param name="id">The ID of the Content Submission Type</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmissionSharedBusinessEntitiesContentSubmissionType> ContentSubmissionTypes_GetContentSubmissionTypeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentSubmissionSharedBusinessEntitiesContentSubmissionType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Content Submission Type
		/// No Documentation Found.
		/// ContentSubmissionTypes_PutContentSubmissionType api/v2/ContentSubmissionTypes/{id}
		/// </summary>
		/// <param name="id">The ID of the Content Submission Type</param>
		/// <param name="requestBody">The Content Submission Type</param>
		public async Task ContentSubmissionTypes_PutContentSubmissionTypeAsync(int id, ContentSubmissionSharedBusinessEntitiesContentSubmissionType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get ContentSubmissions
		/// Gets a collection of ContentSubmissions. When successful, the response is a PagedResponse of ContentSubmissions. Additional searches: attributes[Name]=Value. This can be used to search for submissions that have the specified values for attributes. Beginning and ending wildcard (*) supported for value.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_GetContentSubmissions api/v2/ContentSubmissions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="userID">Optional. Filter by UserID.</param>
		/// <param name="contentDefinitionID">Optional. Filter by ContentDefinitionID</param>
		/// <param name="includeAttributes">Names of Attributes to include when retrieving this submission. This should be a comma-separated list. If not provided, Attributes are not included. If '*', all Attributes are included.</param>
		/// <param name="releaseID">Optional. Filter the submissions by whether they are part of the Release with the specified Release ID.</param>
		/// <param name="typeID">Optional. Filter submissions by their ContentDefinition's Type ID.</param>
		/// <param name="version">Optional. Filter submissions by their Version.</param>
		/// <param name="includeDefinition">Optional. If true, includes the ContentDefinition for each submission.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentSubmission_> ContentSubmissions_GetContentSubmissionsAsync(int limit, int offset, int userID, int contentDefinitionID, string includeAttributes, int releaseID, int typeID, int version, bool includeDefinition, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions?limit="+limit+"&offset="+offset+"&userID="+userID+"&contentDefinitionID="+contentDefinitionID+"&includeAttributes=" + (includeAttributes==null? "" : System.Uri.EscapeDataString(includeAttributes))+"&releaseID="+releaseID+"&typeID="+typeID+"&version="+version+"&includeDefinition="+includeDefinition;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentSubmission_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a ContentSubmission
		/// Creates a ContentSubmission.  The body of the POST is the ContentSubmission to create.
		/// The ContentSubmissionID will be assigned on creation of the Job.  When successful, the response
		/// is the ContentSubmissionID.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_PostContentSubmission api/v2/ContentSubmissions
		/// </summary>
		/// <param name="requestBody">The ContentSubmission to create.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentSubmissions_PostContentSubmissionAsync(ContentSubmissionSharedBusinessEntitiesContentSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a ContentSubmission
		/// Deletes an ContentSubmission. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// ContentSubmissions_DeleteContentSubmission api/v2/ContentSubmissions/{contentSubmissionID}
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission to delete</param>
		public async Task ContentSubmissions_DeleteContentSubmissionAsync(int contentSubmissionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a ContentSubmission by ID
		/// Gets a ContentSubmission by ID. When successful, the response is the requested ContentSubmission.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_GetContentSubmission api/v2/ContentSubmissions/{contentSubmissionID}
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission to get.</param>
		/// <param name="includeAttributes">Names of Attributes to include when retrieving this submission. This should be a comma-separated list.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmissionSharedBusinessEntitiesContentSubmission> ContentSubmissions_GetContentSubmissionAsync(int contentSubmissionID, string includeAttributes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID+"?includeAttributes=" + (includeAttributes==null? "" : System.Uri.EscapeDataString(includeAttributes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentSubmissionSharedBusinessEntitiesContentSubmission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a ContentSubmission
		/// Updates a ContentSubmission.  The body of the PUT is the updated ContentSubmission.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_PutContentSubmission api/v2/ContentSubmissions/{contentSubmissionID}
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission to update</param>
		/// <param name="requestBody">The updated ContentSubmission</param>
		public async Task ContentSubmissions_PutContentSubmissionAsync(int contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Attributes for a ContentSubmission
		/// No Documentation Found.
		/// ContentSubmissions_GetContentSubmissionAttributes api/v2/ContentSubmissions/{contentSubmissionID}/Attributes
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission.</param>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="name">Optional. Filter the attributes by Name.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute_> ContentSubmissions_GetContentSubmissionAttributesAsync(int contentSubmissionID, int limit, int offset, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID+"/Attributes?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an Attribute to a ContentSubmission
		/// No Documentation Found.
		/// ContentSubmissions_PostContentSubmissionAttribute api/v2/ContentSubmissions/{contentSubmissionID}/Attributes
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission</param>
		/// <param name="requestBody">The Attribute to add.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentSubmissions_PostContentSubmissionAttributeAsync(int contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID+"/Attributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// ContentSubmissions_PostContentSubmissionAttributes api/v2/ContentSubmissions/{contentSubmissionID}/Attributes/Batch
		/// </summary>
		public async Task ContentSubmissions_PostContentSubmissionAttributesAsync(int contentSubmissionID, ContentSubmissionSharedBusinessEntitiesContentSubmissionAttribute[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID+"/Attributes/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the status of a ContentSubmission
		/// No Documentation Found.
		/// ContentSubmissions_GetContentSubmissionStatus api/v2/ContentSubmissions/{contentSubmissionID}/Status
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission to get.</param>
		/// <param name="includeActivityRunDetails">True to include all status details if JobRun. Defaults to false</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedInterfacesIJobRun> ContentSubmissions_GetContentSubmissionStatusAsync(int contentSubmissionID, bool includeActivityRunDetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID+"/Status?includeActivityRunDetails="+includeActivityRunDetails;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedInterfacesIJobRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a total count of dealers per country
		/// No Documentation Found.
		/// DealerByCountry_GetCountries api/v2/DealerByCountry
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_DealerDBModelsDealersPerCountry_> DealerByCountry_GetCountriesAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/DealerByCountry?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_DealerDBModelsDealersPerCountry_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of dealers.
		/// No Documentation Found.
		/// Dealers_GetDealers api/v2/Dealers
		/// </summary>
		/// <param name="Brand">The brand to filter by.</param>
		/// <param name="ShippingCountry">The country to filter by.</param>
		/// <param name="DealerName">The partial Dealer Name to filter by. Wildcard supported (*).</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_DealerDBModelsDealer_> Dealers_GetDealersAsync(string Brand, string ShippingCountry, string DealerName, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Dealers?Brand=" + (Brand==null? "" : System.Uri.EscapeDataString(Brand))+"&ShippingCountry=" + (ShippingCountry==null? "" : System.Uri.EscapeDataString(ShippingCountry))+"&DealerName=" + (DealerName==null? "" : System.Uri.EscapeDataString(DealerName))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_DealerDBModelsDealer_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lookup a dealer using a dealer code.
		/// No Documentation Found.
		/// Dealers_GetDealerbyDealerCode api/v2/Dealers/{DealerCode}
		/// </summary>
		/// <param name="DealerCode">The Dealer Code to Search for</param>
		/// <returns>OK</returns>
		public async Task<DealerDBModelsDealer> Dealers_GetDealerbyDealerCodeAsync(string DealerCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Dealers/"+ (DealerCode==null? "" : System.Uri.EscapeDataString(DealerCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DealerDBModelsDealer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a paged response of file metadata.
		/// No Documentation Found.
		/// Files_GetFiles api/v2/Files
		/// </summary>
		/// <param name="includeDeleted">Indicates whether to include files marked as removed.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsFileDownload_> Files_GetFilesAsync(bool includeDeleted, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Files?includeDeleted="+includeDeleted+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsFileDownload_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create the metadata for a file before uploading. The State of the File should be 'Created'.
		/// No Documentation Found.
		/// Files_PostFile api/v2/Files
		/// </summary>
		/// <param name="requestBody">The file's metadata.</param>
		/// <returns>OK</returns>
		public async Task<string> Files_PostFileAsync(GlobalResourcesSharedModelsFileDownload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Files";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark a file as 'Removed'. Disables download of the file and hides metadata from GET all method
		/// No Documentation Found.
		/// Files_DeleteFile api/v2/Files/{ID}
		/// </summary>
		/// <param name="ID">The file's id.</param>
		public async Task Files_DeleteFileAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Files/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a file's metadata.
		/// No Documentation Found.
		/// Files_GetFile api/v2/Files/{ID}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsFileDownload> Files_GetFileAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Files/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsFileDownload>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the metadata for a file. Size may not be modified by the client.
		/// Update the metadata for a file. Size may not be modified by the client.
		/// Set status to 'Available' to publish a file. The file must be uploaded.
		/// Set status to 'Created' to reset a file's contents and re-upload.
		/// A file may only be 'Removed' by the DELETE method.
		/// Files_PutFile api/v2/Files/{ID}
		/// </summary>
		/// <param name="ID">The file's id</param>
		/// <param name="requestBody">The file's metadata</param>
		public async Task Files_PutFileAsync(string ID, GlobalResourcesSharedModelsFileDownload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Files/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download the contents of a file. The current State of the File should be 'Available'.
		/// No Documentation Found.
		/// Files_GetFileContents api/v2/Files/{ID}/FileContents
		/// </summary>
		/// <param name="ID">The file's metadata.</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Files_GetFileContentsAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Files/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/FileContents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload the contents of a file. The current State of the File should be 'Created'.
		/// No Documentation Found.
		/// Files_PutFileContents api/v2/Files/{ID}/FileContents
		/// </summary>
		/// <param name="ID">The file's metadata.</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Files_PutFileContentsAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Files/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/FileContents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a paged response of file metadata.
		/// No Documentation Found.
		/// GlobalImageCategories_GetFiles api/v2/GlobalImageCategories
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsGlobalImageCategory_> GlobalImageCategories_GetFilesAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImageCategories?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsGlobalImageCategory_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create the metadata for a file before uploading. The State should be 'Created'.
		/// No Documentation Found.
		/// GlobalImageCategories_PostFile api/v2/GlobalImageCategories
		/// </summary>
		/// <param name="requestBody">The file's metadata.</param>
		/// <returns>OK</returns>
		public async Task<string> GlobalImageCategories_PostFileAsync(GlobalResourcesSharedModelsGlobalImageCategory requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImageCategories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a file's metadata.
		/// No Documentation Found.
		/// GlobalImageCategories_GetFile api/v2/GlobalImageCategories/{ID}
		/// </summary>
		/// <param name="ID">The file's id.</param>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsGlobalImageCategory> GlobalImageCategories_GetFileAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImageCategories/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsGlobalImageCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a paged response of GlobalImage.
		/// No Documentation Found.
		/// GlobalImages_GetGlobalImages api/v2/GlobalImages
		/// </summary>
		/// <param name="search">Optional. Searches for matching global images with the matching Category Name, Publisher or Description</param>
		/// <param name="includeDeleted">Indicates whether to include GlobalImages marked as removed.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsGlobalImage_> GlobalImages_GetGlobalImagesAsync(string search, string categoryId, string publisher, bool includeDeleted, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImages?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&categoryId=" + (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"&publisher=" + (publisher==null? "" : System.Uri.EscapeDataString(publisher))+"&includeDeleted="+includeDeleted+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsGlobalImage_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create the metadata for a GlobalImage before uploading. The State should be 'Created'.
		/// No Documentation Found.
		/// GlobalImages_PostGlobalImage api/v2/GlobalImages
		/// </summary>
		/// <param name="overridePublisherOrDate">Whether to set the publisher and date to the provided values.</param>
		/// <param name="requestBody">The file's metadata.</param>
		/// <returns>OK</returns>
		public async Task<string> GlobalImages_PostGlobalImageAsync(bool overridePublisherOrDate, GlobalResourcesSharedModelsGlobalImage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImages?overridePublisherOrDate="+overridePublisherOrDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark a file as 'Removed'. Disables download of the image and hides metadata from GET all method
		/// No Documentation Found.
		/// GlobalImages_DeleteFile api/v2/GlobalImages/{ID}
		/// </summary>
		/// <param name="ID">The GlobalImage's id.</param>
		public async Task GlobalImages_DeleteFileAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a GlobalImage's metadata.
		/// No Documentation Found.
		/// GlobalImages_GetGlobalImage api/v2/GlobalImages/{ID}
		/// </summary>
		/// <param name="ID">The GlobalImage's id.</param>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsGlobalImage> GlobalImages_GetGlobalImageAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsGlobalImage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the metadata for an image.
		/// Update the metadata for an image. Size may not be modified by the client.
		/// Set status to 'Available' to publish an image. Both the image and thumbnail must be uploaded.
		/// Set status to 'Created' to reset an image's contents and re-upload.
		/// A file may only be 'Removed' by the DELETE method.
		/// GlobalImages_PutGlobalImage api/v2/GlobalImages/{ID}
		/// </summary>
		/// <param name="ID">The GlobalImage's id.</param>
		/// <param name="overridePublisherOrDate">Whether to set the publisher and date to the provided values.</param>
		/// <param name="requestBody">The GlobalImage's metadata</param>
		public async Task GlobalImages_PutGlobalImageAsync(string ID, bool overridePublisherOrDate, GlobalResourcesSharedModelsGlobalImage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"&overridePublisherOrDate="+overridePublisherOrDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download the contents of a GlobalImage. The current State of the GlobalImage should be 'Available'.
		/// No Documentation Found.
		/// GlobalImages_GetGlobalImageContents api/v2/GlobalImages/{ID}/ImageContents
		/// </summary>
		/// <param name="ID">The global image metadata id.</param>
		/// <param name="isFullImage">Indicated whether to download the full image or the thumbnail. Defaults to 'true'.</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> GlobalImages_GetGlobalImageContentsAsync(string ID, bool isFullImage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/ImageContents&isFullImage="+isFullImage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload the contents of a GlobalImage. The current State of the File for the GlobalImage should be 'Created'.
		/// Both the image and thumbnail must be uploaded.
		/// Set isFullImage = 'True' for Full Image, isFullImage = 'False' for Thumbnail
		/// GlobalImages_PutGlobalImageContents api/v2/GlobalImages/{ID}/ImageContents
		/// </summary>
		/// <param name="ID">The global image metadata id.</param>
		/// <param name="isFullImage">Indicated whether this is the full image or the thumbnail. Defaults to 'true'.</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> GlobalImages_PutGlobalImageContentsAsync(string ID, bool isFullImage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/GlobalImages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/ImageContents&isFullImage="+isFullImage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of the languages for which translations are supported. Returns a PagedResponse of Language objects.
		/// No Documentation Found.
		/// Languages_GetLanguages api/v2/Languages
		/// </summary>
		/// <param name="limit">limit the number of Language objects returned. Optional (defaults to 10).</param>
		/// <param name="offset">the number of Language objects to skip. Optional (defaults to 0).</param>
		/// <param name="includeDeleted">whether to include languages marked as deleted. Defaults to false</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsLanguage_> Languages_GetLanguagesAsync(int limit, int offset, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Languages?limit="+limit+"&offset="+offset+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsLanguage_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Language to support for translations. Accepts a Language object. Returns the Id of the created object.
		/// No Documentation Found.
		/// Languages_CreateLanguage api/v2/Languages
		/// </summary>
		/// <returns>OK</returns>
		public async Task<int> Languages_CreateLanguageAsync(GlobalResourcesSharedModelsLanguage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Languages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a Language from those supported for translations. Marks language as deleted.
		/// No Documentation Found.
		/// Languages_DeleteLanguage api/v2/Languages/{LocaleID}
		/// </summary>
		public async Task Languages_DeleteLanguageAsync(int LocaleID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Languages/"+LocaleID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a language by its id. Returns a Language object
		/// No Documentation Found.
		/// Languages_GetLanguage api/v2/Languages/{LocaleID}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsLanguage> Languages_GetLanguageAsync(int LocaleID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Languages/"+LocaleID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsLanguage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a language’s description. Accepts a Language object.
		/// No Documentation Found.
		/// Languages_UpdateLanguage api/v2/Languages/{LocaleID}
		/// </summary>
		public async Task Languages_UpdateLanguageAsync(int LocaleID, GlobalResourcesSharedModelsLanguage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Languages/"+LocaleID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a license activation.
		/// No Documentation Found.
		/// LicenseActivations_Post api/v2/LicenseActivations
		/// </summary>
		/// <param name="requestBody">The data required for creating the license.</param>
		/// <returns>OK</returns>
		public async Task<DealerDBModelsLicenseActivation> LicenseActivations_PostAsync(DealerDBModelsLicenseActivationCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DealerDBModelsLicenseActivation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Register an EDT Lite with the Server
		/// No Documentation Found.
		/// LicenseActivations_PostRegisterEDTLite api/v2/LicenseActivations/RegisterEDTLite
		/// </summary>
		/// <param name="requestBody">The information required for registration.</param>
		/// <returns>OK</returns>
		public async Task<bool> LicenseActivations_PostRegisterEDTLiteAsync(DealerDBModelsEDTLiteRegistration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations/RegisterEDTLite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a license activiation.
		/// No Documentation Found.
		/// LicenseActivations_Put api/v2/LicenseActivations/{ID}
		/// </summary>
		/// <param name="ID">The ID of the license.</param>
		/// <param name="requestBody">The data required for updating the license.</param>
		/// <returns>OK</returns>
		public async Task<DealerDBModelsLicenseActivation> LicenseActivations_PutAsync(string ID, DealerDBModelsLicenseActivationUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DealerDBModelsLicenseActivation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirm that the client has applied the updated license.
		/// No Documentation Found.
		/// LicenseActivations_PutConfirm api/v2/LicenseActivations/{ID}/Confirm
		/// </summary>
		/// <param name="ID">The ID of the license</param>
		/// <param name="requestBody">The license data.</param>
		public async Task LicenseActivations_PutConfirmAsync(string ID, DealerDBModelsLicenseActivationConfirm requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/Confirm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of licenses with the specified criteria.
		/// No Documentation Found.
		/// Licenses_Get api/v2/Licenses
		/// </summary>
		/// <param name="VoucherCode">Optional. Filter by VoucherCode</param>
		/// <param name="DealerCode">Optional. Filter by DealerCode</param>
		/// <param name="Status">Optional. Filter by Status.  By default only active licenses will be returned.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_DealerDBModelsLicense_> Licenses_GetAsync(string VoucherCode, string DealerCode, Licenses_GetStatus Status, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Licenses?VoucherCode=" + (VoucherCode==null? "" : System.Uri.EscapeDataString(VoucherCode))+"&DealerCode=" + (DealerCode==null? "" : System.Uri.EscapeDataString(DealerCode))+"&Status=" + Status+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_DealerDBModelsLicense_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a license.
		/// No Documentation Found.
		/// LicensesGetByID api/v2/Licenses/{ID}
		/// </summary>
		/// <param name="ID">The ID of the license to get.</param>
		/// <returns>OK</returns>
		public async Task<DealerDBModelsLicense> LicensesGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Licenses/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DealerDBModelsLicense>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the API System logs, most recent first.
		/// No Documentation Found.
		/// Logs_GetLogs api/v2/Logs
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsLog_> Logs_GetLogsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Logs?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsLog_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Log entry
		/// No Documentation Found.
		/// Logs_PostLog api/v2/Logs
		/// </summary>
		/// <param name="Message">Message to enter into the log</param>
		/// <returns>OK</returns>
		public async Task<string> Logs_PostLogAsync(string Message, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Logs?Message=" + (Message==null? "" : System.Uri.EscapeDataString(Message));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a log by ID
		/// No Documentation Found.
		/// Logs_GetLog api/v2/Logs/{ID}
		/// </summary>
		/// <param name="ID">The Log ID</param>
		/// <returns>OK</returns>
		public async Task<APIModelsLog> Logs_GetLogAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Logs/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIModelsLog>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends an email message.
		/// No Documentation Found.
		/// Notifications_PostMail api/v2/Notifications
		/// </summary>
		/// <param name="requestBody">The Notification Object.</param>
		public async Task Notifications_PostMailAsync(APIModelsNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Notifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all of the Package Types.
		/// No Documentation Found.
		/// PackageTypes_Get api/v2/PackageTypes
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="userID">Optional. The user ID to sort packageTypes by the user's access</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsPackageType_> PackageTypes_GetAsync(int limit, int offset, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes?limit="+limit+"&offset="+offset+"&userID="+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsPackageType_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Package Type.
		/// No Documentation Found.
		/// PackageTypes_Post api/v2/PackageTypes
		/// </summary>
		/// <param name="requestBody">The Package Type to add</param>
		/// <returns>OK</returns>
		public async Task<string> PackageTypes_PostAsync(UpdateSystemModelsPackageType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Package Type.
		/// No Documentation Found.
		/// PackageTypes_Delete api/v2/PackageTypes/{ID}
		/// </summary>
		/// <param name="ID">The Package Type ID</param>
		public async Task PackageTypes_DeleteAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Package Type.
		/// No Documentation Found.
		/// PackageTypesGetByID api/v2/PackageTypes/{ID}
		/// </summary>
		/// <param name="ID">The Package Type ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsPackageType> PackageTypesGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsPackageType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify a Package Type.
		/// No Documentation Found.
		/// PackageTypes_Put api/v2/PackageTypes/{ID}
		/// </summary>
		/// <param name="ID">The ID of the Package Type</param>
		/// <param name="requestBody">The Package Type to update</param>
		public async Task PackageTypes_PutAsync(string ID, UpdateSystemModelsPackageType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a package type a user could see.
		/// No Documentation Found.
		/// PackageTypes_RemovePackageTypeUser api/v2/PackageTypes/{id}/Users/{userID}
		/// </summary>
		/// <param name="id">The ID of the Package Type</param>
		/// <param name="userID">The userID to link to the package type</param>
		public async Task PackageTypes_RemovePackageTypeUserAsync(string id, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Users/"+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a package type that a user can see.
		/// No Documentation Found.
		/// PackageTypes_AddPackageTypeUser api/v2/PackageTypes/{id}/Users/{userID}
		/// </summary>
		/// <param name="id">The ID of the Package Type</param>
		/// <param name="userID">The userID to link to the package type</param>
		public async Task PackageTypes_AddPackageTypeUserAsync(string id, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Users/"+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Package Type to Bundle Relationship.
		/// No Documentation Found.
		/// PackageTypetoBundles_Delete api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="BundleID">The BundleID</param>
		/// <param name="PackageTypeID">The PackageTypeID</param>
		public async Task PackageTypetoBundles_DeleteAsync(string BundleID, string PackageTypeID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles?BundleID=" + (BundleID==null? "" : System.Uri.EscapeDataString(BundleID))+"&PackageTypeID=" + (PackageTypeID==null? "" : System.Uri.EscapeDataString(PackageTypeID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all of the Package Type to Bundle Relationships.
		/// No Documentation Found.
		/// PackageTypetoBundles_Get api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="BundleID">Optional. Filter by BundleID.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsPackageTypeIDtoBundle_> PackageTypetoBundles_GetAsync(string BundleID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles?BundleID=" + (BundleID==null? "" : System.Uri.EscapeDataString(BundleID))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsPackageTypeIDtoBundle_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new Package Type ID to Bundle Relationship.
		/// No Documentation Found.
		/// PackageTypetoBundles_Post api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="requestBody">The PackageTypeToBundle to add.</param>
		public async Task PackageTypetoBundles_PostAsync(UpdateSystemModelsPackageTypeIDtoBundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Package Type ID to Bundle Relationship.
		/// No Documentation Found.
		/// PackageTypetoBundles_Put api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="requestBody">The PackageTypeToBundle to update.</param>
		public async Task PackageTypetoBundles_PutAsync(UpdateSystemModelsPackageTypeIDtoBundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Packages.
		/// No Documentation Found.
		/// Packages_GetPackages api/v2/Packages
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="PackageTypeID">Optional. If provided, filters by PackageTypeID.</param>
		/// <param name="Version">Optional. If provided, filters by Version.</param>
		/// <param name="Released">Optional. If provided, filters by Released.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsPackage_> Packages_GetPackagesAsync(int limit, int offset, string PackageTypeID, int Version, bool Released, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages?limit="+limit+"&offset="+offset+"&PackageTypeID=" + (PackageTypeID==null? "" : System.Uri.EscapeDataString(PackageTypeID))+"&Version="+Version+"&Released="+Released;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsPackage_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Package to the Update System.
		/// No Documentation Found.
		/// Packages_PostPackage api/v2/Packages
		/// </summary>
		/// <param name="requestBody">The package to add.</param>
		/// <returns>OK</returns>
		public async Task<string> Packages_PostPackageAsync(UpdateSystemModelsPackage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Package.
		/// No Documentation Found.
		/// Packages_DeletePackage api/v2/Packages/{ID}
		/// </summary>
		/// <param name="ID">The Package ID to Delete</param>
		public async Task Packages_DeletePackageAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a Package.
		/// No Documentation Found.
		/// Packages_GetPackage api/v2/Packages/{ID}
		/// </summary>
		/// <param name="ID">The Package ID to Search for</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsPackage> Packages_GetPackageAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsPackage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify a Packge to the Update System.
		/// No Documentation Found.
		/// Packages_PutPackage api/v2/Packages/{ID}
		/// </summary>
		/// <param name="ID">The unique ID of the Package</param>
		/// <param name="requestBody">The package to update.</param>
		public async Task Packages_PutPackageAsync(string ID, UpdateSystemModelsPackage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Permissions
		/// No Documentation Found.
		/// Permissions_GetPermissions api/v2/Permissions
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="name">Filter by permission name. Supports ending wildcard (*). Optional.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsPermission_> Permissions_GetPermissionsAsync(int limit, int offset, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsPermission_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a Permission
		/// No Documentation Found.
		/// Permissions_PostPermission api/v2/Permissions
		/// </summary>
		/// <param name="requestBody">Permission to add</param>
		/// <returns>OK</returns>
		public async Task<int> Permissions_PostPermissionAsync(APIModelsPermission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Permission
		/// No Documentation Found.
		/// Permissions_DeletePermission api/v2/Permissions/{id}
		/// </summary>
		/// <param name="id">Id of Permission</param>
		public async Task Permissions_DeletePermissionAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Permission
		/// No Documentation Found.
		/// Permissions_GetPermission api/v2/Permissions/{id}
		/// </summary>
		/// <param name="id">Id of Permission</param>
		/// <returns>OK</returns>
		public async Task<APIModelsPermission> Permissions_GetPermissionAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIModelsPermission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Permission
		/// No Documentation Found.
		/// Permissions_PutPermission api/v2/Permissions/{id}
		/// </summary>
		/// <param name="id">Id of Permission</param>
		/// <param name="requestBody">The Updated Permission</param>
		public async Task Permissions_PutPermissionAsync(int id, APIModelsPermission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of Priority Packages by Client.
		/// No Documentation Found.
		/// PriorityPackages_GetPriorityPackages api/v2/PriorityPackages
		/// </summary>
		/// <param name="ClientID">Optional. Filter priority packages by ClientID.</param>
		/// <param name="Status">Optional. Filter returned packages by status. By default only active packages will be returned.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsPriorityPackage_> PriorityPackages_GetPriorityPackagesAsync(string ClientID, PriorityPackages_GetPriorityPackagesStatus Status, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages?ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&Status=" + Status+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsPriorityPackage_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Priority Package for a Client.
		/// No Documentation Found.
		/// PriorityPackages_PostPriorityPackages api/v2/PriorityPackages
		/// </summary>
		/// <param name="requestBody">The PriorityPackage to add</param>
		/// <returns>OK</returns>
		public async Task<string> PriorityPackages_PostPriorityPackagesAsync(UpdateSystemModelsPriorityPackage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Priority Package for a Client.
		/// No Documentation Found.
		/// PriorityPackages_DeletePriorityPackages api/v2/PriorityPackages/{ID}
		/// </summary>
		/// <param name="ID">The Priority Package ID</param>
		public async Task PriorityPackages_DeletePriorityPackagesAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Priority Packages for a Client.
		/// No Documentation Found.
		/// PriorityPackages_GetPriorityPackage api/v2/PriorityPackages/{ID}
		/// </summary>
		/// <param name="ID">The Priority Package ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsPriorityPackage> PriorityPackages_GetPriorityPackageAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsPriorityPackage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Release
		/// Gets a collection of Release. When successful, the response is a PagedResponse of Release.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Release_GetReleases api/v2/Releases
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="visible">Optional. Filter by visible.</param>
		/// <param name="bundleID">Optional. Filter by BundleID.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesRelease_> Release_GetReleasesAsync(int limit, int offset, bool visible, string bundleID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases?limit="+limit+"&offset="+offset+"&visible="+visible+"&bundleID=" + (bundleID==null? "" : System.Uri.EscapeDataString(bundleID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesRelease_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Release
		/// Creates a Release.  The body of the POST is the Release to create.
		/// The ReleaseId will be assigned on creation of the Job.  When successful, the response
		/// is the Release Id.  If unsuccessful, an appropriate ApiError is returned.
		/// Release_PostRelease api/v2/Releases
		/// </summary>
		/// <param name="requestBody">The Release to create.</param>
		/// <returns>OK</returns>
		public async Task<int> Release_PostReleaseAsync(ContentSubmissionSharedBusinessEntitiesRelease requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a  Release by ID
		/// Gets a Release by ID. When successful, the response is the requested Release.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Release_GetRelease api/v2/Releases/{ReleaseId}
		/// </summary>
		/// <param name="ReleaseId">The ID of the Release to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmissionSharedBusinessEntitiesRelease> Release_GetReleaseAsync(int ReleaseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases/"+ReleaseId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentSubmissionSharedBusinessEntitiesRelease>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the association between a release and a bundle.
		/// No Documentation Found.
		/// Release_DeleteReleaseBundle api/v2/Releases/{ReleaseId}/Bundle/{BundleId}
		/// </summary>
		/// <param name="ReleaseId">The release identifier.</param>
		/// <param name="BundleId">The bundle identifier.</param>
		public async Task Release_DeleteReleaseBundleAsync(int ReleaseId, string BundleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases/"+ReleaseId+"/Bundle/"+ (BundleId==null? "" : System.Uri.EscapeDataString(BundleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates the release with a bundle.
		/// No Documentation Found.
		/// Release_PostReleaseBundle api/v2/Releases/{ReleaseId}/Bundle/{BundleId}
		/// </summary>
		/// <param name="ReleaseId">The release identifier.</param>
		/// <param name="BundleId">The bundle identifier.</param>
		public async Task Release_PostReleaseBundleAsync(int ReleaseId, string BundleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases/"+ReleaseId+"/Bundle/"+ (BundleId==null? "" : System.Uri.EscapeDataString(BundleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Release
		/// Updates a Release.  The body of the PUT is the updated Release.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// Release_PutContentDefinition api/v2/Releases/{releaseId}
		/// </summary>
		/// <param name="releaseId">The ID of the Release to update</param>
		/// <param name="requestBody">The updated Release</param>
		public async Task Release_PutContentDefinitionAsync(int releaseId, ContentSubmissionSharedBusinessEntitiesRelease requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases/"+releaseId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a summary of all Packages in a Bundle
		/// No Documentation Found.
		/// Reporting_BundleStatusSummary api/v2/Reporting/BundleStatusSummary
		/// </summary>
		/// <param name="BundleID">The BundleID</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsPackageStatusSummary_> Reporting_BundleStatusSummaryAsync(string BundleID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/BundleStatusSummary?BundleID=" + (BundleID==null? "" : System.Uri.EscapeDataString(BundleID))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsPackageStatusSummary_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of bundles for UpdateGroup.
		/// No Documentation Found.
		/// Reporting_BundlesInUpdateGroup api/v2/Reporting/BundlesInUpdateGroup
		/// </summary>
		/// <param name="ID">The UpdateGroupID</param>
		/// <param name="IncludeInactive">Include Inactive Bundles (true|false)</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsBundle_> Reporting_BundlesInUpdateGroupAsync(string ID, bool IncludeInactive, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/BundlesInUpdateGroup?ID=" + (ID==null? "" : System.Uri.EscapeDataString(ID))+"&IncludeInactive="+IncludeInactive+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsBundle_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Client Information
		/// No Documentation Found.
		/// Reporting_ClientInfo api/v2/Reporting/ClientInfo
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsClientInfo> Reporting_ClientInfoAsync(string ClientID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/ClientInfo?ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsClientInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the current packages for an update group.
		/// No Documentation Found.
		/// Reporting_CurrentPackagesInUpdateGroup api/v2/Reporting/CurrentPackagesInUpdateGroup
		/// </summary>
		/// <param name="ID">The UpdateGroupID</param>
		/// <param name="SubscriptionTypeFilter">Optional.  The subscription type filter to use.  By default the Default packages (Required and IncludeByDefault) will be returned.</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsPackage[]> Reporting_CurrentPackagesInUpdateGroupAsync(string ID, Reporting_CurrentPackagesInUpdateGroupSubscriptionTypeFilter SubscriptionTypeFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/CurrentPackagesInUpdateGroup?ID=" + (ID==null? "" : System.Uri.EscapeDataString(ID))+"&SubscriptionTypeFilter=" + SubscriptionTypeFilter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsPackage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Client in the Update System.
		/// No Documentation Found.
		/// Reporting_GetClient api/v2/Reporting/GetClient
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsClient> Reporting_GetClientAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/GetClient?ID=" + (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsClient>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of current Client Subscriptions.
		/// No Documentation Found.
		/// Reporting_GetSubscriptions api/v2/Reporting/GetSubscriptions
		/// </summary>
		/// <param name="ClientID">Optional. Filter by Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group ID</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsUpdateGroupClientRelationship_> Reporting_GetSubscriptionsAsync(string ClientID, string UpdateGroupID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/GetSubscriptions?ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsUpdateGroupClientRelationship_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a summary report for a Specific Package
		/// No Documentation Found.
		/// Reporting_PackageStatusSummary api/v2/Reporting/PackageStatusSummary
		/// </summary>
		/// <param name="PackageID">The Package ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsPackageStatusSummary> Reporting_PackageStatusSummaryAsync(string PackageID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/PackageStatusSummary?PackageID=" + (PackageID==null? "" : System.Uri.EscapeDataString(PackageID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsPackageStatusSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of subscribed clients
		/// No Documentation Found.
		/// Reporting_RegisteredClients api/v2/Reporting/RegisteredClients
		/// </summary>
		/// <param name="UpdateGroupID">Optional but required when including any or all of following parameters: ReportValue, ReportResult, ReportResultIsValid. The Update Group ID. If not provided, all clients will be returned.</param>
		/// <param name="ClientID">Optional. Filter where ClientID matches a value. Wildcards are supported (*).</param>
		/// <param name="Tag">Optional. Filter where Tag matches a value. Wildcards are supported (*).</param>
		/// <param name="ReportResult">Optional and UpdateGroupID must be included. Filter where ReportResult matches a value. Wildcards are supported (*).</param>
		/// <param name="ReportResultIsValid">Optional and UpdateGroupID must be included. When 'true' filters results where ReportResult equals ReportResultExpected.  When 'false' filters results where ValueToValidate does not equal ReportResults.</param>
		/// <param name="ReportValue">Optional and UpdateGroupID must be included. Filter where ReportValue matches a value. Wildcards are supported (*).</param>
		/// <param name="LastCheckInBefore">Optional. Filter where LastCheckIn occured before the provided date.</param>
		/// <param name="LastCheckInAfter">Optional. Filter where LastCheckIn occured after the provided date.</param>
		/// <param name="OrderBy">Optional. Specify the order in which results should be returned. Use this format: [FieldName] [ASC|ASCENDING|DESC|DESCENDING],...   
		///            If sort direction is not provided for a field, it will be sorted ascending.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsClientStatus_UpdateSystemModelsPagedClientStatusMetadata_> Reporting_RegisteredClientsAsync(string UpdateGroupID, string ClientID, string Tag, string ReportResult, bool ReportResultIsValid, string ReportValue, System.DateTimeOffset LastCheckInBefore, System.DateTimeOffset LastCheckInAfter, string OrderBy, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/RegisteredClients?UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&Tag=" + (Tag==null? "" : System.Uri.EscapeDataString(Tag))+"&ReportResult=" + (ReportResult==null? "" : System.Uri.EscapeDataString(ReportResult))+"&ReportResultIsValid="+ReportResultIsValid+"&ReportValue=" + (ReportValue==null? "" : System.Uri.EscapeDataString(ReportValue))+"&LastCheckInBefore=" + LastCheckInBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&LastCheckInAfter=" + LastCheckInAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&OrderBy=" + (OrderBy==null? "" : System.Uri.EscapeDataString(OrderBy))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsClientStatus_UpdateSystemModelsPagedClientStatusMetadata_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
		/// No Documentation Found.
		/// Reporting_UpdateGroups api/v2/Reporting/UpdateGroups
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsUpdateGroup_> Reporting_UpdateGroupsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/UpdateGroups?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsUpdateGroup_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get data for pie charts in UpdateMetrics.
		/// No Documentation Found.
		/// Reporting_UpdateMetrics api/v2/Reporting/UpdateMetrics
		/// </summary>
		/// <param name="UpdateGroupID">The UpdateType in which clients must be for the report to include them.</param>
		/// <param name="bundleNumber">Optional. Tells us which chart to show based upon filter.</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsUpdateMetricsData> Reporting_UpdateMetricsAsync(string UpdateGroupID, int bundleNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/UpdateMetrics?UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&bundleNumber="+bundleNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsUpdateMetricsData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Roles
		/// No Documentation Found.
		/// Roles_GetRoles api/v2/Roles
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="name">Optional. Finds a role with the given name.</param>
		/// <param name="permissionName">Optional. Filters roles by whether they contain the provided permission.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsRole_> Roles_GetRolesAsync(int limit, int offset, string name, int permissionID, string permissionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&permissionID="+permissionID+"&permissionName=" + (permissionName==null? "" : System.Uri.EscapeDataString(permissionName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsRole_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a User Role
		/// No Documentation Found.
		/// Roles_PostRole api/v2/Roles
		/// </summary>
		/// <param name="requestBody">Role to add</param>
		/// <returns>OK</returns>
		public async Task<int> Roles_PostRoleAsync(APIModelsRole requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a User Role
		/// No Documentation Found.
		/// Roles_DeleteRole api/v2/Roles/{id}
		/// </summary>
		/// <param name="id">The role's id</param>
		public async Task Roles_DeleteRoleAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a User Role
		/// No Documentation Found.
		/// Roles_GetRole api/v2/Roles/{id}
		/// </summary>
		/// <param name="id">The role's id</param>
		/// <returns>OK</returns>
		public async Task<APIModelsRole> Roles_GetRoleAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIModelsRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a User Role
		/// No Documentation Found.
		/// Roles_PutRole api/v2/Roles/{id}
		/// </summary>
		/// <param name="id">The role's id</param>
		/// <param name="requestBody">The Updated Role</param>
		public async Task Roles_PutRoleAsync(int id, APIModelsRole requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the Permissions for a Role
		/// No Documentation Found.
		/// Roles_GetRolePermissions api/v2/Roles/{id}/Permissions
		/// </summary>
		/// <param name="id">The id of the Role</param>
		/// <param name="name">Filter by permission name. Optional.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsPermission_> Roles_GetRolePermissionsAsync(int id, string name, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Permissions?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsPermission_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Manage the Permissions for a Role
		/// No Documentation Found.
		/// Roles_PutRolePermissions api/v2/Roles/{id}/Permissions
		/// </summary>
		/// <param name="id">The id of the Role</param>
		/// <param name="requestBody">Permissions Changes for the Role</param>
		public async Task Roles_PutRolePermissionsAsync(int id, APIModelsRolePermissionChange[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all user's in a role
		/// No Documentation Found.
		/// UserPermissions_GetUsers api/v2/Roles/{id}/Users
		/// </summary>
		/// <param name="id">The Role's ID</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsUser_> UserPermissions_GetUsersAsync(int id, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Users?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsUser_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Role's users
		/// No Documentation Found.
		/// UserPermissionsPutById api/v2/Roles/{id}/Users
		/// </summary>
		/// <param name="id">The Role's ID</param>
		/// <param name="requestBody">A list of changes to the Role's Users</param>
		public async Task UserPermissionsPutByIdAsync(int id, APIModelsRoleUserChange[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a paged response of Global String Definitions.
		/// No Documentation Found.
		/// StringDefinitions_GetDefinitions api/v2/StringDefinitions
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10. Ignored if 'stringIds' is provided.</param>
		/// <param name="modifiedAfterTimestamp">Optional. Return only the StringDefinition objects that have a Timestamp value greater than that provided. This will be an encoded byte array.</param>
		/// <param name="includeTranslations">Optional. Indicates whether to include the StringTranslations for the StringDefinition. Defaults to false.</param>
		/// <param name="stringText">Optional. The text for which to search in the StringDefinition object’s translations. Only StringDefinition objects for matching StringTranslation objects are returned. Does not filter if no value is provided. Supports beginning and/or ending wildcards. includeTranslations must be true.</param>
		/// <param name="descriptionText">Optional. The text for which to search in the StringDefinition description field. Only matching objects are returned. Does not filter if no value is provided. Supports beginning and/or ending wildcards.</param>
		/// <param name="useFullText">Optional. This flag is used to determin whether to use the FullText Search or not.</param>
		/// <param name="includeDeletedLanguages">Optional. Indicates whether to include languages marked as deleted. includeTranslations must be true. Defaults to false.</param>
		/// <param name="languageIds">Optional. A comma-delimited list of language ids. Only StringTranslation objects with a matching language id will be returned. Optional. By default all locales are returned. includeTranslations must be true. The StringDefinition is still returned even if the filtered translations list is empty.</param>
		/// <param name="stringIds">Optional. A comma-delimited list of string ids. Up to 40 string IDs may be provided. May not be used with 'modifiedAfterTimestamp', 'stringText', 'descriptionText', or 'useFullText'.</param>
		/// <param name="matchingTranslationsOnly">Optional. If false, all translations for returned String Definitions are included. Must be used with 'stringText' provided and 'includeTranslations' = true.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsStringDefinition_> StringDefinitions_GetDefinitionsAsync(int limit, string modifiedAfterTimestamp, bool includeTranslations, string stringText, string descriptionText, bool useFullText, bool includeDeletedLanguages, string languageIds, string stringIds, bool matchingTranslationsOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringDefinitions?limit="+limit+"&modifiedAfterTimestamp=" + (modifiedAfterTimestamp==null? "" : System.Uri.EscapeDataString(modifiedAfterTimestamp))+"&includeTranslations="+includeTranslations+"&stringText=" + (stringText==null? "" : System.Uri.EscapeDataString(stringText))+"&descriptionText=" + (descriptionText==null? "" : System.Uri.EscapeDataString(descriptionText))+"&useFullText="+useFullText+"&includeDeletedLanguages="+includeDeletedLanguages+"&languageIds=" + (languageIds==null? "" : System.Uri.EscapeDataString(languageIds))+"&stringIds=" + (stringIds==null? "" : System.Uri.EscapeDataString(stringIds))+"&matchingTranslationsOnly="+matchingTranslationsOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsStringDefinition_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create StringDefinition object. The originating translation must be provided. Accepts an array of StringDefinition objects. Returns nothing.
		/// No Documentation Found.
		/// StringDefinitions_PostDefinition api/v2/StringDefinitions/Batch
		/// </summary>
		/// <param name="requestBody">The StringDefinition Object array, along with originating translation.</param>
		public async Task StringDefinitions_PostDefinitionAsync(GlobalResourcesSharedModelsStringDefinition[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringDefinitions/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update StringDefinition objects. Accepts an array of StringDefinition objects. This endpoint will add StringDefinitionChange objects to the database. The DescriptionForTranslator may not be modified after a String is submitted for translation.
		/// No Documentation Found.
		/// StringDefinitions_UpdateDefinitions api/v2/StringDefinitions/Batch
		/// </summary>
		/// <param name="requestBody">The Array of Definitions to update</param>
		public async Task StringDefinitions_UpdateDefinitionsAsync(GlobalResourcesSharedModelsStringDefinition[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringDefinitions/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a paged response of Global String Definitions.
		/// No Documentation Found.
		/// StringDefinitions_GetDefinition api/v2/StringDefinitions/{ID}
		/// </summary>
		/// <param name="includeTranslations">Optional. Indicates whether to include the StringTranslations for the StringDefinition. Defaults to false.</param>
		/// <param name="includeDeletedLanguages">Optional. Indicates whether to include languages marked as deleted. includeTranslations must be true. Defaults to false.</param>
		/// <param name="languageIds">Optional. A comma-delimited list of language ids. Only StringTranslation objects with a matching language id will be returned. Optional. By default all locales are returned. includeTranslations must be true. The StringDefinition is still returned even if the filtered translations list is empty.</param>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsStringDefinition> StringDefinitions_GetDefinitionAsync(string ID, bool includeTranslations, bool includeDeletedLanguages, string languageIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringDefinitions/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"&includeTranslations="+includeTranslations+"&includeDeletedLanguages="+includeDeletedLanguages+"&languageIds=" + (languageIds==null? "" : System.Uri.EscapeDataString(languageIds));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsStringDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a paged response of Global String Translations.
		/// No Documentation Found.
		/// StringTranslations_GetTranslations api/v2/StringTranslations
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="modifiedAfterTimestamp">Optional. Return only the StringDefinition objects that have a Timestamp value greater than that provided. This will be an encoded byte array.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsStringTranslation_> StringTranslations_GetTranslationsAsync(int limit, string modifiedAfterTimestamp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringTranslations?limit="+limit+"&modifiedAfterTimestamp=" + (modifiedAfterTimestamp==null? "" : System.Uri.EscapeDataString(modifiedAfterTimestamp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsStringTranslation_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update corrections to string translations
		/// No Documentation Found.
		/// StringTranslations_UpdateTranslations api/v2/StringTranslations/Batch
		/// </summary>
		public async Task StringTranslations_UpdateTranslationsAsync(GlobalResourcesSharedModelsStringTranslation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringTranslations/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a single translation based upon stringId and languageId
		/// No Documentation Found.
		/// StringTranslations_GetTranslation api/v2/StringTranslations/{stringId}/{languageId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsStringTranslation> StringTranslations_GetTranslationAsync(string stringId, int languageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringTranslations/"+ (stringId==null? "" : System.Uri.EscapeDataString(stringId))+"/"+languageId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsStringTranslation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a string value or a state for a string translation.
		/// No Documentation Found.
		/// StringTranslations_UpdateTranslation api/v2/StringTranslations/{stringId}/{languageId}
		/// </summary>
		public async Task StringTranslations_UpdateTranslationAsync(string stringId, int languageId, GlobalResourcesSharedModelsStringTranslation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/StringTranslations/"+ (stringId==null? "" : System.Uri.EscapeDataString(stringId))+"/"+languageId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a paged response of TranslationKeys.
		/// TranslationKeys_Get api/v2/TranslationKeys
		/// </summary>
		/// <param name="keyNames">Can filter by keyNames, a comma deliminated list.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_OASSupportSharedModelsTranslationKey_> TranslationKeys_GetAsync(int limit, int offset, string keyNames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationKeys?limit="+limit+"&offset="+offset+"&keyNames=" + (keyNames==null? "" : System.Uri.EscapeDataString(keyNames));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_OASSupportSharedModelsTranslationKey_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a translationKey object.
		/// No Documentation Found.
		/// TranslationKeys_CreateTranslationKey api/v2/TranslationKeys
		/// </summary>
		/// <returns>OK</returns>
		public async Task<int> TranslationKeys_CreateTranslationKeyAsync(OASSupportSharedModelsTranslationKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get TranslationKey by ID
		/// No Documentation Found.
		/// TranslationKeys_GetTranslationKey api/v2/TranslationKeys/{ID}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OASSupportSharedModelsTranslationKey> TranslationKeys_GetTranslationKeyAsync(int ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationKeys/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OASSupportSharedModelsTranslationKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the StringID of the translationKey object.
		/// No Documentation Found.
		/// TranslationKeys_UpdateTranslationKey api/v2/TranslationKeys/{ID}
		/// </summary>
		public async Task TranslationKeys_UpdateTranslationKeyAsync(int ID, OASSupportSharedModelsTranslationKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationKeys/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all TranslationRequest objects. Returns a PagedResponse of TranslationRequest objects with their language ids and string ids.
		/// No Documentation Found.
		/// TranslationRequests_GetTranslationRequests api/v2/TranslationRequests
		/// </summary>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsTranslationRequest_> TranslationRequests_GetTranslationRequestsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationRequests?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsTranslationRequest_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a translation request. Accepts a TranslationRequest object. Returns the Id of the created object. The state of the TranslationRequest must be ‘NotSubmitted’.
		/// No Documentation Found.
		/// TranslationRequests_CreateTranslationRequest api/v2/TranslationRequests
		/// </summary>
		/// <returns>OK</returns>
		public async Task<int> TranslationRequests_CreateTranslationRequestAsync(GlobalResourcesSharedModelsTranslationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationRequests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a TranslationRequest object by id. Returns TranslationRequest object with its language ids and string ids.
		/// No Documentation Found.
		/// TranslationRequests_GetTranslationRequest api/v2/TranslationRequests/{Id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsTranslationRequest> TranslationRequests_GetTranslationRequestAsync(int Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationRequests/"+Id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsTranslationRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a TranslationRequest object by id. Accepts a TranslationRequest object.
		/// No Documentation Found.
		/// TranslationRequests_UpdateTranslationRequest api/v2/TranslationRequests/{Id}
		/// </summary>
		public async Task TranslationRequests_UpdateTranslationRequestAsync(int Id, bool doResendRequest, GlobalResourcesSharedModelsTranslationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationRequests/"+Id+"?doResendRequest="+doResendRequest;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// TranslationRequests_UpdateTranslationRequestStrings api/v2/TranslationRequests/{Id}/Strings
		/// </summary>
		public async Task TranslationRequests_UpdateTranslationRequestStringsAsync(int Id, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationRequests/"+Id+"/Strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// TranslationSets_UpdateTranslationSetAttributes api/v2/TranslationSetAttributes/Batch
		/// </summary>
		public async Task TranslationSets_UpdateTranslationSetAttributesAsync(GlobalResourcesSharedModelsTranslationSetAttribute[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSetAttributes/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a set of TranslationSetAttribute object
		/// No Documentation Found.
		/// TranslationSets_DeleteTranslationSetAttribute api/v2/TranslationSetAttributes/{ID}
		/// </summary>
		public async Task TranslationSets_DeleteTranslationSetAttributeAsync(int ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSetAttributes/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a TranslationSetAttribute object
		/// No Documentation Found.
		/// TranslationSets_UpdateTranslationSetAttribute api/v2/TranslationSetAttributes/{ID}
		/// </summary>
		public async Task TranslationSets_UpdateTranslationSetAttributeAsync(int ID, GlobalResourcesSharedModelsTranslationSetAttribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSetAttributes/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a PagedResponse of TranslationSet objects. Related TranslationSetStrings are NOT returned
		/// No Documentation Found.
		/// TranslationSets_GetTranslationSets api/v2/TranslationSets
		/// </summary>
		/// <param name="includeAttributes">Names of Attributes to include when retrieving this submission. This should be a comma-separated list. If not provided, Attributes are not included. If '*', all Attributes are included.</param>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSet_> TranslationSets_GetTranslationSetsAsync(int limit, int offset, int translationRequestID, GlobalResourcesSharedModelsTranslationSetState state, string stringId, int languageId, string includeAttributes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets?limit="+limit+"&offset="+offset+"&translationRequestID="+translationRequestID+"&state=" + state+"&stringId=" + (stringId==null? "" : System.Uri.EscapeDataString(stringId))+"&languageId="+languageId+"&includeAttributes=" + (includeAttributes==null? "" : System.Uri.EscapeDataString(includeAttributes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSet_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a TranslationSet object by its id. Related TranslationSetStrings are NOT returned.
		/// No Documentation Found.
		/// TranslationSets_GetTranslationSet api/v2/TranslationSets/{ID}
		/// </summary>
		/// <param name="includeAttributes">Names of Attributes to include when retrieving this Translation set. This should be a comma-separated list. If not provided, Attributes are not included. If '*', all Attributes are included.</param>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsTranslationSet> TranslationSets_GetTranslationSetAsync(int ID, string includeAttributes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"?includeAttributes=" + (includeAttributes==null? "" : System.Uri.EscapeDataString(includeAttributes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsTranslationSet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Translation Set. Accepts a TranslationSet object. Only the state property may be updated.
		/// No Documentation Found.
		/// TranslationSets_UpdateTranslationSet api/v2/TranslationSets/{ID}
		/// </summary>
		public async Task TranslationSets_UpdateTranslationSetAsync(int ID, GlobalResourcesSharedModelsTranslationSet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a PagedResponse of TranslationSetAttribute objects
		/// No Documentation Found.
		/// TranslationSets_GetTranslationSetAttributes api/v2/TranslationSets/{ID}/Attributes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetAttribute_> TranslationSets_GetTranslationSetAttributesAsync(int ID, int limit, int offset, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"/Attributes?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetAttribute_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a TranslationSetAttribute object
		/// No Documentation Found.
		/// TranslationSets_PostTranslationSetAttribute api/v2/TranslationSets/{ID}/Attributes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<int> TranslationSets_PostTranslationSetAttributeAsync(int ID, GlobalResourcesSharedModelsTranslationSetAttribute requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"/Attributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// TranslationSets_PostTranslationSetAttributes api/v2/TranslationSets/{ID}/Attributes/Batch
		/// </summary>
		public async Task TranslationSets_PostTranslationSetAttributesAsync(int ID, GlobalResourcesSharedModelsTranslationSetAttribute[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"/Attributes/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the information needed to translate a string in a translation set
		/// No Documentation Found.
		/// TranslationSets_GetSourceStrings api/v2/TranslationSets/{ID}/SourceStrings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetSourceString_> TranslationSets_GetSourceStringsAsync(int ID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"/SourceStrings?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetSourceString_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the statistics for translation sets such as the language ids and count of string definitions.
		/// No Documentation Found.
		/// TranslationSets_GetStatistics api/v2/TranslationSets/{ID}/Statistics
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GlobalResourcesSharedModelsTranslationSetStatistics> TranslationSets_GetStatisticsAsync(int ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"/Statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlobalResourcesSharedModelsTranslationSetStatistics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a PagedResponse of TranslationSetString objects
		/// No Documentation Found.
		/// TranslationSets_GetTranslationSetStrings api/v2/TranslationSets/{ID}/Strings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetString_> TranslationSets_GetTranslationSetStringsAsync(int ID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"/Strings?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIIPagedResponse_GlobalResourcesSharedModelsTranslationSetString_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// TranslationSets_UpdateTranslationSetStrings api/v2/TranslationSets/{ID}/Strings
		/// </summary>
		public async Task TranslationSets_UpdateTranslationSetStringsAsync(int ID, GlobalResourcesSharedModelsTranslationSetString[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/TranslationSets/"+ID+"/Strings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of current Client Subscriptions.
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_GetSubscriptions api/v2/UpdateGroupClientRelationships
		/// </summary>
		/// <param name="ClientID">Optional. Filter by Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group ID</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="Active">Optional. Filter by Active</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsUpdateGroupClientRelationship_> UpdateGroupClientRelationships_GetSubscriptionsAsync(string ClientID, string UpdateGroupID, int limit, int offset, bool Active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships?ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset+"&Active="+Active;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsUpdateGroupClientRelationship_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a subscription
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_PostSubscription api/v2/UpdateGroupClientRelationships
		/// </summary>
		/// <param name="requestBody">The UpdateGroupClientRelationship to add.</param>
		/// <returns>OK</returns>
		public async Task<string> UpdateGroupClientRelationships_PostSubscriptionAsync(UpdateSystemModelsUpdateGroupClientRelationship requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DEPRECATED. Set client subscription status for an update group.
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_PutSubscriptionByClientIDUpdateGroupID api/v2/UpdateGroupClientRelationships
		/// </summary>
		/// <param name="ClientID">The Client ID.  This can be a client ID that has not been registered yet.</param>
		/// <param name="UpdateGroupID">The Update Group ID</param>
		/// <param name="Active">Subscribe the client to the Update Group.</param>
		public async Task UpdateGroupClientRelationships_PutSubscriptionByClientIDUpdateGroupIDAsync(string ClientID, string UpdateGroupID, bool Active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships?ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&Active="+Active;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a subscription by RelationshipID
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_GetSubscription api/v2/UpdateGroupClientRelationships/{RelationshipID}
		/// </summary>
		/// <param name="RelationshipID">The RelationshipID.</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsUpdateGroupClientRelationship> UpdateGroupClientRelationships_GetSubscriptionAsync(string RelationshipID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships/"+ (RelationshipID==null? "" : System.Uri.EscapeDataString(RelationshipID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsUpdateGroupClientRelationship>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Subscription
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_PutSubscription api/v2/UpdateGroupClientRelationships/{RelationshipID}
		/// </summary>
		/// <param name="RelationshipID">The relationship id of the UpdateGroupClientRelationship</param>
		/// <param name="requestBody">The updated UpdateGroupClientRelationship</param>
		public async Task UpdateGroupClientRelationships_PutSubscriptionAsync(string RelationshipID, UpdateSystemModelsUpdateGroupClientRelationship requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships/"+ (RelationshipID==null? "" : System.Uri.EscapeDataString(RelationshipID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Update Group Subscriptions
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_GetUpdateGroupSubscriptions api/v2/UpdateGroupSubscriptions
		/// </summary>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group ID.</param>
		/// <param name="PackageTypeID">Optional. Filter by Package Type ID.</param>
		/// <param name="ClientID">Optional. Filter by Client ID.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsUpdateGroupSubscription_> UpdateGroupSubscriptions_GetUpdateGroupSubscriptionsAsync(string UpdateGroupID, string PackageTypeID, string ClientID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions?UpdateGroupID=" + (UpdateGroupID==null? "" : System.Uri.EscapeDataString(UpdateGroupID))+"&PackageTypeID=" + (PackageTypeID==null? "" : System.Uri.EscapeDataString(PackageTypeID))+"&ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsUpdateGroupSubscription_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_PostUpdateGroupSubscription api/v2/UpdateGroupSubscriptions
		/// </summary>
		/// <param name="requestBody">The Update Group Subscription to add</param>
		/// <returns>OK</returns>
		public async Task<int> UpdateGroupSubscriptions_PostUpdateGroupSubscriptionAsync(UpdateSystemModelsUpdateGroupSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_PostUpdateGroupSubscriptions api/v2/UpdateGroupSubscriptions/Batch
		/// </summary>
		public async Task UpdateGroupSubscriptions_PostUpdateGroupSubscriptionsAsync(UpdateSystemModelsUpdateGroupSubscription[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_PutUpdateGroupSubscriptions api/v2/UpdateGroupSubscriptions/Batch
		/// </summary>
		public async Task UpdateGroupSubscriptions_PutUpdateGroupSubscriptionsAsync(UpdateSystemModelsUpdateGroupSubscription[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_DeleteUpdateGroupSubscription api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}
		/// </summary>
		/// <param name="UpdateGroupSubscriptionID">The Update Group Subscription ID to delete</param>
		public async Task UpdateGroupSubscriptions_DeleteUpdateGroupSubscriptionAsync(int UpdateGroupSubscriptionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/"+UpdateGroupSubscriptionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_GetUpdateGroupSubscription api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}
		/// </summary>
		/// <param name="UpdateGroupSubscriptionID">The Update Group Subscription ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsUpdateGroupSubscription> UpdateGroupSubscriptions_GetUpdateGroupSubscriptionAsync(int UpdateGroupSubscriptionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/"+UpdateGroupSubscriptionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsUpdateGroupSubscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_PutUpdateGroupSubscription api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}
		/// </summary>
		/// <param name="UpdateGroupSubscriptionID">The Update Group Subscription ID</param>
		/// <param name="requestBody">The updated Update Group Subscription</param>
		public async Task UpdateGroupSubscriptions_PutUpdateGroupSubscriptionAsync(int UpdateGroupSubscriptionID, UpdateSystemModelsUpdateGroupSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/"+UpdateGroupSubscriptionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
		/// No Documentation Found.
		/// UpdateGroups_Get api/v2/UpdateGroups
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="userID">Optional. The user ID to sort update groups by the user's access</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsUpdateGroup_> UpdateGroups_GetAsync(int limit, int offset, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups?limit="+limit+"&offset="+offset+"&userID="+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsUpdateGroup_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new Update Group.  The report field is a string that has a dot based request for a specific piece of submitted data.
		/// No Documentation Found.
		/// UpdateGroups_Post api/v2/UpdateGroups
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> UpdateGroups_PostAsync(UpdateSystemModelsUpdateGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an Update Group.
		/// No Documentation Found.
		/// UpdateGroups_Delete api/v2/UpdateGroups/{ID}
		/// </summary>
		/// <param name="ID">The ID of the Update Group to Delete</param>
		public async Task UpdateGroups_DeleteAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Update Group by ID.
		/// No Documentation Found.
		/// UpdateGroupsGetByID api/v2/UpdateGroups/{ID}
		/// </summary>
		/// <param name="ID">The ID of the Update Group</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsUpdateGroup> UpdateGroupsGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsUpdateGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an Update Group.
		/// No Documentation Found.
		/// UpdateGroups_Put api/v2/UpdateGroups/{ID}
		/// </summary>
		/// <param name="ID">ID of the Update Group</param>
		/// <param name="requestBody">The Update Group to update.</param>
		public async Task UpdateGroups_PutAsync(string ID, UpdateSystemModelsUpdateGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : System.Uri.EscapeDataString(ID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of bundles for UpdateGroup.
		/// No Documentation Found.
		/// UpdateGroups_GetUpdateGroupBundles api/v2/UpdateGroups/{ID}/Bundles
		/// </summary>
		/// <param name="ID">The UpdateGroupID</param>
		/// <param name="IncludeInactive">Include Inactive Bundles (true|false)</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_UpdateSystemModelsBundle_> UpdateGroups_GetUpdateGroupBundlesAsync(string ID, bool IncludeInactive, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : System.Uri.EscapeDataString(ID))+"/Bundles&IncludeInactive="+IncludeInactive+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_UpdateSystemModelsBundle_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an update group a user could see.
		/// No Documentation Found.
		/// UpdateGroups_RemoveUpdateGroupUser api/v2/UpdateGroups/{id}/Users/{userID}
		/// </summary>
		/// <param name="id">The ID of the update group</param>
		/// <param name="userID">The userID to link to the update group</param>
		public async Task UpdateGroups_RemoveUpdateGroupUserAsync(string id, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Users/"+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an updateGroup that a user can see.
		/// No Documentation Found.
		/// UpdateGroups_AddUpdateGroupUser api/v2/UpdateGroups/{id}/Users/{userID}
		/// </summary>
		/// <param name="id">The ID of the update group</param>
		/// <param name="userID">The userID to link to the update group</param>
		public async Task UpdateGroups_AddUpdateGroupUserAsync(string id, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/Users/"+userID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks the Client ID into the Update System.
		/// No Documentation Found.
		/// UpdateSystem_GetCheckin api/v2/UpdateSystem
		/// </summary>
		/// <param name="ClientID">The Client ID to check-in.  If this is a new client ID it will be added to Clients.</param>
		/// <param name="Preview">Get Pkgs w\o updating Datetimes(true|false)</param>
		/// <param name="RunAllInventories">Force return inventories. Defaults to false.</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystemModelsCheckinResult> UpdateSystem_GetCheckinAsync(string ClientID, bool Preview, bool RunAllInventories, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateSystem?ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&Preview="+Preview+"&RunAllInventories="+RunAllInventories;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSystemModelsCheckinResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get UserContentDefinitions
		/// Gets a collection of UserContentDefinitions. When successful, the response is a PagedResponse of UserContentDefinitions.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// UserContentDefinitions_GetUserContentDefinitions api/v2/UserContentDefinitions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="userID">Optional. Filter by UserID.</param>
		/// <param name="contentDefinitionID">Optional. Filter by ContentDefinitionID</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesUserContentDefinition_> UserContentDefinitions_GetUserContentDefinitionsAsync(int limit, int offset, int userID, int contentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions?limit="+limit+"&offset="+offset+"&userID="+userID+"&contentDefinitionID="+contentDefinitionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_ContentSubmissionSharedBusinessEntitiesUserContentDefinition_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a UserContentDefinition
		/// Creates a UserContentDefinition.  The body of the POST is the UserContentDefinition to create.
		/// The UserContentDefinitionID will be assigned on creation of the Job.  When successful, the response
		/// is the UserContentDefinitionID.  If unsuccessful, an appropriate ApiError is returned.
		/// UserContentDefinitions_PostUserContentDefinition api/v2/UserContentDefinitions
		/// </summary>
		/// <param name="requestBody">The UserContentDefinition to create.</param>
		/// <returns>OK</returns>
		public async Task<int> UserContentDefinitions_PostUserContentDefinitionAsync(ContentSubmissionSharedBusinessEntitiesUserContentDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a UserContentDefinition
		/// Deletes an UserContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// UserContentDefinitions_DeleteUserContentDefinition api/v2/UserContentDefinitions/{userContentDefinitionID}
		/// </summary>
		/// <param name="userContentDefinitionID">The ID of the UserContentDefinition to delete</param>
		public async Task UserContentDefinitions_DeleteUserContentDefinitionAsync(int userContentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions/"+userContentDefinitionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a UserContentDefinition by ID
		/// Gets a UserContentDefinition by ID. When successful, the response is the requested UserContentDefinition.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// UserContentDefinitions_GetUserContentDefinition api/v2/UserContentDefinitions/{userContentDefinitionID}
		/// </summary>
		/// <param name="userContentDefinitionID">The ID of the UserContentDefinition to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmissionSharedBusinessEntitiesUserContentDefinition> UserContentDefinitions_GetUserContentDefinitionAsync(int userContentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions/"+userContentDefinitionID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContentSubmissionSharedBusinessEntitiesUserContentDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get users
		/// No Documentation Found.
		/// Users_Get api/v2/Users
		/// </summary>
		/// <param name="username">Optional. Search by username. Supports beginning and ending wildcards (*).</param>
		/// <param name="email">Optional. Search by email. Supports beginning and ending wildcards (*).</param>
		/// <param name="name">Optional. Search by name. Supports beginning and ending wildcards (*).</param>
		/// <param name="hasRole">Optional. Return only users having the provided role name.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsUser_> Users_GetAsync(string username, string email, string name, string hasRole, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users?username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&hasRole=" + (hasRole==null? "" : System.Uri.EscapeDataString(hasRole))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsUser_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a user
		/// No Documentation Found.
		/// Users_Post api/v2/Users
		/// </summary>
		/// <param name="requestBody">The user to create.</param>
		/// <returns>OK</returns>
		public async Task<APIModelsUser> Users_PostAsync(APIModelsUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIModelsUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the current user
		/// No Documentation Found.
		/// Users_GetCurrentUser api/v2/Users/Current
		/// </summary>
		/// <returns>OK</returns>
		public async Task<APIModelsUser> Users_GetCurrentUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIModelsUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user
		/// No Documentation Found.
		/// Users_PutCurrentUser api/v2/Users/Current
		/// </summary>
		/// <param name="requestBody">The user</param>
		public async Task Users_PutCurrentUserAsync(APIModelsUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a user's permissions
		/// No Documentation Found.
		/// UserPermissionsGetByPermissionAndLimitAndOffset api/v2/Users/Current/Permissions
		/// </summary>
		/// <param name="Permission">Filter by permission name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsUserEffectivePermission_> UserPermissionsGetByPermissionAndLimitAndOffsetAsync(string Permission, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current/Permissions?Permission=" + (Permission==null? "" : System.Uri.EscapeDataString(Permission))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsUserEffectivePermission_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the current user's roles
		/// No Documentation Found.
		/// UserPermissions_GetCurrentUserRoles api/v2/Users/Current/Roles
		/// </summary>
		/// <param name="Role">Filter by role name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsRole_> UserPermissions_GetCurrentUserRolesAsync(string Role, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current/Roles?Role=" + (Role==null? "" : System.Uri.EscapeDataString(Role))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsRole_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a user
		/// No Documentation Found.
		/// Users_Delete api/v2/Users/{id}
		/// </summary>
		/// <param name="id">The user id</param>
		public async Task Users_DeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific user
		/// No Documentation Found.
		/// UsersGetById api/v2/Users/{id}
		/// </summary>
		/// <param name="id">The user ID</param>
		/// <returns>OK</returns>
		public async Task<APIModelsUser> UsersGetByIdAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIModelsUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user
		/// No Documentation Found.
		/// Users_Put api/v2/Users/{id}
		/// </summary>
		/// <param name="id">The user id</param>
		/// <param name="requestBody">The user</param>
		public async Task Users_PutAsync(int id, APIModelsUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a user's permissions
		/// No Documentation Found.
		/// UserPermissions_GetPermissions api/v2/Users/{id}/Permissions
		/// </summary>
		/// <param name="id">The User's ID</param>
		/// <param name="Permission">Filter by permission name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsUserEffectivePermission_> UserPermissions_GetPermissionsAsync(int id, string Permission, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id+"/Permissions?Permission=" + (Permission==null? "" : System.Uri.EscapeDataString(Permission))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsUserEffectivePermission_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user's roles
		/// No Documentation Found.
		/// UserPermissions_GetRoles api/v2/Users/{id}/Roles
		/// </summary>
		/// <param name="id">The User's ID</param>
		/// <param name="Role">Filter by role name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_APIModelsRole_> UserPermissions_GetRolesAsync(int id, string Role, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id+"/Roles?Role=" + (Role==null? "" : System.Uri.EscapeDataString(Role))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_APIModelsRole_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user's roles
		/// No Documentation Found.
		/// UserPermissions_Put api/v2/Users/{id}/Roles
		/// </summary>
		/// <param name="id">The User's ID</param>
		/// <param name="requestBody">A list of changes to the User's Roles</param>
		public async Task UserPermissions_PutAsync(int id, APIModelsUserRoleChange[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id+"/Roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets voucher history data
		/// No Documentation Found.
		/// VoucherHistory_GetVoucherHistory api/v2/VoucherHistory
		/// </summary>
		/// <param name="VoucherCode">Optional. Filter history data by Voucher Code.</param>
		/// <param name="ChangedBefore">Optional. Filter history data where changes occured before provided date.</param>
		/// <param name="ChangedAfter">Optional. Filter history data where changes occured after provided date.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_DealerDBModelsVoucherHistory_> VoucherHistory_GetVoucherHistoryAsync(string VoucherCode, System.DateTimeOffset ChangedBefore, System.DateTimeOffset ChangedAfter, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/VoucherHistory?VoucherCode=" + (VoucherCode==null? "" : System.Uri.EscapeDataString(VoucherCode))+"&ChangedBefore=" + ChangedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ChangedAfter=" + ChangedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_DealerDBModelsVoucherHistory_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of vouchers
		/// No Documentation Found.
		/// Vouchers_Get api/v2/Vouchers
		/// </summary>
		/// <param name="Type">Optional. Filter vouchers by Type</param>
		/// <param name="DealerCode">Optional. Filter vouchers by DealerCode</param>
		/// <param name="LicenseTo">Optional. Filter vouchers by LicenseTo. Wildcard supported (*).</param>
		/// <param name="Purpose">Optional. Filter vouchers by Purpose. Wildcard supported (*).</param>
		/// <param name="OrderNumber">Optional. Filter vouchers by OrderNumber</param>
		/// <param name="Email">Optional. Filter vouchers by Email. Wildcard supported (*).</param>
		/// <param name="ModifiedBy">Optional. Filter vouchers by ModifiedBy</param>
		/// <param name="CreatedAfter">Optional. Filter vouchers by CreatedDate</param>
		/// <param name="CreatedBefore">Optional. Filter vouchers by CreatedDate</param>
		/// <param name="PunchedAfter">Optional. Filter vouchers by PunchedDate</param>
		/// <param name="PunchedBefore">Optional. Filter vouchers by PunchedDate</param>
		/// <param name="Punched">Optional. Filter vouchers by Punched status</param>
		/// <param name="ExpirationAfter">Optional. Filter vouchers by ExpirationDate</param>
		/// <param name="ExpirationBefore">Optional. Filter vouchers by ExpirationDate</param>
		/// <param name="Deleted">Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_DealerDBModelsVoucher_> Vouchers_GetAsync(
					DealerDBModelsVoucherHistoryType Type, 
					string DealerCode, 
					string LicenseTo, 
					string Purpose, 
					string OrderNumber, 
					string Email, 
					string ModifiedBy, 
					System.DateTimeOffset CreatedAfter, 
					System.DateTimeOffset CreatedBefore, 
					System.DateTimeOffset PunchedAfter, 
					System.DateTimeOffset PunchedBefore, 
					bool Punched, 
					System.DateTimeOffset ExpirationAfter, 
					System.DateTimeOffset ExpirationBefore, 
					Vouchers_GetDeleted Deleted, 
					int limit, 
					int offset, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers?Type=" + Type+"&DealerCode=" + (DealerCode==null? "" : System.Uri.EscapeDataString(DealerCode))+"&LicenseTo=" + (LicenseTo==null? "" : System.Uri.EscapeDataString(LicenseTo))+"&Purpose=" + (Purpose==null? "" : System.Uri.EscapeDataString(Purpose))+"&OrderNumber=" + (OrderNumber==null? "" : System.Uri.EscapeDataString(OrderNumber))+"&Email=" + (Email==null? "" : System.Uri.EscapeDataString(Email))+"&ModifiedBy=" + (ModifiedBy==null? "" : System.Uri.EscapeDataString(ModifiedBy))+"&CreatedAfter=" + CreatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&CreatedBefore=" + CreatedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&PunchedAfter=" + PunchedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&PunchedBefore=" + PunchedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Punched="+Punched+"&ExpirationAfter=" + ExpirationAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ExpirationBefore=" + ExpirationBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Deleted=" + Deleted+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_DealerDBModelsVoucher_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a voucher
		/// No Documentation Found.
		/// Vouchers_Post api/v2/Vouchers
		/// </summary>
		/// <param name="requestBody">The voucher to add.</param>
		/// <returns>OK</returns>
		public async Task<string> Vouchers_PostAsync(DealerDBModelsVoucher requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a voucher
		/// No Documentation Found.
		/// Vouchers_Delete api/v2/Vouchers/{VoucherCode}
		/// </summary>
		/// <param name="VoucherCode">The voucher code of the voucher to delete.</param>
		public async Task Vouchers_DeleteAsync(string VoucherCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : System.Uri.EscapeDataString(VoucherCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a voucher
		/// No Documentation Found.
		/// VouchersGetByVoucherCodeAndDeleted api/v2/Vouchers/{VoucherCode}
		/// </summary>
		/// <param name="VoucherCode">The voucher code of the voucher to get.</param>
		/// <param name="Deleted">Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.</param>
		/// <returns>OK</returns>
		public async Task<DealerDBModelsVoucher> VouchersGetByVoucherCodeAndDeletedAsync(string VoucherCode, Vouchers_GetDeleted Deleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : System.Uri.EscapeDataString(VoucherCode))+"&Deleted=" + Deleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DealerDBModelsVoucher>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a voucher
		/// No Documentation Found.
		/// Vouchers_Put api/v2/Vouchers/{VoucherCode}
		/// </summary>
		/// <param name="VoucherCode">The voucher code of the voucher to update.</param>
		/// <param name="requestBody">The updated voucher.</param>
		public async Task Vouchers_PutAsync(string VoucherCode, DealerDBModelsVoucher requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : System.Uri.EscapeDataString(VoucherCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a voucher's history.
		/// No Documentation Found.
		/// Vouchers_GetVoucherHistory api/v2/Vouchers/{VoucherCode}/VoucherHistory
		/// </summary>
		/// <param name="VoucherCode">The voucher code to get history for.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_DealerDBModelsVoucherHistory_> Vouchers_GetVoucherHistoryAsync(string VoucherCode, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : System.Uri.EscapeDataString(VoucherCode))+"/VoucherHistory&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_DealerDBModelsVoucherHistory_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Activities
		/// Gets a collection of Activities. When successful, the response is a PagedResponse of Activities.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Activities_GetActivities api/v2/activities
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="isIncludeDeleted">Does it include deleted activity, or not</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_BuildSystemSharedDTOActivity_> Activities_GetActivitiesAsync(int limit, int offset, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities?limit="+limit+"&offset="+offset+"&isIncludeDeleted="+isIncludeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_BuildSystemSharedDTOActivity_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Activity
		/// Creates an Activity.  The body of the POST is the Activity to create.  The ActivityID will be assigned
		/// on creation of the Activity.  When successful, the response is the ActivityID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// Activities_PostActivity api/v2/activities
		/// </summary>
		/// <param name="requestBody">The activity to create.  The ActivityID will be assigned on creation of the Activity.</param>
		/// <returns>OK</returns>
		public async Task<int> Activities_PostActivityAsync(BuildSystemSharedDTOActivity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark the delete flag for the Activity
		/// Deletes an Activity. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// Activities_DeleteActivity api/v2/activities/{activityID}
		/// </summary>
		/// <param name="activityID">The id of the activity to delete</param>
		public async Task Activities_DeleteActivityAsync(int activityID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities/"+activityID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an Activity by ID
		/// Gets an Activity by ID. When successful, the response is the requested Activity.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// Activities_GetActivity api/v2/activities/{activityID}
		/// </summary>
		/// <param name="activityID">The ID of the Activity to get.</param>
		/// <param name="isIncludeDeleted">Does it include deleted activity, or not</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOActivity> Activities_GetActivityAsync(int activityID, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities/"+activityID+"?isIncludeDeleted="+isIncludeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOActivity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Activity
		/// Updates an Activity.  The body of the PUT is the updated Activity.  When successful, the response is empty.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Activities_PutActivity api/v2/activities/{activityID}
		/// </summary>
		/// <param name="activityID">The id of the activity to update</param>
		/// <param name="requestBody">The updated activity</param>
		public async Task Activities_PutActivityAsync(int activityID, BuildSystemSharedDTOActivity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities/"+activityID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get ActivityRuns
		/// Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_GetActivityRuns api/v2/activityRuns
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="status">Optional. Filter activity runs by status.  Value should be a comma separated list of status to include.
		///            If not specified, the default status filter is “InProgress”.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_BuildSystemSharedDTOActivityRun_> ActivityRuns_GetActivityRunsAsync(int limit, int offset, BuildSystemSharedDTOActivityRunStatusStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns?limit="+limit+"&offset="+offset+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_BuildSystemSharedDTOActivityRun_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an ActivityRun by ID
		/// Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// ActivityRuns_GetActivityRun api/v2/activityRuns/{activityRunID}
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to get.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOActivityRun> ActivityRuns_GetActivityRunAsync(int activityRunID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOActivityRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an ActivityRun
		/// Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_PutActivityRun api/v2/activityRuns/{activityRunID}
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to update ActivityRunStatus for.</param>
		/// <param name="requestBody">The updated ActivityRun.</param>
		public async Task ActivityRuns_PutActivityRunAsync(int activityRunID, BuildSystemSharedDTOActivityRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the ActivityRunStatus of an ActivityRun
		/// Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_GetActivityRunStatus api/v2/activityRuns/{activityRunID}/status
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to get ActivityRunStatus for.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOActivityRunStatus> ActivityRuns_GetActivityRunStatusAsync(int activityRunID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOActivityRunStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the ActivityRunStatus of an ActivityRun
		/// Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_PutActivityRunStatus api/v2/activityRuns/{activityRunID}/status
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to update ActivityRunStatus for.</param>
		/// <param name="requestBody">The updated ActivityRunStatus.</param>
		public async Task ActivityRuns_PutActivityRunStatusAsync(int activityRunID, BuildSystemSharedDTOActivityRunStatus requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Agents
		/// Gets a collection of Agents. When successful, the response is a PagedResponse of Agents.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Agents_GetAgents api/v2/agents
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_BuildSystemSharedDTOAgent_> Agents_GetAgentsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_BuildSystemSharedDTOAgent_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Agent
		/// Creates an Agent.  The body of the POST is the Agent to create.  The AgentID will be assigned
		/// on creation of the Agent.  When successful, the response is the AgentID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// Agents_PostAgent api/v2/agents
		/// </summary>
		/// <param name="requestBody">The Agent to create.  The AgentID will be assigned on creation of the Agent.</param>
		/// <returns>OK</returns>
		public async Task<int> Agents_PostAgentAsync(BuildSystemSharedDTOAgent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Agent associated with the current user
		/// Gets the Agent associated with the current user. When successful, the response is the requested Agent.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// Agents_GetCurrentAgent api/v2/agents/Current
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOAgent> Agents_GetCurrentAgentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/Current";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the ActivityRun of Agent associated with the current user
		/// Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun
		/// assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
		/// Agents_GetCurrentAgentActivityRun api/v2/agents/Current/ActivityRun
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOActivityRun> Agents_GetCurrentAgentActivityRunAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/Current/ActivityRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOActivityRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Agent
		/// Deletes an Agent. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// Agents_DeleteAgent api/v2/agents/{agentID}
		/// </summary>
		/// <param name="agentID">The id of the Agent to delete.</param>
		public async Task Agents_DeleteAgentAsync(int agentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Agent
		/// Gets an Agent by ID. When successful, the response is the requested Agent.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// Agents_GetAgent api/v2/agents/{agentID}
		/// </summary>
		/// <param name="agentID">The id of the Agent to get.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOAgent> Agents_GetAgentAsync(int agentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOAgent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Agent
		/// Updates an Agent.  The body of the PUT is the updated Agent.  When successful, the response is empty.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Agents_PutAgent api/v2/agents/{agentID}
		/// </summary>
		/// <param name="agentID">The id of the Agent to update.</param>
		/// <param name="requestBody">The updated Agent</param>
		public async Task Agents_PutAgentAsync(int agentID, BuildSystemSharedDTOAgent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an Agent's ActivityRun
		/// Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun
		/// assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
		/// Agents_GetAgentActivityRun api/v2/agents/{agentID}/ActivityRun
		/// </summary>
		/// <param name="agentID">The id of the Agent to get.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOActivityRun> Agents_GetAgentActivityRunAsync(int agentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID+"/ActivityRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOActivityRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the ActivityRun assigned to the Agent.
		/// No Documentation Found.
		/// Agents_PutAgentActivityRun api/v2/agents/{agentID}/ActivityRun
		/// </summary>
		/// <param name="agentID">The id of the Agent to update.</param>
		/// <param name="requestBody">The ActivityRun assigned to the agent.  Only the ActivityRunID is used.</param>
		public async Task Agents_PutAgentActivityRunAsync(int agentID, BuildSystemSharedDTOActivityRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID+"/ActivityRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an Agent
		/// Updates the status of an Agent.The body of the PUT is the updated Agent status.  When successful,
		/// the response is empty.If unsuccessful, an appropriate ApiError is returned.
		/// Agents_PutAgentStatus api/v2/agents/{agentID}/Status
		/// </summary>
		/// <param name="agentID">The id of the Agent to update.</param>
		/// <param name="requestBody">The updated AgentStatus.</param>
		public async Task Agents_PutAgentStatusAsync(int agentID, BuildSystemSharedDTOAgentStatus requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID+"/Status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get JobRuns
		/// Gets a collection of JobRuns. When successful, the response is a PagedResponse of JobRuns.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// JobRuns_GetJobRuns api/v2/jobRuns
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="includeActivityRunDetails">Optional. Indicates whether to include ActivityRun details.  Defaults to false.</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_BuildSystemSharedDTOJobRun_> JobRuns_GetJobRunsAsync(int limit, int offset, bool includeActivityRunDetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns?limit="+limit+"&offset="+offset+"&includeActivityRunDetails="+includeActivityRunDetails;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_BuildSystemSharedDTOJobRun_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a JobRun
		/// Creates a JobRun.  The body of the POST is the JobRun to create.  The JobRunID will be assigned on
		/// creation of the JobRun.  When successful, the response is the JobRunID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// JobRuns_PostJobRun api/v2/jobRuns
		/// </summary>
		/// <param name="requestBody">The JobRun to create.  The JobRunID will be assigned on creation of the JobRun.</param>
		/// <returns>OK</returns>
		public async Task<int> JobRuns_PostJobRunAsync(BuildSystemSharedDTOJobRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a JobRun
		/// Deletes a JobRun. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// JobRuns_DeleteJobRun api/v2/jobRuns/{jobRunID}
		/// </summary>
		/// <param name="jobRunID">The id of the JobRun to delete</param>
		public async Task JobRuns_DeleteJobRunAsync(int jobRunID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns/"+jobRunID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a JobRun by ID
		/// Gets a JobRun by ID. When successful, the response is the requested JobRun.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// JobRuns_GetJobRun api/v2/jobRuns/{jobRunID}
		/// </summary>
		/// <param name="jobRunID">The ID of the JobRun to get.</param>
		/// <param name="includeActivityRunDetails">Optional. Indicates whether to include ActivityRun details.  Defaults to false.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOJobRun> JobRuns_GetJobRunAsync(int jobRunID, bool includeActivityRunDetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns/"+jobRunID+"?includeActivityRunDetails="+includeActivityRunDetails;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOJobRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a JobRun
		/// ///
		/// Updates a JobRun.  The body of the PUT is the updated JobRun.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// JobRuns_PutJobRun api/v2/jobRuns/{jobRunID}
		/// </summary>
		/// <param name="jobRunID">The id of the JobRun to update</param>
		/// <param name="requestBody">The updated JobRun</param>
		public async Task JobRuns_PutJobRunAsync(int jobRunID, BuildSystemSharedDTOJobRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns/"+jobRunID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Jobs
		/// Gets a collection of Jobs. When successful, the response is a PagedResponse of Jobs.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ///
		/// Jobs_GetJobs api/v2/jobs
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="isIncludeDeleted">Does it include deleted job, or not</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_BuildSystemSharedDTOJob_> Jobs_GetJobsAsync(int limit, int offset, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs?limit="+limit+"&offset="+offset+"&isIncludeDeleted="+isIncludeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_BuildSystemSharedDTOJob_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Job
		/// Creates a Job.  The body of the POST is the Job to create.  The JobID will be assigned on
		/// creation of the Job.  When successful, the response is the JobID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// Jobs_PostJob api/v2/jobs
		/// </summary>
		/// <param name="requestBody">The job to create.  The JobID will be assigned on creation of the Job.</param>
		/// <returns>OK</returns>
		public async Task<int> Jobs_PostJobAsync(BuildSystemSharedDTOJob requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark the delete flag for the Job
		/// Deletes a Job. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// Jobs_DeleteJob api/v2/jobs/{jobID}
		/// </summary>
		/// <param name="jobID">The id of the job to delete</param>
		public async Task Jobs_DeleteJobAsync(int jobID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs/"+jobID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Job by ID
		/// Gets a Job by ID. When successful, the response is the requested Job.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Jobs_GetJob api/v2/jobs/{jobID}
		/// </summary>
		/// <param name="jobID">The ID of the Job to get.</param>
		/// <param name="isIncludeDeleted">Does it include deleted job, or not</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOJob> Jobs_GetJobAsync(int jobID, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs/"+jobID+"?isIncludeDeleted="+isIncludeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOJob>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Job
		/// Updates a Job.  The body of the PUT is the updated Job.  When successful, the response is empty.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Jobs_PutJob api/v2/jobs/{jobID}
		/// </summary>
		/// <param name="jobID">The id of the job to update</param>
		/// <param name="requestBody">The updated job</param>
		public async Task Jobs_PutJobAsync(int jobID, BuildSystemSharedDTOJob requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs/"+jobID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Steps
		/// Gets a collection of Steps. When successful, the response is a PagedResponse of Steps.
		/// If unsuccessful, an appropriate ApiError is returned.  Steps.Read permission is required.
		/// Steps_GetSteps api/v2/steps
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="includeDeleted">Does it include deleted step, or not</param>
		/// <returns>OK</returns>
		public async Task<APIPagedResponse_BuildSystemSharedDTOStep_> Steps_GetStepsAsync(int limit, int offset, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps?limit="+limit+"&offset="+offset+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIPagedResponse_BuildSystemSharedDTOStep_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Step
		/// No Documentation Found.
		/// Steps_PostStep api/v2/steps
		/// </summary>
		/// <param name="requestBody">The step to create</param>
		/// <returns>OK</returns>
		public async Task<int> Steps_PostStepAsync(BuildSystemSharedDTOStep requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Step by ID
		/// Gets a Step by ID. When successful, the response is the requested Step.
		/// If unsuccessful, an appropriate ApiError is returned.  Steps.Read permission is required.
		/// Steps_GetStep api/v2/steps/{stepID}
		/// </summary>
		/// <param name="stepID">The ID of the Step to get.</param>
		/// <param name="isIncludeDeleted">Does it include deleted step, or not</param>
		/// <returns>OK</returns>
		public async Task<BuildSystemSharedDTOStep> Steps_GetStepAsync(int stepID, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps/"+stepID+"?isIncludeDeleted="+isIncludeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuildSystemSharedDTOStep>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Step
		/// No Documentation Found.
		/// Steps_PutStep api/v2/steps/{stepID}
		/// </summary>
		/// <param name="stepID">The step ID of the step to update</param>
		/// <param name="requestBody">The updated step</param>
		public async Task Steps_PutStepAsync(int stepID, BuildSystemSharedDTOStep requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps/"+stepID;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Licenses_GetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 2,
	}
	
	public enum PriorityPackages_GetPriorityPackagesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 2,
	}
	
	public enum Reporting_CurrentPackagesInUpdateGroupSubscriptionTypeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequiredOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 2,
	}
	
	public enum Vouchers_GetDeleted
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotDeleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
