//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Association
	{
		
		/// <summary>
		/// The unique identifier of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FileId { get; set; }
		
		/// <summary>
		/// The Object Group that the object is in. These roughly correlate to the endpoints that can be used to retrieve the object via the core accounting API.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AssociationObjectGroup> ObjectGroup { get; set; }
		
		/// <summary>
		/// The identifier of the object that the file is being associated with (e.g. InvoiceID, BankTransactionID, ContactID)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The Object Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AssociationObjectType> ObjectType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssociationObjectGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Account")]
		Account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BankTransaction")]
		BankTransaction = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreditNote")]
		CreditNote = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoice")]
		Invoice = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Item")]
		Item = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ManualJournal")]
		ManualJournal = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Overpayment")]
		Overpayment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Payment")]
		Payment = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Prepayment")]
		Prepayment = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Receipt")]
		Receipt = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssociationObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accpay")]
		Accpay = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccPayCredit")]
		AccPayCredit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccPayPayment")]
		AccPayPayment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccRec")]
		AccRec = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccRecCredit")]
		AccRecCredit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccRecPayment")]
		AccRecPayment = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Adjustment")]
		Adjustment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApCreditPayment")]
		ApCreditPayment = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApOverPayment")]
		ApOverPayment = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApOverPaymentPayment")]
		ApOverPaymentPayment = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApOverPaymentSourcePayment")]
		ApOverPaymentSourcePayment = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApPrepayment")]
		ApPrepayment = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApPrepaymentPayment")]
		ApPrepaymentPayment = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApPrepaymentSourcePayment")]
		ApPrepaymentSourcePayment = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArCreditPayment")]
		ArCreditPayment = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArOverPayment")]
		ArOverPayment = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArOverpaymentPayment")]
		ArOverpaymentPayment = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArOverpaymentSourcePayment")]
		ArOverpaymentSourcePayment = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArPrepayment")]
		ArPrepayment = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArPrepaymentPayment")]
		ArPrepaymentPayment = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArPrepaymentSourcePayment")]
		ArPrepaymentSourcePayment = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CashPaid")]
		CashPaid = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CashRec")]
		CashRec = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExpPayment")]
		ExpPayment = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ManJournal")]
		ManJournal = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PurchaseOrder")]
		PurchaseOrder = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Receipt")]
		Receipt = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transfer")]
		Transfer = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Account")]
		Account = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Business")]
		Business = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Employee")]
		Employee = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Person")]
		Person = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Org")]
		Org = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FixedAsset")]
		FixedAsset = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PayRun")]
		PayRun = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PriceListItem")]
		PriceListItem = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bank")]
		Bank = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Current")]
		Current = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Equity")]
		Equity = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Expense")]
		Expense = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fixed")]
		Fixed = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Liability")]
		Liability = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Prepayment")]
		Prepayment = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Revenue")]
		Revenue = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sales")]
		Sales = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Overheads")]
		Overheads = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Depreciatn")]
		Depreciatn = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherIncome")]
		OtherIncome = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DirectCosts")]
		DirectCosts = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Currliab")]
		Currliab = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Termliab")]
		Termliab = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NonCurrent")]
		NonCurrent = 54,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileObject
	{
		
		/// <summary>
		/// Created date in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedDateUtc { get; set; }
		
		/// <summary>
		/// Folder relation object's UUID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FolderId { get; set; }
		
		/// <summary>
		/// File object's UUID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// MimeType of the file (image/png, image/jpeg, application/pdf, etc..)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MimeType { get; set; }
		
		/// <summary>
		/// File Name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Numeric value in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// Updated date in UTC
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedDateUtc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// First name of user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last name of user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FullName { get; set; }
		
		/// <summary>
		/// Xero identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Last name of user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		/// <summary>
		/// Key is Name, but returns Email address of user who created the file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Files
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FileObject[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Folder
	{
		
		/// <summary>
		/// The email address used to email files to the inbox. Only the inbox will have this element.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The number of files in the folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FileCount { get; set; }
		
		/// <summary>
		/// Xero unique identifier for a folder  Files
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// to indicate if the folder is the Inbox. The Inbox cannot be renamed or deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsInbox { get; set; }
		
		/// <summary>
		/// The name of the folder
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Folders
	{
		
		[System.Runtime.Serialization.DataMember(Name="Folders")]
		public Folder[] Folders1 { get; set; }
	}
	
	/// <summary>
	/// The Object Group that the object is in. These roughly correlate to the endpoints that can be used to retrieve the object via the core accounting API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ObjectGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Account")]
		Account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BankTransaction")]
		BankTransaction = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreditNote")]
		CreditNote = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invoice")]
		Invoice = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Item")]
		Item = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ManualJournal")]
		ManualJournal = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Overpayment")]
		Overpayment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Payment")]
		Payment = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Prepayment")]
		Prepayment = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Receipt")]
		Receipt = 10,
	}
	
	/// <summary>
	/// The Object Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accpay")]
		Accpay = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccPayCredit")]
		AccPayCredit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccPayPayment")]
		AccPayPayment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccRec")]
		AccRec = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccRecCredit")]
		AccRecCredit = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccRecPayment")]
		AccRecPayment = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Adjustment")]
		Adjustment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApCreditPayment")]
		ApCreditPayment = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApOverPayment")]
		ApOverPayment = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApOverPaymentPayment")]
		ApOverPaymentPayment = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApOverPaymentSourcePayment")]
		ApOverPaymentSourcePayment = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApPrepayment")]
		ApPrepayment = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApPrepaymentPayment")]
		ApPrepaymentPayment = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApPrepaymentSourcePayment")]
		ApPrepaymentSourcePayment = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArCreditPayment")]
		ArCreditPayment = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArOverPayment")]
		ArOverPayment = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArOverpaymentPayment")]
		ArOverpaymentPayment = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArOverpaymentSourcePayment")]
		ArOverpaymentSourcePayment = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArPrepayment")]
		ArPrepayment = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArPrepaymentPayment")]
		ArPrepaymentPayment = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ArPrepaymentSourcePayment")]
		ArPrepaymentSourcePayment = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CashPaid")]
		CashPaid = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CashRec")]
		CashRec = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExpPayment")]
		ExpPayment = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ManJournal")]
		ManJournal = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PurchaseOrder")]
		PurchaseOrder = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Receipt")]
		Receipt = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transfer")]
		Transfer = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Account")]
		Account = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Contact")]
		Contact = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Business")]
		Business = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Employee")]
		Employee = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Person")]
		Person = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Org")]
		Org = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FixedAsset")]
		FixedAsset = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PayRun")]
		PayRun = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PriceListItem")]
		PriceListItem = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bank")]
		Bank = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Current")]
		Current = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Equity")]
		Equity = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Expense")]
		Expense = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fixed")]
		Fixed = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Liability")]
		Liability = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Prepayment")]
		Prepayment = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Revenue")]
		Revenue = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sales")]
		Sales = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Overheads")]
		Overheads = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Depreciatn")]
		Depreciatn = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OtherIncome")]
		OtherIncome = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DirectCosts")]
		DirectCosts = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Currliab")]
		Currliab = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Termliab")]
		Termliab = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NonCurrent")]
		NonCurrent = 54,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves an association object using a unique object ID
		/// By passing in the appropriate options,
		/// GetAssociationsByObject Associations/{ObjectId}
		/// </summary>
		/// <param name="ObjectId">Object id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Association[]> GetAssociationsByObjectAsync(string ObjectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Associations/"+ (ObjectId==null? "" : System.Uri.EscapeDataString(ObjectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Association[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves files
		/// GetFiles Files
		/// </summary>
		/// <param name="pagesize">pass an optional page size value</param>
		/// <param name="page">number of records to skip for pagination</param>
		/// <param name="sort">values to sort by</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Files> GetFilesAsync(int pagesize, int page, GetFilesSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files?pagesize="+pagesize+"&page="+page+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Files>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a specific file
		/// Delete a specific file
		/// DeleteFile Files/{FileId}
		/// </summary>
		/// <param name="FileId">File id for single object</param>
		public async Task DeleteFileAsync(string FileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files/"+ (FileId==null? "" : System.Uri.EscapeDataString(FileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a file by a unique file ID
		/// GetFile Files/{FileId}
		/// </summary>
		/// <param name="FileId">File id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<FileObject> GetFileAsync(string FileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files/"+ (FileId==null? "" : System.Uri.EscapeDataString(FileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FileObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a file
		/// Updates file properties of a single file
		/// UpdateFile Files/{FileId}
		/// </summary>
		/// <param name="FileId">File id for single object</param>
		/// <returns>A successful request</returns>
		public async Task<FileObject> UpdateFileAsync(string FileId, FileObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files/"+ (FileId==null? "" : System.Uri.EscapeDataString(FileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FileObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a specific file associations
		/// By passing in the appropriate options,
		/// 
		/// GetFileAssociations Files/{FileId}/Associations
		/// </summary>
		/// <param name="FileId">File id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Association[]> GetFileAssociationsAsync(string FileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files/"+ (FileId==null? "" : System.Uri.EscapeDataString(FileId))+"/Associations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Association[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new file association
		/// By passing in the appropriate options, you can create a new folder
		/// CreateFileAssociation Files/{FileId}/Associations
		/// </summary>
		/// <param name="FileId">File id for single object</param>
		public async Task CreateFileAssociationAsync(string FileId, Association requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files/"+ (FileId==null? "" : System.Uri.EscapeDataString(FileId))+"/Associations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing file association
		/// By passing in the appropriate options, you can create a new folder
		/// DeleteFileAssociation Files/{FileId}/Associations/{ObjectId}
		/// </summary>
		/// <param name="FileId">File id for single object</param>
		/// <param name="ObjectId">Object id for single object</param>
		public async Task DeleteFileAssociationAsync(string FileId, string ObjectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files/"+ (FileId==null? "" : System.Uri.EscapeDataString(FileId))+"/Associations/"+ (ObjectId==null? "" : System.Uri.EscapeDataString(ObjectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the content of a specific file
		/// By passing in the appropriate options, retrieve data for specific file
		/// GetFileContent Files/{FileId}/Content
		/// </summary>
		/// <param name="FileId">File id for single object</param>
		/// <returns>returns the byte array of the specific file based on id</returns>
		public async Task GetFileContentAsync(string FileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Files/"+ (FileId==null? "" : System.Uri.EscapeDataString(FileId))+"/Content";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves folders
		/// By passing in the appropriate options, you can search for available folders
		/// GetFolders Folders
		/// </summary>
		/// <param name="sort">values to sort by</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Folder[]> GetFoldersAsync(GetFilesSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Folders?sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Folder[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new folder
		/// By passing in the appropriate properties, you can create a new folder
		/// CreateFolder Folders
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<Folder> CreateFolderAsync(Folder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Folders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Folder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a folder
		/// By passing in the appropriate ID, you can delete a folder
		/// DeleteFolder Folders/{FolderId}
		/// </summary>
		/// <param name="FolderId">Folder id for single object</param>
		public async Task DeleteFolderAsync(string FolderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Folders/"+ (FolderId==null? "" : System.Uri.EscapeDataString(FolderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves specific folder by using a unique folder ID
		/// By passing in the appropriate ID, you can search for specific folder
		/// GetFolder Folders/{FolderId}
		/// </summary>
		/// <param name="FolderId">Folder id for single object</param>
		/// <returns>search results matching criteria</returns>
		public async Task<Folder> GetFolderAsync(string FolderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Folders/"+ (FolderId==null? "" : System.Uri.EscapeDataString(FolderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Folder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing folder
		/// By passing in the appropriate ID and properties, you can update a folder
		/// UpdateFolder Folders/{FolderId}
		/// </summary>
		/// <param name="FolderId">Folder id for single object</param>
		/// <returns>return the updated object</returns>
		public async Task<Folder> UpdateFolderAsync(string FolderId, Folder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Folders/"+ (FolderId==null? "" : System.Uri.EscapeDataString(FolderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Folder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves inbox folder
		/// Search for the user inbox
		/// GetInbox Inbox
		/// </summary>
		/// <returns>search results matching criteria</returns>
		public async Task<Folder> GetInboxAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Inbox";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Folder>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetFilesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Size")]
		Size = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreatedDateUTC")]
		CreatedDateUTC = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
