//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ApprovalConfig describes configuration for manual approval of a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApprovalConfig
	{
		
		/// <summary>
		/// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalRequired")]
		public System.Nullable<System.Boolean> ApprovalRequired { get; set; }
	}
	
	/// <summary>
	/// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApprovalResult
	{
		
		/// <summary>
		/// Output only. The time when the approval decision was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalTime")]
		public string ApprovalTime { get; set; }
		
		/// <summary>
		/// Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approverAccount")]
		public string ApproverAccount { get; set; }
		
		/// <summary>
		/// Optional. An optional comment for this manual approval result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Required. The decision of this manual approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public System.Nullable<ApprovalResultDecision> Decision { get; set; }
		
		/// <summary>
		/// Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApprovalResultDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECISION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
	}
	
	/// <summary>
	/// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArtifactObjects
	{
		
		/// <summary>
		/// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Path globs used to match files in the build's workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TimeSpan Timing { get; set; }
	}
	
	/// <summary>
	/// Start and end times for a build execution phase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeSpan
	{
		
		/// <summary>
		/// End of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Start of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArtifactResult
	{
		
		/// <summary>
		/// The file hash of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHash")]
		public FileHashes[] FileHash { get; set; }
		
		/// <summary>
		/// The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileHashes
	{
		
		/// <summary>
		/// Collection of file hashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHash")]
		public Hash[] FileHash { get; set; }
	}
	
	/// <summary>
	/// Container message for hash values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hash
	{
		
		/// <summary>
		/// The type of hash that was performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<HashType> Type { get; set; }
		
		/// <summary>
		/// The hash value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 2,
	}
	
	/// <summary>
	/// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Artifacts
	{
		
		/// <summary>
		/// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mavenArtifacts")]
		public MavenArtifact[] MavenArtifacts { get; set; }
		
		/// <summary>
		/// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public ArtifactObjects Objects { get; set; }
		
		/// <summary>
		/// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonPackages")]
		public PythonPackage[] PythonPackages { get; set; }
	}
	
	/// <summary>
	/// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MavenArtifact
	{
		
		/// <summary>
		/// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// Maven `groupId` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// Maven `version` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PythonPackage
	{
		
		/// <summary>
		/// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
	}
	
	/// <summary>
	/// Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateBitbucketServerConnectedRepositoriesResponse
	{
		
		/// <summary>
		/// The connected Bitbucket Server repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConnectedRepositories")]
		public BitbucketServerConnectedRepository[] BitbucketServerConnectedRepositories { get; set; }
	}
	
	/// <summary>
	/// / BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerConnectedRepository
	{
		
		/// <summary>
		/// The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repo")]
		public BitbucketServerRepositoryId Repo { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerRepositoryId
	{
		
		/// <summary>
		/// Required. Identifier for the project storing the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectKey")]
		public string ProjectKey { get; set; }
		
		/// <summary>
		/// Required. Identifier for the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoSlug")]
		public string RepoSlug { get; set; }
		
		/// <summary>
		/// Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public System.Nullable<System.Int32> WebhookId { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Response of BatchCreateGitLabConnectedRepositories RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateGitLabConnectedRepositoriesResponse
	{
		
		/// <summary>
		/// The GitLab connected repository requests' responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConnectedRepositories")]
		public GitLabConnectedRepository[] GitlabConnectedRepositories { get; set; }
	}
	
	/// <summary>
	/// GitLabConnectedRepository represents a GitLab connected repository request response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabConnectedRepository
	{
		
		/// <summary>
		/// The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repo")]
		public GitLabRepositoryId Repo { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabRepositoryId
	{
		
		/// <summary>
		/// Required. Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public System.Nullable<System.Int32> WebhookId { get; set; }
	}
	
	/// <summary>
	/// Metadata for `BatchCreateGitLabConnectedRepositories` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateGitLabConnectedRepositoriesResponseMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Message for response of creating repositories in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateRepositoriesResponse
	{
		
		/// <summary>
		/// Repository resources created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public Repository[] Repositories { get; set; }
	}
	
	/// <summary>
	/// A repository associated to a parent connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Repository
	{
		
		/// <summary>
		/// Allows clients to store small amounts of arbitrary data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. Server assigned timestamp for when the connection was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Immutable. Resource name of the repository, in the format `projects/*/locations/*/connections/*/repositories/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Git Clone HTTPS URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteUri")]
		public string RemoteUri { get; set; }
		
		/// <summary>
		/// Output only. Server assigned timestamp for when the connection was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Build
	{
		
		/// <summary>
		/// BuildApproval describes a build's approval configuration, state, and result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public BuildApproval Approval { get; set; }
		
		/// <summary>
		/// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public Artifacts Artifacts { get; set; }
		
		/// <summary>
		/// Secrets and secret environment variables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableSecrets")]
		public Secrets AvailableSecrets { get; set; }
		
		/// <summary>
		/// Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildTriggerId")]
		public string BuildTriggerId { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to create the build was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A fatal problem encountered during the execution of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public FailureInfo FailureInfo { get; set; }
		
		/// <summary>
		/// Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public string FinishTime { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// Output only. URL to logs for this build in Google Cloud Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logUrl")]
		public string LogUrl { get; set; }
		
		/// <summary>
		/// Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsBucket")]
		public string LogsBucket { get; set; }
		
		/// <summary>
		/// Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional arguments to enable specific features of builds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public BuildOptions Options { get; set; }
		
		/// <summary>
		/// Output only. ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueTtl")]
		public string QueueTtl { get; set; }
		
		/// <summary>
		/// Artifacts created by the build pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Results Results { get; set; }
		
		/// <summary>
		/// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public Secret[] Secrets { get; set; }
		
		/// <summary>
		/// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Location of the source in a supported storage service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenance")]
		public SourceProvenance SourceProvenance { get; set; }
		
		/// <summary>
		/// Output only. Time at which execution of the build was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. Status of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BuildStatus> Status { get; set; }
		
		/// <summary>
		/// Output only. Customer-readable message about the current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Required. The operations to be performed on the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public BuildStep[] Steps { get; set; }
		
		/// <summary>
		/// Substitutions data for `Build` resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutions")]
		public System.Collections.Generic.Dictionary<string, string> Substitutions { get; set; }
		
		/// <summary>
		/// Tags for annotation of a `Build`. These are not docker tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public System.Collections.Generic.Dictionary<string, TimeSpan> Timing { get; set; }
		
		/// <summary>
		/// Output only. Non-fatal problems encountered during the execution of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public Warning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// BuildApproval describes a build's approval configuration, state, and result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildApproval
	{
		
		/// <summary>
		/// ApprovalConfig describes configuration for manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ApprovalConfig Config { get; set; }
		
		/// <summary>
		/// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ApprovalResult Result { get; set; }
		
		/// <summary>
		/// Output only. The state of this build's approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<BuildApprovalState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildApprovalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
	}
	
	/// <summary>
	/// Secrets and secret environment variables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Secrets
	{
		
		/// <summary>
		/// Secrets encrypted with KMS key and the associated secret environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public InlineSecret[] Inline { get; set; }
		
		/// <summary>
		/// Secrets in Secret Manager and associated secret environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretManager")]
		public SecretManagerSecret[] SecretManager { get; set; }
	}
	
	/// <summary>
	/// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineSecret
	{
		
		/// <summary>
		/// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envMap")]
		public System.Collections.Generic.Dictionary<string, string> EnvMap { get; set; }
		
		/// <summary>
		/// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecretManagerSecret
	{
		
		/// <summary>
		/// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string Env { get; set; }
		
		/// <summary>
		/// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	/// <summary>
	/// A fatal problem encountered during the execution of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailureInfo
	{
		
		/// <summary>
		/// Explains the failure issue in more detail using hard-coded text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The name of the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FailureInfoType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailureInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_IMAGE_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_NOT_AUTHORIZED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGGING_FAILURE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_BUILD_STEP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FETCH_SOURCE_FAILED = 6,
	}
	
	/// <summary>
	/// Optional arguments to enable specific features of builds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildOptions
	{
		
		/// <summary>
		/// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicSubstitutions")]
		public System.Nullable<System.Boolean> DynamicSubstitutions { get; set; }
		
		/// <summary>
		/// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Option to define build log streaming behavior to Google Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logStreamingOption")]
		public System.Nullable<BuildOptionsLogStreamingOption> LogStreamingOption { get; set; }
		
		/// <summary>
		/// Option to specify the logging mode, which determines if and where build logs are stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public System.Nullable<BuildOptionsLogging> Logging { get; set; }
		
		/// <summary>
		/// Compute Engine machine type on which to run the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public System.Nullable<BuildOptionsMachineType> MachineType { get; set; }
		
		/// <summary>
		/// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public PoolOption Pool { get; set; }
		
		/// <summary>
		/// Requested verifiability options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedVerifyOption")]
		public System.Nullable<BuildOptionsRequestedVerifyOption> RequestedVerifyOption { get; set; }
		
		/// <summary>
		/// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public string[] SecretEnv { get; set; }
		
		/// <summary>
		/// Requested hash for SourceProvenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenanceHash")]
		public HashType[] SourceProvenanceHash { get; set; }
		
		/// <summary>
		/// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutionOption")]
		public System.Nullable<BuildOptionsSubstitutionOption> SubstitutionOption { get; set; }
		
		/// <summary>
		/// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
		
		/// <summary>
		/// This field deprecated; please use `pool.name` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsLogStreamingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_OFF = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsLogging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGGING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STACKDRIVER_ONLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_LOGGING_ONLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsMachineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N1_HIGHCPU_8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N1_HIGHCPU_32 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_HIGHCPU_8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_HIGHCPU_32 = 4,
	}
	
	/// <summary>
	/// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoolOption
	{
		
		/// <summary>
		/// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsRequestedVerifyOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VERIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsSubstitutionOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUST_MATCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_LOOSE = 1,
	}
	
	/// <summary>
	/// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		/// <summary>
		/// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Artifacts created by the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Results
	{
		
		/// <summary>
		/// Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactManifest")]
		public string ArtifactManifest { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactTiming")]
		public TimeSpan ArtifactTiming { get; set; }
		
		/// <summary>
		/// List of build step digests, in the order corresponding to build step indices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStepImages")]
		public string[] BuildStepImages { get; set; }
		
		/// <summary>
		/// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStepOutputs")]
		public string[] BuildStepOutputs { get; set; }
		
		/// <summary>
		/// Container images that were built as a part of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public BuiltImage[] Images { get; set; }
		
		/// <summary>
		/// Maven artifacts uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mavenArtifacts")]
		public UploadedMavenArtifact[] MavenArtifacts { get; set; }
		
		/// <summary>
		/// Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numArtifacts")]
		public string NumArtifacts { get; set; }
		
		/// <summary>
		/// Python artifacts uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonPackages")]
		public UploadedPythonPackage[] PythonPackages { get; set; }
	}
	
	/// <summary>
	/// An image built by the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltImage
	{
		
		/// <summary>
		/// Docker Registry 2.0 digest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// Name used to push the container image to Google Container Registry, as presented to `docker push`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public TimeSpan PushTiming { get; set; }
	}
	
	/// <summary>
	/// A Maven artifact uploaded using the MavenArtifact directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadedMavenArtifact
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Artifact uploaded using the PythonPackage directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadedPythonPackage
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Secret
	{
		
		/// <summary>
		/// Cloud KMS key name to use to decrypt these envs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public System.Collections.Generic.Dictionary<string, string> SecretEnv { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a supported storage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoSource")]
		public RepoSource RepoSource { get; set; }
		
		/// <summary>
		/// Location of the source in an archive file in Google Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSource")]
		public StorageSource StorageSource { get; set; }
		
		/// <summary>
		/// Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSourceManifest")]
		public StorageSourceManifest StorageSourceManifest { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a Google Cloud Source Repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepoSource
	{
		
		/// <summary>
		/// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Explicit commit SHA to build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitSha")]
		public string CommitSha { get; set; }
		
		/// <summary>
		/// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Only trigger a build if the revision regex does NOT match the revision regex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertRegex")]
		public System.Nullable<System.Boolean> InvertRegex { get; set; }
		
		/// <summary>
		/// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Name of the Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoName")]
		public string RepoName { get; set; }
		
		/// <summary>
		/// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutions")]
		public System.Collections.Generic.Dictionary<string, string> Substitutions { get; set; }
		
		/// <summary>
		/// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
	}
	
	/// <summary>
	/// Location of the source in an archive file in Google Cloud Storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageSource
	{
		
		/// <summary>
		/// Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageSourceManifest
	{
		
		/// <summary>
		/// Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// Google Cloud Storage object containing the source manifest. This object must be a JSON file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceProvenance
	{
		
		/// <summary>
		/// Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public System.Collections.Generic.Dictionary<string, FileHashes> FileHashes { get; set; }
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedRepoSource")]
		public RepoSource ResolvedRepoSource { get; set; }
		
		/// <summary>
		/// Location of the source in an archive file in Google Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedStorageSource")]
		public StorageSource ResolvedStorageSource { get; set; }
		
		/// <summary>
		/// Location of the source manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedStorageSourceManifest")]
		public StorageSourceManifest ResolvedStorageSourceManifest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 9,
	}
	
	/// <summary>
	/// A step in the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildStep
	{
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowExitCodes")]
		public int[] AllowExitCodes { get; set; }
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowFailure")]
		public System.Nullable<System.Boolean> AllowFailure { get; set; }
		
		/// <summary>
		/// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Output only. Return code from running the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullTiming")]
		public TimeSpan PullTiming { get; set; }
		
		/// <summary>
		/// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public string[] SecretEnv { get; set; }
		
		/// <summary>
		/// Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BuildStatus Status { get; set; }
		
		/// <summary>
		/// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TimeSpan Timing { get; set; }
		
		/// <summary>
		/// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
		
		/// <summary>
		/// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitFor")]
		public string[] WaitFor { get; set; }
	}
	
	/// <summary>
	/// A non-fatal problem encountered during the execution of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Warning
	{
		
		/// <summary>
		/// The priority for this warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<WarningPriority> Priority { get; set; }
		
		/// <summary>
		/// Explanation of the warning generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WarningPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALERT = 3,
	}
	
	/// <summary>
	/// Metadata for build operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildOperationMetadata
	{
		
		/// <summary>
		/// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public Build Build { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Metadata for `CreateBitbucketServerConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBitbucketServerConfigOperationMetadata
	{
		
		/// <summary>
		/// The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Metadata for `CreateGithubEnterpriseConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGitHubEnterpriseConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for `CreateGitLabConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGitLabConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public string GitlabConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for the `CreateWorkerPool` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWorkerPoolOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	/// <summary>
	/// Metadata for `DeleteBitbucketServerConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBitbucketServerConfigOperationMetadata
	{
		
		/// <summary>
		/// The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Metadata for `DeleteGitHubEnterpriseConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGitHubEnterpriseConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for `DeleteGitLabConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGitLabConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public string GitlabConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for the `DeleteWorkerPool` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWorkerPoolOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDevtoolsCloudbuildV2OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// HTTPDelivery is the delivery configuration for an HTTP notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HTTPDelivery
	{
		
		/// <summary>
		/// The URI to which JSON-containing HTTP POST requests should be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Response containing existing `WorkerPools`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkerPoolsResponse
	{
		
		/// <summary>
		/// `WorkerPools` for the specified project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPools")]
		public WorkerPool[] WorkerPools { get; set; }
	}
	
	/// <summary>
	/// Configuration for a WorkerPool to run the builds. Workers are machines that Cloud Build uses to run your builds. By default, all workers run in a project owned by Cloud Build. To have full control over the workers that execute your builds -- such as enabling them to access private resources on your private network -- you can request Cloud Build to run the workers in your own project by creating a custom workers pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerPool
	{
		
		/// <summary>
		/// Output only. Time at which the request to create the `WorkerPool` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to delete the `WorkerPool` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the `WorkerPool`. Format of the name is `projects/{project_id}/workerPools/{worker_pool_id}`, where the value of {worker_pool_id} is provided in the CreateWorkerPool request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Network describes the network configuration for a `WorkerPool`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public NetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Required. Immutable. The region where the `WorkerPool` runs. Only "us-central1" is currently supported. Note that `region` cannot be changed once the `WorkerPool` is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Output only. WorkerPool state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<WorkerPoolState> State { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to update the `WorkerPool` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// WorkerConfig defines the configuration to be used for a creating workers in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerConfig")]
		public WorkerConfig WorkerConfig { get; set; }
	}
	
	/// <summary>
	/// Network describes the network configuration for a `WorkerPool`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfig
	{
		
		/// <summary>
		/// Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to WorkerPool.project_id on the default network. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`, and {network} is the name of a VPC network in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeredNetwork")]
		public string PeeredNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkerPoolState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	/// <summary>
	/// WorkerConfig defines the configuration to be used for a creating workers in the pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerConfig
	{
		
		/// <summary>
		/// Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
	}
	
	/// <summary>
	/// Notification is the container which holds the data that is relevant to this particular notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Notification
	{
		
		/// <summary>
		/// The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// HTTPDelivery is the delivery configuration for an HTTP notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpDelivery")]
		public HTTPDelivery HttpDelivery { get; set; }
		
		/// <summary>
		/// SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slackDelivery")]
		public SlackDelivery SlackDelivery { get; set; }
		
		/// <summary>
		/// SMTPDelivery is the delivery configuration for an SMTP (email) notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smtpDelivery")]
		public SMTPDelivery SmtpDelivery { get; set; }
		
		/// <summary>
		/// Escape hatch for users to supply custom delivery configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structDelivery")]
		public System.Collections.Generic.Dictionary<string, object> StructDelivery { get; set; }
	}
	
	/// <summary>
	/// SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlackDelivery
	{
		
		/// <summary>
		/// NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookUri")]
		public NotifierSecretRef WebhookUri { get; set; }
	}
	
	/// <summary>
	/// NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifierSecretRef
	{
		
		/// <summary>
		/// The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretRef")]
		public string SecretRef { get; set; }
	}
	
	/// <summary>
	/// SMTPDelivery is the delivery configuration for an SMTP (email) notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMTPDelivery
	{
		
		/// <summary>
		/// This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromAddress")]
		public string FromAddress { get; set; }
		
		/// <summary>
		/// NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public NotifierSecretRef Password { get; set; }
		
		/// <summary>
		/// The SMTP port of the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
		
		/// <summary>
		/// This is the list of addresses to which we send the email (i.e. in the `To:` of the email).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipientAddresses")]
		public string[] RecipientAddresses { get; set; }
		
		/// <summary>
		/// This is the SMTP account/email that is used to send the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senderAddress")]
		public string SenderAddress { get; set; }
		
		/// <summary>
		/// The address of the SMTP server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
	}
	
	/// <summary>
	/// NotifierConfig is the top-level configuration message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifierConfig
	{
		
		/// <summary>
		/// The API version of this configuration format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The type of notifier to use (e.g. SMTPNotifier).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// NotifierMetadata contains the data which can be used to reference or describe this notifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public NotifierMetadata Metadata { get; set; }
		
		/// <summary>
		/// NotifierSpec is the configuration container for notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public NotifierSpec Spec { get; set; }
	}
	
	/// <summary>
	/// NotifierMetadata contains the data which can be used to reference or describe this notifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifierMetadata
	{
		
		/// <summary>
		/// The human-readable and user-given name for the notifier. For example: "repo-merge-email-notifier".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The string representing the name and version of notifier to deploy. Expected to be of the form of "/:". For example: "gcr.io/my-project/notifiers/smtp:1.2.34".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifier")]
		public string Notifier { get; set; }
	}
	
	/// <summary>
	/// NotifierSpec is the configuration container for notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifierSpec
	{
		
		/// <summary>
		/// Notification is the container which holds the data that is relevant to this particular notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notification")]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// Configurations for secret resources used by this particular notifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public NotifierSecret[] Secrets { get; set; }
	}
	
	/// <summary>
	/// NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifierSecret
	{
		
		/// <summary>
		/// Name is the local name of the secret, such as the verbatim string "my-smtp-password".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: "projects/my-project/secrets/my-secret/versions/latest".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Metadata for `ProcessAppManifestCallback` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcessAppManifestCallbackOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// Represents the custom metadata of the RunWorkflow long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunWorkflowCustomOperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. ID of the pipeline run created by RunWorkflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipelineRunId")]
		public string PipelineRunId { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Metadata for `UpdateBitbucketServerConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBitbucketServerConfigOperationMetadata
	{
		
		/// <summary>
		/// The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Metadata for `UpdateGitHubEnterpriseConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGitHubEnterpriseConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for `UpdateGitLabConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGitLabConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public string GitlabConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for the `UpdateWorkerPool` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWorkerPoolOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a `WorkerPool`.
		/// Cloudbuild_projects_workerPools_delete v1alpha2/{name}
		/// </summary>
		/// <param name="name">Required. The name of the `WorkerPool` to delete. Format: projects/{project}/workerPools/{workerPool}</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_workerPools_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details of a `WorkerPool`.
		/// Cloudbuild_projects_workerPools_get v1alpha2/{name}
		/// </summary>
		/// <param name="name">Required. The name of the `WorkerPool` to retrieve. Format: projects/{project}/workerPools/{workerPool}</param>
		/// <returns>Successful response</returns>
		public async Task<WorkerPool> Cloudbuild_projects_workerPools_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkerPool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a `WorkerPool`.
		/// Cloudbuild_projects_workerPools_patch v1alpha2/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name of the `WorkerPool`. Format of the name is `projects/{project_id}/workerPools/{worker_pool_id}`, where the value of {worker_pool_id} is provided in the CreateWorkerPool request.</param>
		/// <param name="updateMask">A mask specifying which fields in `WorkerPool` should be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<WorkerPool> Cloudbuild_projects_workerPools_patchAsync(string name, string updateMask, WorkerPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkerPool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Cloudbuild_projects_locations_operations_cancel v1alpha2/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists `WorkerPool`s by project.
		/// Cloudbuild_projects_workerPools_list v1alpha2/{parent}/workerPools
		/// </summary>
		/// <param name="parent">Required. The parent, which owns this collection of `WorkerPools`. Format: projects/{project}</param>
		/// <returns>Successful response</returns>
		public async Task<ListWorkerPoolsResponse> Cloudbuild_projects_workerPools_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/workerPools";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkerPoolsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a `WorkerPool` to run the builds, and returns the new worker pool.
		/// Cloudbuild_projects_workerPools_create v1alpha2/{parent}/workerPools
		/// </summary>
		/// <param name="parent">Required. The parent resource where this book will be created. Format: projects/{project}</param>
		/// <param name="workerPoolId">Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/.</param>
		/// <returns>Successful response</returns>
		public async Task<WorkerPool> Cloudbuild_projects_workerPools_createAsync(string parent, string workerPoolId, WorkerPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/workerPools&workerPoolId=" + (workerPoolId==null? "" : System.Uri.EscapeDataString(workerPoolId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkerPool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
