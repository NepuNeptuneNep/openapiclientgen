//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Provides information about an Up bank account.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AccountResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// The unique identifier for this account.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AccountResourceLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public AccountResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// The type of this resource: `accounts`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AccountResourceAttributes
	{
		
		/// <summary>
		/// The bank account type of this account.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public AccountTypeEnum AccountType { get; set; }
		
		/// <summary>
		/// The available balance of the account, taking into account any amounts
		///that are currently on hold.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public MoneyObject Balance { get; set; }
		
		/// <summary>
		/// The date-time at which this account was first opened.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// The name associated with the account in the Up application.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The ownership structure for this account.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownershipType")]
		public OwnershipTypeEnum OwnershipType { get; set; }
	}
	
	/// <summary>
	/// Provides information about a value of money.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoneyObject
	{
		
		/// <summary>
		/// The ISO 4217 currency code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The amount of money, formatted as a string in the relevant currency.
		///For example, for an Australian dollar value of $10.56, this field will
		///be `"10.56"`. The currency symbol is not included in the string.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// The amount of money in the smallest denomination for the currency, as a
		///64-bit integer.  For example, for an Australian dollar value of $10.56,
		///this field will be `1056`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="valueInBaseUnits")]
		public int ValueInBaseUnits { get; set; }
	}
	
	public class AccountResourceLinks
	{
		
		/// <summary>
		/// The canonical link to this resource within the API.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class AccountResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public AccountResourceRelationshipsTransactions Transactions { get; set; }
	}
	
	public class AccountResourceRelationshipsTransactions
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AccountResourceRelationshipsTransactionsLinks Links { get; set; }
	}
	
	public class AccountResourceRelationshipsTransactionsLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	/// <summary>
	/// Specifies the type of bank account. Currently returned values are `SAVER`
	///and `TRANSACTIONAL`.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAVER")]
		SAVER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSACTIONAL")]
		TRANSACTIONAL = 1,
	}
	
	/// <summary>
	/// Provides information about an instant reimbursement in the form of
	///cashback.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashbackObject
	{
		
		/// <summary>
		/// The total amount of cashback paid, represented as a positive value.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public MoneyObject Amount { get; set; }
		
		/// <summary>
		/// A brief description of why this cashback was paid.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Uniquely identifies a category in the API.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryInputResourceIdentifier
	{
		
		/// <summary>
		/// The unique identifier of the category, as returned by the `/categories`
		///endpoint.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `categories`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Provides information about a category and its ancestry.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CategoryResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// The unique identifier for this category. This is a human-readable but
		///URL-safe value.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CategoryResourceLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public CategoryResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// The type of this resource: `categories`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CategoryResourceAttributes
	{
		
		/// <summary>
		/// The name of this category as seen in the Up application.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class CategoryResourceLinks
	{
		
		/// <summary>
		/// The canonical link to this resource within the API.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class CategoryResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="children")]
		public CategoryResourceRelationshipsChildren Children { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public CategoryResourceRelationshipsParent Parent { get; set; }
	}
	
	public class CategoryResourceRelationshipsChildren
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CategoryResourceRelationshipsChildrenData[] CategoryResourceRelationshipsChildrenData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CategoryResourceRelationshipsChildrenLinks Links { get; set; }
	}
	
	public class CategoryResourceRelationshipsChildrenData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `categories`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CategoryResourceRelationshipsChildrenLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class CategoryResourceRelationshipsParent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CategoryResourceRelationshipsParentData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CategoryResourceRelationshipsParentLinks Links { get; set; }
	}
	
	public class CategoryResourceRelationshipsParentData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `categories`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CategoryResourceRelationshipsParentLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	/// <summary>
	/// Request to create a new webhook. This currently only requires a `url`
	///attribute.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWebhookRequest
	{
		
		/// <summary>
		/// The webhook resource to create.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookInputResource Data { get; set; }
	}
	
	/// <summary>
	/// Represents a webhook specified as request input.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookInputResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public WebhookInputResourceAttributes Attributes { get; set; }
	}
	
	public class WebhookInputResourceAttributes
	{
		
		/// <summary>
		/// An optional description for this webhook, up to 64 characters in
		///length.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The URL that this webhook should post events to. This must be a valid
		///HTTP or HTTPS URL that does not exceed 300 characters in length.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Successful response after creating a webhook.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWebhookResponse
	{
		
		/// <summary>
		/// The webhook that was created.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookResource Data { get; set; }
	}
	
	/// <summary>
	/// Provides information about a webhook.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public WebhookResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// The unique identifier for this webhook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public WebhookResourceLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public WebhookResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// The type of this resource: `webhooks`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class WebhookResourceAttributes
	{
		
		/// <summary>
		/// The date-time at which this webhook was created.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// An optional description that was provided at the time the webhook was
		///created.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A shared secret key used to sign all webhook events sent to the
		///configured webhook URL. This field is returned only once, upon the
		///initial creation of the webhook. If lost, create a new webhook and
		///delete this webhook.
		///
		///The webhook URL receives a request with a
		///`X-Up-Authenticity-Signature` header, which is the SHA-256 HMAC of
		///the entire raw request body signed using this `secretKey`. It is
		///advised to compute and check this signature to verify the
		///authenticity of requests sent to the webhook URL. See
		///[Handling webhook events](#callback_post_webhookURL) for full
		///details.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretKey")]
		public string SecretKey { get; set; }
		
		/// <summary>
		/// The URL that this webhook is configured to `POST` events to.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class WebhookResourceLinks
	{
		
		/// <summary>
		/// The canonical link to this resource within the API.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class WebhookResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public WebhookResourceRelationshipsLogs Logs { get; set; }
	}
	
	public class WebhookResourceRelationshipsLogs
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public WebhookResourceRelationshipsLogsLinks Links { get; set; }
	}
	
	public class WebhookResourceRelationshipsLogsLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	/// <summary>
	/// Provides information about an error processing a request.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorObject
	{
		
		/// <summary>
		/// A detailed description of this error. This should be considered unique
		///to individual occurrences of an error and subject to change. It is
		///useful for debugging purposes.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// If applicable, location in the request that this error relates to. This
		///may be a parameter in the query string, or a an attribute in the
		///request body.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ErrorObjectSource Source { get; set; }
		
		/// <summary>
		/// The HTTP status code associated with this error. This can also be
		///obtained from the response headers. The status indicates the broad type
		///of error according to HTTP semantics.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A short description of this error. This should be stable across
		///multiple occurrences of this type of error and typically expands on the
		///reason for the status code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class ErrorObjectSource
	{
		
		/// <summary>
		/// If this error relates to a query parameter, the name of the
		///parameter.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// If this error relates to an attribute in the request body, a
		///rfc-6901 JSON pointer to the attribute.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	/// <summary>
	/// Generic error response that returns one or more errors.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The list of errors returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorObject[] Errors { get; set; }
	}
	
	/// <summary>
	/// Successful response to get a single account.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountResponse
	{
		
		/// <summary>
		/// The account returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AccountResource Data { get; set; }
	}
	
	/// <summary>
	/// Successful response to get a single category and its ancestry.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCategoryResponse
	{
		
		/// <summary>
		/// The category returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CategoryResource Data { get; set; }
	}
	
	/// <summary>
	/// Successful response to get a single transaction.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransactionResponse
	{
		
		/// <summary>
		/// The transaction returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResource Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public TransactionResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// The unique identifier for this transaction.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public TransactionResourceLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public TransactionResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// The type of this resource: `transactions`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TransactionResourceAttributes
	{
		
		/// <summary>
		/// The amount of this transaction in Australian dollars. For
		///transactions that were once `HELD` but are now `SETTLED`, refer to
		///the `holdInfo` field for the original `amount` the transaction was
		///`HELD` at.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public MoneyObject Amount { get; set; }
		
		/// <summary>
		/// If all or part of this transaction was instantly reimbursed in the
		///form of cashback, details of the reimbursement.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cashback")]
		public CashbackObject Cashback { get; set; }
		
		/// <summary>
		/// The date-time at which this transaction was first encountered.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A short description for this transaction. Usually the merchant name
		///for purchases.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The foreign currency amount of this transaction. This field will be
		///`null` for domestic transactions. The amount was converted to the AUD
		///amount reflected in the `amount` of this transaction. Refer to the
		///`holdInfo` field for the original `foreignAmount` the transaction was
		///`HELD` at.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreignAmount")]
		public MoneyObject ForeignAmount { get; set; }
		
		/// <summary>
		/// If this transaction is currently in the `HELD` status, or was ever in
		///the `HELD` status, the `amount` and `foreignAmount` of the
		///transaction while `HELD`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="holdInfo")]
		public HoldInfoObject HoldInfo { get; set; }
		
		/// <summary>
		/// Boolean flag set to true on transactions that support the use of
		///categories.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isCategorizable")]
		public bool IsCategorizable { get; set; }
		
		/// <summary>
		/// Attached message for this transaction, such as a payment message, or a
		///transfer note.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The original, unprocessed text of the transaction. This is often not
		///a perfect indicator of the actual merchant, but it is useful for
		///reconciliation purposes in some cases.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rawText")]
		public string RawText { get; set; }
		
		/// <summary>
		/// Details of how this transaction was rounded-up. If no Round Up was
		///applied this field will be `null`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roundUp")]
		public RoundUpObject RoundUp { get; set; }
		
		/// <summary>
		/// The date-time at which this transaction settled. This field will be
		///`null` for transactions that are currently in the `HELD` status.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settledAt")]
		public System.Nullable<System.DateTimeOffset> SettledAt { get; set; }
		
		/// <summary>
		/// The current processing status of this transaction, according to
		///whether or not this transaction has settled or is still held.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TransactionStatusEnum Status { get; set; }
	}
	
	/// <summary>
	/// Provides information about the amount at which a transaction was in the
	///`HELD` status.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HoldInfoObject
	{
		
		/// <summary>
		/// The amount of this transaction while in the `HELD` status, in
		///Australian dollars.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public MoneyObject Amount { get; set; }
		
		/// <summary>
		/// The foreign currency amount of this transaction while in the `HELD`
		///status. This field will be `null` for domestic transactions. The amount
		///was converted to the AUD amount reflected in the `amount` field.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreignAmount")]
		public MoneyObject ForeignAmount { get; set; }
	}
	
	/// <summary>
	/// Provides information about how a Round Up was applied, such as whether or
	///not a boost was included in the Round Up.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoundUpObject
	{
		
		/// <summary>
		/// The total amount of this Round Up, including any boosts, represented as
		///a negative value.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public MoneyObject Amount { get; set; }
		
		/// <summary>
		/// The portion of the Round Up `amount` owing to boosted Round Ups,
		///represented as a negative value. If no boost was added to the Round Up
		///this field will be `null`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="boostPortion")]
		public MoneyObject BoostPortion { get; set; }
	}
	
	public class TransactionResourceLinks
	{
		
		/// <summary>
		/// The canonical link to this resource within the API.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class TransactionResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		public TransactionResourceRelationshipsAccount Account { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public TransactionResourceRelationshipsCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentCategory")]
		public TransactionResourceRelationshipsParentCategory ParentCategory { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TransactionResourceRelationshipsTags Tags { get; set; }
		
		/// <summary>
		/// If this transaction is a transfer between accounts, this relationship
		///will contain the account the transaction went to/came from. The
		///`amount` field can be used to determine the direction of the transfer.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transferAccount")]
		public TransactionResourceRelationshipsTransferAccount TransferAccount { get; set; }
	}
	
	public class TransactionResourceRelationshipsAccount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResourceRelationshipsAccountData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public TransactionResourceRelationshipsAccountLinks Links { get; set; }
	}
	
	public class TransactionResourceRelationshipsAccountData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `accounts`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TransactionResourceRelationshipsAccountLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class TransactionResourceRelationshipsCategory
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResourceRelationshipsCategoryData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public TransactionResourceRelationshipsCategoryLinks Links { get; set; }
	}
	
	public class TransactionResourceRelationshipsCategoryData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `categories`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TransactionResourceRelationshipsCategoryLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
		
		/// <summary>
		/// The link to retrieve or modify linkage between this resources and the
		///related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class TransactionResourceRelationshipsParentCategory
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResourceRelationshipsParentCategoryData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public TransactionResourceRelationshipsParentCategoryLinks Links { get; set; }
	}
	
	public class TransactionResourceRelationshipsParentCategoryData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `categories`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TransactionResourceRelationshipsParentCategoryLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class TransactionResourceRelationshipsTags
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResourceRelationshipsTagsData[] TransactionResourceRelationshipsTagsData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public TransactionResourceRelationshipsTagsLinks Links { get; set; }
	}
	
	public class TransactionResourceRelationshipsTagsData
	{
		
		/// <summary>
		/// The label of the tag, which also acts as the tag’s unique identifier.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `tags`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TransactionResourceRelationshipsTagsLinks
	{
		
		/// <summary>
		/// The link to retrieve or modify linkage between this resources and the
		///related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class TransactionResourceRelationshipsTransferAccount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResourceRelationshipsTransferAccountData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public TransactionResourceRelationshipsTransferAccountLinks Links { get; set; }
	}
	
	public class TransactionResourceRelationshipsTransferAccountData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `accounts`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TransactionResourceRelationshipsTransferAccountLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	/// <summary>
	/// Successful response to get a single webhook.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWebhookResponse
	{
		
		/// <summary>
		/// The webhook returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookResource Data { get; set; }
	}
	
	/// <summary>
	/// Successful response to get all accounts. This returns a paginated list of
	///accounts, which can be scrolled by following the `prev` and `next` links
	///if present.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAccountsResponse
	{
		
		/// <summary>
		/// The list of accounts returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AccountResource[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListAccountsResponseLinks Links { get; set; }
	}
	
	public class ListAccountsResponseLinks
	{
		
		/// <summary>
		/// The link to the next page in the results. If this value is `null`
		///there is no next page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The link to the previous page in the results. If this value is `null`
		///there is no previous page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	/// <summary>
	/// Successful response to get all categories and their ancestry. The
	///returned list is not paginated.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCategoriesResponse
	{
		
		/// <summary>
		/// The list of categories returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CategoryResource[] Data { get; set; }
	}
	
	/// <summary>
	/// Successful response to get all tags. This returns a paginated list of
	///tags, which can be scrolled by following the `prev` and `next` links if
	///present.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsResponse
	{
		
		/// <summary>
		/// The list of tags returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagResource[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListTagsResponseLinks Links { get; set; }
	}
	
	/// <summary>
	/// Provides information about a tag.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResource
	{
		
		/// <summary>
		/// The label of the tag, which also acts as the tag’s unique identifier.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public TagResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// The type of this resource: `tags`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class TagResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public TagResourceRelationshipsTransactions Transactions { get; set; }
	}
	
	public class TagResourceRelationshipsTransactions
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public TagResourceRelationshipsTransactionsLinks Links { get; set; }
	}
	
	public class TagResourceRelationshipsTransactionsLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class ListTagsResponseLinks
	{
		
		/// <summary>
		/// The link to the next page in the results. If this value is `null`
		///there is no next page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The link to the previous page in the results. If this value is `null`
		///there is no previous page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	/// <summary>
	/// Successful response to get all transactions. This returns a paginated
	///list of transactions, which can be scrolled by following the `prev` and
	///`next` links if present.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransactionsResponse
	{
		
		/// <summary>
		/// The list of transactions returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransactionResource[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListTransactionsResponseLinks Links { get; set; }
	}
	
	public class ListTransactionsResponseLinks
	{
		
		/// <summary>
		/// The link to the next page in the results. If this value is `null`
		///there is no next page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The link to the previous page in the results. If this value is `null`
		///there is no previous page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	/// <summary>
	/// Successful response to get all delivery logs for a webhook. This returns
	///a paginated list of delivery logs, which can be scrolled by following the
	///`next` and `prev` links if present.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebhookDeliveryLogsResponse
	{
		
		/// <summary>
		/// The list of delivery logs returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookDeliveryLogResource[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListWebhookDeliveryLogsResponseLinks Links { get; set; }
	}
	
	/// <summary>
	/// Provides historical webhook event delivery information for analysis and
	///debugging purposes.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookDeliveryLogResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public WebhookDeliveryLogResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// The unique identifier for this log entry.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public WebhookDeliveryLogResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// The type of this resource: `webhook-delivery-logs`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class WebhookDeliveryLogResourceAttributes
	{
		
		/// <summary>
		/// The date-time at which this log entry was created.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// The success or failure status of this delivery attempt.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deliveryStatus")]
		public WebhookDeliveryStatusEnum DeliveryStatus { get; set; }
		
		/// <summary>
		/// Information about the request that was sent to the webhook URL.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="request")]
		public WebhookDeliveryLogResourceAttributesRequest Request { get; set; }
		
		/// <summary>
		/// Information about the response that was received from the webhook URL.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="response")]
		public WebhookDeliveryLogResourceAttributesResponse Response { get; set; }
	}
	
	public class WebhookDeliveryLogResourceAttributesRequest
	{
		
		/// <summary>
		/// The payload that was sent in the request body.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
	}
	
	public class WebhookDeliveryLogResourceAttributesResponse
	{
		
		/// <summary>
		/// The payload that was received in the response body.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The HTTP status code received in the response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public int StatusCode { get; set; }
	}
	
	public class WebhookDeliveryLogResourceRelationships
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookEvent")]
		public WebhookDeliveryLogResourceRelationshipsWebhookEvent WebhookEvent { get; set; }
	}
	
	public class WebhookDeliveryLogResourceRelationshipsWebhookEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookDeliveryLogResourceRelationshipsWebhookEventData Data { get; set; }
	}
	
	public class WebhookDeliveryLogResourceRelationshipsWebhookEventData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `webhook-events`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ListWebhookDeliveryLogsResponseLinks
	{
		
		/// <summary>
		/// The link to the next page in the results. If this value is `null`
		///there is no next page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The link to the previous page in the results. If this value is `null`
		///there is no previous page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	/// <summary>
	/// Successful response to get all webhooks. This returns a paginated list of
	///webhooks, which can be scrolled by following the `prev` and `next` links
	///if present.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebhooksResponse
	{
		
		/// <summary>
		/// The list of webhooks returned in this response.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookResource[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListWebhooksResponseLinks Links { get; set; }
	}
	
	public class ListWebhooksResponseLinks
	{
		
		/// <summary>
		/// The link to the next page in the results. If this value is `null`
		///there is no next page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The link to the previous page in the results. If this value is `null`
		///there is no previous page.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
	}
	
	/// <summary>
	/// Specifies the structure under which a bank account is owned. Currently
	///returned values are `INDIVIDUAL` and `JOINT`.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OwnershipTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INDIVIDUAL")]
		INDIVIDUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JOINT")]
		JOINT = 1,
	}
	
	/// <summary>
	/// Basic ping response to verify authentication.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PingResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public PingResponseMeta Meta { get; set; }
	}
	
	public class PingResponseMeta
	{
		
		/// <summary>
		/// The unique identifier of the authenticated customer.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A cute emoji that represents the response status.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusEmoji")]
		public string StatusEmoji { get; set; }
	}
	
	/// <summary>
	/// Uniquely identifies a single tag in the API.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagInputResourceIdentifier
	{
		
		/// <summary>
		/// The label of the tag, which also acts as the tag’s unique identifier.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `tags`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Specifies which stage of processing a transaction is currently at.
	///Currently returned values are `HELD` and `SETTLED`. When a transaction is
	///held, its account’s `availableBalance` is affected. When a transaction is
	///settled, its account’s `currentBalance` is affected.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HELD")]
		HELD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SETTLED")]
		SETTLED = 1,
	}
	
	/// <summary>
	/// Request to update the category associated with a transaction.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTransactionCategoryRequest
	{
		
		/// <summary>
		/// The category to set on the transaction. Set this entire key to `null`
		///de-categorize a transaction.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CategoryInputResourceIdentifier Data { get; set; }
	}
	
	/// <summary>
	/// Request to add or remove tags associated with a transaction.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTransactionTagsRequest
	{
		
		/// <summary>
		/// The tags to add to or remove from the transaction.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TagInputResourceIdentifier[] Data { get; set; }
	}
	
	/// <summary>
	/// Specifies the nature of the success or failure of a webhook delivery
	///attempt to the subscribed webhook URL. The currently returned values are
	///described below:
	///
	///- **`DELIVERED`**: The event was delivered to the webhook URL
	///  successfully and a `200` response was received.
	///- **`UNDELIVERABLE`**: The webhook URL was not reachable, or timed out.
	///- **`BAD_RESPONSE_CODE`**: The event was delivered to the webhook URL
	///  but a non-`200` response was received.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebhookDeliveryStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELIVERED")]
		DELIVERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDELIVERABLE")]
		UNDELIVERABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BAD_RESPONSE_CODE")]
		BAD_RESPONSE_CODE = 2,
	}
	
	/// <summary>
	/// Asynchronous callback request used for webhook event delivery.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookEventCallback
	{
		
		/// <summary>
		/// The webhook event data sent to the subscribed webhook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookEventResource Data { get; set; }
	}
	
	/// <summary>
	/// Provides the event data used in asynchronous webhook event callbacks to
	///subscribed endpoints. Webhooks events have defined `eventType`s and may
	///optionally relate to other resources within the Up API.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookEventResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public WebhookEventResourceAttributes Attributes { get; set; }
		
		/// <summary>
		/// The unique identifier for this event. This will remain constant across
		///delivery retries.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public WebhookEventResourceRelationships Relationships { get; set; }
		
		/// <summary>
		/// The type of this resource: `webhook-events`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class WebhookEventResourceAttributes
	{
		
		/// <summary>
		/// The date-time at which this event was generated.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// The type of this event. This can be used to determine what action to
		///take in response to the event.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public WebhookEventTypeEnum EventType { get; set; }
	}
	
	public class WebhookEventResourceRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public WebhookEventResourceRelationshipsTransaction Transaction { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public WebhookEventResourceRelationshipsWebhook Webhook { get; set; }
	}
	
	public class WebhookEventResourceRelationshipsTransaction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookEventResourceRelationshipsTransactionData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public WebhookEventResourceRelationshipsTransactionLinks Links { get; set; }
	}
	
	public class WebhookEventResourceRelationshipsTransactionData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `transactions`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class WebhookEventResourceRelationshipsTransactionLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	public class WebhookEventResourceRelationshipsWebhook
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public WebhookEventResourceRelationshipsWebhookData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public WebhookEventResourceRelationshipsWebhookLinks Links { get; set; }
	}
	
	public class WebhookEventResourceRelationshipsWebhookData
	{
		
		/// <summary>
		/// The unique identifier of the resource within its type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The type of this resource: `webhooks`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class WebhookEventResourceRelationshipsWebhookLinks
	{
		
		/// <summary>
		/// The link to retrieve the related resource(s) in this relationship.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related")]
		public string Related { get; set; }
	}
	
	/// <summary>
	/// Specifies the type of a webhook event. This can be used to determine what
	///action to take in response to the event, such as which relationships to
	///expect.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WebhookEventTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSACTION_CREATED")]
		TRANSACTION_CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSACTION_SETTLED")]
		TRANSACTION_SETTLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSACTION_DELETED")]
		TRANSACTION_DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PING")]
		PING = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List accounts
		/// Retrieve a paginated list of all accounts for the currently
		/// authenticated user. The returned list is paginated and can be scrolled
		/// by following the `prev` and `next` links where present.
		/// 
		/// AccountsGetByPage_sizeAndFilter_accountTypeAndFilter_ownershipType accounts
		/// </summary>
		/// <param name="page_size">The number of records to return in each page.
		///</param>
		/// <param name="filter_accountType">The type of account for which to return records. This
		///can be used to filter Savers from spending accounts.
		///</param>
		/// <param name="filter_ownershipType">The account ownership structure for which to return
		///records. This can be used to filter 2Up accounts from Up
		///accounts.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<ListAccountsResponse> AccountsGetByPage_sizeAndFilter_accountTypeAndFilter_ownershipTypeAsync(int page_size, AccountTypeEnum filter_accountType, OwnershipTypeEnum filter_ownershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts?page[size]="+page_size+"&filter[accountType]=" + filter_accountType+"&filter[ownershipType]=" + filter_ownershipType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List transactions by account
		/// Retrieve a list of all transactions for a specific account. The returned
		/// list is [paginated](#pagination) and can be scrolled by following the
		/// `next` and `prev` links where present. To narrow the results to a
		/// specific date range pass one or both of `filter[since]` and
		/// `filter[until]` in the query string. These filter parameters
		/// **should not** be used for pagination. Results are ordered newest first
		/// to oldest last.
		/// 
		/// TransactionsGetByAccountIdAndPage_sizeAndFilter_statusAndFilter_sinceAndFilter_untilAndFilter_categoryAndFilter_tag accounts/{accountId}/transactions
		/// </summary>
		/// <param name="accountId">The unique identifier for the account.
		///</param>
		/// <param name="page_size">The number of records to return in each page.
		///</param>
		/// <param name="filter_status">The transaction status for which to return records. This
		///can be used to filter `HELD` transactions from those
		///that are `SETTLED`.
		///</param>
		/// <param name="filter_since">The start date-time from which to return records,
		///formatted according to rfc-3339. Not to be used for
		///pagination purposes.
		///</param>
		/// <param name="filter_until">The end date-time up to which to return records,
		///formatted according to rfc-3339. Not to be used for
		///pagination purposes.
		///</param>
		/// <param name="filter_category">The category identifier for which to filter transactions.
		///Both parent and child categories can be filtered through
		///this parameter. Providing an invalid category identifier
		///results in a `404` response.
		///</param>
		/// <param name="filter_tag">A transaction tag to filter for which to return records.
		///If the tag does not exist, zero records are returned and
		///a success response is given.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<ListTransactionsResponse> TransactionsGetByAccountIdAndPage_sizeAndFilter_statusAndFilter_sinceAndFilter_untilAndFilter_categoryAndFilter_tagAsync(string accountId, int page_size, TransactionStatusEnum filter_status, System.DateTimeOffset filter_since, System.DateTimeOffset filter_until, string filter_category, string filter_tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/transactions&page[size]="+page_size+"&filter[status]=" + filter_status+"&filter[since]=" + filter_since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&filter[until]=" + filter_until.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&filter[category]=" + (filter_category==null? "" : System.Uri.EscapeDataString(filter_category))+"&filter[tag]=" + (filter_tag==null? "" : System.Uri.EscapeDataString(filter_tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve account
		/// Retrieve a specific account by providing its unique identifier.
		/// 
		/// AccountsGetById accounts/{id}
		/// </summary>
		/// <param name="id">The unique identifier for the account.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<GetAccountResponse> AccountsGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List categories
		/// Retrieve a list of all categories and their ancestry. The returned list
		/// is not paginated.
		/// 
		/// CategoriesGetByFilter_parent categories
		/// </summary>
		/// <param name="filter_parent">The unique identifier of a parent category for which to
		///return only its children. Providing an invalid category
		///identifier results in a `404` response.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<ListCategoriesResponse> CategoriesGetByFilter_parentAsync(string filter_parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories?filter[parent]=" + (filter_parent==null? "" : System.Uri.EscapeDataString(filter_parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve category
		/// Retrieve a specific category by providing its unique identifier.
		/// 
		/// CategoriesGetById categories/{id}
		/// </summary>
		/// <param name="id">The unique identifier for the category.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<GetCategoryResponse> CategoriesGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCategoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List tags
		/// Retrieve a list of all tags currently in use. The returned list is
		/// [paginated](#pagination) and can be scrolled by following the `next`
		/// and `prev` links where present. Results are ordered lexicographically.
		/// The `transactions` relationship for each tag exposes a link
		/// to get the transactions with the given tag.
		/// 
		/// TagsGetByPage_size tags
		/// </summary>
		/// <param name="page_size">The number of records to return in each page.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<ListTagsResponse> TagsGetByPage_sizeAsync(int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags?page[size]="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List transactions
		/// Retrieve a list of all transactions across all accounts for the currently
		/// authenticated user. The returned list is [paginated](#pagination) and can
		/// be scrolled by following the `next` and `prev` links where present. To
		/// narrow the results to a specific date range pass one or both of
		/// `filter[since]` and `filter[until]` in the query string. These filter
		/// parameters **should not** be used for pagination. Results are ordered
		/// newest first to oldest last.
		/// 
		/// TransactionsGetByPage_sizeAndFilter_statusAndFilter_sinceAndFilter_untilAndFilter_categoryAndFilter_tag transactions
		/// </summary>
		/// <param name="page_size">The number of records to return in each page.
		///</param>
		/// <param name="filter_status">The transaction status for which to return records. This
		///can be used to filter `HELD` transactions from those
		///that are `SETTLED`.
		///</param>
		/// <param name="filter_since">The start date-time from which to return records,
		///formatted according to rfc-3339. Not to be used for
		///pagination purposes.
		///</param>
		/// <param name="filter_until">The end date-time up to which to return records,
		///formatted according to rfc-3339. Not to be used for
		///pagination purposes.
		///</param>
		/// <param name="filter_category">The category identifier for which to filter transactions.
		///Both parent and child categories can be filtered through
		///this parameter. Providing an invalid category identifier
		///results in a `404` response.
		///</param>
		/// <param name="filter_tag">A transaction tag to filter for which to return records.
		///If the tag does not exist, zero records are returned and
		///a success response is given.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<ListTransactionsResponse> TransactionsGetByPage_sizeAndFilter_statusAndFilter_sinceAndFilter_untilAndFilter_categoryAndFilter_tagAsync(int page_size, TransactionStatusEnum filter_status, System.DateTimeOffset filter_since, System.DateTimeOffset filter_until, string filter_category, string filter_tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions?page[size]="+page_size+"&filter[status]=" + filter_status+"&filter[since]=" + filter_since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&filter[until]=" + filter_until.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&filter[category]=" + (filter_category==null? "" : System.Uri.EscapeDataString(filter_category))+"&filter[tag]=" + (filter_tag==null? "" : System.Uri.EscapeDataString(filter_tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransactionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve transaction
		/// Retrieve a specific transaction by providing its unique identifier.
		/// 
		/// TransactionsGetById transactions/{id}
		/// </summary>
		/// <param name="id">The unique identifier for the transaction.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<GetTransactionResponse> TransactionsGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Categorize transaction
		/// Updates the category associated with a transaction. Only transactions
		/// for which `isCategorizable` is set to true support this operation. The
		/// `id` is taken from the list exposed on `/categories` and cannot be one of
		/// the top-level (parent) categories. To de-categorize a transaction, set
		/// the entire `data` key to `null`. An HTTP `204` is returned on success.
		/// The associated category, along with its request URL is also exposed via
		/// the `category` relationship on the transaction resource returned from
		/// `/transactions/{id}`.
		/// 
		/// CategoriesPatchByTransactionId transactions/{transactionId}/relationships/category
		/// </summary>
		/// <param name="transactionId">The unique identifier for the transaction.
		///</param>
		public async Task CategoriesPatchByTransactionIdAsync(string transactionId, UpdateTransactionCategoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (transactionId==null? "" : System.Uri.EscapeDataString(transactionId))+"/relationships/category";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove tags from transaction
		/// Disassociates one or more tags from a specific transaction. Tags that are
		/// not associated are silently ignored. An HTTP `204` is returned on
		/// success. The associated tags, along with this request URL, are also
		/// exposed via the `tags` relationship on the transaction resource returned
		/// from `/transactions/{id}`.
		/// 
		/// TagsDeleteByTransactionId transactions/{transactionId}/relationships/tags
		/// </summary>
		/// <param name="transactionId">The unique identifier for the transaction.
		///</param>
		public async Task TagsDeleteByTransactionIdAsync(string transactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (transactionId==null? "" : System.Uri.EscapeDataString(transactionId))+"/relationships/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add tags to transaction
		/// Associates one or more tags with a specific transaction. No more than 6
		/// tags may be present on any single transaction. Duplicate tags are
		/// silently ignored. An HTTP `204` is returned on success. The associated
		/// tags, along with this request URL, are also exposed via the `tags`
		/// relationship on the transaction resource returned from
		/// `/transactions/{id}`.
		/// 
		/// TagsPostByTransactionId transactions/{transactionId}/relationships/tags
		/// </summary>
		/// <param name="transactionId">The unique identifier for the transaction.
		///</param>
		public async Task TagsPostByTransactionIdAsync(string transactionId, UpdateTransactionTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+ (transactionId==null? "" : System.Uri.EscapeDataString(transactionId))+"/relationships/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ping
		/// Make a basic ping request to the API. This is useful to verify that
		/// authentication is functioning correctly. On authentication success an
		/// HTTP `200` status is returned. On failure an HTTP `401` error response
		/// is returned.
		/// 
		/// Utility_endpointsGet util/ping
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<PingResponse> Utility_endpointsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "util/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List webhooks
		/// Retrieve a list of configured webhooks. The returned list is
		/// [paginated](#pagination) and can be scrolled by following the `next`
		/// and `prev` links where present. Results are ordered oldest first to
		/// newest last.
		/// 
		/// WebhooksGetByPage_size webhooks
		/// </summary>
		/// <param name="page_size">The number of records to return in each page.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<ListWebhooksResponse> WebhooksGetByPage_sizeAsync(int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks?page[size]="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWebhooksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create webhook
		/// Create a new webhook with a given URL. The URL will receive webhook
		/// events as JSON-encoded `POST` requests. The URL must respond with a HTTP
		/// `200` status on success.
		/// 
		/// There is currently a limit of 10 webhooks at any given time. Once this
		/// limit is reached, existing webhooks will need to be deleted before new
		/// webhooks can be created.
		/// 
		/// Event delivery is retried with exponential backoff if the URL is
		/// unreachable or it does not respond with a `200` status. The response
		/// includes a `secretKey` attribute, which is used to sign requests sent to
		/// the webhook URL. It will not be returned from any other endpoints within
		/// the Up API. If the `secretKey` is lost, simply create a new webhook with
		/// the same URL, capture its `secretKey` and then delete the original
		/// webhook. See [Handling webhook events](#callback_post_webhookURL) for
		/// details on how to process webhook events.
		/// 
		/// It is probably a good idea to test the webhook by
		/// [sending it a `PING` event](#post_webhooks_webhookId_ping) after creating
		/// it.
		/// 
		/// WebhooksPost webhooks
		/// </summary>
		public async Task WebhooksPostAsync(CreateWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete webhook
		/// Delete a specific webhook by providing its unique identifier. Once
		/// deleted, webhook events will no longer be sent to the configured URL.
		/// 
		/// WebhooksDeleteById webhooks/{id}
		/// </summary>
		/// <param name="id">The unique identifier for the webhook.
		///</param>
		public async Task WebhooksDeleteByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve webhook
		/// Retrieve a specific webhook by providing its unique identifier.
		/// 
		/// WebhooksGetById webhooks/{id}
		/// </summary>
		/// <param name="id">The unique identifier for the webhook.
		///</param>
		/// <returns>Successful Response</returns>
		public async Task<GetWebhookResponse> WebhooksGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWebhookResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List webhook logs
		/// Retrieve a list of delivery logs for a webhook by providing its unique
		/// identifier. This is useful for analysis and debugging purposes. The
		/// returned list is [paginated](#pagination) and can be scrolled by
		/// following the `next` and `prev` links where present. Results are ordered
		/// newest first to oldest last. Logs may be automatically purged after a
		/// period of time.
		/// 
		/// WebhooksGetByWebhookIdAndPage_size webhooks/{webhookId}/logs
		/// </summary>
		/// <param name="webhookId">The unique identifier for the webhook.
		///</param>
		/// <param name="page_size">The number of records to return in each page.
		///</param>
		/// <returns>Successful response</returns>
		public async Task<ListWebhookDeliveryLogsResponse> WebhooksGetByWebhookIdAndPage_sizeAsync(string webhookId, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId))+"/logs&page[size]="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWebhookDeliveryLogsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ping webhook
		/// Send a `PING` event to a webhook by providing its unique identifier.
		/// This is useful for testing and debugging purposes. The event is delivered
		/// asynchronously and its data is returned in the response to this request.
		/// 
		/// WebhooksPostByWebhookId webhooks/{webhookId}/ping
		/// </summary>
		/// <param name="webhookId">The unique identifier for the webhook.
		///</param>
		public async Task WebhooksPostByWebhookIdAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId))+"/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
