//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadAttributes
	{
		
		/// <summary>
		/// Unambiguous status code. Only present if status = "error"
		///
		///* `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
		///* `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
		///* `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
		///* `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
		///* `DOC105` - Invalid or unknown id
		///* `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
		///* `DOC107` - Empty payload.
		///* `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
		///* `DOC201` - Upload server error.
		///* `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human readable error detail. Only present if status = "error"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The document upload identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Location to which to PUT document Payload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Document upload status.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DocumentUploadAttributesStatus Status { get; set; }
		
		/// <summary>
		/// The last time the submission was updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		/// <summary>
		/// Only populated after submission starts processing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploaded_pdf")]
		public object Uploaded_pdf { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DocumentUploadAttributesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uploaded")]
		uploaded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="received")]
		received = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="processing")]
		processing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="success")]
		success = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vbms")]
		vbms = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 6,
	}
	
	/// <summary>
	/// Document upload failed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadFailure
	{
		
		/// <summary>
		/// Error code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Error detail
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Identifying properties about the document payload being submitted
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadMetadata
	{
		
		/// <summary>
		/// Optional parameter (can be missing or empty). The values are:<br><br>
		///CMP - Compensation requests such as those related to disability, unemployment, and pandemic claims<br><br>
		///PMC - Pension requests including survivorâ€™s pension<br><br>
		///INS - Insurance such as life insurance, disability insurance, and other health insurance<br><br>
		///EDU - Education benefits, programs, and affiliations<br><br>
		///VRE - Veteran Readiness & Employment such as employment questionnaires, employment discrimination, employment verification<br><br>
		///BVA - Board of Veteran Appeals<br><br>
		///FID - Fiduciary / financial appointee, including family member benefits<br><br>
		///NCA - National Cemetery Administration<br><br>
		///OTH - Other (this value if used, will be treated as CMP)<br>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessLine")]
		public System.Nullable<DocumentUploadMetadataBusinessLine> BusinessLine { get; set; }
		
		/// <summary>
		/// VBA form number of the document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docType")]
		public string DocType { get; set; }
		
		/// <summary>
		/// The Veteran's file number is exactly 9 digits with no alpha characters, hyphens, spaces or punctuation. In most cases, this is the Veteran's SSN but may also be an 8 digit BIRL number. If no file number has been established or if it is unknown, the application should use the Veteran's SSN and the file number will be associated with the submission later in the process. Incorrect file numbers can cause delays.
		/// Required
		/// Pattern: ^\d{8,9}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{8,9}$")]
		public string FileNumber { get; set; }
		
		/// <summary>
		/// System, installation, or entity submitting the document
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Veteran first name. Cannot be missing or empty or longer than 50 characters. Only upper/lower case letters, hyphens(-), spaces and forward-slash(/) allowed.
		/// Required
		/// Pattern: ^[a-zA-Z\-\/\s]{1,50}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="veteranFirstName")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z\-\/\s]{1,50}$")]
		public string VeteranFirstName { get; set; }
		
		/// <summary>
		/// Veteran last name. Cannot be missing or empty or longer than 50 characters. Only upper/lower case letters, hyphens(-), spaces and forward-slash(/) allowed.
		/// Required
		/// Pattern: ^[a-zA-Z\-\/\s]{1,50}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="veteranLastName")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z\-\/\s]{1,50}$")]
		public string VeteranLastName { get; set; }
		
		/// <summary>
		/// Veteran zip code. Either five digits (XXXXX) or five digits then four digits separated by a hyphen (XXXXX-XXXX). Use '00000' for Veterans with non-US addresses.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCode")]
		public string ZipCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DocumentUploadMetadataBusinessLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CMP")]
		CMP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PMC")]
		PMC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INS")]
		INS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDU")]
		EDU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VRE")]
		VRE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BVA")]
		BVA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FID")]
		FID = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NCA")]
		NCA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTH")]
		OTH = 8,
	}
	
	/// <summary>
	/// Status record for a previously initiated document submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadPath
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public DocumentUploadAttributes Attributes { get; set; }
		
		/// <summary>
		/// JSON API identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// JSON API type specification
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Status record for a previously initiated document submission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public DocumentUploadStatusAttributes Attributes { get; set; }
		
		/// <summary>
		/// JSON API identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// JSON API type specification
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadStatusAttributes
	{
		
		/// <summary>
		/// Unambiguous status code. Only present if status = "error"
		///
		///* `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts.
		///* `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc.
		///* `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected.
		///* `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection.
		///* `DOC105` - Invalid or unknown id
		///* `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB.
		///* `DOC107` - Empty payload.
		///* `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in.
		///* `DOC201` - Upload server error.
		///* `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human readable error detail. Only present if status = "error"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The document upload identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Human readable error description. Only present if status = "error"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Document upload status.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DocumentUploadAttributesStatus Status { get; set; }
		
		/// <summary>
		/// The last time the submission was updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uploaded_pdf")]
		public PdfUploadAttributes Uploaded_pdf { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadStatusGuidList
	{
		
		/// <summary>
		/// List of IDs for previous document upload submissions
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string[] Ids { get; set; }
	}
	
	/// <summary>
	/// Record of requested document submission. Includes the location to which the document payload is to be uploaded
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUploadSubmission
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public DocumentUploadSubmissionAttributes Attributes { get; set; }
		
		/// <summary>
		/// JSON API Identifier
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// JSON API type specification
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class DocumentUploadSubmissionAttributes
	{
	}
	
	/// <summary>
	/// Error returned from the document validation endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentValidationErrorModel
	{
		
		/// <summary>
		/// Error detail
		///
		///Possible values:
		///* Document was not provided
		///* Document is not a PDF
		///* Document exceeds the file size limit of 100 MB
		///* Document exceeds the page size limit of 21 in. x 21 in.
		///* Document is locked with a user password
		///* Document is not a valid PDF
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// HTTP error code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Error title
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Errors with some details for the given request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorModel
	{
		
		/// <summary>
		/// A more detailed message about why an error occurred
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Standard HTTP Status returned with Error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public int Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfDimensionAttributes
	{
		
		/// <summary>
		/// The document height
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public int Height { get; set; }
		
		/// <summary>
		/// Indicates if this is an oversized PDF (greater than 21x21)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oversized_pdf")]
		public bool Oversized_pdf { get; set; }
		
		/// <summary>
		/// The document width
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public int Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfUploadAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public object Content { get; set; }
		
		/// <summary>
		/// The total number of documents contained in this upload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_documents")]
		public int Total_documents { get; set; }
		
		/// <summary>
		/// The total number of pages contained in this upload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_pages")]
		public int Total_pages { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts document upload.
		/// Accepts document metadata, document binary, and attachment binaries. Full URL, including
		/// query parameters, provided from POST `/document_uploads`.
		/// 
		/// ## Example Payload
		/// 
		/// The following demonstrates a (redacted) multipart payload suitable for submitting to the PUT
		/// endpoint. Most programming languages should have provisions for assembling a multipart
		/// payload like this without having to do so manually.
		/// 
		/// ```
		/// --17de1ed8f01442b2a2d7a93506314b76
		/// Content-Disposition: form-data; name="metadata"
		/// Content-Type: application/json
		/// 
		/// {"veteranFirstName": "Jane",
		/// "veteranLastName": "Doe",
		/// "fileNumber": "012345678",
		/// "zipCode": "97202",
		/// "source": "MyVSO",
		/// "docType": "21-22"
		/// "businessLine": "CMP"}
		/// --17de1ed8f01442b2a2d7a93506314b76
		/// Content-Disposition: form-data; name="content"
		/// Content-Type: application/pdf
		/// 
		/// <Binary PDF contents>
		/// --17de1ed8f01442b2a2d7a93506314b76
		/// Content-Disposition: form-data; name="attachment1"
		/// Content-Type: application/pdf
		/// 
		/// <Binary PDF attachment contents>
		/// --17de1ed8f01442b2a2d7a93506314b76--
		/// ```
		/// 
		/// This PUT request would have an overall HTTP Content-Type header:
		/// 
		/// ```
		/// Content-Type: multipart/form-data; boundary=17de1ed8f01442b2a2d7a93506314b76
		/// ```
		/// 
		/// Note that the Content-Disposition parameter "name" in each part must be the expected values
		/// "metadata", "content", "attachment1"..."attachmentN". The attachment attributes must be named
		/// exactly as they are listed here (case sensitive), for example: "attachment_1" or "Attachment2"
		/// are invalid.
		/// 
		/// This is an example curl command:
		/// 
		/// ```
		/// curl -v -L -X PUT '<Location from \uploads>' -F 'metadata="{\"veteranFirstName\": \"Jane\",\"veteranLastName\": \"Doe\",\"fileNumber\": \"012345678\",\"zipCode\": \"97202\",\"source\": \"MyVSO\",\"docType\": \"21-22\",\"businessLine\": \"CMP\"}";type=application/json' -F 'content=@"content.pdf"' -F 'attachment1=@"file1.pdf"' -F 'attachment2=@"another_file.pdf"'
		/// ```
		/// 
		/// PutBenefitsDocumentUpload path
		/// </summary>
		/// <returns>Document upload staged</returns>
		public async Task PutBenefitsDocumentUploadAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "path";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a location for subsequent document upload PUT request
		/// PostBenefitsDocumentUpload uploads
		/// </summary>
		public async Task PostBenefitsDocumentUploadAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a bulk status report for a list of previous uploads
		/// GetBenefitsDocumentUploadStatusReport uploads/report
		/// </summary>
		/// <param name="requestBody">List of GUIDs for which to retrieve current status</param>
		/// <returns>Upload status report retrieved successfully</returns>
		public async Task<GetBenefitsDocumentUploadStatusReportReturn> GetBenefitsDocumentUploadStatusReportAsync(DocumentUploadStatusGuidList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploads/report";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBenefitsDocumentUploadStatusReportReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validate an individual document against system file requirements
		/// Using this endpoint will decrease the likelihood of errors associated with individual documents during
		/// the submission process. Validations performed:
		/// * Document is a valid PDF (Note: `Content-Type` header value must be "application/pdf")
		/// * Document does not have a user password (an owner password is acceptable)
		/// * File size does not exceed 100 MB
		/// * Page size does not exceed 21" x 21"
		/// 
		/// Each PDF document is sent as a direct file upload. The request body should contain nothing other than the document in
		/// binary format. Binary multipart/form-data encoding is not supported. This endpoint does NOT validate metadata in JSON
		/// format.
		/// 
		/// This endpoint does NOT initiate the claims intake process or submit data to that process. After using this endpoint,
		/// individual PDF documents can be combined and submitted as a payload using PUT `/path`.
		/// 
		/// A `200` response confirms that the individual document provided passes the system requirements.
		/// 
		/// A `422` response indicates one or more problems with the document that should be resolved before submitting it in the
		/// full document submission payload.
		/// 
		/// PostBenefitsDocumentUploadValidateDocument uploads/validate_document
		/// </summary>
		/// <returns>Document passed system requirements</returns>
		public async Task<PostBenefitsDocumentUploadValidateDocumentReturn> PostBenefitsDocumentUploadValidateDocumentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploads/validate_document";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PostBenefitsDocumentUploadValidateDocumentReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status for a previous benefits document upload
		/// GetBenefitsDocumentUploadStatus uploads/{id}
		/// </summary>
		/// <param name="id">ID as returned by a previous create upload request</param>
		/// <returns>Upload status retrieved successfully</returns>
		public async Task<object> GetBenefitsDocumentUploadStatusAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploads/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download zip of "what the server sees"
		/// An endpoint that will allow you to see exactly what the server sees. We split apart all submitted docs and metadata and zip the file to make it available to you to help with debugging purposes. Files are deleted after 10 days. Only available in testing environments, not production.
		/// GetBenefitsDocumentUploadDownload uploads/{id}/download
		/// </summary>
		/// <param name="id">ID as returned by a previous create upload request</param>
		/// <returns>Zip file with the contents of your payload as parsed by our server</returns>
		public async Task GetBenefitsDocumentUploadDownloadAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploads/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetBenefitsDocumentUploadStatusReportReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DocumentUploadStatus[] Data { get; set; }
	}
	
	public class PostBenefitsDocumentUploadValidateDocumentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public object Data { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
