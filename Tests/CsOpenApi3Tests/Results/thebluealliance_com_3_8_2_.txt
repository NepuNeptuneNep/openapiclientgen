//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class API_Status
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="android")]
		public API_Status_App_Version Android { get; set; }
		
		/// <summary>
		/// Year of the current FRC season.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="current_season")]
		public int Current_season { get; set; }
		
		/// <summary>
		/// An array of strings containing event keys of any active events that are no longer updating.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="down_events")]
		public string[] Down_events { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ios")]
		public API_Status_App_Version Ios { get; set; }
		
		/// <summary>
		/// True if the entire FMS API provided by FIRST is down.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_datafeed_down")]
		public bool Is_datafeed_down { get; set; }
		
		/// <summary>
		/// Maximum FRC season year for valid queries.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max_season")]
		public int Max_season { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class API_Status_App_Version
	{
		
		/// <summary>
		/// Internal use - Latest application version available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latest_app_version")]
		public int Latest_app_version { get; set; }
		
		/// <summary>
		/// Internal use - Minimum application version required to correctly connect and process data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="min_app_version")]
		public int Min_app_version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Award
	{
		
		/// <summary>
		/// Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="award_type")]
		public int Award_type { get; set; }
		
		/// <summary>
		/// The event_key of the event the award was won at.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_key")]
		public string Event_key { get; set; }
		
		/// <summary>
		/// The name of the award as provided by FIRST. May vary for the same award type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_list")]
		public Award_Recipient[] Recipient_list { get; set; }
		
		/// <summary>
		/// The year this award was won.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	/// <summary>
	/// An `Award_Recipient` object represents the team and/or person who received an award at an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Award_Recipient
	{
		
		/// <summary>
		/// The name of the individual given the award. May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awardee")]
		public string Awardee { get; set; }
		
		/// <summary>
		/// The TBA team key for the team that was given the award. May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_key")]
		public string Team_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class District_List
	{
		
		/// <summary>
		/// The short identifier for the district.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The long name for the district.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// Key for this district, e.g. `2016ne`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Year this district participated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	/// <summary>
	/// Rank of a team in a district.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class District_Ranking
	{
		
		/// <summary>
		/// List of events that contributed to the point total for the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_points")]
		public District_RankingEvent_points[] District_RankingEvent_points { get; set; }
		
		/// <summary>
		/// Total district points for the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="point_total")]
		public int Point_total { get; set; }
		
		/// <summary>
		/// Numerical rank of the team, 1 being top rank.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public int Rank { get; set; }
		
		/// <summary>
		/// Any points added to a team as a result of the rookie bonus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rookie_bonus")]
		public System.Nullable<System.Int32> Rookie_bonus { get; set; }
		
		/// <summary>
		/// TBA team key for the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_key")]
		public string Team_key { get; set; }
	}
	
	public class District_RankingEvent_points
	{
		
		/// <summary>
		/// Points awarded for alliance selection.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alliance_points")]
		public int Alliance_points { get; set; }
		
		/// <summary>
		/// Points awarded for event awards.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="award_points")]
		public int Award_points { get; set; }
		
		/// <summary>
		/// `true` if this event is a District Championship event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="district_cmp")]
		public bool District_cmp { get; set; }
		
		/// <summary>
		/// Points awarded for elimination match performance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elim_points")]
		public int Elim_points { get; set; }
		
		/// <summary>
		/// TBA Event key for this event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_key")]
		public string Event_key { get; set; }
		
		/// <summary>
		/// Points awarded for qualification match performance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="qual_points")]
		public int Qual_points { get; set; }
		
		/// <summary>
		/// Total points awarded at this event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Elimination_Alliance
	{
		
		/// <summary>
		/// Backup team called in, may be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backup")]
		public Elimination_AllianceBackup Backup { get; set; }
		
		/// <summary>
		/// List of teams that declined the alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declines")]
		public string[] Declines { get; set; }
		
		/// <summary>
		/// Alliance name, may be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of team keys picked for the alliance. First pick is captain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="picks")]
		public string[] Picks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Elimination_AllianceStatus Status { get; set; }
	}
	
	public class Elimination_AllianceBackup
	{
		
		/// <summary>
		/// Team key that was called in as the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in")]
		public string In { get; set; }
		
		/// <summary>
		/// Team key that was replaced by the backup team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="out")]
		public string Out { get; set; }
	}
	
	public class Elimination_AllianceStatus
	{
		
		/// <summary>
		/// A Win-Loss-Tie record for a team, or an alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_level_record")]
		public WLT_Record Current_level_record { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playoff_average")]
		public System.Nullable<System.Double> Playoff_average { get; set; }
		
		/// <summary>
		/// A Win-Loss-Tie record for a team, or an alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public WLT_Record Record { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// A Win-Loss-Tie record for a team, or an alliance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WLT_Record
	{
		
		/// <summary>
		/// Number of losses.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="losses")]
		public int Losses { get; set; }
		
		/// <summary>
		/// Number of ties.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ties")]
		public int Ties { get; set; }
		
		/// <summary>
		/// Number of wins.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="wins")]
		public int Wins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		/// <summary>
		/// Address of the event's venue, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City, town, village, etc. the event is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country the event is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public District_List District { get; set; }
		
		/// <summary>
		/// An array of event keys for the divisions at this event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="division_keys")]
		public string[] Division_keys { get; set; }
		
		/// <summary>
		/// Event end date in `yyyy-mm-dd` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public System.DateOnly End_date { get; set; }
		
		/// <summary>
		/// Event short code, as provided by FIRST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_code")]
		public string Event_code { get; set; }
		
		/// <summary>
		/// Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public int Event_type { get; set; }
		
		/// <summary>
		/// Event Type, eg Regional, District, or Offseason.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_type_string")]
		public string Event_type_string { get; set; }
		
		/// <summary>
		/// Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_event_code")]
		public string First_event_code { get; set; }
		
		/// <summary>
		/// The FIRST internal Event ID, used to link to the event on the FRC webpage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_event_id")]
		public string First_event_id { get; set; }
		
		/// <summary>
		/// Google Maps Place ID for the event address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmaps_place_id")]
		public string Gmaps_place_id { get; set; }
		
		/// <summary>
		/// Link to address location on Google Maps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmaps_url")]
		public string Gmaps_url { get; set; }
		
		/// <summary>
		/// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Latitude for the event address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// Longitude for the event address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		/// <summary>
		/// Name of the location at the address for the event, eg. Blue Alliance High School.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_name")]
		public string Location_name { get; set; }
		
		/// <summary>
		/// Official name of event on record either provided by FIRST or organizers of offseason event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_event_key")]
		public string Parent_event_key { get; set; }
		
		/// <summary>
		/// Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playoff_type")]
		public System.Nullable<System.Int32> Playoff_type { get; set; }
		
		/// <summary>
		/// String representation of the `playoff_type`, or null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playoff_type_string")]
		public string Playoff_type_string { get; set; }
		
		/// <summary>
		/// Postal code from the event address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="short_name")]
		public string Short_name { get; set; }
		
		/// <summary>
		/// Event start date in `yyyy-mm-dd` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public System.DateOnly Start_date { get; set; }
		
		/// <summary>
		/// State or Province the event is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_prov")]
		public string State_prov { get; set; }
		
		/// <summary>
		/// Timezone name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webcasts")]
		public Webcast[] Webcasts { get; set; }
		
		/// <summary>
		/// The event's website, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		/// <summary>
		/// Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="week")]
		public System.Nullable<System.Int32> Week { get; set; }
		
		/// <summary>
		/// Year the event data is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webcast
	{
		
		/// <summary>
		/// Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// The date for the webcast in `yyyy-mm-dd` format. May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// File identification as may be required for some types. May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public string File { get; set; }
		
		/// <summary>
		/// Type of webcast, typically descriptive of the streaming provider.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public WebcastType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebcastType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		youtube = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		twitch = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ustream = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iframe = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		html5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rtmp = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		livestream = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		direct_link = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mms = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		justin = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stemtv = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dacast = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_District_Points
	{
		
		/// <summary>
		/// Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="points")]
		public System.Collections.Generic.Dictionary<string, Event_District_PointsPoints> Points { get; set; }
		
		/// <summary>
		/// Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tiebreakers")]
		public System.Collections.Generic.Dictionary<string, Event_District_PointsTiebreakers> Tiebreakers { get; set; }
	}
	
	public class Event_District_PointsPoints
	{
		
		/// <summary>
		/// Points awarded for alliance selection
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alliance_points")]
		public int Alliance_points { get; set; }
		
		/// <summary>
		/// Points awarded for event awards.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="award_points")]
		public int Award_points { get; set; }
		
		/// <summary>
		/// Points awarded for elimination match performance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="elim_points")]
		public int Elim_points { get; set; }
		
		/// <summary>
		/// Points awarded for qualification match performance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="qual_points")]
		public int Qual_points { get; set; }
		
		/// <summary>
		/// Total points awarded at this event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	public class Event_District_PointsTiebreakers
	{
		
		[System.Runtime.Serialization.DataMember(Name="highest_qual_scores")]
		public int[] Highest_qual_scores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="qual_wins")]
		public System.Nullable<System.Int32> Qual_wins { get; set; }
	}
	
	/// <summary>
	/// A year-specific event insight object expressed as a JSON string, separated in to `qual` and `playoff` fields. See also Event_Insights_2016, Event_Insights_2017, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_Insights
	{
		
		/// <summary>
		/// Insights for the playoff round of an event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playoff")]
		public string Playoff { get; set; }
		
		/// <summary>
		/// Inights for the qualification round of an event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qual")]
		public string Qual { get; set; }
	}
	
	/// <summary>
	/// Insights for FIRST Stronghold qualification and elimination matches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_Insights_2016
	{
		
		/// <summary>
		/// For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] A_ChevalDeFrise { get; set; }
		
		/// <summary>
		/// For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] A_Portcullis { get; set; }
		
		/// <summary>
		/// For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] B_Moat { get; set; }
		
		/// <summary>
		/// For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] B_Ramparts { get; set; }
		
		/// <summary>
		/// For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] C_Drawbridge { get; set; }
		
		/// <summary>
		/// For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] C_SallyPort { get; set; }
		
		/// <summary>
		/// For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] D_RockWall { get; set; }
		
		/// <summary>
		/// For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] D_RoughTerrain { get; set; }
		
		/// <summary>
		/// For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double[] LowBar { get; set; }
		
		/// <summary>
		/// Average autonomous score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_auto_score")]
		public float Average_auto_score { get; set; }
		
		/// <summary>
		/// Average boulder score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_boulder_score")]
		public float Average_boulder_score { get; set; }
		
		/// <summary>
		/// Average crossing score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_crossing_score")]
		public float Average_crossing_score { get; set; }
		
		/// <summary>
		/// Average foul score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_foul_score")]
		public float Average_foul_score { get; set; }
		
		/// <summary>
		/// Average number of high goals scored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_high_goals")]
		public float Average_high_goals { get; set; }
		
		/// <summary>
		/// Average number of low goals scored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_low_goals")]
		public float Average_low_goals { get; set; }
		
		/// <summary>
		/// Average total score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_score")]
		public float Average_score { get; set; }
		
		/// <summary>
		/// Average tower score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_tower_score")]
		public float Average_tower_score { get; set; }
		
		/// <summary>
		/// Average margin of victory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_win_margin")]
		public float Average_win_margin { get; set; }
		
		/// <summary>
		/// Average winning score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_win_score")]
		public float Average_win_score { get; set; }
		
		/// <summary>
		/// An array with three values, number of times breached, number of opportunities to breach, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="breaches")]
		public double[] Breaches { get; set; }
		
		/// <summary>
		/// An array with three values, number of times captured, number of opportunities to capture, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="captures")]
		public double[] Captures { get; set; }
		
		/// <summary>
		/// An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="challenges")]
		public double[] Challenges { get; set; }
		
		/// <summary>
		/// An array with three values, high score, match key from the match with the high score, and the name of the match.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="high_score")]
		public string[] High_score { get; set; }
		
		/// <summary>
		/// An array with three values, number of times scaled, number of opportunities to scale, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scales")]
		public double[] Scales { get; set; }
	}
	
	/// <summary>
	/// Insights for FIRST STEAMWORKS qualification and elimination matches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_Insights_2017
	{
		
		/// <summary>
		/// Average foul score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_foul_score")]
		public float Average_foul_score { get; set; }
		
		/// <summary>
		/// Average fuel points scored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_fuel_points")]
		public float Average_fuel_points { get; set; }
		
		/// <summary>
		/// Average fuel points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_fuel_points_auto")]
		public float Average_fuel_points_auto { get; set; }
		
		/// <summary>
		/// Average fuel points scored during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_fuel_points_teleop")]
		public float Average_fuel_points_teleop { get; set; }
		
		/// <summary>
		/// Average points scored in the high goal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_high_goals")]
		public float Average_high_goals { get; set; }
		
		/// <summary>
		/// Average points scored in the high goal during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_high_goals_auto")]
		public float Average_high_goals_auto { get; set; }
		
		/// <summary>
		/// Average points scored in the high goal during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_high_goals_teleop")]
		public float Average_high_goals_teleop { get; set; }
		
		/// <summary>
		/// Average points scored in the low goal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_low_goals")]
		public float Average_low_goals { get; set; }
		
		/// <summary>
		/// Average points scored in the low goal during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_low_goals_auto")]
		public float Average_low_goals_auto { get; set; }
		
		/// <summary>
		/// Average points scored in the low goal during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_low_goals_teleop")]
		public float Average_low_goals_teleop { get; set; }
		
		/// <summary>
		/// Average mobility points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_mobility_points_auto")]
		public float Average_mobility_points_auto { get; set; }
		
		/// <summary>
		/// Average points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_points_auto")]
		public float Average_points_auto { get; set; }
		
		/// <summary>
		/// Average points scored during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_points_teleop")]
		public float Average_points_teleop { get; set; }
		
		/// <summary>
		/// Average rotor points scored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_rotor_points")]
		public float Average_rotor_points { get; set; }
		
		/// <summary>
		/// Average rotor points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_rotor_points_auto")]
		public float Average_rotor_points_auto { get; set; }
		
		/// <summary>
		/// Average rotor points scored during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_rotor_points_teleop")]
		public float Average_rotor_points_teleop { get; set; }
		
		/// <summary>
		/// Average score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_score")]
		public float Average_score { get; set; }
		
		/// <summary>
		/// Average takeoff points scored during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_takeoff_points_teleop")]
		public float Average_takeoff_points_teleop { get; set; }
		
		/// <summary>
		/// Average margin of victory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_win_margin")]
		public float Average_win_margin { get; set; }
		
		/// <summary>
		/// Average winning score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_win_score")]
		public float Average_win_score { get; set; }
		
		/// <summary>
		/// An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="high_kpa")]
		public string[] High_kpa { get; set; }
		
		/// <summary>
		/// An array with three values, high score, match key from the match with the high score, and the name of the match
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="high_score")]
		public string[] High_score { get; set; }
		
		/// <summary>
		/// An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kpa_achieved")]
		public double[] Kpa_achieved { get; set; }
		
		/// <summary>
		/// An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobility_counts")]
		public double[] Mobility_counts { get; set; }
		
		/// <summary>
		/// An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rotor_1_engaged")]
		public double[] Rotor_1_engaged { get; set; }
		
		/// <summary>
		/// An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rotor_1_engaged_auto")]
		public double[] Rotor_1_engaged_auto { get; set; }
		
		/// <summary>
		/// An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rotor_2_engaged")]
		public double[] Rotor_2_engaged { get; set; }
		
		/// <summary>
		/// An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rotor_2_engaged_auto")]
		public double[] Rotor_2_engaged_auto { get; set; }
		
		/// <summary>
		/// An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rotor_3_engaged")]
		public double[] Rotor_3_engaged { get; set; }
		
		/// <summary>
		/// An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rotor_4_engaged")]
		public double[] Rotor_4_engaged { get; set; }
		
		/// <summary>
		/// An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="takeoff_counts")]
		public double[] Takeoff_counts { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unicorn_matches")]
		public double[] Unicorn_matches { get; set; }
	}
	
	/// <summary>
	/// Insights for FIRST Power Up qualification and elimination matches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_Insights_2018
	{
		
		/// <summary>
		/// An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auto_quest_achieved")]
		public double[] Auto_quest_achieved { get; set; }
		
		/// <summary>
		/// Average number of boost power up scored (out of 3).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_boost_played")]
		public float Average_boost_played { get; set; }
		
		/// <summary>
		/// Average endgame points.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_endgame_points")]
		public float Average_endgame_points { get; set; }
		
		/// <summary>
		/// Average number of force power up scored (out of 3).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_force_played")]
		public float Average_force_played { get; set; }
		
		/// <summary>
		/// Average foul score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_foul_score")]
		public float Average_foul_score { get; set; }
		
		/// <summary>
		/// Average points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_points_auto")]
		public float Average_points_auto { get; set; }
		
		/// <summary>
		/// Average points scored during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_points_teleop")]
		public float Average_points_teleop { get; set; }
		
		/// <summary>
		/// Average mobility points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_run_points_auto")]
		public float Average_run_points_auto { get; set; }
		
		/// <summary>
		/// Average scale ownership points scored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_scale_ownership_points")]
		public float Average_scale_ownership_points { get; set; }
		
		/// <summary>
		/// Average scale ownership points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_scale_ownership_points_auto")]
		public float Average_scale_ownership_points_auto { get; set; }
		
		/// <summary>
		/// Average scale ownership points scored during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_scale_ownership_points_teleop")]
		public float Average_scale_ownership_points_teleop { get; set; }
		
		/// <summary>
		/// Average score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_score")]
		public float Average_score { get; set; }
		
		/// <summary>
		/// Average switch ownership points scored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_switch_ownership_points")]
		public float Average_switch_ownership_points { get; set; }
		
		/// <summary>
		/// Average switch ownership points scored during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_switch_ownership_points_auto")]
		public float Average_switch_ownership_points_auto { get; set; }
		
		/// <summary>
		/// Average switch ownership points scored during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_switch_ownership_points_teleop")]
		public float Average_switch_ownership_points_teleop { get; set; }
		
		/// <summary>
		/// Average value points scored.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_vault_points")]
		public float Average_vault_points { get; set; }
		
		/// <summary>
		/// Average margin of victory.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_win_margin")]
		public float Average_win_margin { get; set; }
		
		/// <summary>
		/// Average winning score.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average_win_score")]
		public float Average_win_score { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="boost_played_counts")]
		public double[] Boost_played_counts { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="climb_counts")]
		public double[] Climb_counts { get; set; }
		
		/// <summary>
		/// An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="face_the_boss_achieved")]
		public double[] Face_the_boss_achieved { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="force_played_counts")]
		public double[] Force_played_counts { get; set; }
		
		/// <summary>
		/// An array with three values, high score, match key from the match with the high score, and the name of the match
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="high_score")]
		public string[] High_score { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="levitate_played_counts")]
		public double[] Levitate_played_counts { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="run_counts_auto")]
		public double[] Run_counts_auto { get; set; }
		
		/// <summary>
		/// Average scale neutral percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scale_neutral_percentage")]
		public float Scale_neutral_percentage { get; set; }
		
		/// <summary>
		/// Average scale neutral percentage during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scale_neutral_percentage_auto")]
		public float Scale_neutral_percentage_auto { get; set; }
		
		/// <summary>
		/// Average scale neutral percentage during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scale_neutral_percentage_teleop")]
		public float Scale_neutral_percentage_teleop { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="switch_owned_counts_auto")]
		public double[] Switch_owned_counts_auto { get; set; }
		
		/// <summary>
		/// An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unicorn_matches")]
		public double[] Unicorn_matches { get; set; }
		
		/// <summary>
		/// Average opposing switch denail percentage for the winning alliance during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winning_opp_switch_denial_percentage_teleop")]
		public float Winning_opp_switch_denial_percentage_teleop { get; set; }
		
		/// <summary>
		/// Average own switch ownership percentage for the winning alliance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winning_own_switch_ownership_percentage")]
		public float Winning_own_switch_ownership_percentage { get; set; }
		
		/// <summary>
		/// Average own switch ownership percentage for the winning alliance during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winning_own_switch_ownership_percentage_auto")]
		public float Winning_own_switch_ownership_percentage_auto { get; set; }
		
		/// <summary>
		/// Average own switch ownership percentage for the winning alliance during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winning_own_switch_ownership_percentage_teleop")]
		public float Winning_own_switch_ownership_percentage_teleop { get; set; }
		
		/// <summary>
		/// Average scale ownership percentage for the winning alliance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winning_scale_ownership_percentage")]
		public float Winning_scale_ownership_percentage { get; set; }
		
		/// <summary>
		/// Average scale ownership percentage for the winning alliance during auto.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winning_scale_ownership_percentage_auto")]
		public float Winning_scale_ownership_percentage_auto { get; set; }
		
		/// <summary>
		/// Average scale ownership percentage for the winning alliance during teleop.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winning_scale_ownership_percentage_teleop")]
		public float Winning_scale_ownership_percentage_teleop { get; set; }
	}
	
	/// <summary>
	/// OPR, DPR, and CCWM for teams at the event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_OPRs
	{
		
		/// <summary>
		/// A key-value pair with team key (eg `frc254`) as key and CCWM as value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ccwms")]
		public System.Collections.Generic.Dictionary<string, float> Ccwms { get; set; }
		
		/// <summary>
		/// A key-value pair with team key (eg `frc254`) as key and DPR as value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dprs")]
		public System.Collections.Generic.Dictionary<string, float> Dprs { get; set; }
		
		/// <summary>
		/// A key-value pair with team key (eg `frc254`) as key and OPR as value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oprs")]
		public System.Collections.Generic.Dictionary<string, float> Oprs { get; set; }
	}
	
	/// <summary>
	/// JSON Object containing prediction information for the event. Contains year-specific information and is subject to change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_Predictions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_Ranking
	{
		
		/// <summary>
		/// List of special TBA-generated values provided in the `extra_stats` array for each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra_stats_info")]
		public Event_RankingExtra_stats_info[] Event_RankingExtra_stats_info { get; set; }
		
		/// <summary>
		/// List of rankings at the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rankings")]
		public Event_RankingRankings[] Event_RankingRankings { get; set; }
		
		/// <summary>
		/// List of year-specific values provided in the `sort_orders` array for each team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sort_order_info")]
		public Event_RankingSort_order_info[] Event_RankingSort_order_info { get; set; }
	}
	
	public class Event_RankingExtra_stats_info
	{
		
		/// <summary>
		/// Name of the field used in the `extra_stats` array.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Integer expressing the number of digits of precision in the number provided in `sort_orders`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public double Precision { get; set; }
	}
	
	public class Event_RankingRankings
	{
		
		/// <summary>
		/// Number of times disqualified.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dq")]
		public int Dq { get; set; }
		
		/// <summary>
		/// Additional special data on the team's performance calculated by TBA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extra_stats")]
		public double[] Extra_stats { get; set; }
		
		/// <summary>
		/// Number of matches played by this team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matches_played")]
		public int Matches_played { get; set; }
		
		/// <summary>
		/// The average match score during qualifications. Year specific. May be null if not relevant for a given year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qual_average")]
		public System.Nullable<System.Int32> Qual_average { get; set; }
		
		/// <summary>
		/// The team's rank at the event as provided by FIRST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public int Rank { get; set; }
		
		/// <summary>
		/// A Win-Loss-Tie record for a team, or an alliance.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="record")]
		public WLT_Record Record { get; set; }
		
		/// <summary>
		/// Additional year-specific information, may be null. See parent `sort_order_info` for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_orders")]
		public double[] Sort_orders { get; set; }
		
		/// <summary>
		/// The team with this rank.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_key")]
		public string Team_key { get; set; }
	}
	
	public class Event_RankingSort_order_info
	{
		
		/// <summary>
		/// Name of the field used in the `sort_order` array.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Integer expressing the number of digits of precision in the number provided in `sort_orders`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public int Precision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event_Simple
	{
		
		/// <summary>
		/// City, town, village, etc. the event is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country the event is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public District_List District { get; set; }
		
		/// <summary>
		/// Event end date in `yyyy-mm-dd` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public System.DateOnly End_date { get; set; }
		
		/// <summary>
		/// Event short code, as provided by FIRST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_code")]
		public string Event_code { get; set; }
		
		/// <summary>
		/// Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public int Event_type { get; set; }
		
		/// <summary>
		/// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Official name of event on record either provided by FIRST or organizers of offseason event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Event start date in `yyyy-mm-dd` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public System.DateOnly Start_date { get; set; }
		
		/// <summary>
		/// State or Province the event is located in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_prov")]
		public string State_prov { get; set; }
		
		/// <summary>
		/// Year the event data is for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match
	{
		
		/// <summary>
		/// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_time")]
		public System.Nullable<System.Int64> Actual_time { get; set; }
		
		/// <summary>
		/// A list of alliances, the teams on the alliances, and their score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alliances")]
		public MatchAlliances Alliances { get; set; }
		
		/// <summary>
		/// The competition level the match was played at.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comp_level")]
		public MatchComp_level Comp_level { get; set; }
		
		/// <summary>
		/// Event key of the event the match was played at.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_key")]
		public string Event_key { get; set; }
		
		/// <summary>
		/// TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The match number of the match in the competition level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match_number")]
		public int Match_number { get; set; }
		
		/// <summary>
		/// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_result_time")]
		public System.Nullable<System.Int64> Post_result_time { get; set; }
		
		/// <summary>
		/// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicted_time")]
		public System.Nullable<System.Int64> Predicted_time { get; set; }
		
		/// <summary>
		/// Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score_breakdown")]
		public string Score_breakdown { get; set; }
		
		/// <summary>
		/// The set number in a series of matches where more than one match is required in the match series.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="set_number")]
		public int Set_number { get; set; }
		
		/// <summary>
		/// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
		
		/// <summary>
		/// Array of video objects associated with this match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public MatchVideos[] MatchVideos { get; set; }
		
		/// <summary>
		/// The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="winning_alliance")]
		public System.Nullable<MatchWinning_alliance> Winning_alliance { get; set; }
	}
	
	public class MatchAlliances
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_alliance
	{
		
		/// <summary>
		/// TBA team keys (eg `frc254`) of any disqualified teams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dq_team_keys")]
		public string[] Dq_team_keys { get; set; }
		
		/// <summary>
		/// Score for this alliance. Will be null or -1 for an unplayed match.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="score")]
		public int Score { get; set; }
		
		/// <summary>
		/// TBA team keys (eg `frc254`) of any teams playing as a surrogate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surrogate_team_keys")]
		public string[] Surrogate_team_keys { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_keys")]
		public string[] Team_keys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MatchComp_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		qm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ef = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		qf = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sf = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		f = 4,
	}
	
	public class MatchVideos
	{
		
		/// <summary>
		/// Unique key representing this video
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Can be one of 'youtube' or 'tba'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MatchWinning_alliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		red = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 2,
	}
	
	/// <summary>
	/// See the 2015 FMS API documentation for a description of each value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2015
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2015_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coopertition")]
		public System.Nullable<Match_Score_Breakdown_2015Coopertition> Coopertition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coopertition_points")]
		public System.Nullable<System.Int32> Coopertition_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2015_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2015_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjust_points")]
		public System.Nullable<System.Int32> Adjust_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auto_points")]
		public System.Nullable<System.Int32> Auto_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_count_level1")]
		public System.Nullable<System.Int32> Container_count_level1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_count_level2")]
		public System.Nullable<System.Int32> Container_count_level2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_count_level3")]
		public System.Nullable<System.Int32> Container_count_level3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_count_level4")]
		public System.Nullable<System.Int32> Container_count_level4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_count_level5")]
		public System.Nullable<System.Int32> Container_count_level5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_count_level6")]
		public System.Nullable<System.Int32> Container_count_level6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_points")]
		public System.Nullable<System.Int32> Container_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container_set")]
		public System.Nullable<System.Boolean> Container_set { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foul_count")]
		public System.Nullable<System.Int32> Foul_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foul_points")]
		public System.Nullable<System.Int32> Foul_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="litter_count_container")]
		public System.Nullable<System.Int32> Litter_count_container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="litter_count_landfill")]
		public System.Nullable<System.Int32> Litter_count_landfill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="litter_count_unprocessed")]
		public System.Nullable<System.Int32> Litter_count_unprocessed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="litter_points")]
		public System.Nullable<System.Int32> Litter_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="robot_set")]
		public System.Nullable<System.Boolean> Robot_set { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleop_points")]
		public System.Nullable<System.Int32> Teleop_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_points")]
		public System.Nullable<System.Int32> Total_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tote_count_far")]
		public System.Nullable<System.Int32> Tote_count_far { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tote_count_near")]
		public System.Nullable<System.Int32> Tote_count_near { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tote_points")]
		public System.Nullable<System.Int32> Tote_points { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tote_set")]
		public System.Nullable<System.Boolean> Tote_set { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tote_stack")]
		public System.Nullable<System.Boolean> Tote_stack { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2015Coopertition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stack = 2,
	}
	
	/// <summary>
	/// See the 2016 FMS API documentation for a description of each value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2016
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2016_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2016_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2016_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustPoints")]
		public System.Nullable<System.Int32> AdjustPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBoulderPoints")]
		public System.Nullable<System.Int32> AutoBoulderPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBouldersHigh")]
		public System.Nullable<System.Int32> AutoBouldersHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBouldersLow")]
		public System.Nullable<System.Int32> AutoBouldersLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCrossingPoints")]
		public System.Nullable<System.Int32> AutoCrossingPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPoints")]
		public System.Nullable<System.Int32> AutoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoReachPoints")]
		public System.Nullable<System.Int32> AutoReachPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="breachPoints")]
		public System.Nullable<System.Int32> BreachPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capturePoints")]
		public System.Nullable<System.Int32> CapturePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulCount")]
		public System.Nullable<System.Int32> FoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulPoints")]
		public System.Nullable<System.Int32> FoulPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position1crossings")]
		public System.Nullable<System.Int32> Position1crossings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position2")]
		public string Position2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position2crossings")]
		public System.Nullable<System.Int32> Position2crossings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position3")]
		public string Position3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position3crossings")]
		public System.Nullable<System.Int32> Position3crossings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position4")]
		public string Position4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position4crossings")]
		public System.Nullable<System.Int32> Position4crossings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position5")]
		public string Position5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position5crossings")]
		public System.Nullable<System.Int32> Position5crossings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="robot1Auto")]
		public System.Nullable<Match_Score_Breakdown_2016_AllianceRobot1Auto> Robot1Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="robot2Auto")]
		public Match_Score_Breakdown_2016_AllianceRobot1Auto Robot2Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="robot3Auto")]
		public Match_Score_Breakdown_2016_AllianceRobot1Auto Robot3Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="techFoulCount")]
		public System.Nullable<System.Int32> TechFoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopBoulderPoints")]
		public System.Nullable<System.Int32> TeleopBoulderPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopBouldersHigh")]
		public System.Nullable<System.Int32> TeleopBouldersHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopBouldersLow")]
		public System.Nullable<System.Int32> TeleopBouldersLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopChallengePoints")]
		public System.Nullable<System.Int32> TeleopChallengePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCrossingPoints")]
		public System.Nullable<System.Int32> TeleopCrossingPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopDefensesBreached")]
		public System.Nullable<System.Boolean> TeleopDefensesBreached { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopPoints")]
		public System.Nullable<System.Int32> TeleopPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopScalePoints")]
		public System.Nullable<System.Int32> TeleopScalePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopTowerCaptured")]
		public System.Nullable<System.Int32> TeleopTowerCaptured { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPoints")]
		public System.Nullable<System.Int32> TotalPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="towerEndStrength")]
		public System.Nullable<System.Int32> TowerEndStrength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="towerFaceA")]
		public string TowerFaceA { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="towerFaceB")]
		public string TowerFaceB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="towerFaceC")]
		public string TowerFaceC { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2016_AllianceRobot1Auto
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Crossed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reached = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// See the 2017 FMS API documentation for a description of each value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2017
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2017_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2017_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2017_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustPoints")]
		public System.Nullable<System.Int32> AdjustPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoFuelHigh")]
		public System.Nullable<System.Int32> AutoFuelHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoFuelLow")]
		public System.Nullable<System.Int32> AutoFuelLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoFuelPoints")]
		public System.Nullable<System.Int32> AutoFuelPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoMobilityPoints")]
		public System.Nullable<System.Int32> AutoMobilityPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPoints")]
		public System.Nullable<System.Int32> AutoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRotorPoints")]
		public System.Nullable<System.Int32> AutoRotorPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulCount")]
		public System.Nullable<System.Int32> FoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulPoints")]
		public System.Nullable<System.Int32> FoulPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kPaBonusPoints")]
		public System.Nullable<System.Int32> KPaBonusPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kPaRankingPointAchieved")]
		public System.Nullable<System.Boolean> KPaRankingPointAchieved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="robot1Auto")]
		public System.Nullable<Match_Score_Breakdown_2017_AllianceRobot1Auto> Robot1Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="robot2Auto")]
		public Match_Score_Breakdown_2017_AllianceRobot1Auto Robot2Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="robot3Auto")]
		public Match_Score_Breakdown_2017_AllianceRobot1Auto Robot3Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotor1Auto")]
		public System.Nullable<System.Boolean> Rotor1Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotor1Engaged")]
		public System.Nullable<System.Boolean> Rotor1Engaged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotor2Auto")]
		public System.Nullable<System.Boolean> Rotor2Auto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotor2Engaged")]
		public System.Nullable<System.Boolean> Rotor2Engaged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotor3Engaged")]
		public System.Nullable<System.Boolean> Rotor3Engaged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotor4Engaged")]
		public System.Nullable<System.Boolean> Rotor4Engaged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotorBonusPoints")]
		public System.Nullable<System.Int32> RotorBonusPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotorRankingPointAchieved")]
		public System.Nullable<System.Boolean> RotorRankingPointAchieved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="techFoulCount")]
		public System.Nullable<System.Int32> TechFoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopFuelHigh")]
		public System.Nullable<System.Int32> TeleopFuelHigh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopFuelLow")]
		public System.Nullable<System.Int32> TeleopFuelLow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopFuelPoints")]
		public System.Nullable<System.Int32> TeleopFuelPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopPoints")]
		public System.Nullable<System.Int32> TeleopPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopRotorPoints")]
		public System.Nullable<System.Int32> TeleopRotorPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopTakeoffPoints")]
		public System.Nullable<System.Int32> TeleopTakeoffPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPoints")]
		public System.Nullable<System.Int32> TotalPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="touchpadFar")]
		public string TouchpadFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="touchpadMiddle")]
		public string TouchpadMiddle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="touchpadNear")]
		public string TouchpadNear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2017_AllianceRobot1Auto
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mobility = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// See the 2018 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2018
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2018_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2018_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2018_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustPoints")]
		public System.Nullable<System.Int32> AdjustPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoOwnershipPoints")]
		public System.Nullable<System.Int32> AutoOwnershipPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPoints")]
		public System.Nullable<System.Int32> AutoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoQuestRankingPoint")]
		public System.Nullable<System.Boolean> AutoQuestRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRobot1")]
		public string AutoRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRobot2")]
		public string AutoRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRobot3")]
		public string AutoRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRunPoints")]
		public System.Nullable<System.Int32> AutoRunPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoScaleOwnershipSec")]
		public System.Nullable<System.Int32> AutoScaleOwnershipSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSwitchAtZero")]
		public System.Nullable<System.Boolean> AutoSwitchAtZero { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSwitchOwnershipSec")]
		public System.Nullable<System.Int32> AutoSwitchOwnershipSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgamePoints")]
		public System.Nullable<System.Int32> EndgamePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot1")]
		public string EndgameRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot2")]
		public string EndgameRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot3")]
		public string EndgameRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faceTheBossRankingPoint")]
		public System.Nullable<System.Boolean> FaceTheBossRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulCount")]
		public System.Nullable<System.Int32> FoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulPoints")]
		public System.Nullable<System.Int32> FoulPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rp")]
		public System.Nullable<System.Int32> Rp { get; set; }
		
		/// <summary>
		/// Unofficial TBA-computed value of the FMS provided GameData given to the alliance teams at the start of the match. 3 Character String containing `L` and `R` only. The first character represents the near switch, the 2nd the scale, and the 3rd the far, opposing, switch from the alliance's perspective. An `L` in a position indicates the platform on the left will be lit for the alliance while an `R` will indicate the right platform will be lit for the alliance. See also [WPI Screen Steps](https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/826278-2018-game-data-details).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tba_gameData")]
		public string Tba_gameData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="techFoulCount")]
		public System.Nullable<System.Int32> TechFoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopOwnershipPoints")]
		public System.Nullable<System.Int32> TeleopOwnershipPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopPoints")]
		public System.Nullable<System.Int32> TeleopPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopScaleBoostSec")]
		public System.Nullable<System.Int32> TeleopScaleBoostSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopScaleForceSec")]
		public System.Nullable<System.Int32> TeleopScaleForceSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopScaleOwnershipSec")]
		public System.Nullable<System.Int32> TeleopScaleOwnershipSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopSwitchBoostSec")]
		public System.Nullable<System.Int32> TeleopSwitchBoostSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopSwitchForceSec")]
		public System.Nullable<System.Int32> TeleopSwitchForceSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopSwitchOwnershipSec")]
		public System.Nullable<System.Int32> TeleopSwitchOwnershipSec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPoints")]
		public System.Nullable<System.Int32> TotalPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultBoostPlayed")]
		public System.Nullable<System.Int32> VaultBoostPlayed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultBoostTotal")]
		public System.Nullable<System.Int32> VaultBoostTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultForcePlayed")]
		public System.Nullable<System.Int32> VaultForcePlayed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultForceTotal")]
		public System.Nullable<System.Int32> VaultForceTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultLevitatePlayed")]
		public System.Nullable<System.Int32> VaultLevitatePlayed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultLevitateTotal")]
		public System.Nullable<System.Int32> VaultLevitateTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vaultPoints")]
		public System.Nullable<System.Int32> VaultPoints { get; set; }
	}
	
	/// <summary>
	/// See the 2019 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2019
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2019_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2019_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2019_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustPoints")]
		public System.Nullable<System.Int32> AdjustPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPoints")]
		public System.Nullable<System.Int32> AutoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay1")]
		public string Bay1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay2")]
		public string Bay2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay3")]
		public string Bay3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay4")]
		public string Bay4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay5")]
		public string Bay5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay6")]
		public string Bay6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay7")]
		public string Bay7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bay8")]
		public string Bay8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cargoPoints")]
		public System.Nullable<System.Int32> CargoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completeRocketRankingPoint")]
		public System.Nullable<System.Boolean> CompleteRocketRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedRocketFar")]
		public System.Nullable<System.Boolean> CompletedRocketFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedRocketNear")]
		public System.Nullable<System.Boolean> CompletedRocketNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot1")]
		public string EndgameRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot2")]
		public string EndgameRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot3")]
		public string EndgameRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulCount")]
		public System.Nullable<System.Int32> FoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulPoints")]
		public System.Nullable<System.Int32> FoulPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="habClimbPoints")]
		public System.Nullable<System.Int32> HabClimbPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="habDockingRankingPoint")]
		public System.Nullable<System.Boolean> HabDockingRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="habLineRobot1")]
		public string HabLineRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="habLineRobot2")]
		public string HabLineRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="habLineRobot3")]
		public string HabLineRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hatchPanelPoints")]
		public System.Nullable<System.Int32> HatchPanelPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowLeftRocketFar")]
		public string LowLeftRocketFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowLeftRocketNear")]
		public string LowLeftRocketNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowRightRocketFar")]
		public string LowRightRocketFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowRightRocketNear")]
		public string LowRightRocketNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="midLeftRocketFar")]
		public string MidLeftRocketFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="midLeftRocketNear")]
		public string MidLeftRocketNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="midRightRocketFar")]
		public string MidRightRocketFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="midRightRocketNear")]
		public string MidRightRocketNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchBay1")]
		public string PreMatchBay1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchBay2")]
		public string PreMatchBay2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchBay3")]
		public string PreMatchBay3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchBay6")]
		public string PreMatchBay6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchBay7")]
		public string PreMatchBay7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchBay8")]
		public string PreMatchBay8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchLevelRobot1")]
		public string PreMatchLevelRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchLevelRobot2")]
		public string PreMatchLevelRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preMatchLevelRobot3")]
		public string PreMatchLevelRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rp")]
		public System.Nullable<System.Int32> Rp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sandStormBonusPoints")]
		public System.Nullable<System.Int32> SandStormBonusPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="techFoulCount")]
		public System.Nullable<System.Int32> TechFoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopPoints")]
		public System.Nullable<System.Int32> TeleopPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topLeftRocketFar")]
		public string TopLeftRocketFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topLeftRocketNear")]
		public string TopLeftRocketNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topRightRocketFar")]
		public string TopRightRocketFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topRightRocketNear")]
		public string TopRightRocketNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPoints")]
		public System.Nullable<System.Int32> TotalPoints { get; set; }
	}
	
	/// <summary>
	/// See the 2020 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2020
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2020_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2020_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2020_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustPoints")]
		public System.Nullable<System.Int32> AdjustPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCellPoints")]
		public System.Nullable<System.Int32> AutoCellPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCellsBottom")]
		public System.Nullable<System.Int32> AutoCellsBottom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCellsInner")]
		public System.Nullable<System.Int32> AutoCellsInner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCellsOuter")]
		public System.Nullable<System.Int32> AutoCellsOuter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoInitLinePoints")]
		public System.Nullable<System.Int32> AutoInitLinePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPoints")]
		public System.Nullable<System.Int32> AutoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="controlPanelPoints")]
		public System.Nullable<System.Int32> ControlPanelPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgamePoints")]
		public System.Nullable<System.Int32> EndgamePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot1")]
		public string EndgameRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot2")]
		public string EndgameRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot3")]
		public string EndgameRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRungIsLevel")]
		public string EndgameRungIsLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulCount")]
		public System.Nullable<System.Int32> FoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulPoints")]
		public System.Nullable<System.Int32> FoulPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initLineRobot1")]
		public string InitLineRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initLineRobot2")]
		public string InitLineRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initLineRobot3")]
		public string InitLineRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rp")]
		public System.Nullable<System.Int32> Rp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shieldEnergizedRankingPoint")]
		public System.Nullable<System.Boolean> ShieldEnergizedRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shieldOperationalRankingPoint")]
		public System.Nullable<System.Boolean> ShieldOperationalRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage1Activated")]
		public System.Nullable<System.Boolean> Stage1Activated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage2Activated")]
		public System.Nullable<System.Boolean> Stage2Activated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage3Activated")]
		public System.Nullable<System.Boolean> Stage3Activated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage3TargetColor")]
		public string Stage3TargetColor { get; set; }
		
		/// <summary>
		/// Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tba_numRobotsHanging")]
		public System.Nullable<System.Int32> Tba_numRobotsHanging { get; set; }
		
		/// <summary>
		/// Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tba_shieldEnergizedRankingPointFromFoul")]
		public System.Nullable<System.Boolean> Tba_shieldEnergizedRankingPointFromFoul { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="techFoulCount")]
		public System.Nullable<System.Int32> TechFoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCellPoints")]
		public System.Nullable<System.Int32> TeleopCellPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCellsBottom")]
		public System.Nullable<System.Int32> TeleopCellsBottom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCellsInner")]
		public System.Nullable<System.Int32> TeleopCellsInner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCellsOuter")]
		public System.Nullable<System.Int32> TeleopCellsOuter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopPoints")]
		public System.Nullable<System.Int32> TeleopPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPoints")]
		public System.Nullable<System.Int32> TotalPoints { get; set; }
	}
	
	/// <summary>
	/// See the 2022 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2022
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2022_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2022_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2022_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="adjustPoints")]
		public System.Nullable<System.Int32> AdjustPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoLowerBlue")]
		public System.Nullable<System.Int32> AutoCargoLowerBlue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoLowerFar")]
		public System.Nullable<System.Int32> AutoCargoLowerFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoLowerNear")]
		public System.Nullable<System.Int32> AutoCargoLowerNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoLowerRed")]
		public System.Nullable<System.Int32> AutoCargoLowerRed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoPoints")]
		public System.Nullable<System.Int32> AutoCargoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoTotal")]
		public System.Nullable<System.Int32> AutoCargoTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoUpperBlue")]
		public System.Nullable<System.Int32> AutoCargoUpperBlue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoUpperFar")]
		public System.Nullable<System.Int32> AutoCargoUpperFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoUpperNear")]
		public System.Nullable<System.Int32> AutoCargoUpperNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCargoUpperRed")]
		public System.Nullable<System.Int32> AutoCargoUpperRed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPoints")]
		public System.Nullable<System.Int32> AutoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoTaxiPoints")]
		public System.Nullable<System.Int32> AutoTaxiPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cargoBonusRankingPoint")]
		public System.Nullable<System.Boolean> CargoBonusRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgamePoints")]
		public System.Nullable<System.Int32> EndgamePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot1")]
		public System.Nullable<Match_Score_Breakdown_2022_AllianceEndgameRobot1> EndgameRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot2")]
		public Match_Score_Breakdown_2022_AllianceEndgameRobot1 EndgameRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endgameRobot3")]
		public Match_Score_Breakdown_2022_AllianceEndgameRobot1 EndgameRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulCount")]
		public System.Nullable<System.Int32> FoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulPoints")]
		public System.Nullable<System.Int32> FoulPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hangarBonusRankingPoint")]
		public System.Nullable<System.Boolean> HangarBonusRankingPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchCargoTotal")]
		public System.Nullable<System.Int32> MatchCargoTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quintetAchieved")]
		public System.Nullable<System.Boolean> QuintetAchieved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rp")]
		public System.Nullable<System.Int32> Rp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxiRobot1")]
		public System.Nullable<Match_Score_Breakdown_2022_AllianceTaxiRobot1> TaxiRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxiRobot2")]
		public Match_Score_Breakdown_2022_AllianceTaxiRobot1 TaxiRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxiRobot3")]
		public Match_Score_Breakdown_2022_AllianceTaxiRobot1 TaxiRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="techFoulCount")]
		public System.Nullable<System.Int32> TechFoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoLowerBlue")]
		public System.Nullable<System.Int32> TeleopCargoLowerBlue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoLowerFar")]
		public System.Nullable<System.Int32> TeleopCargoLowerFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoLowerNear")]
		public System.Nullable<System.Int32> TeleopCargoLowerNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoLowerRed")]
		public System.Nullable<System.Int32> TeleopCargoLowerRed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoPoints")]
		public System.Nullable<System.Int32> TeleopCargoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoTotal")]
		public System.Nullable<System.Int32> TeleopCargoTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoUpperBlue")]
		public System.Nullable<System.Int32> TeleopCargoUpperBlue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoUpperFar")]
		public System.Nullable<System.Int32> TeleopCargoUpperFar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoUpperNear")]
		public System.Nullable<System.Int32> TeleopCargoUpperNear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCargoUpperRed")]
		public System.Nullable<System.Int32> TeleopCargoUpperRed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopPoints")]
		public System.Nullable<System.Int32> TeleopPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPoints")]
		public System.Nullable<System.Int32> TotalPoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2022_AllianceEndgameRobot1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Traversal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2022_AllianceTaxiRobot1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		No = 1,
	}
	
	/// <summary>
	/// See the 2023 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2023
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_Score_Breakdown_2023_Alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_Score_Breakdown_2023_Alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Score_Breakdown_2023_Alliance
	{
		
		[System.Runtime.Serialization.DataMember(Name="activationBonusAchieved")]
		public System.Nullable<System.Boolean> ActivationBonusAchieved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adjustPoints")]
		public System.Nullable<System.Int32> AdjustPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBridgeState")]
		public System.Nullable<Match_Score_Breakdown_2023_AllianceAutoBridgeState> AutoBridgeState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoChargeStationPoints")]
		public System.Nullable<System.Int32> AutoChargeStationPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoChargeStationRobot1")]
		public System.Nullable<Match_Score_Breakdown_2023_AllianceAutoChargeStationRobot1> AutoChargeStationRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoChargeStationRobot2")]
		public Match_Score_Breakdown_2023_AllianceAutoChargeStationRobot1 AutoChargeStationRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoChargeStationRobot3")]
		public Match_Score_Breakdown_2023_AllianceAutoChargeStationRobot1 AutoChargeStationRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoCommunity")]
		public Match_Score_Breakdown_2023_AllianceAutoCommunity AutoCommunity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoDocked")]
		public System.Nullable<System.Boolean> AutoDocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGamePieceCount")]
		public System.Nullable<System.Int32> AutoGamePieceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoGamePiecePoints")]
		public System.Nullable<System.Int32> AutoGamePiecePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoMobilityPoints")]
		public System.Nullable<System.Int32> AutoMobilityPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPoints")]
		public System.Nullable<System.Int32> AutoPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coopGamePieceCount")]
		public System.Nullable<System.Int32> CoopGamePieceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coopertitionCriteriaMet")]
		public System.Nullable<System.Boolean> CoopertitionCriteriaMet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endGameBridgeState")]
		public Match_Score_Breakdown_2023_AllianceAutoBridgeState EndGameBridgeState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endGameChargeStationPoints")]
		public System.Nullable<System.Int32> EndGameChargeStationPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endGameChargeStationRobot1")]
		public Match_Score_Breakdown_2023_AllianceAutoChargeStationRobot1 EndGameChargeStationRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endGameChargeStationRobot2")]
		public Match_Score_Breakdown_2023_AllianceAutoChargeStationRobot1 EndGameChargeStationRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endGameChargeStationRobot3")]
		public Match_Score_Breakdown_2023_AllianceAutoChargeStationRobot1 EndGameChargeStationRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endGameParkPoints")]
		public System.Nullable<System.Int32> EndGameParkPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extraGamePieceCount")]
		public System.Nullable<System.Int32> ExtraGamePieceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulCount")]
		public System.Nullable<System.Int32> FoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foulPoints")]
		public System.Nullable<System.Int32> FoulPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkPoints")]
		public System.Nullable<System.Int32> LinkPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Match_Score_Breakdown_2023_AllianceLinks[] Match_Score_Breakdown_2023_AllianceLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilityRobot1")]
		public Match_Score_Breakdown_2022_AllianceTaxiRobot1 MobilityRobot1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilityRobot2")]
		public Match_Score_Breakdown_2022_AllianceTaxiRobot1 MobilityRobot2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilityRobot3")]
		public Match_Score_Breakdown_2022_AllianceTaxiRobot1 MobilityRobot3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rp")]
		public System.Nullable<System.Int32> Rp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sustainabilityBonusAchieved")]
		public System.Nullable<System.Boolean> SustainabilityBonusAchieved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="techFoulCount")]
		public System.Nullable<System.Int32> TechFoulCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopCommunity")]
		public Match_Score_Breakdown_2023_AllianceTeleopCommunity TeleopCommunity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopGamePieceCount")]
		public System.Nullable<System.Int32> TeleopGamePieceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopGamePiecePoints")]
		public System.Nullable<System.Int32> TeleopGamePiecePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teleopPoints")]
		public System.Nullable<System.Int32> TeleopPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalChargeStationPoints")]
		public System.Nullable<System.Int32> TotalChargeStationPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPoints")]
		public System.Nullable<System.Int32> TotalPoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2023_AllianceAutoBridgeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotLevel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Level = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2023_AllianceAutoChargeStationRobot1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Docked = 1,
	}
	
	public class Match_Score_Breakdown_2023_AllianceAutoCommunity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] B { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] M { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] T { get; set; }
	}
	
	public class Match_Score_Breakdown_2023_AllianceLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public string[] Nodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="row")]
		public System.Nullable<Match_Score_Breakdown_2023_AllianceLinksRow> Row { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_Score_Breakdown_2023_AllianceLinksRow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bottom = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Top = 2,
	}
	
	public class Match_Score_Breakdown_2023_AllianceTeleopCommunity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] B { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] M { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] T { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Simple
	{
		
		/// <summary>
		/// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_time")]
		public System.Nullable<System.Int64> Actual_time { get; set; }
		
		/// <summary>
		/// A list of alliances, the teams on the alliances, and their score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alliances")]
		public Match_SimpleAlliances Alliances { get; set; }
		
		/// <summary>
		/// The competition level the match was played at.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comp_level")]
		public MatchComp_level Comp_level { get; set; }
		
		/// <summary>
		/// Event key of the event the match was played at.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_key")]
		public string Event_key { get; set; }
		
		/// <summary>
		/// TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The match number of the match in the competition level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="match_number")]
		public int Match_number { get; set; }
		
		/// <summary>
		/// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicted_time")]
		public System.Nullable<System.Int64> Predicted_time { get; set; }
		
		/// <summary>
		/// The set number in a series of matches where more than one match is required in the match series.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="set_number")]
		public int Set_number { get; set; }
		
		/// <summary>
		/// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
		
		/// <summary>
		/// The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="winning_alliance")]
		public System.Nullable<Match_SimpleWinning_alliance> Winning_alliance { get; set; }
	}
	
	public class Match_SimpleAlliances
	{
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Match_alliance Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Match_alliance Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Match_SimpleWinning_alliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		red = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 2,
	}
	
	/// <summary>
	/// Timeseries data for the 2018 game *FIRST* POWER UP.
	///*WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
	///*WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Match_Timeseries_2018
	{
		
		/// <summary>
		/// 1 if the blue alliance is credited with the AUTO QUEST, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_auto_quest")]
		public System.Nullable<System.Int32> Blue_auto_quest { get; set; }
		
		/// <summary>
		/// Number of POWER CUBES in the BOOST section of the blue alliance VAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_boost_count")]
		public System.Nullable<System.Int32> Blue_boost_count { get; set; }
		
		/// <summary>
		/// Returns 1 if the blue alliance BOOST was played, or 0 if not played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_boost_played")]
		public System.Nullable<System.Int32> Blue_boost_played { get; set; }
		
		/// <summary>
		/// Name of the current blue alliance POWER UP being played, or `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_current_powerup")]
		public string Blue_current_powerup { get; set; }
		
		/// <summary>
		/// 1 if the blue alliance is credited with FACING THE BOSS, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_face_the_boss")]
		public System.Nullable<System.Int32> Blue_face_the_boss { get; set; }
		
		/// <summary>
		/// Number of POWER CUBES in the FORCE section of the blue alliance VAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_force_count")]
		public System.Nullable<System.Int32> Blue_force_count { get; set; }
		
		/// <summary>
		/// Returns 1 if the blue alliance FORCE was played, or 0 if not played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_force_played")]
		public System.Nullable<System.Int32> Blue_force_played { get; set; }
		
		/// <summary>
		/// Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_levitate_count")]
		public System.Nullable<System.Int32> Blue_levitate_count { get; set; }
		
		/// <summary>
		/// Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_levitate_played")]
		public System.Nullable<System.Int32> Blue_levitate_played { get; set; }
		
		/// <summary>
		/// Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_powerup_time_remaining")]
		public string Blue_powerup_time_remaining { get; set; }
		
		/// <summary>
		/// 1 if the blue alliance owns the SCALE, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_scale_owned")]
		public System.Nullable<System.Int32> Blue_scale_owned { get; set; }
		
		/// <summary>
		/// Current score for the blue alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_score")]
		public System.Nullable<System.Int32> Blue_score { get; set; }
		
		/// <summary>
		/// 1 if the blue alliance owns their SWITCH, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue_switch_owned")]
		public System.Nullable<System.Int32> Blue_switch_owned { get; set; }
		
		/// <summary>
		/// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_key")]
		public string Event_key { get; set; }
		
		/// <summary>
		/// Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_id")]
		public string Match_id { get; set; }
		
		/// <summary>
		/// Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="play")]
		public System.Nullable<System.Int32> Play { get; set; }
		
		/// <summary>
		/// 1 if the red alliance is credited with the AUTO QUEST, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_auto_quest")]
		public System.Nullable<System.Int32> Red_auto_quest { get; set; }
		
		/// <summary>
		/// Number of POWER CUBES in the BOOST section of the red alliance VAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_boost_count")]
		public System.Nullable<System.Int32> Red_boost_count { get; set; }
		
		/// <summary>
		/// Returns 1 if the red alliance BOOST was played, or 0 if not played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_boost_played")]
		public System.Nullable<System.Int32> Red_boost_played { get; set; }
		
		/// <summary>
		/// Name of the current red alliance POWER UP being played, or `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_current_powerup")]
		public string Red_current_powerup { get; set; }
		
		/// <summary>
		/// 1 if the red alliance is credited with FACING THE BOSS, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_face_the_boss")]
		public System.Nullable<System.Int32> Red_face_the_boss { get; set; }
		
		/// <summary>
		/// Number of POWER CUBES in the FORCE section of the red alliance VAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_force_count")]
		public System.Nullable<System.Int32> Red_force_count { get; set; }
		
		/// <summary>
		/// Returns 1 if the red alliance FORCE was played, or 0 if not played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_force_played")]
		public System.Nullable<System.Int32> Red_force_played { get; set; }
		
		/// <summary>
		/// Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_levitate_count")]
		public System.Nullable<System.Int32> Red_levitate_count { get; set; }
		
		/// <summary>
		/// Returns 1 if the red alliance LEVITATE was played, or 0 if not played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_levitate_played")]
		public System.Nullable<System.Int32> Red_levitate_played { get; set; }
		
		/// <summary>
		/// Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_powerup_time_remaining")]
		public string Red_powerup_time_remaining { get; set; }
		
		/// <summary>
		/// 1 if the red alliance owns the SCALE, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_scale_owned")]
		public System.Nullable<System.Int32> Red_scale_owned { get; set; }
		
		/// <summary>
		/// Current score for the red alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_score")]
		public System.Nullable<System.Int32> Red_score { get; set; }
		
		/// <summary>
		/// 1 if the red alliance owns their SWITCH, 0 if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red_switch_owned")]
		public System.Nullable<System.Int32> Red_switch_owned { get; set; }
		
		/// <summary>
		/// Amount of time remaining in the match, only valid during `auto` and `teleop` modes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_remaining")]
		public System.Nullable<System.Int32> Time_remaining { get; set; }
	}
	
	/// <summary>
	/// The `Media` object contains a reference for most any media associated with a team or event on TBA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media
	{
		
		/// <summary>
		/// If required, a JSON dict of additional media information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Direct URL to the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direct_url")]
		public string Direct_url { get; set; }
		
		/// <summary>
		/// The key used to identify this media on the media site.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="foreign_key")]
		public string Foreign_key { get; set; }
		
		/// <summary>
		/// True if the media is of high quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferred")]
		public System.Nullable<System.Boolean> Preferred { get; set; }
		
		/// <summary>
		/// String type of the media element.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MediaType Type { get; set; }
		
		/// <summary>
		/// The URL that leads to the full web page for the media, if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view_url")]
		public string View_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		youtube = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cdphotothread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		imgur = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="facebook-profile")]
		facebookMinusprofile = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="youtube-channel")]
		youtubeMinuschannel = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="twitter-profile")]
		twitterMinusprofile = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="github-profile")]
		githubMinusprofile = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="instagram-profile")]
		instagramMinusprofile = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="periscope-profile")]
		periscopeMinusprofile = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		grabcad = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="instagram-image")]
		instagramMinusimage = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external-link")]
		externalMinuslink = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		avatar = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team
	{
		
		/// <summary>
		/// Will be NULL, for future development.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// City of team derived from parsing the address registered with FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country of team derived from parsing the address registered with FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Will be NULL, for future development.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmaps_place_id")]
		public string Gmaps_place_id { get; set; }
		
		/// <summary>
		/// Will be NULL, for future development.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmaps_url")]
		public string Gmaps_url { get; set; }
		
		/// <summary>
		/// Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="home_championship")]
		public string Home_championship { get; set; }
		
		/// <summary>
		/// TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Will be NULL, for future development.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// Will be NULL, for future development.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lng")]
		public System.Nullable<System.Double> Lng { get; set; }
		
		/// <summary>
		/// Will be NULL, for future development.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location_name")]
		public string Location_name { get; set; }
		
		/// <summary>
		/// Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="motto")]
		public string Motto { get; set; }
		
		/// <summary>
		/// Official long name registered with FIRST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Team nickname provided by FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Postal code from the team address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// First year the team officially competed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rookie_year")]
		public System.Nullable<System.Int32> Rookie_year { get; set; }
		
		/// <summary>
		/// Name of team school or affilited group registered with FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="school_name")]
		public string School_name { get; set; }
		
		/// <summary>
		/// State of team derived from parsing the address registered with FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_prov")]
		public string State_prov { get; set; }
		
		/// <summary>
		/// Official team number issued by FIRST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_number")]
		public int Team_number { get; set; }
		
		/// <summary>
		/// Official website associated with the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team_Event_Status
	{
		
		[System.Runtime.Serialization.DataMember(Name="alliance")]
		public Team_Event_Status_alliance Alliance { get; set; }
		
		/// <summary>
		/// An HTML formatted string suitable for display to the user containing the team's alliance pick status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alliance_status_str")]
		public string Alliance_status_str { get; set; }
		
		/// <summary>
		/// TBA match key for the last match the team played in at this event, or null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_match_key")]
		public string Last_match_key { get; set; }
		
		/// <summary>
		/// TBA match key for the next match the team is scheduled to play in at this event, or null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_match_key")]
		public string Next_match_key { get; set; }
		
		/// <summary>
		/// An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overall_status_str")]
		public string Overall_status_str { get; set; }
		
		/// <summary>
		/// Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playoff")]
		public Team_Event_Status_playoff Playoff { get; set; }
		
		/// <summary>
		/// An HTML formatter string suitable for display to the user containing the team's playoff status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playoff_status_str")]
		public string Playoff_status_str { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="qual")]
		public Team_Event_Status_rank Qual { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team_Event_Status_alliance
	{
		
		/// <summary>
		/// Backup status, may be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backup")]
		public Team_Event_Status_alliance_backup Backup { get; set; }
		
		/// <summary>
		/// Alliance name, may be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Alliance number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public int Number { get; set; }
		
		/// <summary>
		/// Order the team was picked in the alliance from 0-2, with 0 being alliance captain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pick")]
		public int Pick { get; set; }
	}
	
	/// <summary>
	/// Backup status, may be null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team_Event_Status_alliance_backup
	{
		
		/// <summary>
		/// TBA key for the backup team called in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in")]
		public string In { get; set; }
		
		/// <summary>
		/// TBA key for the team replaced by the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="out")]
		public string Out { get; set; }
	}
	
	/// <summary>
	/// Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team_Event_Status_playoff
	{
		
		/// <summary>
		/// A Win-Loss-Tie record for a team, or an alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_level_record")]
		public WLT_Record Current_level_record { get; set; }
		
		/// <summary>
		/// The highest playoff level the team reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public MatchComp_level Level { get; set; }
		
		/// <summary>
		/// The average match score during playoffs. Year specific. May be null if not relevant for a given year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playoff_average")]
		public System.Nullable<System.Int32> Playoff_average { get; set; }
		
		/// <summary>
		/// A Win-Loss-Tie record for a team, or an alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public WLT_Record Record { get; set; }
		
		/// <summary>
		/// Current competition status for the playoffs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Team_Event_Status_playoffStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Team_Event_Status_playoffStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		won = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eliminated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		playing = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team_Event_Status_rank
	{
		
		/// <summary>
		/// Number of teams ranked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_teams")]
		public System.Nullable<System.Int32> Num_teams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ranking")]
		public Team_Event_Status_rankRanking Ranking { get; set; }
		
		/// <summary>
		/// Ordered list of names corresponding to the elements of the `sort_orders` array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_order_info")]
		public Team_Event_Status_rankSort_order_info[] Team_Event_Status_rankSort_order_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class Team_Event_Status_rankRanking
	{
		
		/// <summary>
		/// Number of matches the team was disqualified for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dq")]
		public System.Nullable<System.Int32> Dq { get; set; }
		
		/// <summary>
		/// Number of matches played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matches_played")]
		public System.Nullable<System.Int32> Matches_played { get; set; }
		
		/// <summary>
		/// For some years, average qualification score. Can be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qual_average")]
		public System.Nullable<System.Double> Qual_average { get; set; }
		
		/// <summary>
		/// Relative rank of this team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// A Win-Loss-Tie record for a team, or an alliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="record")]
		public WLT_Record Record { get; set; }
		
		/// <summary>
		/// Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort_orders")]
		public double[] Sort_orders { get; set; }
		
		/// <summary>
		/// TBA team key for this rank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team_key")]
		public string Team_key { get; set; }
	}
	
	public class Team_Event_Status_rankSort_order_info
	{
		
		/// <summary>
		/// The descriptive name of the value used to sort the ranking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team_Robot
	{
		
		/// <summary>
		/// Internal TBA identifier for this robot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Name of the robot as provided by the team.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="robot_name")]
		public string Robot_name { get; set; }
		
		/// <summary>
		/// TBA team key for this robot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_key")]
		public string Team_key { get; set; }
		
		/// <summary>
		/// Year this robot competed in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Team_Simple
	{
		
		/// <summary>
		/// City of team derived from parsing the address registered with FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Country of team derived from parsing the address registered with FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Official long name registered with FIRST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Team nickname provided by FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// State of team derived from parsing the address registered with FIRST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_prov")]
		public string State_prov { get; set; }
		
		/// <summary>
		/// Official team number issued by FIRST.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_number")]
		public int Team_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Zebra
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alliances")]
		public ZebraAlliances Alliances { get; set; }
		
		/// <summary>
		/// TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="times")]
		public double[] Times { get; set; }
	}
	
	public class ZebraAlliances
	{
		
		/// <summary>
		/// Zebra data for teams on the blue alliance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public Zebra_team[] Blue { get; set; }
		
		/// <summary>
		/// Zebra MotionWorks data for teams on the red alliance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red")]
		public Zebra_team[] Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Zebra_team
	{
		
		/// <summary>
		/// The TBA team key for the Zebra MotionWorks data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="team_key")]
		public string Team_key { get; set; }
		
		/// <summary>
		/// A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xs")]
		public double[] Xs { get; set; }
		
		/// <summary>
		/// A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ys")]
		public double[] Ys { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a list of events in the given district.
		/// GetDistrictEvents district/{district_key}/events
		/// </summary>
		/// <param name="district_key">TBA District Key, eg `2016fim`</param>
		/// <returns>Successful response</returns>
		public async Task<Event[]> GetDistrictEventsAsync(string district_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district/"+ (district_key==null? "" : System.Uri.EscapeDataString(district_key))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of event keys for events in the given district.
		/// GetDistrictEventsKeys district/{district_key}/events/keys
		/// </summary>
		/// <param name="district_key">TBA District Key, eg `2016fim`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetDistrictEventsKeysAsync(string district_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district/"+ (district_key==null? "" : System.Uri.EscapeDataString(district_key))+"/events/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of events in the given district.
		/// GetDistrictEventsSimple district/{district_key}/events/simple
		/// </summary>
		/// <param name="district_key">TBA District Key, eg `2016fim`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Simple[]> GetDistrictEventsSimpleAsync(string district_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district/"+ (district_key==null? "" : System.Uri.EscapeDataString(district_key))+"/events/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of team district rankings for the given district.
		/// GetDistrictRankings district/{district_key}/rankings
		/// </summary>
		/// <param name="district_key">TBA District Key, eg `2016fim`</param>
		/// <returns>Successful response</returns>
		public async Task<District_Ranking[]> GetDistrictRankingsAsync(string district_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district/"+ (district_key==null? "" : System.Uri.EscapeDataString(district_key))+"/rankings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<District_Ranking[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Team` objects that competed in events in the given district.
		/// GetDistrictTeams district/{district_key}/teams
		/// </summary>
		/// <param name="district_key">TBA District Key, eg `2016fim`</param>
		/// <returns>Successful response</returns>
		public async Task<Team[]> GetDistrictTeamsAsync(string district_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district/"+ (district_key==null? "" : System.Uri.EscapeDataString(district_key))+"/teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Team` objects that competed in events in the given district.
		/// GetDistrictTeamsKeys district/{district_key}/teams/keys
		/// </summary>
		/// <param name="district_key">TBA District Key, eg `2016fim`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetDistrictTeamsKeysAsync(string district_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district/"+ (district_key==null? "" : System.Uri.EscapeDataString(district_key))+"/teams/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of `Team` objects that competed in events in the given district.
		/// GetDistrictTeamsSimple district/{district_key}/teams/simple
		/// </summary>
		/// <param name="district_key">TBA District Key, eg `2016fim`</param>
		/// <returns>Successful response</returns>
		public async Task<Team_Simple[]> GetDistrictTeamsSimpleAsync(string district_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "district/"+ (district_key==null? "" : System.Uri.EscapeDataString(district_key))+"/teams/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of districts and their corresponding district key, for the given year.
		/// GetDistrictsByYear districts/{year}
		/// </summary>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<District_List[]> GetDistrictsByYearAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "districts/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<District_List[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an Event.
		/// GetEvent event/{event_key}
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Event> GetEventAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Elimination Alliances for the given Event.
		/// GetEventAlliances event/{event_key}/alliances
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Elimination_Alliance[]> GetEventAlliancesAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/alliances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Elimination_Alliance[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of awards from the given event.
		/// GetEventAwards event/{event_key}/awards
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Award[]> GetEventAwardsAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/awards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Award[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of team rankings for the Event.
		/// GetEventDistrictPoints event/{event_key}/district_points
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_District_Points> GetEventDistrictPointsAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/district_points";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_District_Points>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a set of Event-specific insights for the given Event.
		/// GetEventInsights event/{event_key}/insights
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Insights> GetEventInsightsAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/insights";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Insights>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of matches for the given event.
		/// GetEventMatches event/{event_key}/matches
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Match[]> GetEventMatchesAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/matches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of match keys for the given event.
		/// GetEventMatchesKeys event/{event_key}/matches/keys
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetEventMatchesKeysAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/matches/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of matches for the given event.
		/// GetEventMatchesSimple event/{event_key}/matches/simple
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Match_Simple[]> GetEventMatchesSimpleAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/matches/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
		/// *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
		/// *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
		/// GetEventMatchTimeseries event/{event_key}/matches/timeseries
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetEventMatchTimeseriesAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/matches/timeseries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
		/// GetEventOPRs event/{event_key}/oprs
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_OPRs> GetEventOPRsAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/oprs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_OPRs>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
		/// GetEventPredictions event/{event_key}/predictions
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Predictions> GetEventPredictionsAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/predictions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Predictions>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of team rankings for the Event.
		/// GetEventRankings event/{event_key}/rankings
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Ranking> GetEventRankingsAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/rankings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Ranking>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form Event.
		/// GetEventSimple event/{event_key}/simple
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Simple> GetEventSimpleAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Simple>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Team` objects that competed in the given event.
		/// GetEventTeams event/{event_key}/teams
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Team[]> GetEventTeamsAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Team` keys that competed in the given event.
		/// GetEventTeamsKeys event/{event_key}/teams/keys
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetEventTeamsKeysAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/teams/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of `Team` objects that competed in the given event.
		/// GetEventTeamsSimple event/{event_key}/teams/simple
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Team_Simple[]> GetEventTeamsSimpleAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/teams/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a key-value list of the event statuses for teams competing at the given event.
		/// GetEventTeamsStatuses event/{event_key}/teams/statuses
		/// </summary>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<System.Collections.Generic.Dictionary<string, Team_Event_Status>> GetEventTeamsStatusesAsync(string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/teams/statuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, Team_Event_Status>>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of events in the given year.
		/// GetEventsByYear events/{year}
		/// </summary>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Event[]> GetEventsByYearAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of event keys in the given year.
		/// GetEventsByYearKeys events/{year}/keys
		/// </summary>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetEventsByYearKeysAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+year+"/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of events in the given year.
		/// GetEventsByYearSimple events/{year}/simple
		/// </summary>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Simple[]> GetEventsByYearSimpleAsync(int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+year+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a `Match` object for the given match key.
		/// GetMatch match/{match_key}
		/// </summary>
		/// <param name="match_key">TBA Match Key, eg `2016nytr_qm1`</param>
		/// <returns>Successful response</returns>
		public async Task<Match> GetMatchAsync(string match_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "match/"+ (match_key==null? "" : System.Uri.EscapeDataString(match_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form `Match` object for the given match key.
		/// GetMatchSimple match/{match_key}/simple
		/// </summary>
		/// <param name="match_key">TBA Match Key, eg `2016nytr_qm1`</param>
		/// <returns>Successful response</returns>
		public async Task<Match_Simple> GetMatchSimpleAsync(string match_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "match/"+ (match_key==null? "" : System.Uri.EscapeDataString(match_key))+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match_Simple>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.
		/// *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
		/// *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
		/// GetMatchTimeseries match/{match_key}/timeseries
		/// </summary>
		/// <param name="match_key">TBA Match Key, eg `2016nytr_qm1`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetMatchTimeseriesAsync(string match_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "match/"+ (match_key==null? "" : System.Uri.EscapeDataString(match_key))+"/timeseries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Zebra MotionWorks data for a Match for the given match key.
		/// GetMatchZebra match/{match_key}/zebra_motionworks
		/// </summary>
		/// <param name="match_key">TBA Match Key, eg `2016nytr_qm1`</param>
		/// <returns>Successful response</returns>
		public async Task<Zebra> GetMatchZebraAsync(string match_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "match/"+ (match_key==null? "" : System.Uri.EscapeDataString(match_key))+"/zebra_motionworks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Zebra>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns API status, and TBA status information.
		/// GetStatus status
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<API_Status> GetStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<API_Status>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a `Team` object for the team referenced by the given key.
		/// GetTeam team/{team_key}
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<Team> GetTeamAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of awards the given team has won.
		/// GetTeamAwards team/{team_key}/awards
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<Award[]> GetTeamAwardsAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/awards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Award[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of awards the given team has won in a given year.
		/// GetTeamAwardsByYear team/{team_key}/awards/{year}
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Award[]> GetTeamAwardsByYearAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/awards/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Award[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
		/// GetTeamDistricts team/{team_key}/districts
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<District_List[]> GetTeamDistrictsAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/districts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<District_List[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of awards the given team won at the given event.
		/// GetTeamEventAwards team/{team_key}/event/{event_key}/awards
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Award[]> GetTeamEventAwardsAsync(string team_key, string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/awards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Award[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of matches for the given team and event.
		/// GetTeamEventMatches team/{team_key}/event/{event_key}/matches
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Match[]> GetTeamEventMatchesAsync(string team_key, string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/matches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of match keys for matches for the given team and event.
		/// GetTeamEventMatchesKeys team/{team_key}/event/{event_key}/matches/keys
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetTeamEventMatchesKeysAsync(string team_key, string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/matches/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of matches for the given team and event.
		/// GetTeamEventMatchesSimple team/{team_key}/event/{event_key}/matches/simple
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Match[]> GetTeamEventMatchesSimpleAsync(string team_key, string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/matches/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the competition rank and status of the team at the given event.
		/// GetTeamEventStatus team/{team_key}/event/{event_key}/status
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="event_key">TBA Event Key, eg `2016nytr`</param>
		/// <returns>Successful response</returns>
		public async Task<Team_Event_Status> GetTeamEventStatusAsync(string team_key, string event_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/event/"+ (event_key==null? "" : System.Uri.EscapeDataString(event_key))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team_Event_Status>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all events this team has competed at.
		/// GetTeamEvents team/{team_key}/events
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<Event[]> GetTeamEventsAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the event keys for all events this team has competed at.
		/// GetTeamEventsKeys team/{team_key}/events/keys
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetTeamEventsKeysAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/events/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of all events this team has competed at.
		/// GetTeamEventsSimple team/{team_key}/events/simple
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Simple[]> GetTeamEventsSimpleAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/events/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of events this team has competed at in the given year.
		/// GetTeamEventsByYear team/{team_key}/events/{year}
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Event[]> GetTeamEventsByYearAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/events/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the event keys for events this team has competed at in the given year.
		/// GetTeamEventsByYearKeys team/{team_key}/events/{year}/keys
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetTeamEventsByYearKeysAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/events/"+year+"/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of events this team has competed at in the given year.
		/// GetTeamEventsByYearSimple team/{team_key}/events/{year}/simple
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Event_Simple[]> GetTeamEventsByYearSimpleAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/events/"+year+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Event_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a key-value list of the event statuses for events this team has competed at in the given year.
		/// GetTeamEventsStatusesByYear team/{team_key}/events/{year}/statuses
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<System.Collections.Generic.Dictionary<string, Team_Event_Status>> GetTeamEventsStatusesByYearAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/events/"+year+"/statuses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, Team_Event_Status>>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of matches for the given team and year.
		/// GetTeamMatchesByYear team/{team_key}/matches/{year}
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Match[]> GetTeamMatchesByYearAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/matches/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of match keys for matches for the given team and year.
		/// GetTeamMatchesByYearKeys team/{team_key}/matches/{year}/keys
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetTeamMatchesByYearKeysAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/matches/"+year+"/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a short-form list of matches for the given team and year.
		/// GetTeamMatchesByYearSimple team/{team_key}/matches/{year}/simple
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Match_Simple[]> GetTeamMatchesByYearSimpleAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/matches/"+year+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Match_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Media (videos / pictures) for the given team and tag.
		/// GetTeamMediaByTag team/{team_key}/media/tag/{media_tag}
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="media_tag">Media Tag which describes the Media.</param>
		/// <returns>Successful response</returns>
		public async Task<Media[]> GetTeamMediaByTagAsync(string team_key, string media_tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/media/tag/"+ (media_tag==null? "" : System.Uri.EscapeDataString(media_tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Media (videos / pictures) for the given team, tag and year.
		/// GetTeamMediaByTagYear team/{team_key}/media/tag/{media_tag}/{year}
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="media_tag">Media Tag which describes the Media.</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Media[]> GetTeamMediaByTagYearAsync(string team_key, string media_tag, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/media/tag/"+ (media_tag==null? "" : System.Uri.EscapeDataString(media_tag))+"/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Media (videos / pictures) for the given team and year.
		/// GetTeamMediaByYear team/{team_key}/media/{year}
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <returns>Successful response</returns>
		public async Task<Media[]> GetTeamMediaByYearAsync(string team_key, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/media/"+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.
		/// GetTeamRobots team/{team_key}/robots
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<Team_Robot[]> GetTeamRobotsAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/robots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team_Robot[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a `Team_Simple` object for the team referenced by the given key.
		/// GetTeamSimple team/{team_key}/simple
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<Team_Simple> GetTeamSimpleAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team_Simple>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Media (social media) for the given team.
		/// GetTeamSocialMedia team/{team_key}/social_media
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<Media[]> GetTeamSocialMediaAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/social_media";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of years in which the team participated in at least one competition.
		/// GetTeamYearsParticipated team/{team_key}/years_participated
		/// </summary>
		/// <param name="team_key">TBA Team Key, eg `frc254`</param>
		/// <returns>Successful response</returns>
		public async Task<int[]> GetTeamYearsParticipatedAsync(string team_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (team_key==null? "" : System.Uri.EscapeDataString(team_key))+"/years_participated";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<int[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Team` objects, paginated in groups of 500.
		/// GetTeams teams/{page_num}
		/// </summary>
		/// <param name="page_num">Page number of results to return, zero-indexed</param>
		/// <returns>Successful response</returns>
		public async Task<Team[]> GetTeamsAsync(int page_num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+page_num;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
		/// GetTeamsKeys teams/{page_num}/keys
		/// </summary>
		/// <param name="page_num">Page number of results to return, zero-indexed</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetTeamsKeysAsync(int page_num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+page_num+"/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
		/// GetTeamsSimple teams/{page_num}/simple
		/// </summary>
		/// <param name="page_num">Page number of results to return, zero-indexed</param>
		/// <returns>Successful response</returns>
		public async Task<Team_Simple[]> GetTeamsSimpleAsync(int page_num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+page_num+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
		/// GetTeamsByYear teams/{year}/{page_num}
		/// </summary>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <param name="page_num">Page number of results to return, zero-indexed</param>
		/// <returns>Successful response</returns>
		public async Task<Team[]> GetTeamsByYearAsync(int year, int page_num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+year+"/"+page_num;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list Team Keys that competed in the given year, paginated in groups of 500.
		/// GetTeamsByYearKeys teams/{year}/{page_num}/keys
		/// </summary>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <param name="page_num">Page number of results to return, zero-indexed</param>
		/// <returns>Successful response</returns>
		public async Task<string[]> GetTeamsByYearKeysAsync(int year, int page_num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+year+"/"+page_num+"/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
		/// GetTeamsByYearSimple teams/{year}/{page_num}/simple
		/// </summary>
		/// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
		/// <param name="page_num">Page number of results to return, zero-indexed</param>
		/// <returns>Successful response</returns>
		public async Task<Team_Simple[]> GetTeamsByYearSimpleAsync(int year, int page_num, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+year+"/"+page_num+"/simple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Team_Simple[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
