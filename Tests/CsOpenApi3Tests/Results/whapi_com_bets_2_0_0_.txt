//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bet
	{
		
		/// <summary>
		/// The delayed bet identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayedBetId")]
		public string DelayedBetId { get; set; }
		
		/// <summary>
		/// The ID number of the free bet token if used in conjunction with this bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBetId")]
		public string FreeBetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="legs")]
		public Leg[] Legs { get; set; }
		
		/// <summary>
		/// The bet number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public int Number { get; set; }
		
		/// <summary>
		/// The amount of the stake placed on the bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stake")]
		public double Stake { get; set; }
		
		/// <summary>
		/// The bet type code of the bet. For example: TBL (Treble)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeCode")]
		public string TypeCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Leg
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public Part[] Parts { get; set; }
		
		/// <summary>
		/// The leg sort. This element is present for complex bets but not for single bets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public string Sort { get; set; }
		
		/// <summary>
		/// The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Part
	{
		
		/// <summary>
		/// Indicates if the bet can be used in a multiple bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="includeInMultiple")]
		public bool IncludeInMultiple { get; set; }
		
		/// <summary>
		/// Price denominator - will be ignored for types other than L (Fixed Price)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceDen")]
		public int PriceDen { get; set; }
		
		/// <summary>
		/// Price numerator - will be ignored for types other than L (Fixed Price)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceNum")]
		public int PriceNum { get; set; }
		
		/// <summary>
		/// The type of price selected. For example - ‘L’ (Fixed)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceType")]
		public int PriceType { get; set; }
		
		/// <summary>
		/// The selection identifier
		/// Required
		/// Pattern: ^(OB_OU\d+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectionId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(OB_OU\d+)$")]
		public int SelectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BetDelayed
	{
		
		/// <summary>
		/// The delay time period of the bet in seconds. The resubmission of the bet has to wait for the length of time (in seconds) returned in the delayPeriod before submitting the second request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delayPeriodSeconds")]
		public int DelayPeriodSeconds { get; set; }
		
		/// <summary>
		/// The unique identifier of the delayed bet. After the initial response is received, containing the delayPeriod and the delayBetId, the request is then resubmitted using the same delayBetId token that came in that initial response. Check the example below to see how to resend a delayed bet payload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delayedBetId")]
		public string DelayedBetId { get; set; }
		
		/// <summary>
		/// The number of the bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Number of the bet if this is part of a multiple bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Double> Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BetHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="bets")]
		public PlacedBet[] Bets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacedBet
	{
		
		/// <summary>
		/// The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashinValue")]
		public System.Nullable<System.Double> CashinValue { get; set; }
		
		/// <summary>
		/// The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="estimatedReturns")]
		public double EstimatedReturns { get; set; }
		
		/// <summary>
		/// If a free bet token is used for the bet, this element represents the value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBetValue")]
		public System.Nullable<System.Double> FreeBetValue { get; set; }
		
		/// <summary>
		/// The unique identifier of the bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legs")]
		public PlacedBetLeg[] Legs { get; set; }
		
		/// <summary>
		/// Number of lines of bets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numLines")]
		public System.Nullable<System.Int32> NumLines { get; set; }
		
		/// <summary>
		/// Number of selections that the bet is made of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numSelections")]
		public System.Nullable<System.Int32> NumSelections { get; set; }
		
		/// <summary>
		/// The unique identifier of the receipt for the bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt")]
		public string Receipt { get; set; }
		
		/// <summary>
		/// Whether the bet is settled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settled")]
		public bool Settled { get; set; }
		
		/// <summary>
		/// The bet stake, which represents the total value of the bet. For example: £ 12.34
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stake")]
		public double Stake { get; set; }
		
		/// <summary>
		/// The individual stake on each line of the bet. For example: £ 6.17
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stakePerLine")]
		public System.Nullable<System.Double> StakePerLine { get; set; }
		
		/// <summary>
		/// The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The time the bet was placed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transDateTime")]
		public string TransDateTime { get; set; }
		
		/// <summary>
		/// The bet type code of the bet. For example: TBL (Treble)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeCode")]
		public string TypeCode { get; set; }
		
		/// <summary>
		/// The name of the bet type. For example: Double
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
		
		/// <summary>
		/// Actual value of the returns from this bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="winnings")]
		public double Winnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacedBetLeg
	{
		
		/// <summary>
		/// The leg number of the bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public int Number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public PlacedBetPart[] Parts { get; set; }
		
		/// <summary>
		/// The leg sort. This element is present for complex bets but not for single bets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public string Sort { get; set; }
		
		/// <summary>
		/// The leg type. One of the following values: W - Win or E- Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlacedBetPart
	{
		
		/// <summary>
		/// Human-friendly description of the bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWayDen")]
		public System.Nullable<System.Int32> EachWayDen { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWayNum")]
		public System.Nullable<System.Int32> EachWayNum { get; set; }
		
		/// <summary>
		/// The Each-way places available for the bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWayPlaces")]
		public System.Nullable<System.Int32> EachWayPlaces { get; set; }
		
		/// <summary>
		/// The description of the event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDescription")]
		public string EventDescription { get; set; }
		
		/// <summary>
		/// Unique identifier of the event
		/// Required
		/// Pattern: ^(OB_EV\d+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(OB_EV\d+)$")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The description of the market within an event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventMarketDescription")]
		public string EventMarketDescription { get; set; }
		
		/// <summary>
		/// The description of type of the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTypeDescription")]
		public string EventTypeDescription { get; set; }
		
		/// <summary>
		/// Denotes if the bet is part of a handicap market. For example: -1 if the selection starts on -1 goals (in football)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handicap")]
		public System.Nullable<System.Double> Handicap { get; set; }
		
		/// <summary>
		/// The number of the bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public int Number { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceDen")]
		public int PriceDen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceFormatted")]
		public PriceFormatted PriceFormatted { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceNum")]
		public int PriceNum { get; set; }
		
		/// <summary>
		/// The price type chosen when the bet was placed. For example: L (Win)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceType")]
		public string PriceType { get; set; }
		
		/// <summary>
		/// The outcome of the bet/event. Can be one of the following values: W - Won; L - Lost; V - Void; - Result not yet available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// The official scale of deductions that apply when a runner is withdrawn
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule4Deductions")]
		public System.Nullable<System.Double> Rule4Deductions { get; set; }
		
		/// <summary>
		/// Unique identifier of the selection
		/// Pattern: ^(OB_OU\d+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectionId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(OB_OU\d+)$")]
		public string SelectionId { get; set; }
		
		/// <summary>
		/// Time the event will start. For example: 2013-01-30 11:01:01
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PriceFormatted
	{
		
		/// <summary>
		/// The price in American format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="american")]
		public string American { get; set; }
		
		/// <summary>
		/// The decimal format of the price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decimal")]
		public System.Nullable<System.Double> Decimal { get; set; }
		
		/// <summary>
		/// The fractional format of the price or EVS when the price evens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractional")]
		public string Fractional { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BetPlaced
	{
		
		/// <summary>
		/// The bet id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The number of lines the bet consists of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numLines")]
		public System.Nullable<System.Int32> NumLines { get; set; }
		
		/// <summary>
		/// Number of the bet if this is part of a multiple bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Double> Number { get; set; }
		
		/// <summary>
		/// The time the bet was placed. For example: 2013-01-30TT13:34:20. The value of this element can be replaced with the current timestamp if it was missing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placedDateTime")]
		public string PlacedDateTime { get; set; }
		
		/// <summary>
		/// The unique ID of the bet receipt
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="receipt")]
		public string Receipt { get; set; }
		
		/// <summary>
		/// The total amount staked on the bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalStake")]
		public System.Nullable<System.Double> TotalStake { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BetSlipRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="legs")]
		public Leg[] Legs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BetSlipResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="betslip")]
		public Betslipbet[] Betslip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Betslipbet
	{
		
		/// <summary>
		/// The total aggregated odds, as a decimal, of the multiple bet placed
		/// Pattern: [0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="betMultiplier")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]*")]
		public System.Nullable<System.Double> BetMultiplier { get; set; }
		
		/// <summary>
		/// Free bets that can be used with this bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBets")]
		public FreeBetDetail[] FreeBets { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="legs")]
		public Betslipleg[] Legs { get; set; }
		
		/// <summary>
		/// Maximum stake allowable on the bet. For example: 2500.00 (GBP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxStake")]
		public System.Nullable<System.Double> MaxStake { get; set; }
		
		/// <summary>
		/// Minumum stake allowable on the bet. For example: 0.05 (GBP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minStake")]
		public System.Nullable<System.Double> MinStake { get; set; }
		
		/// <summary>
		/// The number of lines (selections) of a bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numLines")]
		public System.Nullable<System.Double> NumLines { get; set; }
		
		/// <summary>
		/// The bet number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public int Number { get; set; }
		
		/// <summary>
		/// The bet type code of the bet. For example: TBL (Treble)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeCode")]
		public string TypeCode { get; set; }
		
		/// <summary>
		/// The TypeCode of the bet. For example: TBL (Treble)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FreeBetDetail
	{
		
		/// <summary>
		/// The time the free bet was awarded. For example 2014-11-013T23:59:10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="awardDateTime")]
		public string AwardDateTime { get; set; }
		
		/// <summary>
		/// The message explaining the offer displayed to the customer along with the free bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayText")]
		public string DisplayText { get; set; }
		
		/// <summary>
		/// The time the free bet expired. For example 2014-11-013T23:59:10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryDateTime")]
		public string ExpiryDateTime { get; set; }
		
		/// <summary>
		/// The identifier of the free bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// The description of the offer that enabled the customer to place a free bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerDesc")]
		public string OfferDesc { get; set; }
		
		/// <summary>
		/// The identifier of the offer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offerId")]
		public System.Nullable<System.Int32> OfferId { get; set; }
		
		/// <summary>
		/// The name of the offer that enabled the customer to place a free bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offerName")]
		public string OfferName { get; set; }
		
		/// <summary>
		/// The time the free bet offer started. For example 2014-11-013T23:59:10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		/// <summary>
		/// The value of the free bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Betslipleg
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public Betslippart[] Parts { get; set; }
		
		/// <summary>
		/// The leg sort. This element is present for complex bets but not for single bets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public string Sort { get; set; }
		
		/// <summary>
		/// Type of leg that was placed on the bet, such as Win or Each-way. Even though the priceNum and priceDen are required for the bets with type value W (win), it is just optional from the endpoint point of view. There are requests / bets like outcomes with starting price but do not have a specific price. Generally prices can change, so if the type is win you have to resubmit and thus verify the price that the customer saw on the screen initially. The API will check if it matches the current price of William Hill. Note that if you send a wrong / outdated price you will receive the error message - Price changed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Betslippart
	{
		
		/// <summary>
		/// Indicates whether each way is available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eachWayAvailable")]
		public System.Nullable<System.Boolean> EachWayAvailable { get; set; }
		
		/// <summary>
		/// Indicates if the bet can be used in a multiple bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="includeInMultiple")]
		public bool IncludeInMultiple { get; set; }
		
		/// <summary>
		/// To organise a number of outcome selections into one or more bet groups, such as a Single bet, a Double bet, a Trixie, etc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legGroup")]
		public System.Nullable<System.Int32> LegGroup { get; set; }
		
		/// <summary>
		/// Indicates if there has been a change in the price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceChanged")]
		public System.Nullable<System.Boolean> PriceChanged { get; set; }
		
		/// <summary>
		/// Price denominator - will be ignored for types other than L (Fixed Price)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceDen")]
		public int PriceDen { get; set; }
		
		/// <summary>
		/// Price numerator - will be ignored for types other than L (Fixed Price)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceNum")]
		public int PriceNum { get; set; }
		
		/// <summary>
		/// The type of price selected. For example - ‘L’ (Fixed)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceType")]
		public int PriceType { get; set; }
		
		/// <summary>
		/// The selection identifier
		/// Required
		/// Pattern: ^(OB_OU\d+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectionId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(OB_OU\d+)$")]
		public int SelectionId { get; set; }
		
		/// <summary>
		/// Indicates whether the bet can be used in a single bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleAvailable")]
		public System.Nullable<System.Boolean> SingleAvailable { get; set; }
		
		/// <summary>
		/// Indicates whether starting prices are available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startingPriceAvailable")]
		public System.Nullable<System.Boolean> StartingPriceAvailable { get; set; }
		
		/// <summary>
		/// Indicates the current status of the bet
		/// Pattern: (A|S)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(A|S)")]
		public string Status { get; set; }
		
		/// <summary>
		/// Indicates whether the status of the bet has changed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusChanged")]
		public System.Nullable<System.Boolean> StatusChanged { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CashInResponse
	{
		
		/// <summary>
		/// Indicates whether the bet has been cashed-in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="success")]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComplexBetRequestBody
	{
		
		/// <summary>
		/// A collection of bets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bets")]
		public Bet[] Bets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// A unique William Hill identifier for the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// To help pinpoint the exact parameter where a request has failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// A unique William Hill text string to enable you to identify the error (in English only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="solution")]
		public Solution Solution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Solution
	{
		
		/// <summary>
		/// The bet number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="betNum")]
		public string BetNum { get; set; }
		
		/// <summary>
		/// The identifier of the event
		/// Pattern: ^(OB_EV\d+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(OB_EV\d+)$")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The updated handicap
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handicap")]
		public string Handicap { get; set; }
		
		/// <summary>
		/// The handicap precision
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handicapPrecision")]
		public string HandicapPrecision { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDen")]
		public string PriceDen { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceNum")]
		public string PriceNum { get; set; }
		
		/// <summary>
		/// The selection handicap
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectionHandicap")]
		public string SelectionHandicap { get; set; }
		
		/// <summary>
		/// The identifier of the selection
		/// Pattern: ^(OB_OU\d+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectionId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(OB_OU\d+)$")]
		public string SelectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Errors
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Error[] Errors1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SingleBetRequestBody
	{
		
		/// <summary>
		/// The delayed bet identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delayedBetId")]
		public string DelayedBetId { get; set; }
		
		/// <summary>
		/// The ID number of the free bet token if used in conjunction with this bet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeBetId")]
		public string FreeBetId { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the denominator of the fraction. For example: 2 in 5/2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceDen")]
		public System.Nullable<System.Int32> PriceDen { get; set; }
		
		/// <summary>
		/// When the odds are shown in vulgar fractions this is the numerator of the fraction. For example: 5 in 5/2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceNum")]
		public System.Nullable<System.Int32> PriceNum { get; set; }
		
		/// <summary>
		/// The type of price taken by the customer when the bet is made. Can be one of the following: L - Live Fixed price, S - Starting price - Horse and Greyhound racing or G - Guaranteed best price.
		/// Required
		/// Pattern: ^(L|S|G)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceType")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(L|S|G)$")]
		public string PriceType { get; set; }
		
		/// <summary>
		/// The unique ID for the selection of the bet
		/// Required
		/// Pattern: ^(OB_OU\d+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectionId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(OB_OU\d+)$")]
		public string SelectionId { get; set; }
		
		/// <summary>
		/// The amount of the stake placed on the bet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stake")]
		public double Stake { get; set; }
		
		/// <summary>
		/// The type of bet placed. Can be one of the following: W - Win or E- EachWay
		/// Required
		/// Pattern: ^(W|E)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(W|E)$")]
		public string Type { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Places a multiple or a complex bet.
		/// Places a multiple or a complex bet.
		/// PlaceComplexBet bet/complex
		/// </summary>
		/// <param name="fields">Specify an absolute field list to return (Comma Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma Separated List)</param>
		/// <param name="requestBody">Complex bet request body</param>
		/// <returns>Success</returns>
		public async Task<BetPlaced[]> PlaceComplexBetAsync(string[] fields, string[] include, string[] exclude, ComplexBetRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bet/complex?"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BetPlaced[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Places a single bet
		/// Places a single bet. When placing a single bet using live inplay bets, the system might generate a bet delay to allow a time margin to negate the effects of major changes (for example, goals) to the market. Note that the amount of bet delay will vary by category and event type. A delayedBetId will be recieved that can be used to resubmit the bet.
		/// PlaceSingleBet bet/single
		/// </summary>
		/// <param name="fields">Specify an absolute field list to return (Comma Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma Separated List)</param>
		/// <param name="requestBody">Single bet request body</param>
		/// <returns>Success</returns>
		public async Task<BetPlaced[]> PlaceSingleBetAsync(string[] fields, string[] include, string[] exclude, SingleBetRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bet/single?"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BetPlaced[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Organises the betslip when one or more selections are made. It returns a bet slip structure organised by betting opportunities.
		/// ValidateBetslip betslips
		/// </summary>
		/// <param name="expanded">Allows for all bets for given selections to be returned - not just the specified type</param>
		/// <param name="requestBody">Betslip Body</param>
		public async Task<BetSlipResponse> ValidateBetslipAsync(string expanded, BetSlipRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "betslips?expanded=" + (expanded==null? "" : System.Uri.EscapeDataString(expanded));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BetSlipResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns available free bets
		/// Retrieves the current free bets available for a customer.
		/// GetFreeBets freebets
		/// </summary>
		/// <param name="fields">Specify an absolute field list to return (Comma Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma Separated List)</param>
		/// <returns>Success</returns>
		public async Task<FreeBetDetail[]> GetFreeBetsAsync(string[] fields, string[] include, string[] exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "freebets?"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FreeBetDetail[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the customer’s bet history.
		/// Retrieves the customer’s bet history. Options are available to organise the history in terms of date, bet type and settled and unsettled bets. The maximum number of bets and bet history pages retrieved can also be set.
		/// GetBetHistory history
		/// </summary>
		/// <param name="dateFrom">The UTC FROM datetime from bets to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="dateTo">The UTC TO datetime for bets to be returned. (yyyy-MM-ddTHH:mm:ss)</param>
		/// <param name="fields">Specify an absolute field list to return (Comma Separated List)</param>
		/// <param name="include">Specify fields in addition to the default to return (Comma Separated List)</param>
		/// <param name="exclude">Specify fields from the default to exclude (Comma Separated List)</param>
		/// <param name="page">The index of the page to return</param>
		/// <param name="pageSize">The number of results per page</param>
		/// <param name="sort">The order the response will be retuned by. i.e. transDateTime,desc. Only transDateTime can be used currently</param>
		/// <param name="settled">Filter by settled bets. If omitted, both settled and unsettled will be returned.</param>
		/// <returns>Success</returns>
		public async Task<BetHistoryResponse> GetBetHistoryAsync(string dateFrom, string dateTo, string[] fields, string[] include, string[] exclude, double page, double pageSize, string sort, bool settled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "history?dateFrom=" + (dateFrom==null? "" : System.Uri.EscapeDataString(dateFrom))+"&dateTo=" + (dateTo==null? "" : System.Uri.EscapeDataString(dateTo))+"&"+string.Join("&", fields.Select(z => $"fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", include.Select(z => $"include={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&settled="+settled;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BetHistoryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer
		/// Allows a trusted application to cash in a bet (take a return on a bet) on behalf of the customer. If the customers monitor bets they can cash in a bet at any point before the event ends.
		/// Cashin {betId}/cashin
		/// </summary>
		/// <param name="betId">The identifier of the bet</param>
		/// <param name="cashInValue">The cash in value of the bet</param>
		/// <param name="cashinBetDelayId">The ID of this bet delay</param>
		/// <returns>Success</returns>
		public async Task<CashInResponse> CashinAsync(string betId, double cashInValue, string cashinBetDelayId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (betId==null? "" : System.Uri.EscapeDataString(betId))+"/cashin&cashInValue="+cashInValue+"&cashinBetDelayId=" + (cashinBetDelayId==null? "" : System.Uri.EscapeDataString(cashinBetDelayId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CashInResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
