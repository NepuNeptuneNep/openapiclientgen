//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArEVentilaO
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Date { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Point { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Until { get; set; }
	}
	
	/// <summary>
	/// This can be any pure JSON document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DEPRECATED_DocumentRequest
	{
		
		/// <summary>
		/// This can be any JSON document field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DepartmentVisitedTag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisplayValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scores Scores { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Scores
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Ar e Ventilação")]
		public ArEVentilaO[] Ar_e_Ventilação { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="carttag")]
		public string Carttag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkouttag")]
		public string Checkouttag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataEntityId")]
		public string DataEntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="departmentVisitedTag")]
		public DepartmentVisitedTag DepartmentVisitedTag { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public string[] Followers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rclastsession")]
		public string Rclastsession { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rclastsessiondate")]
		public string Rclastsessiondate { get; set; }
	}
	
	/// <summary>
	/// This can be any pure JSON document. Add new _Key-Value_ pairs to test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Getversion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Listversion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Name
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Properties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutindicesRequest
	{
		
		/// <summary>
		/// Comma-separted fields of the index
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// Determines whether the values need to be unique. If false, values must be unique.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="multiple")]
		public bool Multiple { get; set; }
		
		/// <summary>
		/// Name to identify the index
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SaveschemabynameRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Properties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Using_fields_all
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataEntityId")]
		public string DataEntityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidatedocumentbyclustersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUpdateAddressRequests
	{
		
		/// <summary>
		/// Address name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressName")]
		public string AddressName { get; set; }
		
		/// <summary>
		/// Type of address. For example, `Residential` or `Pickup`, among others.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressType")]
		public string AddressType { get; set; }
		
		/// <summary>
		/// City of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Complement to the shipping address in case it applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Three letter ISO code of the country of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Neighborhood of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="neighborhood")]
		public string Neighborhood { get; set; }
		
		/// <summary>
		/// Number of the building, house or apartment in the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Postal Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Name of the person who is going to receive the order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
		
		/// <summary>
		/// Complement that might help locate the shipping address more precisely in case of delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		/// <summary>
		/// State of the shipping address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Street of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
		
		/// <summary>
		/// ID of the customer to whom the address belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUpdateProfileRequests
	{
		
		/// <summary>
		/// Client document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// Client document type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		/// <summary>
		/// Client email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Client first name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Indicates whether client is corporate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCorporate")]
		public System.Nullable<System.Boolean> IsCorporate { get; set; }
		
		/// <summary>
		/// Indicates whether client otped to receive the store newsletter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNewsletterOptIn")]
		public System.Nullable<System.Boolean> IsNewsletterOptIn { get; set; }
		
		/// <summary>
		/// Client last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Default locale, used to set store language and currency, for example.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localeDefault")]
		public string LocaleDefault { get; set; }
		
		/// <summary>
		/// Client telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentResponse
	{
		
		/// <summary>
		/// Document reference URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// ID of the document that was created or updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create new customer address
		/// Creates new customer address.
		/// 
		/// > You can use this request to create customer addresses according to any `AD` schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
		/// CreateNewCustomerAddress api/dataentities/Address/documents
		/// </summary>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> CreateNewCustomerAddressAsync(string _schema, CreateUpdateAddressRequests requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/Address/documents?_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete customer address
		/// Deletes a customer address.
		/// DeleteCustomerAddress api/dataentities/Address/documents/{id}
		/// </summary>
		/// <param name="id">ID of the Document.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> DeleteCustomerAddressAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/Address/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update customer address
		/// Partially updates a customer address.
		/// 
		/// > You can use this request to update customer addresses according to any `AD` schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
		/// UpdateCustomerAddress api/dataentities/Address/documents/{id}
		/// </summary>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <param name="id">ID of the Document.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> UpdateCustomerAddressAsync(string _schema, string id, CreateUpdateAddressRequests requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/Address/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create new customer profile
		/// Creates new customer profile.
		/// 
		/// > You can use this request to create customer profiles according to any `CL` schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
		/// CreateNewCustomerProfilev2 api/dataentities/Client/documents
		/// </summary>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> CreateNewCustomerProfilev2Async(string _schema, CreateUpdateProfileRequests requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/Client/documents?_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete customer profile
		/// Deletes a customer profile.
		/// DeleteCustomerProfile api/dataentities/Client/documents/{id}
		/// </summary>
		/// <param name="id">ID of the Document.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> DeleteCustomerProfileAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/Client/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update customer profile
		/// Partially updates a customer profile.
		/// 
		/// > You can use this request to update customer profiles according to any `CL` schema. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for the schemas you are using. Learn more about how to use [Master Data v2 schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle).
		/// UpdateCustomerProfile api/dataentities/Client/documents/{id}
		/// </summary>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <param name="id">ID of the Document.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> UpdateCustomerProfileAsync(string _schema, string id, CreateUpdateProfileRequests requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/Client/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create partial document
		/// This request allows you to partially update a document corresponding to a given data entity.
		/// 
		/// > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
		/// 
		/// ## Example use cases
		/// 
		/// ### Client profile
		/// 
		/// In order to create a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:
		/// 
		/// PATCH
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "phone": "+12025550195",
		/// "isNewsletterOptIn": false
		/// }
		/// ```
		/// 
		/// ### Client address
		/// 
		/// In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:
		/// 
		/// PATCH
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "receiverName": "Lois Lane"
		/// }
		/// ```
		/// Createorupdatepartialdocument api/dataentities/{dataEntityName}/documents
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <param name="requestBody">JSON with the fields to be updated.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> CreateorupdatepartialdocumentAsync(string dataEntityName, string _schema, DocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents&_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create new document
		/// This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.
		/// 
		/// > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.
		/// 
		/// ## Example use cases
		/// 
		/// ### Client profile
		/// 
		/// In order to create a new customer profile, choose the `CL` data entity and send a request similar to this:
		/// 
		/// POST
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "email": "clark.kent@examplemail.com",
		/// "firstName": "Clark",
		/// "lastName": "Kent",
		/// "phone": "+12025550195",
		/// "documentType": "CPF",
		/// "document": "12345678900"
		/// "isCorporate": false,
		/// "isNewsletterOptIn": false,
		/// "localeDefault": "en-US"
		/// }
		/// ```
		/// 
		/// ### Client address
		/// 
		/// For a new address, the data entity is `AD` and the request would look like this:
		/// 
		/// POST
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "addressName": "My House",
		/// "addressType": "residential",
		/// "city": "Metropolis",
		/// "complement": "",
		/// "country": "USA",
		/// "postalCode": "11375",
		/// "receiverName": "Clark Kent",
		/// "reference": null,
		/// "state": "MP",
		/// "street": "Baker Street",
		/// "neighborhood": "Upper east side",
		/// "number": "21",
		/// "userId": "7e03m794-a33a-11e9-84rt6-0adfa64s5a8e"
		/// }
		/// ```
		/// Createnewdocument api/dataentities/{dataEntityName}/documents
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> CreatenewdocumentAsync(string dataEntityName, string _schema, DocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents&_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete document
		/// It allows to delete a document.
		/// Deletedocument api/dataentities/{dataEntityName}/documents/{id}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="id">ID of the Document.</param>
		/// <returns>OK</returns>
		public async Task DeletedocumentAsync(string dataEntityName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get document
		/// Gets document by ID.
		/// 
		/// > Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.
		/// Getdocument api/dataentities/{dataEntityName}/documents/{id}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="id">ID of the Document.</param>
		/// <returns>Sucessful response</returns>
		public async Task<Using_fields_all> GetdocumentAsync(string dataEntityName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Using_fields_all>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update partial document
		/// This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.
		/// 
		/// > You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
		/// 
		/// ## Example use cases
		/// 
		/// ### Client profile
		/// 
		/// In order to update a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:
		/// 
		/// PATCH
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "phone": "+12025550195",
		/// "isNewsletterOptIn": false
		/// }
		/// ```
		/// 
		/// ### Client address
		/// 
		/// In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:
		/// 
		/// PATCH
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "receiverName": "Lois Lane"
		/// }
		/// ```
		/// Updatepartialdocument api/dataentities/{dataEntityName}/documents/{id}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="_where">Filter specification.</param>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <param name="id">ID of the Document.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> UpdatepartialdocumentAsync(string dataEntityName, string _where, string _schema, string id, DocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&_where=" + (_where==null? "" : System.Uri.EscapeDataString(_where))+"&_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update entire document
		/// Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.
		/// 
		/// > You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.
		/// 
		/// ## Example use cases
		/// 
		/// ### Client profile
		/// 
		/// In order to update an existing customer profile, choose the `CL` data entity and send a request similar to this:
		/// 
		/// PUT
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "email": "clark.kent@examplemail.com",
		/// "firstName": "Clark",
		/// "lastName": "Kent",
		/// "phone": "+12025550195",
		/// "documentType": "CPF",
		/// "document": "12345678900"
		/// "isCorporate": false,
		/// "isNewsletterOptIn": false,
		/// "localeDefault": "en-US"
		/// }
		/// ```
		/// 
		/// ### Client address
		/// 
		/// To update an address, the data entity is `AD` and the request would look like this:
		/// 
		/// PUT
		/// ```
		/// https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc
		/// ```
		/// 
		/// Request body
		/// ```json
		/// {
		/// "addressName": "My House",
		/// "addressType": "residential",
		/// "city": "Metropolis",
		/// "complement": "",
		/// "country": "USA",
		/// "postalCode": "11375",
		/// "receiverName": "Clark Kent",
		/// "reference": null,
		/// "state": "MP",
		/// "street": "Baker Street",
		/// "neighborhood": "Upper east side",
		/// "number": "21",
		/// "userId": "7e03m794-a33a-11e9-84rt6-0adfa64s5a8e"
		/// }
		/// ```
		/// Updateentiredocument api/dataentities/{dataEntityName}/documents/{id}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="_where">Filter specification.</param>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <param name="id">ID of the Document.</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> UpdateentiredocumentAsync(string dataEntityName, string _where, string _schema, string id, DocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&_where=" + (_where==null? "" : System.Uri.EscapeDataString(_where))+"&_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validate document by clusters
		/// Check if a document is present in one or more clusters (specific set of field values).
		/// 
		/// > There is a limit of five rules per request.
		/// Validatedocumentbyclusters api/dataentities/{dataEntityName}/documents/{id}/clusters
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="id">ID of the Document.</param>
		/// <param name="requestBody">Request body for validating a document by clusters</param>
		/// <returns>OK</returns>
		public async Task ValidatedocumentbyclustersAsync(string dataEntityName, string id, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/clusters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List versions
		/// Allows to list the versions of a document.
		/// Listversions api/dataentities/{dataEntityName}/documents/{id}/versions
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="id">ID of the Document.</param>
		/// <param name="load">If true, return all the fields in each version of the document</param>
		/// <param name="fields">If `load` is true, the response will return only these specific fields</param>
		/// <returns>OK</returns>
		public async Task<Listversion[]> ListversionsAsync(string dataEntityName, string id, bool load, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/versions&load="+load+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Listversion[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get version
		/// Returns the version of a document.
		/// Getversion api/dataentities/{dataEntityName}/documents/{id}/versions/{versionId}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="id">ID of the Document.</param>
		/// <param name="versionId">ID of the version to update.</param>
		/// <returns>OK</returns>
		public async Task<Getversion> GetversionAsync(string dataEntityName, string id, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Getversion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Put version
		/// Updates document with version values.
		/// Putversion api/dataentities/{dataEntityName}/documents/{id}/versions/{versionId}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="id">ID of the Document.</param>
		/// <param name="versionId">ID of the version to update</param>
		/// <returns>OK</returns>
		public async Task<DocumentResponse> PutversionAsync(string dataEntityName, string id, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/documents/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/versions/"+ (versionId==null? "" : System.Uri.EscapeDataString(versionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get indices
		/// Returns the list of indices by data entity.
		/// Getindices api/dataentities/{dataEntityName}/indices
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <returns>OK</returns>
		public async Task GetindicesAsync(string dataEntityName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/indices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Put indices
		/// Create an index.
		/// Putindices api/dataentities/{dataEntityName}/indices
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="requestBody">Request body for creating an index</param>
		/// <returns>OK</returns>
		public async Task PutindicesAsync(string dataEntityName, PutindicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/indices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete index by name
		/// Delete an index.
		/// Deleteindexbyname api/dataentities/{dataEntityName}/indices/{index_name}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="index_name">Name of the index.</param>
		/// <returns>OK</returns>
		public async Task DeleteindexbynameAsync(string dataEntityName, string index_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/indices/"+ (index_name==null? "" : System.Uri.EscapeDataString(index_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get index by name
		/// Returns an index.
		/// Getindexbyname api/dataentities/{dataEntityName}/indices/{index_name}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="index_name">Name of the index.</param>
		/// <returns>OK</returns>
		public async Task GetindexbynameAsync(string dataEntityName, string index_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/indices/"+ (index_name==null? "" : System.Uri.EscapeDataString(index_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schemas
		/// Return the schemas saved.
		/// Getschemas api/dataentities/{dataEntityName}/schemas
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <returns>OK</returns>
		public async Task GetschemasAsync(string dataEntityName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/schemas";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete schema by name
		/// Deletes an existing schema for a given data entity.
		/// Deleteschemabyname api/dataentities/{dataEntityName}/schemas/{schemaName}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="schemaName">Name of the schema.</param>
		public async Task DeleteschemabynameAsync(string dataEntityName, string schemaName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get schema by name
		/// Returns an existing schema for a given data entity.
		/// Getschemabyname api/dataentities/{dataEntityName}/schemas/{schemaName}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="schemaName">Name of the schema.</param>
		/// <returns>OK</returns>
		public async Task GetschemabynameAsync(string dataEntityName, string schemaName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save schema by name
		/// Creates or edits a data entity schema. Learn more about [Master Data schemas](https://developers.vtex.com/vtex-rest-api/docs/master-data-schema-lifecycle)
		/// 
		/// > Note that if you send a `schemaName` that does not exist for that data entity, this request will create it.
		/// 
		/// This request can also be used to [create or edit Master Data v2 triggers](https://developers.vtex.com/vtex-rest-api/docs/setting-up-triggers-in-master-data-v2).
		/// Saveschemabyname api/dataentities/{dataEntityName}/schemas/{schemaName}
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="schemaName">Name of the schema.</param>
		/// <param name="requestBody">Request body for saving schema</param>
		/// <returns>OK</returns>
		public async Task SaveschemabynameAsync(string dataEntityName, string schemaName, SaveschemabynameRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/schemas/"+ (schemaName==null? "" : System.Uri.EscapeDataString(schemaName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Scroll documents
		/// In the first request, the `X-VTEX-MD-TOKEN` token will be returned in the header. This token must be passed to the next request in the query string `_token` parameter. The token has a timeout of 10 minutes, which refreshes after each request.
		/// 
		/// After the token is obtained it is no longer necessary to send the filter or document size per page parameters. You only need to resend the token until the document collection is empty.
		/// 
		/// > Avoid sending too many requests with wildcards (`*`) in the search parameters or that use the `keyword` parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code `429`.
		/// 
		/// ## Request examples
		/// 
		/// First request:
		/// ```
		/// /dataentities/Client/scroll?isCluster=true&_size=250&_fields=email,firstName
		/// ```
		/// 
		/// Retrieve the token in the header `X-VTEX-MD-TOKEN` from the first request's response and use it to make the next requests.
		/// 
		/// Subsequent requests:
		/// ```
		/// /dataentities/Client/scroll?_token={tokenValueExample}
		/// ```
		/// Scrolldocuments api/dataentities/{dataEntityName}/scroll
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="_token">Value of the header `X-VTEX-MD-TOKEN` returned in your first request. Send its value in this query string in the subsequent requests. The token has a timeout of 10 minutes, which refreshes after each new request.</param>
		/// <param name="_fields">Fields that should be returned by document. Separate fields' names with commas. For example `_fields=email,firstName,document`. You can also use `_all` to fetch all fields.</param>
		/// <param name="_where">Filter specification.</param>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <param name="_keyword">String to search. Use quotes for a partial query. For example, `_keyword=Maria` or `_keyword="Maria"`.</param>
		/// <param name="_sort">Sets sorting mode in two parts. The first part is the name of the field you want to sort by. In the second part, use `ASC` for ascending or `DESC` for descending.</param>
		/// <returns>OK</returns>
		public async Task ScrolldocumentsAsync(string dataEntityName, string _token, string _fields, string _where, string _schema, string _keyword, string _sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/scroll&_token=" + (_token==null? "" : System.Uri.EscapeDataString(_token))+"&_fields=" + (_fields==null? "" : System.Uri.EscapeDataString(_fields))+"&_where=" + (_where==null? "" : System.Uri.EscapeDataString(_where))+"&_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema))+"&_keyword=" + (_keyword==null? "" : System.Uri.EscapeDataString(_keyword))+"&_sort=" + (_sort==null? "" : System.Uri.EscapeDataString(_sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search documents
		/// Retrieves documents' information, while choosing which fields will be returned and filtering documents by specific fields.
		/// 
		/// > The response header `REST-Content-Range` indicates the total amount of results for that specific search. For example, it may return `resources 0-100/136108`, which indicates it has returned results from 0 to 100 of a total 136108.
		/// 
		/// Below you can see some query examples and learn more about each query parameter.
		/// 
		/// > Avoid sending too many requests with wildcards (`*`) in the search parameters or that use the `keyword` parameter. This may lead to this endpoint being temporarily blocked for your account. If this happens you will receive an error with status code `503`.
		/// 
		/// ## Query examples
		/// 
		/// ### Simple filter
		/// 
		/// ```
		/// /dataentities/Client/search?email=my@email.com
		/// ```
		/// 
		/// ### Complex filter
		/// 
		/// ```
		/// /dataentities/Client/search?_where=(firstName=Jon OR lastName=Smith) OR (createdIn between 2001-01-01 AND 2016-01-01)
		/// ```
		/// 
		/// ### Date Range
		/// 
		/// ```
		/// /dataentities/Client/search?_where=createdIn between 2001-01-01 AND 2016-01-01
		/// ```
		/// 
		/// ### Range numeric fields
		/// 
		/// ```
		/// /dataentities/Client/search?_where=age between 18 AND 25
		/// ```
		/// 
		/// ### Partial filter
		/// 
		/// ```
		/// /dataentities/Client/search?firstName=*Maria*
		/// ```
		/// 
		/// ### Filter for null values
		/// 
		/// ```
		/// /dataentities/Client/search?_where=firstName is null
		/// ```
		/// 
		/// ### Filter for non-null values
		/// 
		/// ```
		/// /dataentities/Client/search?_where=firstName is not null
		/// ```
		/// 
		/// ### Filter for difference
		/// ```
		/// /dataentities/Client/search?_where=firstName<>maria
		/// ```
		/// 
		/// ### Filter greater than or less than
		/// ```
		/// /dataentities/Client/search?_where=number>5
		/// /dataentities/Client/search?_where=date<2001-01-01
		/// ```
		/// Searchdocuments api/dataentities/{dataEntityName}/search
		/// </summary>
		/// <param name="dataEntityName">Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.</param>
		/// <param name="_fields">Fields that should be returned by document. Separate fields' names with commas. For example `_fields=email,firstName,document`. You can also use `_all` to fetch all fields.</param>
		/// <param name="_where">Filter specification.</param>
		/// <param name="_schema">Name of the schema the document to be created needs to be compliant with.</param>
		/// <param name="_keyword">String to search. Use quotes for a partial query. For example, `_keyword=Maria` or `_keyword="Maria"`.</param>
		/// <param name="_sort">Sets sorting mode in two parts. The first part is the name of the field you want to sort by. In the second part, use `ASC` for ascending or `DESC` for descending.</param>
		/// <returns>OK</returns>
		public async Task SearchdocumentsAsync(string dataEntityName, string _fields, string _where, string _schema, string _keyword, string _sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/dataentities/"+ (dataEntityName==null? "" : System.Uri.EscapeDataString(dataEntityName))+"/search&_fields=" + (_fields==null? "" : System.Uri.EscapeDataString(_fields))+"&_where=" + (_where==null? "" : System.Uri.EscapeDataString(_where))+"&_schema=" + (_schema==null? "" : System.Uri.EscapeDataString(_schema))+"&_keyword=" + (_keyword==null? "" : System.Uri.EscapeDataString(_keyword))+"&_sort=" + (_sort==null? "" : System.Uri.EscapeDataString(_sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
