//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Order Accounting
		/// Retrieves accounting activity during the queried timespan.
		/// Get_accounting accounting
		/// </summary>
		/// <param name="fromDate">Orders invoice date. Date-time in ISO 8601 format for selecting orders after, or at, the specified time</param>
		/// <param name="toDate">Orders invoice date. Date-time in ISO 8601 format for selecting orders before, or at, the specified time</param>
		/// <param name="page">A multiplier of the number of items (limit parameter) to skip before returning results</param>
		/// <param name="limit">The numbers of items to return</param>
		/// <param name="warehouseIds">A CSV of warehouse id, '123' or '1,2,3'</param>
		/// <param name="orderIds">A CSV of FDC order id, '123' or '1,2,3'</param>
		/// <param name="hydrate">Adds additional information to the response, uses a CSV format for multiple values.</param>
		/// <returns>Accounting</returns>
		public async Task<Get_accountingReturn> Get_accountingAsync(string fromDate, string toDate, int page, int limit, int[] warehouseIds, int[] orderIds, string[] hydrate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounting?fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&page="+page+"&limit="+limit+"&"+string.Join("&", warehouseIds.Select(z => $"warehouseIds={z}"))+"&"+string.Join("&", orderIds.Select(z => $"orderIds={z}"))+"&"+string.Join("&", hydrate.Select(z => $"hydrate={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_accountingReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of Item Inventories
		/// Retrieve inventory for one or more items. This API requires elevated permissions, please speak to your success manager.
		/// Get_inventory inventory
		/// </summary>
		/// <param name="page">A multiplier of the number of items (limit parameter) to skip before returning results</param>
		/// <param name="limit">The numbers of items to return</param>
		/// <param name="merchantIds">A CSV of merchant id, '123' or '1,2,3'</param>
		/// <param name="warehouseIds">A CSV of warehouse id, '123' or '1,2,3'</param>
		/// <param name="externalSkuNames">A CSV of sku reference names, 'skuName1' or 'skuName1,skuName2,skuName3'</param>
		/// <returns>Found Inventory</returns>
		public async Task<Get_inventoryReturn> Get_inventoryAsync(int page, int limit, int[] merchantIds, int[] warehouseIds, string[] externalSkuNames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inventory?page="+page+"&limit="+limit+"&"+string.Join("&", merchantIds.Select(z => $"merchantIds={z}"))+"&"+string.Join("&", warehouseIds.Select(z => $"warehouseIds={z}"))+"&"+string.Join("&", externalSkuNames.Select(z => $"externalSkuNames={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_inventoryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an Access Token
		/// By default tokens are valid for 7 days while refresh tokens are valid for 30 days. If your `grant_type` is "password" include the `username` and `password`, if however your `grant_type` is "refresh_token" the username/password are not required, instead set the `refresh_token`
		/// Post_oauth_access_token oauth/access_token
		/// </summary>
		/// <param name="requestBody">Get an access token</param>
		/// <returns>Authorized</returns>
		public async Task<Post_oauth_access_tokenReturn> Post_oauth_access_tokenAsync(Post_oauth_access_tokenPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth/access_token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Post_oauth_access_tokenReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List of Orders
		/// Retrieve many orders at once
		/// Get_orders orders
		/// </summary>
		/// <param name="fromDate">Date-time in ISO 8601 format for selecting orders after, or at, the specified time</param>
		/// <param name="toDate">Date-time in ISO 8601 format for selecting orders before, or at, the specified time</param>
		/// <param name="merchantIds">A CSV of merchant id, '123' or '1,2,3'</param>
		/// <param name="warehouseIds">A CSV of warehouse id, '123' or '1,2,3'</param>
		/// <param name="page">A multiplier of the number of items (limit parameter) to skip before returning results</param>
		/// <param name="limit">The numbers of items to return</param>
		/// <param name="hydrate">Adds additional information to the response, uses a CSV format for multiple values.'</param>
		/// <returns>OK</returns>
		public async Task<object> Get_ordersAsync(string fromDate, string toDate, int[] merchantIds, int[] warehouseIds, int page, int limit, string[] hydrate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders?fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&"+string.Join("&", merchantIds.Select(z => $"merchantIds={z}"))+"&"+string.Join("&", warehouseIds.Select(z => $"warehouseIds={z}"))+"&page="+page+"&limit="+limit+"&"+string.Join("&", hydrate.Select(z => $"hydrate={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// New Order
		/// Error Notes&#58;
		/// * When `409 Conflict` is a 'Duplicate Order' the `context` will include the FDC `id`, see samples.
		/// 
		/// Post_orders orders
		/// </summary>
		/// <param name="requestBody">The order to create</param>
		public async Task Post_ordersAsync(Post_ordersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancel an Order
		/// Request an order is canceled to prevent shipment.
		/// Delete_orders_id orders/{id}
		/// </summary>
		/// <param name="id">ID of order that needs to be canceled</param>
		/// <returns>Your order was successfully canceled</returns>
		public async Task Delete_orders_idAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Order Details
		/// For the fastest results use the FDC provided `id` however you can use your `merchantOrderId` as the `id`.
		/// GetOrder orders/{id}
		/// </summary>
		/// <param name="id">The FDC order Id</param>
		/// <param name="merchantId">Providing your `merchantId` indicates the `id` is your `merchantOrderId`. Although it is not necessary to provide this it will speed up your results when using your `merchantOrderId` however it will slow your results when using the FDC provided `id`</param>
		/// <param name="hydrate">Adds additional information to the response, uses a CSV format for multiple values.'</param>
		/// <returns>Order Found</returns>
		public async Task GetOrderAsync(string id, int merchantId, string[] hydrate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&merchantId="+merchantId+"&"+string.Join("&", hydrate.Select(z => $"hydrate={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ship an Order
		/// Note, this API is used to update orders and is reserved for our shipping partners.
		/// Put_orders_id_ship orders/{id}/ship
		/// </summary>
		/// <param name="id">The FDC order Id</param>
		/// <param name="requestBody">Shipping Details</param>
		/// <returns>Order Found</returns>
		public async Task Put_orders_id_shipAsync(int id, Put_orders_id_shipPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id+"/ship";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Order Status
		/// Note, this API is used to update orders and is reserved for our shipping partners.
		/// Put_orders_id_status orders/{id}/status
		/// </summary>
		/// <param name="id">The FDC order Id</param>
		/// <param name="requestBody">New status event</param>
		/// <returns>Order Found</returns>
		public async Task Put_orders_id_statusAsync(int id, Put_orders_id_statusPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+id+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Returns
		/// Retrieves summary return activity during the queried timespan. Although return knowledge can be learned from `GET /orders/{id}` it can take an unknown amount of time for an order that is refused or undeliverable to return to an FDC facility. Instead we recommend regularly querying this API.
		/// Get_returns returns
		/// </summary>
		/// <param name="fromDate">Date-time in ISO 8601 format for selecting orders after, or at, the specified time</param>
		/// <param name="toDate">Date-time in ISO 8601 format for selecting orders before, or at, the specified time</param>
		/// <param name="page">A multiplier of the number of items (limit parameter) to skip before returning results</param>
		/// <param name="limit">The numbers of items to return</param>
		/// <returns>Returns</returns>
		public async Task<Get_returnsReturn> Get_returnsAsync(string fromDate, string toDate, int page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "returns?fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&page="+page+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_returnsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inform us of an RMA
		/// Inform FDC of an expected return.
		/// Put_returns returns
		/// </summary>
		/// <param name="requestBody">RMA</param>
		public async Task Put_returnsAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "returns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Tracking
		/// Get uniformed tracking events for any package, this response is carrier independent. Please note, an API Key is required for throttling purposes, please contact your success manager for details.
		/// Get_track track
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_trackAsync(string trackingNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "track?trackingNumber=" + (trackingNumber==null? "" : System.Uri.EscapeDataString(trackingNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// About Me
		/// Returns the user profile of the access token's owner. This could be useful if managing multiple accounts or confirming validity of a token.
		/// Get_users_me users/me
		/// </summary>
		/// <returns>User</returns>
		public async Task<Get_users_meReturn> Get_users_meAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get_users_meReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Get_accountingReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_accountingReturnData[] Get_accountingReturnData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get_accountingReturnMeta Meta { get; set; }
	}
	
	public class Get_accountingReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="fees")]
		public Get_accountingReturnDataFees Fees { get; set; }
		
		/// <summary>
		/// Total number of items accounted for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCount")]
		public System.Nullable<System.Int32> ItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Get_accountingReturnDataItems[] Get_accountingReturnDataItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant")]
		public Get_accountingReturnDataMerchant Merchant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public Get_accountingReturnDataOrder Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warehouse")]
		public Get_accountingReturnDataWarehouse Warehouse { get; set; }
	}
	
	public class Get_accountingReturnDataFees
	{
		
		[System.Runtime.Serialization.DataMember(Name="box")]
		public System.Nullable<System.Single> Box { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="envelope")]
		public System.Nullable<System.Single> Envelope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillment")]
		public System.Nullable<System.Single> Fulfillment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insert")]
		public System.Nullable<System.Single> Insert { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kitting")]
		public System.Nullable<System.Single> Kitting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picking")]
		public System.Nullable<System.Single> Picking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postage")]
		public System.Nullable<System.Single> Postage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="print")]
		public System.Nullable<System.Single> Print { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	public class Get_accountingReturnDataItems
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wmsItemId")]
		public string WmsItemId { get; set; }
	}
	
	public class Get_accountingReturnDataMerchant
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the merchant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Get_accountingReturnDataOrder
	{
		
		/// <summary>
		/// FDC order id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Date of the order when it was recorded by accounting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceDate")]
		public System.Nullable<System.DateOnly> InvoiceDate { get; set; }
		
		/// <summary>
		/// Merchant order id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public System.Nullable<System.Int32> MerchantOrderId { get; set; }
		
		/// <summary>
		/// Date of the order when it was initially received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordedDate")]
		public System.Nullable<System.DateOnly> RecordedDate { get; set; }
	}
	
	public class Get_accountingReturnDataWarehouse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Name of the merchant
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
	}
	
	public class Get_accountingReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Get_accountingReturnMetaPagination Pagination { get; set; }
	}
	
	public class Get_accountingReturnMetaPagination
	{
		
		/// <summary>
		/// Count of records returned in response, this will be equal to or less then the limit parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Current page of the response, this will match the page parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPage")]
		public System.Nullable<System.Int32> CurrentPage { get; set; }
		
		/// <summary>
		/// Total number of records available to request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		/// <summary>
		/// Total number of pages available to request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	public class Get_inventoryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_inventoryReturnData[] Get_inventoryReturnData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get_inventoryReturnMeta Meta { get; set; }
	}
	
	public class Get_inventoryReturnData
	{
		
		/// <summary>
		/// Item this inventory data is based on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public Get_inventoryReturnDataItem Item { get; set; }
		
		/// <summary>
		/// Merchant that owns this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant")]
		public Get_inventoryReturnDataMerchant Merchant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public Get_inventoryReturnDataQuantity Quantity { get; set; }
	}
	
	public class Get_inventoryReturnDataItem
	{
		
		/// <summary>
		/// FDC ID for this Item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Sku reference name for this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skuReference")]
		public string SkuReference { get; set; }
	}
	
	public class Get_inventoryReturnDataMerchant
	{
		
		/// <summary>
		/// Merchants name for this item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Get_inventoryReturnDataQuantity
	{
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public Get_inventoryReturnDataQuantityTotal Total { get; set; }
	}
	
	public class Get_inventoryReturnDataQuantityTotal
	{
		
		/// <summary>
		/// Number of items that are available to be used in an order
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableToPromise")]
		public System.Nullable<System.Int32> AvailableToPromise { get; set; }
	}
	
	public class Get_inventoryReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Get_inventoryReturnMetaPagination Pagination { get; set; }
	}
	
	public class Get_inventoryReturnMetaPagination
	{
		
		/// <summary>
		/// Count of records returned in response, this will be equal to or less then the limit parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Current page of the response, this will match the page parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPage")]
		public System.Nullable<System.Int32> CurrentPage { get; set; }
		
		/// <summary>
		/// Total number of records available to request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		/// <summary>
		/// Total number of pages available to request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	public class Post_oauth_access_tokenPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class Post_oauth_access_tokenReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		[System.ComponentModel.DefaultValue("Bearer")]
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; } = "Bearer";
	}
	
	public class Post_ordersPostBody
	{
		
		/// <summary>
		/// Use of this property requires special permission and must be discussed with your account executive; values are restricted while custom values need to be accepted by your AE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrator")]
		public System.Nullable<Post_ordersPostBodyIntegrator> Integrator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Post_ordersPostBodyItems[] Post_ordersPostBodyItems { get; set; }
		
		/// <summary>
		/// Necessary if you have a multitenancy account, otherwise we will associate the order with your account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantId")]
		public System.Nullable<System.Int32> MerchantId { get; set; }
		
		/// <summary>
		/// Unique ID provided by the merchant
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="merchantOrderId")]
		public string MerchantOrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient")]
		public Post_ordersPostBodyRecipient Recipient { get; set; }
		
		/// <summary>
		/// Custom for you, it will be mapped to an actual method within the OMS UI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shippingMethod")]
		public string ShippingMethod { get; set; }
		
		/// <summary>
		/// We automatically select a warehouse based on inventory availability, requested carrier and delivery schedule, and carrier cost. You may however override this process. Because this is not recommended please inform your AE prior to using so they may enable this feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warehouse")]
		public Post_ordersPostBodyWarehouse Warehouse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Post_ordersPostBodyIntegrator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1ShoppingCart")]
		_1ShoppingCart = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3dCart")]
		_3dCart = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AdobeBC")]
		AdobeBC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonAU")]
		AmazonAU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonEU")]
		AmazonEU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonNA")]
		AmazonNA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BigCommerce")]
		BigCommerce = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BrandBoom")]
		BrandBoom = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BrightPearl")]
		BrightPearl = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BuyGoods")]
		BuyGoods = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Celery")]
		Celery = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ChannelAdvisor")]
		ChannelAdvisor = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Clickbank")]
		Clickbank = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CommerceHub")]
		CommerceHub = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Custom")]
		Custom = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Demandware")]
		Demandware = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ebay")]
		Ebay = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Ecwid")]
		Ecwid = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Etsy")]
		Etsy = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FoxyCart")]
		FoxyCart = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Goodsie")]
		Goodsie = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Infusionsoft")]
		Infusionsoft = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Konnektive")]
		Konnektive = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LimeLight")]
		LimeLight = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Linio")]
		Linio = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Linnworks")]
		Linnworks = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Magento")]
		Magento = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Netsuite")]
		Netsuite = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NewEgg")]
		NewEgg = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nexternal")]
		Nexternal = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NuOrder")]
		NuOrder = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Opencart")]
		Opencart = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OrderWave")]
		OrderWave = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="osCommerce1")]
		osCommerce1 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Overstock")]
		Overstock = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PayPal")]
		PayPal = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PrestaShop")]
		PrestaShop = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pricefalls")]
		Pricefalls = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Quickbooks")]
		Quickbooks = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rakuten")]
		Rakuten = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sears")]
		Sears = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sellbrite")]
		Sellbrite = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SellerCloud")]
		SellerCloud = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Shipstation")]
		Shipstation = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Shopify")]
		Shopify = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Skubana")]
		Skubana = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SolidCommerce")]
		SolidCommerce = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SparkPay")]
		SparkPay = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SpreeCommerce")]
		SpreeCommerce = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="spsCommerce")]
		spsCommerce = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StitchLabs")]
		StitchLabs = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StoneEdge")]
		StoneEdge = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TradeGecko")]
		TradeGecko = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UltraCart")]
		UltraCart = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Volusion")]
		Volusion = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VTEX")]
		VTEX = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Walmart")]
		Walmart = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WooCommerce")]
		WooCommerce = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yahoo")]
		Yahoo = 58,
	}
	
	public class Post_ordersPostBodyItems
	{
		
		/// <summary>
		/// Using USD, a per unit value of a single SKU. If your declaring a kit this is the sum total for a single kit. In both scenarios we will multiply the `declaredValue` against the `quantity` for customs declaration.
		/// Required
		/// Pattern: ^[0-9.]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="declaredValue")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9.]+$")]
		public string DeclaredValue { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Quantity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class Post_ordersPostBodyRecipient
	{
		
		/// <summary>
		/// Address Line 1
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		/// <summary>
		/// Address Line 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		/// <summary>
		/// City
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressLocality")]
		public string AddressLocality { get; set; }
		
		/// <summary>
		/// Province / State
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressRegion")]
		public string AddressRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Country, for best results please provide the two character ISO code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Email, required for international shipments
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Phone number, required for international shipments
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Postal Code / Zip
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
	}
	
	public class Post_ordersPostBodyWarehouse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	public class Put_orders_id_shipPutBody
	{
		
		/// <summary>
		/// Tracking number of package
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="trackingNumber")]
		public string TrackingNumber { get; set; }
		
		/// <summary>
		/// Override predicted weight of package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightOverride")]
		public System.Nullable<System.Single> WeightOverride { get; set; }
	}
	
	public class Put_orders_id_statusPutBody
	{
		
		/// <summary>
		/// Human-readable description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Put_orders_id_statusPutBodyStatus Status { get; set; }
	}
	
	public class Put_orders_id_statusPutBodyStatus
	{
		
		/// <summary>
		/// Required
		/// Pattern: ^\d{6}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{6}$")]
		public string Code { get; set; }
	}
	
	public class Get_returnsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get_returnsReturnMeta Meta { get; set; }
	}
	
	public class Get_returnsReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Get_returnsReturnMetaPagination Pagination { get; set; }
	}
	
	public class Get_returnsReturnMetaPagination
	{
		
		/// <summary>
		/// Count of records returned in response, this will be equal to or less then the limit parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Current page of the response, this will match the page parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPage")]
		public System.Nullable<System.Int32> CurrentPage { get; set; }
		
		/// <summary>
		/// Total number of records available to request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		/// <summary>
		/// Total number of pages available to request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	public class Get_users_meReturn
	{
		
		/// <summary>
		/// Depricated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactInfo")]
		public string ContactInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deptLeader")]
		public System.Nullable<System.Boolean> DeptLeader { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant")]
		public Get_users_meReturnMerchant Merchant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Boolean> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public System.Nullable<System.DateTimeOffset> UpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class Get_users_meReturnMerchant
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
