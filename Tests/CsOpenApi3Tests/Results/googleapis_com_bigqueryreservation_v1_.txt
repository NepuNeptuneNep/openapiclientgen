//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An assignment allows a project to submit jobs of a certain type using slots from the specified reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Assignment
	{
		
		/// <summary>
		/// The resource which will use the reservation. E.g. `projects/myproject`, `folders/123`, or `organizations/456`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignee")]
		public string Assignee { get; set; }
		
		/// <summary>
		/// Which type of jobs will use the reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public System.Nullable<AssignmentJobType> JobType { get; set; }
		
		/// <summary>
		/// Output only. Name of the resource. E.g.: `projects/myproject/locations/US/reservations/team1-prod/assignments/123`. The assignment_id must only contain lower case alphanumeric characters or dashes and the max length is 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. State of the assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AssignmentState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssignmentJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML_EXTERNAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssignmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
	}
	
	/// <summary>
	/// Auto scaling settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Autoscale
	{
		
		/// <summary>
		/// Output only. The slot capacity added to this reservation when autoscale happens. Will be between [0, max_slots].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSlots")]
		public string CurrentSlots { get; set; }
		
		/// <summary>
		/// Number of slots to be scaled when needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSlots")]
		public string MaxSlots { get; set; }
	}
	
	/// <summary>
	/// Represents a BI Reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BiReservation
	{
		
		/// <summary>
		/// The resource name of the singleton BI reservation. Reservation names have the form `projects/{project_id}/locations/{location_id}/biReservation`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Preferred tables to use BI capacity for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredTables")]
		public TableReference[] PreferredTables { get; set; }
		
		/// <summary>
		/// Size of a reservation, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Output only. The last update timestamp of a reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Fully qualified reference to BigQuery table. Internally stored as google.cloud.bi.v1.BqTableReference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableReference
	{
		
		/// <summary>
		/// The ID of the dataset in the above project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// The assigned project ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The ID of the table in the above dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
	}
	
	/// <summary>
	/// Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CapacityCommitment
	{
		
		/// <summary>
		/// Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentEndTime")]
		public string CommitmentEndTime { get; set; }
		
		/// <summary>
		/// Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitmentStartTime")]
		public string CommitmentStartTime { get; set; }
		
		/// <summary>
		/// Edition of the capacity commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public System.Nullable<CapacityCommitmentEdition> Edition { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureStatus")]
		public Status FailureStatus { get; set; }
		
		/// <summary>
		/// Output only. If true, the commitment is a flat-rate commitment, otherwise, it's an edition commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFlatRate")]
		public System.Nullable<System.Boolean> IsFlatRate { get; set; }
		
		/// <summary>
		/// Applicable only for commitments located within one of the BigQuery multi-regions (US or EU). If set to true, this commitment is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this commitment is placed in the organization's default region. NOTE: this is a preview feature. Project must be allow-listed in order to set this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiRegionAuxiliary")]
		public System.Nullable<System.Boolean> MultiRegionAuxiliary { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123` The commitment_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Capacity commitment commitment plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public System.Nullable<CapacityCommitmentPlan> Plan { get; set; }
		
		/// <summary>
		/// The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renewalPlan")]
		public CapacityCommitmentPlan RenewalPlan { get; set; }
		
		/// <summary>
		/// Number of slots in this commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotCount")]
		public string SlotCount { get; set; }
		
		/// <summary>
		/// Output only. State of the commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CapacityCommitmentState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CapacityCommitmentEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE_PLUS = 3,
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CapacityCommitmentPlan
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMITMENT_PLAN_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEX_FLAT_RATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY_FLAT_RATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUAL_FLAT_RATE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_YEAR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CapacityCommitmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// The response for ReservationService.ListAssignments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAssignmentsResponse
	{
		
		/// <summary>
		/// List of assignments visible to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignments")]
		public Assignment[] Assignments { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response for ReservationService.ListCapacityCommitments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCapacityCommitmentsResponse
	{
		
		/// <summary>
		/// List of capacity commitments visible to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacityCommitments")]
		public CapacityCommitment[] CapacityCommitments { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response for ReservationService.ListReservations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReservationsResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of reservations visible to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservations")]
		public Reservation[] Reservations { get; set; }
	}
	
	/// <summary>
	/// A reservation is a mechanism used to guarantee slots to users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reservation
	{
		
		/// <summary>
		/// Auto scaling settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoscale")]
		public Autoscale Autoscale { get; set; }
		
		/// <summary>
		/// Job concurrency target which sets a soft upper bound on the number of jobs that can run concurrently in this reservation. This is a soft target due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency target will be automatically computed by the system. NOTE: this field is exposed as `target_job_concurrency` in the Information Schema, DDL and BQ CLI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrency")]
		public string Concurrency { get; set; }
		
		/// <summary>
		/// Output only. Creation time of the reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// Edition of the reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public CapacityCommitmentEdition Edition { get; set; }
		
		/// <summary>
		/// If false, any query or pipeline job using this reservation will use idle slots from other reservations within the same admin project. If true, a query or pipeline job using this reservation will execute with the slot capacity specified in the slot_capacity field at most.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreIdleSlots")]
		public System.Nullable<System.Boolean> IgnoreIdleSlots { get; set; }
		
		/// <summary>
		/// Applicable only for reservations located within one of the BigQuery multi-regions (US or EU). If set to true, this reservation is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization's default region. NOTE: this is a preview feature. Project must be allow-listed in order to set this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiRegionAuxiliary")]
		public System.Nullable<System.Boolean> MultiRegionAuxiliary { get; set; }
		
		/// <summary>
		/// The resource name of the reservation, e.g., `projects/*/locations/*/reservations/team1-prod`. The reservation_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Baseline slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit of parallelism. Queries using this reservation might use more slots during runtime if ignore_idle_slots is set to false, or autoscaling is enabled. If edition is EDITION_UNSPECIFIED and total slot_capacity of the reservation and its siblings exceeds the total slot_count of all capacity commitments, the request will fail with `google.rpc.Code.RESOURCE_EXHAUSTED`. If edition is any value but EDITION_UNSPECIFIED, then the above requirement is not needed. The total slot_capacity of the reservation and its siblings may exceed the total slot_count of capacity commitments. In that case, the exceeding slots will be charged with the autoscale SKU. You can increase the number of baseline slots in a reservation every few minutes. If you want to decrease your baseline slots, you are limited to once an hour if you have recently changed your baseline slot capacity and your baseline slots exceed your committed slots. Otherwise, you can decrease your baseline slots every few minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotCapacity")]
		public string SlotCapacity { get; set; }
		
		/// <summary>
		/// Output only. Last update time of the reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The request for ReservationService.MergeCapacityCommitments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MergeCapacityCommitmentsRequest
	{
		
		/// <summary>
		/// Ids of capacity commitments to merge. These capacity commitments must exist under admin project and location specified in the parent. ID is the last portion of capacity commitment name e.g., 'abc' for projects/myproject/locations/US/capacityCommitments/abc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacityCommitmentIds")]
		public string[] CapacityCommitmentIds { get; set; }
	}
	
	/// <summary>
	/// The request for ReservationService.MoveAssignment. **Note**: "bigquery.reservationAssignments.create" permission is required on the destination_id. **Note**: "bigquery.reservationAssignments.create" and "bigquery.reservationAssignments.delete" permission are required on the related assignee.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MoveAssignmentRequest
	{
		
		/// <summary>
		/// The optional assignment ID. A new assignment name is generated if this field is empty. This field can contain only lowercase alphanumeric characters or dashes. Max length is 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignmentId")]
		public string AssignmentId { get; set; }
		
		/// <summary>
		/// The new reservation ID, e.g.: `projects/myotherproject/locations/US/reservations/team2-prod`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationId")]
		public string DestinationId { get; set; }
	}
	
	/// <summary>
	/// The response for ReservationService.SearchAllAssignments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchAllAssignmentsResponse
	{
		
		/// <summary>
		/// List of assignments visible to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignments")]
		public Assignment[] Assignments { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response for ReservationService.SearchAssignments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchAssignmentsResponse
	{
		
		/// <summary>
		/// List of assignments visible to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignments")]
		public Assignment[] Assignments { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The request for ReservationService.SplitCapacityCommitment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SplitCapacityCommitmentRequest
	{
		
		/// <summary>
		/// Number of slots in the capacity commitment after the split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slotCount")]
		public string SlotCount { get; set; }
	}
	
	/// <summary>
	/// The response for ReservationService.SplitCapacityCommitment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SplitCapacityCommitmentResponse
	{
		
		/// <summary>
		/// Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public CapacityCommitment First { get; set; }
		
		/// <summary>
		/// Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="second")]
		public CapacityCommitment Second { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a assignment. No expansion will happen. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `` and `` In this example, deletion of the `` assignment won't affect the other assignment ``. After said deletion, queries from `project1` will still use `res1` while queries from `project2` will switch to use on-demand mode.
		/// Bigqueryreservation_projects_locations_reservations_assignments_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the resource, e.g. `projects/myproject/locations/US/reservations/team1-prod/assignments/123`</param>
		/// <param name="force">Can be used to force delete commitments even if assignments exist. Deleting commitments with assignments may cause queries to fail if they no longer have access to slots.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Bigqueryreservation_projects_locations_reservations_assignments_deleteAsync(string name, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&force="+force;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the reservation.
		/// Bigqueryreservation_projects_locations_reservations_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Resource name of the reservation to retrieve. E.g., `projects/myproject/locations/US/reservations/team1-prod`</param>
		/// <returns>Successful response</returns>
		public async Task<Reservation> Bigqueryreservation_projects_locations_reservations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Reservation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an existing assignment. Only the `priority` field can be updated.
		/// Bigqueryreservation_projects_locations_reservations_assignments_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. Name of the resource. E.g.: `projects/myproject/locations/US/reservations/team1-prod/assignments/123`. The assignment_id must only contain lower case alphanumeric characters or dashes and the max length is 64 characters.</param>
		/// <param name="updateMask">Standard field mask for the set of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Assignment> Bigqueryreservation_projects_locations_reservations_assignments_patchAsync(string name, string updateMask, Assignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Assignment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Moves an assignment under a new reservation. This differs from removing an existing assignment and recreating a new one by providing a transactional change that ensures an assignee always has an associated reservation.
		/// Bigqueryreservation_projects_locations_reservations_assignments_move v1/{name}:move
		/// </summary>
		/// <param name="name">Required. The resource name of the assignment, e.g. `projects/myproject/locations/US/reservations/team1-prod/assignments/123`</param>
		/// <returns>Successful response</returns>
		public async Task<Assignment> Bigqueryreservation_projects_locations_reservations_assignments_moveAsync(string name, MoveAssignmentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":move";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Assignment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Splits capacity commitment to two commitments of the same plan and `commitment_end_time`. A common use case is to enable downgrading commitments. For example, in order to downgrade from 10000 slots to 8000, you might split a 10000 capacity commitment into commitments of 2000 and 8000. Then, you delete the first one after the commitment end time passes.
		/// Bigqueryreservation_projects_locations_capacityCommitments_split v1/{name}:split
		/// </summary>
		/// <param name="name">Required. The resource name e.g.,: `projects/myproject/locations/US/capacityCommitments/123`</param>
		/// <returns>Successful response</returns>
		public async Task<SplitCapacityCommitmentResponse> Bigqueryreservation_projects_locations_capacityCommitments_splitAsync(string name, SplitCapacityCommitmentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":split";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SplitCapacityCommitmentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists assignments. Only explicitly created assignments will be returned. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `` and `` In this example, ListAssignments will just return the above two assignments for reservation `res1`, and no expansion/merge will happen. The wildcard "-" can be used for reservations in the request. In that case all assignments belongs to the specified project and location will be listed. **Note** "-" cannot be used for projects nor locations.
		/// Bigqueryreservation_projects_locations_reservations_assignments_list v1/{parent}/assignments
		/// </summary>
		/// <param name="parent">Required. The parent resource name e.g.: `projects/myproject/locations/US/reservations/team1-prod` Or: `projects/myproject/locations/US/reservations/-`</param>
		/// <param name="pageSize">The maximum number of items to return per page.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAssignmentsResponse> Bigqueryreservation_projects_locations_reservations_assignments_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/assignments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAssignmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an assignment object which allows the given project to submit jobs of a certain type using slots from the specified reservation. Currently a resource (project, folder, organization) can only have one assignment per each (job_type, location) combination, and that reservation will be used for all jobs of the matching type. Different assignments can be created on different levels of the projects, folders or organization hierarchy. During query execution, the assignment is looked up at the project, folder and organization levels in that order. The first assignment found is applied to the query. When creating assignments, it does not matter if other assignments exist at higher levels. Example: * The organization `organizationA` contains two projects, `project1` and `project2`. * Assignments for all three entities (`organizationA`, `project1`, and `project2`) could all be created and mapped to the same or different reservations. "None" assignments represent an absence of the assignment. Projects assigned to None use on-demand pricing. To create a "None" assignment, use "none" as a reservation_id in the parent. Example parent: `projects/myproject/locations/US/reservations/none`. Returns `google.rpc.Code.PERMISSION_DENIED` if user does not have 'bigquery.admin' permissions on the project using the reservation and the project that owns this reservation. Returns `google.rpc.Code.INVALID_ARGUMENT` when location of the assignment does not match location of the reservation.
		/// Bigqueryreservation_projects_locations_reservations_assignments_create v1/{parent}/assignments
		/// </summary>
		/// <param name="parent">Required. The parent resource name of the assignment E.g. `projects/myproject/locations/US/reservations/team1-prod`</param>
		/// <param name="assignmentId">The optional assignment ID. Assignment name will be generated automatically if this field is empty. This field must only contain lower case alphanumeric characters or dashes. Max length is 64 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Assignment> Bigqueryreservation_projects_locations_reservations_assignments_createAsync(string parent, string assignmentId, Assignment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/assignments&assignmentId=" + (assignmentId==null? "" : System.Uri.EscapeDataString(assignmentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Assignment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the capacity commitments for the admin project.
		/// Bigqueryreservation_projects_locations_capacityCommitments_list v1/{parent}/capacityCommitments
		/// </summary>
		/// <param name="parent">Required. Resource name of the parent reservation. E.g., `projects/myproject/locations/US`</param>
		/// <param name="pageSize">The maximum number of items to return.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCapacityCommitmentsResponse> Bigqueryreservation_projects_locations_capacityCommitments_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/capacityCommitments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCapacityCommitmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new capacity commitment resource.
		/// Bigqueryreservation_projects_locations_capacityCommitments_create v1/{parent}/capacityCommitments
		/// </summary>
		/// <param name="parent">Required. Resource name of the parent reservation. E.g., `projects/myproject/locations/US`</param>
		/// <param name="capacityCommitmentId">The optional capacity commitment ID. Capacity commitment name will be generated automatically if this field is empty. This field must only contain lower case alphanumeric characters or dashes. The first and last character cannot be a dash. Max length is 64 characters. NOTE: this ID won't be kept if the capacity commitment is split or merged.</param>
		/// <param name="enforceSingleAdminProjectPerOrg">If true, fail the request if another project in the organization has a capacity commitment.</param>
		/// <returns>Successful response</returns>
		public async Task<CapacityCommitment> Bigqueryreservation_projects_locations_capacityCommitments_createAsync(string parent, string capacityCommitmentId, bool enforceSingleAdminProjectPerOrg, CapacityCommitment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/capacityCommitments&capacityCommitmentId=" + (capacityCommitmentId==null? "" : System.Uri.EscapeDataString(capacityCommitmentId))+"&enforceSingleAdminProjectPerOrg="+enforceSingleAdminProjectPerOrg;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CapacityCommitment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Merges capacity commitments of the same plan into a single commitment. The resulting capacity commitment has the greater commitment_end_time out of the to-be-merged capacity commitments. Attempting to merge capacity commitments of different plan will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`.
		/// Bigqueryreservation_projects_locations_capacityCommitments_merge v1/{parent}/capacityCommitments:merge
		/// </summary>
		/// <param name="parent">Parent resource that identifies admin project and location e.g., `projects/myproject/locations/us`</param>
		/// <returns>Successful response</returns>
		public async Task<CapacityCommitment> Bigqueryreservation_projects_locations_capacityCommitments_mergeAsync(string parent, MergeCapacityCommitmentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/capacityCommitments:merge";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CapacityCommitment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists all the reservations for the project in the specified location.
		/// Bigqueryreservation_projects_locations_reservations_list v1/{parent}/reservations
		/// </summary>
		/// <param name="parent">Required. The parent resource name containing project and location, e.g.: `projects/myproject/locations/US`</param>
		/// <param name="pageSize">The maximum number of items to return per page.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReservationsResponse> Bigqueryreservation_projects_locations_reservations_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reservations&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListReservationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new reservation resource.
		/// Bigqueryreservation_projects_locations_reservations_create v1/{parent}/reservations
		/// </summary>
		/// <param name="parent">Required. Project, location. E.g., `projects/myproject/locations/US`</param>
		/// <param name="reservationId">The reservation ID. It must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Reservation> Bigqueryreservation_projects_locations_reservations_createAsync(string parent, string reservationId, Reservation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/reservations&reservationId=" + (reservationId==null? "" : System.Uri.EscapeDataString(reservationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Reservation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`.
		/// Bigqueryreservation_projects_locations_searchAllAssignments v1/{parent}:searchAllAssignments
		/// </summary>
		/// <param name="parent">Required. The resource name with location (project name could be the wildcard '-'), e.g.: `projects/-/locations/US`.</param>
		/// <param name="pageSize">The maximum number of items to return per page.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <param name="query">Please specify resource name as assignee in the query. Examples: * `assignee=projects/myproject` * `assignee=folders/123` * `assignee=organizations/456`</param>
		/// <returns>Successful response</returns>
		public async Task<SearchAllAssignmentsResponse> Bigqueryreservation_projects_locations_searchAllAssignmentsAsync(string parent, int pageSize, string pageToken, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":searchAllAssignments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchAllAssignmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deprecated: Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`. **Note** "-" cannot be used for projects nor locations.
		/// Bigqueryreservation_projects_locations_searchAssignments v1/{parent}:searchAssignments
		/// </summary>
		/// <param name="parent">Required. The resource name of the admin project(containing project and location), e.g.: `projects/myproject/locations/US`.</param>
		/// <param name="pageSize">The maximum number of items to return per page.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <param name="query">Please specify resource name as assignee in the query. Examples: * `assignee=projects/myproject` * `assignee=folders/123` * `assignee=organizations/456`</param>
		/// <returns>Successful response</returns>
		public async Task<SearchAssignmentsResponse> Bigqueryreservation_projects_locations_searchAssignmentsAsync(string parent, int pageSize, string pageToken, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":searchAssignments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SearchAssignmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
