//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Color
	{
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hex")]
		public string Hex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hsl")]
		public ColorHsl Hsl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lab")]
		public ColorLab Lab { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="luminance")]
		public System.Nullable<System.Double> Luminance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="luminanceWCAG")]
		public System.Nullable<System.Double> LuminanceWCAG { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedHex")]
		public string RequestedHex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgb")]
		public ColorRgb Rgb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svg")]
		public string Svg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgNamed")]
		public string SvgNamed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swatchImg")]
		public string SwatchImg { get; set; }
	}
	
	public class ColorHsl
	{
		
		[System.Runtime.Serialization.DataMember(Name="h")]
		public System.Nullable<System.Double> H { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l")]
		public System.Nullable<System.Double> L { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s")]
		public System.Nullable<System.Double> S { get; set; }
	}
	
	public class ColorLab
	{
		
		[System.Runtime.Serialization.DataMember(Name="a")]
		public System.Nullable<System.Double> A { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="b")]
		public System.Nullable<System.Double> B { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l")]
		public System.Nullable<System.Double> L { get; set; }
	}
	
	public class ColorRgb
	{
		
		[System.Runtime.Serialization.DataMember(Name="b")]
		public System.Nullable<System.Int32> B { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="g")]
		public System.Nullable<System.Int32> G { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="r")]
		public System.Nullable<System.Int32> R { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ColorBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="hex")]
		public string Hex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hsl")]
		public ColorBaseHsl Hsl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lab")]
		public ColorBaseLab Lab { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="luminance")]
		public System.Nullable<System.Double> Luminance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="luminanceWCAG")]
		public System.Nullable<System.Double> LuminanceWCAG { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rgb")]
		public ColorBaseRgb Rgb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="swatchImg")]
		public ColorBaseSwatchImg SwatchImg { get; set; }
	}
	
	public class ColorBaseHsl
	{
		
		[System.Runtime.Serialization.DataMember(Name="h")]
		public System.Nullable<System.Double> H { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l")]
		public System.Nullable<System.Double> L { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s")]
		public System.Nullable<System.Double> S { get; set; }
	}
	
	public class ColorBaseLab
	{
		
		[System.Runtime.Serialization.DataMember(Name="a")]
		public System.Nullable<System.Double> A { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="b")]
		public System.Nullable<System.Double> B { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l")]
		public System.Nullable<System.Double> L { get; set; }
	}
	
	public class ColorBaseRgb
	{
		
		[System.Runtime.Serialization.DataMember(Name="b")]
		public System.Nullable<System.Int32> B { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="g")]
		public System.Nullable<System.Int32> G { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="r")]
		public System.Nullable<System.Int32> R { get; set; }
	}
	
	public class ColorBaseSwatchImg
	{
		
		[System.Runtime.Serialization.DataMember(Name="svg")]
		public string Svg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgNamed")]
		public string SvgNamed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorCount")]
		public System.Nullable<System.Int32> ColorCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PossibleLists
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="default")]
		_default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bestOf")]
		bestOf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wikipedia")]
		wikipedia = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="french")]
		french = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ridgway")]
		ridgway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="risograph")]
		risograph = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="basic")]
		basic = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chineseTraditional")]
		chineseTraditional = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="html")]
		html = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="japaneseTraditional")]
		japaneseTraditional = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="leCorbusier")]
		leCorbusier = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nbsIscc")]
		nbsIscc = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ntc")]
		ntc = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="osxcrayons")]
		osxcrayons = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ral")]
		ral = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sanzoWadaI")]
		sanzoWadaI = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="thesaurus")]
		thesaurus = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="werner")]
		werner = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="windows")]
		windows = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="x11")]
		x11 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="xkcd")]
		xkcd = 20,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all colors of the default color name list
		/// Get 
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetReturn> GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReturn>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all colors of the default color name list
		/// ListsGet lists/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ListsGetReturn> ListsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lists/";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListsGetReturn>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all colors of the default color name list
		/// NamesGet names/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NamesGetReturn> NamesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NamesGetReturn>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generate a color swatch for any color
		/// SwatchGetByColorAndName swatch/
		/// </summary>
		/// <param name="color">The hex value of the color to retrieve without '#'</param>
		/// <param name="name">The name of the color</param>
		/// <returns>OK</returns>
		public async Task SwatchGetByColorAndNameAsync(string color, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "swatch/?color=" + (color==null? "" : System.Uri.EscapeDataString(color))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class GetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public Color[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paletteTitle")]
		public string PaletteTitle { get; set; }
	}
	
	public class ListsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="listDescriptions")]
		public ListsGetReturnListDescriptions ListDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localAvailableColorNameLists")]
		public string[] LocalAvailableColorNameLists { get; set; }
	}
	
	public class ListsGetReturnListDescriptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="basic")]
		public ListDescription Basic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bestOf")]
		public ListDescription BestOf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chineseTraditional")]
		public ListDescription ChineseTraditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public ListDescription Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="french")]
		public ListDescription French { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="html")]
		public ListDescription Html { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="japaneseTraditional")]
		public ListDescription JapaneseTraditional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leCorbusier")]
		public ListDescription LeCorbusier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nbsIscc")]
		public ListDescription NbsIscc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ntc")]
		public ListDescription Ntc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osxcrayons")]
		public ListDescription Osxcrayons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ral")]
		public ListDescription Ral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ridgway")]
		public ListDescription Ridgway { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="risograph")]
		public ListDescription Risograph { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sanzoWadaI")]
		public ListDescription SanzoWadaI { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thesaurus")]
		public ListDescription Thesaurus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="werner")]
		public ListDescription Werner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wikipedia")]
		public ListDescription Wikipedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windows")]
		public ListDescription Windows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="x11")]
		public ListDescription X11 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xkcd")]
		public ListDescription Xkcd { get; set; }
	}
	
	public class NamesGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public Color[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paletteTitle")]
		public string PaletteTitle { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
