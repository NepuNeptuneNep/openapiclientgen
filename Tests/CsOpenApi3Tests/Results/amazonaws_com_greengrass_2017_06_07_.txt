//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateRoleToGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateServiceRoleToAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConnectorDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a connector. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Connector
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class @__mapOf__string
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConnectorDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCoreDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a core.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Core
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SyncShadow { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCoreDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeviceDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Device
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SyncShadow { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeviceDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFunctionDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The default configuration that applies to all Lambda functions in the group. Individual Lambda functions can override these settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionDefaultConfig
	{
		
		/// <summary>
		/// Configuration information that specifies how a Lambda function runs. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefaultExecutionConfig Execution { get; set; }
	}
	
	/// <summary>
	/// Configuration information that specifies how a Lambda function runs. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionDefaultExecutionConfig
	{
		
		/// <summary>
		/// Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<FunctionDefaultExecutionConfigIsolationMode> IsolationMode { get; set; }
		
		/// <summary>
		/// Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FunctionRunAsConfig RunAs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FunctionDefaultExecutionConfigIsolationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreengrassContainer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoContainer = 1,
	}
	
	/// <summary>
	/// Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionRunAsConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Gid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Uid { get; set; }
	}
	
	/// <summary>
	/// Information about a Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Function
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfiguration FunctionConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The configuration of the Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EncodingType EncodingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfigurationEnvironment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecArgs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Executable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MemorySize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Pinned { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionRuntimeOverride { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		binary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 1,
	}
	
	/// <summary>
	/// The environment configuration of the function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionConfigurationEnvironment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccessSysfs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionExecutionConfig Execution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceAccessPolicy[] ResourceAccessPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Variables { get; set; }
	}
	
	/// <summary>
	/// Configuration information that specifies how a Lambda function runs. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionExecutionConfig
	{
		
		/// <summary>
		/// Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefaultExecutionConfigIsolationMode IsolationMode { get; set; }
		
		/// <summary>
		/// Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FunctionRunAsConfig RunAs { get; set; }
	}
	
	/// <summary>
	/// A policy used by the function to access a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceAccessPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Permission Permission { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// The type of permission a function has to access a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Permission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rw = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFunctionDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupCertificateAuthorityResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupCertificateAuthorityArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLoggerDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a logger
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Logger
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggerComponent Component { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggerLevel Level { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Space { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggerType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoggerComponent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreengrassSystem = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoggerLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FileSystem = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWSCloudWatch = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLoggerDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourceDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataContainer ResourceDataContainer { get; set; }
	}
	
	/// <summary>
	/// A container for resource data. The container takes only one of the following supported resource data types: ''LocalDeviceResourceData'', ''LocalVolumeResourceData'', ''SageMakerMachineLearningModelResourceData'', ''S3MachineLearningModelResourceData'', ''SecretsManagerSecretResourceData''.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceDataContainer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalDeviceResourceData LocalDeviceResourceData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LocalVolumeResourceData LocalVolumeResourceData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3MachineLearningModelResourceData S3MachineLearningModelResourceData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SageMakerMachineLearningModelResourceData SageMakerMachineLearningModelResourceData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecretsManagerSecretResourceData SecretsManagerSecretResourceData { get; set; }
	}
	
	/// <summary>
	/// Attributes that define a local device resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalDeviceResourceData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupOwnerSetting GroupOwnerSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePath { get; set; }
	}
	
	/// <summary>
	/// Group owner related settings for local resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupOwnerSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoAddGroupOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupOwner { get; set; }
	}
	
	/// <summary>
	/// Attributes that define a local volume resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalVolumeResourceData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupOwnerSetting GroupOwnerSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePath { get; set; }
	}
	
	/// <summary>
	/// Attributes that define an Amazon S3 machine learning resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3MachineLearningModelResourceData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPath { get; set; }
		
		/// <summary>
		/// The owner setting for downloaded machine learning resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDownloadOwnerSetting OwnerSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	/// <summary>
	/// The owner setting for downloaded machine learning resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceDownloadOwnerSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupOwner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Permission GroupPermission { get; set; }
	}
	
	/// <summary>
	/// Attributes that define an Amazon SageMaker machine learning resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SageMakerMachineLearningModelResourceData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPath { get; set; }
		
		/// <summary>
		/// The owner setting for downloaded machine learning resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDownloadOwnerSetting OwnerSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SageMakerJobArn { get; set; }
	}
	
	/// <summary>
	/// Attributes that define a secret resource, which references a secret from AWS Secrets Manager. AWS IoT Greengrass stores a local, encrypted copy of the secret on the Greengrass core, where it can be securely accessed by connectors and Lambda functions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecretsManagerSecretResourceData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdditionalStagingLabelsToDownload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourceDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSoftwareUpdateJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IotJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformSoftwareVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSubscriptionDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about a subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subscription
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSubscriptionDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteConnectorDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteCoreDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFunctionDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLoggerDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourceDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSubscriptionDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateRoleFromGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisassociatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateServiceRoleFromAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisassociatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAssociatedRoleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBulkDeploymentStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BulkDeploymentMetrics BulkDeploymentMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BulkDeploymentStatus BulkDeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorDetail[] ErrorDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Relevant metrics on input records processed during bulk deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkDeploymentMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvalidInputRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecordsProcessed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetryAttempts { get; set; }
	}
	
	/// <summary>
	/// The current status of the bulk deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BulkDeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Initializing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// Details about the error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailedErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailedErrorMessage { get; set; }
	}
	
	/// <summary>
	/// The key-value pair for the resource tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tags
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectivityInfoResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectivityInfo[] ConnectivityInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information about a Greengrass core's connectivity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectivityInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HostAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PortNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectorDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectorDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectorDefinitionVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about the connector definition version, which is a container for connectors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectorDefinitionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connector[] Connectors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoreDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoreDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreDefinitionVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about a core definition version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoreDefinitionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Core[] Cores { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentType DeploymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorDetail[] ErrorDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// The type of deployment. When used for ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NewDeployment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Redeployment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResetDeployment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForceResetDeployment = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceDefinitionVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about a device definition version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceDefinitionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFunctionDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFunctionDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefinitionVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about a function definition version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionDefinitionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefaultConfig DefaultConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Function[] Functions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupCertificateAuthorityResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupCertificateAuthorityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupCertificateAuthorityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PemEncodedCertificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupCertificateConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateAuthorityExpiryInMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateExpiryInMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about a group version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoggerDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionDefinitionVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLoggerDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLoggerDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoggerDefinitionVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about a logger definition version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoggerDefinitionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Logger[] Loggers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDefinitionVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about a resource definition version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceDefinitionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceRoleForAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSubscriptionDefinitionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSubscriptionDefinitionVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubscriptionDefinitionVersion Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about a subscription definition version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionDefinitionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Subscription[] Subscriptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetThingRuntimeConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RuntimeConfiguration RuntimeConfiguration { get; set; }
	}
	
	/// <summary>
	/// Runtime configuration for a thing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuntimeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TelemetryConfiguration TelemetryConfiguration { get; set; }
	}
	
	/// <summary>
	/// Configuration settings for running telemetry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TelemetryConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationSyncStatus ConfigurationSyncStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Telemetry Telemetry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConfigurationSyncStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InSync = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OutOfSync = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Telemetry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		On = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Off = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBulkDeploymentDetailedReportsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BulkDeploymentResult[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about an individual group deployment in a bulk deployment operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkDeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentType DeploymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorDetail[] ErrorDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBulkDeploymentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BulkDeployment[] BulkDeployments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a bulk deployment. You cannot start a new bulk deployment while another one is still running or in a non-terminal state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkDeployment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BulkDeploymentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BulkDeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConnectorDefinitionVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	/// <summary>
	/// Information about a version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VersionInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConnectorDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionInformation[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefinitionInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoreDefinitionVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoreDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionInformation[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Deployment[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deployment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentType DeploymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceDefinitionVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionInformation[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFunctionDefinitionVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFunctionDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionInformation[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGroupCertificateAuthoritiesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupCertificateAuthorityProperties[] GroupCertificateAuthorities { get; set; }
	}
	
	/// <summary>
	/// Information about a certificate authority for a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupCertificateAuthorityProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupCertificateAuthorityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupCertificateAuthorityId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGroupVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupInformation[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLoggerDefinitionVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLoggerDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionInformation[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceDefinitionVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionInformation[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSubscriptionDefinitionVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionInformation[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSubscriptionDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionInformation[] Definitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetDeploymentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBulkDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BulkDeploymentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BulkDeploymentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopBulkDeploymentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConnectivityInfoResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConnectorDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCoreDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeviceDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFunctionDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGroupResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGroupCertificateConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateAuthorityExpiryInMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateExpiryInMilliseconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLoggerDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourceDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubscriptionDefinitionResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateThingRuntimeConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateRoleToGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateServiceRoleToAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConnectorDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectorDefinitionVersion InitialVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConnectorDefinitionVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connector[] Connectors { get; set; }
	}
	
	/// <summary>
	/// Information needed to create a core definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCoreDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreDefinitionVersion InitialVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCoreDefinitionVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Core[] Cores { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentType DeploymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupVersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeviceDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceDefinitionVersion InitialVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeviceDefinitionVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFunctionDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefinitionVersion InitialVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Information needed to create a function definition version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFunctionDefinitionVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefaultConfig DefaultConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Function[] Functions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupCertificateAuthorityRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupVersion InitialVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoggerDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionDefinitionVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLoggerDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoggerDefinitionVersion InitialVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLoggerDefinitionVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Logger[] Loggers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourceDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDefinitionVersion InitialVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateResourceDefinitionVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Resources { get; set; }
	}
	
	/// <summary>
	/// The piece of software on the Greengrass core that will be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SoftwareToUpdate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		core = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ota_agent = 1,
	}
	
	/// <summary>
	/// The minimum level of log statements that should be logged by the OTA Agent during an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateAgentLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERBOSE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL = 7,
	}
	
	/// <summary>
	/// The architecture of the cores which are the targets of an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateTargetsArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		armv6l = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		armv7l = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86_64 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aarch64 = 3,
	}
	
	/// <summary>
	/// The operating system of the cores which are the targets of an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateTargetsOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ubuntu = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		raspbian = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amazon_linux = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		openwrt = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSoftwareUpdateJobRequest
	{
		
		/// <summary>
		/// The IAM Role that Greengrass will use to create pre-signed URLs pointing towards the update artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3UrlSignerRole { get; set; }
		
		/// <summary>
		/// The piece of software on the Greengrass core that will be updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SoftwareToUpdate SoftwareToUpdate { get; set; }
		
		/// <summary>
		/// The minimum level of log statements that should be logged by the OTA Agent during an update.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAgentLogLevel UpdateAgentLogLevel { get; set; }
		
		/// <summary>
		/// The ARNs of the targets (IoT things or IoT thing groups) that this update will be applied to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] UpdateTargets { get; set; }
		
		/// <summary>
		/// The architecture of the cores which are the targets of an update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateTargetsArchitecture UpdateTargetsArchitecture { get; set; }
		
		/// <summary>
		/// The operating system of the cores which are the targets of an update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateTargetsOperatingSystem UpdateTargetsOperatingSystem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSubscriptionDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SubscriptionDefinitionVersion InitialVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSubscriptionDefinitionVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Subscription[] Subscriptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteConnectorDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteCoreDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeviceDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFunctionDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLoggerDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourceDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSubscriptionDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateRoleFromGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateServiceRoleFromAccountRequest
	{
	}
	
	/// <summary>
	/// Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FunctionIsolationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreengrassContainer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoContainer = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAssociatedRoleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetBulkDeploymentStatusRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectivityInfoRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectorDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetConnectorDefinitionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoreDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetCoreDefinitionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeploymentStatusRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceDefinitionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFunctionDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetFunctionDefinitionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupCertificateAuthorityRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupCertificateConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetGroupVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLoggerDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLoggerDefinitionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceDefinitionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetServiceRoleForAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSubscriptionDefinitionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSubscriptionDefinitionVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetThingRuntimeConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBulkDeploymentDetailedReportsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBulkDeploymentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConnectorDefinitionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConnectorDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoreDefinitionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCoreDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceDefinitionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeviceDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFunctionDefinitionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFunctionDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGroupCertificateAuthoritiesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGroupVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLoggerDefinitionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLoggerDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceDefinitionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSubscriptionDefinitionVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSubscriptionDefinitionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// Information needed to reset deployments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetDeploymentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartBulkDeploymentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputFileUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopBulkDeploymentRequest
	{
	}
	
	/// <summary>
	/// A map of the key-value pairs for the resource tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration settings for running telemetry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TelemetryConfigurationUpdate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Telemetry Telemetry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	/// Connectivity information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConnectivityInfoRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectivityInfo[] ConnectivityInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConnectorDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCoreDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeviceDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFunctionDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGroupCertificateConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateExpiryInMilliseconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLoggerDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateResourceDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubscriptionDefinitionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateThingRuntimeConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TelemetryConfigurationUpdate TelemetryConfiguration { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates a role with a group. Your Greengrass core will use the role to access AWS cloud services. The role's permissions should allow Greengrass core Lambda functions to perform actions against the cloud.
		/// AssociateRoleToGroup greengrass/groups/{GroupId}/role
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<AssociateRoleToGroupResponse> AssociateRoleToGroupAsync(string GroupId, AssociateRoleToGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/role";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociateRoleToGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the role from a group.
		/// DisassociateRoleFromGroup greengrass/groups/{GroupId}/role
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<DisassociateRoleFromGroupResponse> DisassociateRoleFromGroupAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/role";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DisassociateRoleFromGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the role associated with a particular group.
		/// GetAssociatedRole greengrass/groups/{GroupId}/role
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<GetAssociatedRoleResponse> GetAssociatedRoleAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/role";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAssociatedRoleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a role with your account. AWS IoT Greengrass will use the role to access your Lambda functions and AWS IoT resources. This is necessary for deployments to succeed. The role must have at least minimum permissions in the policy ''AWSGreengrassResourceAccessRolePolicy''.
		/// AssociateServiceRoleToAccount greengrass/servicerole
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateServiceRoleToAccountResponse> AssociateServiceRoleToAccountAsync(AssociateServiceRoleToAccountPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/servicerole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssociateServiceRoleToAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the service role from your account. Without a service role, deployments will not work.
		/// DisassociateServiceRoleFromAccount greengrass/servicerole
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateServiceRoleFromAccountResponse> DisassociateServiceRoleFromAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/servicerole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DisassociateServiceRoleFromAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the service role that is attached to your account.
		/// GetServiceRoleForAccount greengrass/servicerole
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetServiceRoleForAccountResponse> GetServiceRoleForAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/servicerole";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetServiceRoleForAccountResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a connector definition. You may provide the initial version of the connector definition now or use ''CreateConnectorDefinitionVersion'' at a later time.
		/// CreateConnectorDefinition greengrass/definition/connectors
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConnectorDefinitionResponse> CreateConnectorDefinitionAsync(CreateConnectorDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateConnectorDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of connector definitions.
		/// ListConnectorDefinitions greengrass/definition/connectors
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListConnectorDefinitionsResponse> ListConnectorDefinitionsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConnectorDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a connector definition which has already been defined.
		/// CreateConnectorDefinitionVersion greengrass/definition/connectors/{ConnectorDefinitionId}/versions
		/// </summary>
		/// <param name="ConnectorDefinitionId">The ID of the connector definition.</param>
		/// <returns>Success</returns>
		public async Task<CreateConnectorDefinitionVersionResponse> CreateConnectorDefinitionVersionAsync(string ConnectorDefinitionId, CreateConnectorDefinitionVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors/"+ (ConnectorDefinitionId==null? "" : System.Uri.EscapeDataString(ConnectorDefinitionId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateConnectorDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a connector definition, which are containers for connectors. Connectors run on the Greengrass core and contain built-in integration with local infrastructure, device protocols, AWS, and other cloud services.
		/// ListConnectorDefinitionVersions greengrass/definition/connectors/{ConnectorDefinitionId}/versions
		/// </summary>
		/// <param name="ConnectorDefinitionId">The ID of the connector definition.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListConnectorDefinitionVersionsResponse> ListConnectorDefinitionVersionsAsync(string ConnectorDefinitionId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors/"+ (ConnectorDefinitionId==null? "" : System.Uri.EscapeDataString(ConnectorDefinitionId))+"/versions&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConnectorDefinitionVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a core definition. You may provide the initial version of the core definition now or use ''CreateCoreDefinitionVersion'' at a later time. Greengrass groups must each contain exactly one Greengrass core.
		/// CreateCoreDefinition greengrass/definition/cores
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCoreDefinitionResponse> CreateCoreDefinitionAsync(CreateCoreDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateCoreDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of core definitions.
		/// ListCoreDefinitions greengrass/definition/cores
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListCoreDefinitionsResponse> ListCoreDefinitionsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCoreDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a core definition that has already been defined. Greengrass groups must each contain exactly one Greengrass core.
		/// CreateCoreDefinitionVersion greengrass/definition/cores/{CoreDefinitionId}/versions
		/// </summary>
		/// <param name="CoreDefinitionId">The ID of the core definition.</param>
		/// <returns>Success</returns>
		public async Task<CreateCoreDefinitionVersionResponse> CreateCoreDefinitionVersionAsync(string CoreDefinitionId, CreateCoreDefinitionVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores/"+ (CoreDefinitionId==null? "" : System.Uri.EscapeDataString(CoreDefinitionId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateCoreDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a core definition.
		/// ListCoreDefinitionVersions greengrass/definition/cores/{CoreDefinitionId}/versions
		/// </summary>
		/// <param name="CoreDefinitionId">The ID of the core definition.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListCoreDefinitionVersionsResponse> ListCoreDefinitionVersionsAsync(string CoreDefinitionId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores/"+ (CoreDefinitionId==null? "" : System.Uri.EscapeDataString(CoreDefinitionId))+"/versions&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCoreDefinitionVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment. ''CreateDeployment'' requests are idempotent with respect to the ''X-Amzn-Client-Token'' token and the request parameters.
		/// CreateDeployment greengrass/groups/{GroupId}/deployments
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentResponse> CreateDeploymentAsync(string GroupId, CreateDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/deployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateDeploymentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a history of deployments for the group.
		/// ListDeployments greengrass/groups/{GroupId}/deployments
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentsResponse> ListDeploymentsAsync(string GroupId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/deployments&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeploymentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a device definition. You may provide the initial version of the device definition now or use ''CreateDeviceDefinitionVersion'' at a later time.
		/// CreateDeviceDefinition greengrass/definition/devices
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeviceDefinitionResponse> CreateDeviceDefinitionAsync(CreateDeviceDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateDeviceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of device definitions.
		/// ListDeviceDefinitions greengrass/definition/devices
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListDeviceDefinitionsResponse> ListDeviceDefinitionsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeviceDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a device definition that has already been defined.
		/// CreateDeviceDefinitionVersion greengrass/definition/devices/{DeviceDefinitionId}/versions
		/// </summary>
		/// <param name="DeviceDefinitionId">The ID of the device definition.</param>
		/// <returns>Success</returns>
		public async Task<CreateDeviceDefinitionVersionResponse> CreateDeviceDefinitionVersionAsync(string DeviceDefinitionId, CreateDeviceDefinitionVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices/"+ (DeviceDefinitionId==null? "" : System.Uri.EscapeDataString(DeviceDefinitionId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateDeviceDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a device definition.
		/// ListDeviceDefinitionVersions greengrass/definition/devices/{DeviceDefinitionId}/versions
		/// </summary>
		/// <param name="DeviceDefinitionId">The ID of the device definition.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListDeviceDefinitionVersionsResponse> ListDeviceDefinitionVersionsAsync(string DeviceDefinitionId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices/"+ (DeviceDefinitionId==null? "" : System.Uri.EscapeDataString(DeviceDefinitionId))+"/versions&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeviceDefinitionVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Lambda function definition which contains a list of Lambda functions and their configurations to be used in a group. You can create an initial version of the definition by providing a list of Lambda functions and their configurations now, or use ''CreateFunctionDefinitionVersion'' later.
		/// CreateFunctionDefinition greengrass/definition/functions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFunctionDefinitionResponse> CreateFunctionDefinitionAsync(CreateFunctionDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateFunctionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of Lambda function definitions.
		/// ListFunctionDefinitions greengrass/definition/functions
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListFunctionDefinitionsResponse> ListFunctionDefinitionsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFunctionDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a Lambda function definition that has already been defined.
		/// CreateFunctionDefinitionVersion greengrass/definition/functions/{FunctionDefinitionId}/versions
		/// </summary>
		/// <param name="FunctionDefinitionId">The ID of the Lambda function definition.</param>
		/// <returns>Success</returns>
		public async Task<CreateFunctionDefinitionVersionResponse> CreateFunctionDefinitionVersionAsync(string FunctionDefinitionId, CreateFunctionDefinitionVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions/"+ (FunctionDefinitionId==null? "" : System.Uri.EscapeDataString(FunctionDefinitionId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateFunctionDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a Lambda function definition.
		/// ListFunctionDefinitionVersions greengrass/definition/functions/{FunctionDefinitionId}/versions
		/// </summary>
		/// <param name="FunctionDefinitionId">The ID of the Lambda function definition.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListFunctionDefinitionVersionsResponse> ListFunctionDefinitionVersionsAsync(string FunctionDefinitionId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions/"+ (FunctionDefinitionId==null? "" : System.Uri.EscapeDataString(FunctionDefinitionId))+"/versions&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFunctionDefinitionVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a group. You may provide the initial version of the group or use ''CreateGroupVersion'' at a later time. Tip: You can use the ''gg_group_setup'' package (https://github.com/awslabs/aws-greengrass-group-setup) as a library or command-line application to create and deploy Greengrass groups.
		/// CreateGroup greengrass/groups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateGroupResponse> CreateGroupAsync(CreateGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of groups.
		/// ListGroups greengrass/groups
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListGroupsResponse> ListGroupsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a CA for the group. If a CA already exists, it will rotate the existing CA.
		/// CreateGroupCertificateAuthority greengrass/groups/{GroupId}/certificateauthorities
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<CreateGroupCertificateAuthorityResponse> CreateGroupCertificateAuthorityAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/certificateauthorities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateGroupCertificateAuthorityResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the current CAs for a group.
		/// ListGroupCertificateAuthorities greengrass/groups/{GroupId}/certificateauthorities
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<ListGroupCertificateAuthoritiesResponse> ListGroupCertificateAuthoritiesAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/certificateauthorities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGroupCertificateAuthoritiesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a group which has already been defined.
		/// CreateGroupVersion greengrass/groups/{GroupId}/versions
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<CreateGroupVersionResponse> CreateGroupVersionAsync(string GroupId, CreateGroupVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateGroupVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a group.
		/// ListGroupVersions greengrass/groups/{GroupId}/versions
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListGroupVersionsResponse> ListGroupVersionsAsync(string GroupId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/versions&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGroupVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a logger definition. You may provide the initial version of the logger definition now or use ''CreateLoggerDefinitionVersion'' at a later time.
		/// CreateLoggerDefinition greengrass/definition/loggers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLoggerDefinitionResponse> CreateLoggerDefinitionAsync(CreateLoggerDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateLoggerDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of logger definitions.
		/// ListLoggerDefinitions greengrass/definition/loggers
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListLoggerDefinitionsResponse> ListLoggerDefinitionsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLoggerDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a logger definition that has already been defined.
		/// CreateLoggerDefinitionVersion greengrass/definition/loggers/{LoggerDefinitionId}/versions
		/// </summary>
		/// <param name="LoggerDefinitionId">The ID of the logger definition.</param>
		/// <returns>Success</returns>
		public async Task<CreateLoggerDefinitionVersionResponse> CreateLoggerDefinitionVersionAsync(string LoggerDefinitionId, CreateLoggerDefinitionVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers/"+ (LoggerDefinitionId==null? "" : System.Uri.EscapeDataString(LoggerDefinitionId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateLoggerDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a logger definition.
		/// ListLoggerDefinitionVersions greengrass/definition/loggers/{LoggerDefinitionId}/versions
		/// </summary>
		/// <param name="LoggerDefinitionId">The ID of the logger definition.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListLoggerDefinitionVersionsResponse> ListLoggerDefinitionVersionsAsync(string LoggerDefinitionId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers/"+ (LoggerDefinitionId==null? "" : System.Uri.EscapeDataString(LoggerDefinitionId))+"/versions&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLoggerDefinitionVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a resource definition which contains a list of resources to be used in a group. You can create an initial version of the definition by providing a list of resources now, or use ''CreateResourceDefinitionVersion'' later.
		/// CreateResourceDefinition greengrass/definition/resources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateResourceDefinitionResponse> CreateResourceDefinitionAsync(CreateResourceDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateResourceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resource definitions.
		/// ListResourceDefinitions greengrass/definition/resources
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListResourceDefinitionsResponse> ListResourceDefinitionsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResourceDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a resource definition that has already been defined.
		/// CreateResourceDefinitionVersion greengrass/definition/resources/{ResourceDefinitionId}/versions
		/// </summary>
		/// <param name="ResourceDefinitionId">The ID of the resource definition.</param>
		/// <returns>Success</returns>
		public async Task<CreateResourceDefinitionVersionResponse> CreateResourceDefinitionVersionAsync(string ResourceDefinitionId, CreateResourceDefinitionVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources/"+ (ResourceDefinitionId==null? "" : System.Uri.EscapeDataString(ResourceDefinitionId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateResourceDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a resource definition.
		/// ListResourceDefinitionVersions greengrass/definition/resources/{ResourceDefinitionId}/versions
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <param name="ResourceDefinitionId">The ID of the resource definition.</param>
		/// <returns>Success</returns>
		public async Task<ListResourceDefinitionVersionsResponse> ListResourceDefinitionVersionsAsync(string MaxResults, string NextToken, string ResourceDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources/"+ (ResourceDefinitionId==null? "" : System.Uri.EscapeDataString(ResourceDefinitionId))+"/versions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListResourceDefinitionVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a software update for a core or group of cores (specified as an IoT thing group.) Use this to update the OTA Agent as well as the Greengrass core software. It makes use of the IoT Jobs feature which provides additional commands to manage a Greengrass core software update job.
		/// CreateSoftwareUpdateJob greengrass/updates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSoftwareUpdateJobResponse> CreateSoftwareUpdateJobAsync(CreateSoftwareUpdateJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/updates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSoftwareUpdateJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a subscription definition. You may provide the initial version of the subscription definition now or use ''CreateSubscriptionDefinitionVersion'' at a later time.
		/// CreateSubscriptionDefinition greengrass/definition/subscriptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSubscriptionDefinitionResponse> CreateSubscriptionDefinitionAsync(CreateSubscriptionDefinitionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSubscriptionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of subscription definitions.
		/// ListSubscriptionDefinitions greengrass/definition/subscriptions
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListSubscriptionDefinitionsResponse> ListSubscriptionDefinitionsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSubscriptionDefinitionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a version of a subscription definition which has already been defined.
		/// CreateSubscriptionDefinitionVersion greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions
		/// </summary>
		/// <param name="SubscriptionDefinitionId">The ID of the subscription definition.</param>
		/// <returns>Success</returns>
		public async Task<CreateSubscriptionDefinitionVersionResponse> CreateSubscriptionDefinitionVersionAsync(string SubscriptionDefinitionId, CreateSubscriptionDefinitionVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions/"+ (SubscriptionDefinitionId==null? "" : System.Uri.EscapeDataString(SubscriptionDefinitionId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSubscriptionDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a subscription definition.
		/// ListSubscriptionDefinitionVersions greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <param name="SubscriptionDefinitionId">The ID of the subscription definition.</param>
		/// <returns>Success</returns>
		public async Task<ListSubscriptionDefinitionVersionsResponse> ListSubscriptionDefinitionVersionsAsync(string MaxResults, string NextToken, string SubscriptionDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions/"+ (SubscriptionDefinitionId==null? "" : System.Uri.EscapeDataString(SubscriptionDefinitionId))+"/versions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSubscriptionDefinitionVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a connector definition.
		/// DeleteConnectorDefinition greengrass/definition/connectors/{ConnectorDefinitionId}
		/// </summary>
		/// <param name="ConnectorDefinitionId">The ID of the connector definition.</param>
		/// <returns>Success</returns>
		public async Task<DeleteConnectorDefinitionResponse> DeleteConnectorDefinitionAsync(string ConnectorDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors/"+ (ConnectorDefinitionId==null? "" : System.Uri.EscapeDataString(ConnectorDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteConnectorDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a connector definition.
		/// GetConnectorDefinition greengrass/definition/connectors/{ConnectorDefinitionId}
		/// </summary>
		/// <param name="ConnectorDefinitionId">The ID of the connector definition.</param>
		/// <returns>Success</returns>
		public async Task<GetConnectorDefinitionResponse> GetConnectorDefinitionAsync(string ConnectorDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors/"+ (ConnectorDefinitionId==null? "" : System.Uri.EscapeDataString(ConnectorDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetConnectorDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a connector definition.
		/// UpdateConnectorDefinition greengrass/definition/connectors/{ConnectorDefinitionId}
		/// </summary>
		/// <param name="ConnectorDefinitionId">The ID of the connector definition.</param>
		/// <returns>Success</returns>
		public async Task<UpdateConnectorDefinitionResponse> UpdateConnectorDefinitionAsync(string ConnectorDefinitionId, UpdateConnectorDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors/"+ (ConnectorDefinitionId==null? "" : System.Uri.EscapeDataString(ConnectorDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateConnectorDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a core definition.
		/// DeleteCoreDefinition greengrass/definition/cores/{CoreDefinitionId}
		/// </summary>
		/// <param name="CoreDefinitionId">The ID of the core definition.</param>
		/// <returns>Success</returns>
		public async Task<DeleteCoreDefinitionResponse> DeleteCoreDefinitionAsync(string CoreDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores/"+ (CoreDefinitionId==null? "" : System.Uri.EscapeDataString(CoreDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteCoreDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a core definition version.
		/// GetCoreDefinition greengrass/definition/cores/{CoreDefinitionId}
		/// </summary>
		/// <param name="CoreDefinitionId">The ID of the core definition.</param>
		/// <returns>Success</returns>
		public async Task<GetCoreDefinitionResponse> GetCoreDefinitionAsync(string CoreDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores/"+ (CoreDefinitionId==null? "" : System.Uri.EscapeDataString(CoreDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCoreDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a core definition.
		/// UpdateCoreDefinition greengrass/definition/cores/{CoreDefinitionId}
		/// </summary>
		/// <param name="CoreDefinitionId">The ID of the core definition.</param>
		/// <returns>Success</returns>
		public async Task<UpdateCoreDefinitionResponse> UpdateCoreDefinitionAsync(string CoreDefinitionId, UpdateCoreDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores/"+ (CoreDefinitionId==null? "" : System.Uri.EscapeDataString(CoreDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateCoreDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a device definition.
		/// DeleteDeviceDefinition greengrass/definition/devices/{DeviceDefinitionId}
		/// </summary>
		/// <param name="DeviceDefinitionId">The ID of the device definition.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDeviceDefinitionResponse> DeleteDeviceDefinitionAsync(string DeviceDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices/"+ (DeviceDefinitionId==null? "" : System.Uri.EscapeDataString(DeviceDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteDeviceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a device definition.
		/// GetDeviceDefinition greengrass/definition/devices/{DeviceDefinitionId}
		/// </summary>
		/// <param name="DeviceDefinitionId">The ID of the device definition.</param>
		/// <returns>Success</returns>
		public async Task<GetDeviceDefinitionResponse> GetDeviceDefinitionAsync(string DeviceDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices/"+ (DeviceDefinitionId==null? "" : System.Uri.EscapeDataString(DeviceDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDeviceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a device definition.
		/// UpdateDeviceDefinition greengrass/definition/devices/{DeviceDefinitionId}
		/// </summary>
		/// <param name="DeviceDefinitionId">The ID of the device definition.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDeviceDefinitionResponse> UpdateDeviceDefinitionAsync(string DeviceDefinitionId, UpdateDeviceDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices/"+ (DeviceDefinitionId==null? "" : System.Uri.EscapeDataString(DeviceDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateDeviceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Lambda function definition.
		/// DeleteFunctionDefinition greengrass/definition/functions/{FunctionDefinitionId}
		/// </summary>
		/// <param name="FunctionDefinitionId">The ID of the Lambda function definition.</param>
		/// <returns>Success</returns>
		public async Task<DeleteFunctionDefinitionResponse> DeleteFunctionDefinitionAsync(string FunctionDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions/"+ (FunctionDefinitionId==null? "" : System.Uri.EscapeDataString(FunctionDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteFunctionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a Lambda function definition, including its creation time and latest version.
		/// GetFunctionDefinition greengrass/definition/functions/{FunctionDefinitionId}
		/// </summary>
		/// <param name="FunctionDefinitionId">The ID of the Lambda function definition.</param>
		/// <returns>Success</returns>
		public async Task<GetFunctionDefinitionResponse> GetFunctionDefinitionAsync(string FunctionDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions/"+ (FunctionDefinitionId==null? "" : System.Uri.EscapeDataString(FunctionDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetFunctionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Lambda function definition.
		/// UpdateFunctionDefinition greengrass/definition/functions/{FunctionDefinitionId}
		/// </summary>
		/// <param name="FunctionDefinitionId">The ID of the Lambda function definition.</param>
		/// <returns>Success</returns>
		public async Task<UpdateFunctionDefinitionResponse> UpdateFunctionDefinitionAsync(string FunctionDefinitionId, UpdateFunctionDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions/"+ (FunctionDefinitionId==null? "" : System.Uri.EscapeDataString(FunctionDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateFunctionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a group.
		/// DeleteGroup greengrass/groups/{GroupId}
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<DeleteGroupResponse> DeleteGroupAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a group.
		/// GetGroup greengrass/groups/{GroupId}
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<GetGroupResponse> GetGroupAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a group.
		/// UpdateGroup greengrass/groups/{GroupId}
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<UpdateGroupResponse> UpdateGroupAsync(string GroupId, UpdateGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a logger definition.
		/// DeleteLoggerDefinition greengrass/definition/loggers/{LoggerDefinitionId}
		/// </summary>
		/// <param name="LoggerDefinitionId">The ID of the logger definition.</param>
		/// <returns>Success</returns>
		public async Task<DeleteLoggerDefinitionResponse> DeleteLoggerDefinitionAsync(string LoggerDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers/"+ (LoggerDefinitionId==null? "" : System.Uri.EscapeDataString(LoggerDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteLoggerDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a logger definition.
		/// GetLoggerDefinition greengrass/definition/loggers/{LoggerDefinitionId}
		/// </summary>
		/// <param name="LoggerDefinitionId">The ID of the logger definition.</param>
		/// <returns>Success</returns>
		public async Task<GetLoggerDefinitionResponse> GetLoggerDefinitionAsync(string LoggerDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers/"+ (LoggerDefinitionId==null? "" : System.Uri.EscapeDataString(LoggerDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetLoggerDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a logger definition.
		/// UpdateLoggerDefinition greengrass/definition/loggers/{LoggerDefinitionId}
		/// </summary>
		/// <param name="LoggerDefinitionId">The ID of the logger definition.</param>
		/// <returns>Success</returns>
		public async Task<UpdateLoggerDefinitionResponse> UpdateLoggerDefinitionAsync(string LoggerDefinitionId, UpdateLoggerDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers/"+ (LoggerDefinitionId==null? "" : System.Uri.EscapeDataString(LoggerDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateLoggerDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource definition.
		/// DeleteResourceDefinition greengrass/definition/resources/{ResourceDefinitionId}
		/// </summary>
		/// <param name="ResourceDefinitionId">The ID of the resource definition.</param>
		/// <returns>Success</returns>
		public async Task<DeleteResourceDefinitionResponse> DeleteResourceDefinitionAsync(string ResourceDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources/"+ (ResourceDefinitionId==null? "" : System.Uri.EscapeDataString(ResourceDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteResourceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a resource definition, including its creation time and latest version.
		/// GetResourceDefinition greengrass/definition/resources/{ResourceDefinitionId}
		/// </summary>
		/// <param name="ResourceDefinitionId">The ID of the resource definition.</param>
		/// <returns>Success</returns>
		public async Task<GetResourceDefinitionResponse> GetResourceDefinitionAsync(string ResourceDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources/"+ (ResourceDefinitionId==null? "" : System.Uri.EscapeDataString(ResourceDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetResourceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a resource definition.
		/// UpdateResourceDefinition greengrass/definition/resources/{ResourceDefinitionId}
		/// </summary>
		/// <param name="ResourceDefinitionId">The ID of the resource definition.</param>
		/// <returns>Success</returns>
		public async Task<UpdateResourceDefinitionResponse> UpdateResourceDefinitionAsync(string ResourceDefinitionId, UpdateResourceDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources/"+ (ResourceDefinitionId==null? "" : System.Uri.EscapeDataString(ResourceDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateResourceDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a subscription definition.
		/// DeleteSubscriptionDefinition greengrass/definition/subscriptions/{SubscriptionDefinitionId}
		/// </summary>
		/// <param name="SubscriptionDefinitionId">The ID of the subscription definition.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSubscriptionDefinitionResponse> DeleteSubscriptionDefinitionAsync(string SubscriptionDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions/"+ (SubscriptionDefinitionId==null? "" : System.Uri.EscapeDataString(SubscriptionDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteSubscriptionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a subscription definition.
		/// GetSubscriptionDefinition greengrass/definition/subscriptions/{SubscriptionDefinitionId}
		/// </summary>
		/// <param name="SubscriptionDefinitionId">The ID of the subscription definition.</param>
		/// <returns>Success</returns>
		public async Task<GetSubscriptionDefinitionResponse> GetSubscriptionDefinitionAsync(string SubscriptionDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions/"+ (SubscriptionDefinitionId==null? "" : System.Uri.EscapeDataString(SubscriptionDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSubscriptionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a subscription definition.
		/// UpdateSubscriptionDefinition greengrass/definition/subscriptions/{SubscriptionDefinitionId}
		/// </summary>
		/// <param name="SubscriptionDefinitionId">The ID of the subscription definition.</param>
		/// <returns>Success</returns>
		public async Task<UpdateSubscriptionDefinitionResponse> UpdateSubscriptionDefinitionAsync(string SubscriptionDefinitionId, UpdateSubscriptionDefinitionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions/"+ (SubscriptionDefinitionId==null? "" : System.Uri.EscapeDataString(SubscriptionDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateSubscriptionDefinitionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the status of a bulk deployment.
		/// GetBulkDeploymentStatus greengrass/bulk/deployments/{BulkDeploymentId}/status
		/// </summary>
		/// <param name="BulkDeploymentId">The ID of the bulk deployment.</param>
		/// <returns>Success</returns>
		public async Task<GetBulkDeploymentStatusResponse> GetBulkDeploymentStatusAsync(string BulkDeploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/bulk/deployments/"+ (BulkDeploymentId==null? "" : System.Uri.EscapeDataString(BulkDeploymentId))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBulkDeploymentStatusResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the connectivity information for a core.
		/// GetConnectivityInfo greengrass/things/{ThingName}/connectivityInfo
		/// </summary>
		/// <param name="ThingName">The thing name.</param>
		/// <returns>Success</returns>
		public async Task<GetConnectivityInfoResponse> GetConnectivityInfoAsync(string ThingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/things/"+ (ThingName==null? "" : System.Uri.EscapeDataString(ThingName))+"/connectivityInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetConnectivityInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the connectivity information for the core. Any devices that belong to the group which has this core will receive this information in order to find the location of the core and connect to it.
		/// UpdateConnectivityInfo greengrass/things/{ThingName}/connectivityInfo
		/// </summary>
		/// <param name="ThingName">The thing name.</param>
		/// <returns>Success</returns>
		public async Task<UpdateConnectivityInfoResponse> UpdateConnectivityInfoAsync(string ThingName, UpdateConnectivityInfoPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/things/"+ (ThingName==null? "" : System.Uri.EscapeDataString(ThingName))+"/connectivityInfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateConnectivityInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a connector definition version, including the connectors that the version contains. Connectors are prebuilt modules that interact with local infrastructure, device protocols, AWS, and other cloud services.
		/// GetConnectorDefinitionVersion greengrass/definition/connectors/{ConnectorDefinitionId}/versions/{ConnectorDefinitionVersionId}
		/// </summary>
		/// <param name="ConnectorDefinitionId">The ID of the connector definition.</param>
		/// <param name="ConnectorDefinitionVersionId">The ID of the connector definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListConnectorDefinitionVersions'' requests. If the version is the last one that was associated with a connector definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<GetConnectorDefinitionVersionResponse> GetConnectorDefinitionVersionAsync(string ConnectorDefinitionId, string ConnectorDefinitionVersionId, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/connectors/"+ (ConnectorDefinitionId==null? "" : System.Uri.EscapeDataString(ConnectorDefinitionId))+"/versions/"+ (ConnectorDefinitionVersionId==null? "" : System.Uri.EscapeDataString(ConnectorDefinitionVersionId))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetConnectorDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a core definition version.
		/// GetCoreDefinitionVersion greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}
		/// </summary>
		/// <param name="CoreDefinitionId">The ID of the core definition.</param>
		/// <param name="CoreDefinitionVersionId">The ID of the core definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListCoreDefinitionVersions'' requests. If the version is the last one that was associated with a core definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.</param>
		/// <returns>Success</returns>
		public async Task<GetCoreDefinitionVersionResponse> GetCoreDefinitionVersionAsync(string CoreDefinitionId, string CoreDefinitionVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/cores/"+ (CoreDefinitionId==null? "" : System.Uri.EscapeDataString(CoreDefinitionId))+"/versions/"+ (CoreDefinitionVersionId==null? "" : System.Uri.EscapeDataString(CoreDefinitionVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCoreDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the status of a deployment.
		/// GetDeploymentStatus greengrass/groups/{GroupId}/deployments/{DeploymentId}/status
		/// </summary>
		/// <param name="DeploymentId">The ID of the deployment.</param>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<GetDeploymentStatusResponse> GetDeploymentStatusAsync(string DeploymentId, string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/deployments/"+ (DeploymentId==null? "" : System.Uri.EscapeDataString(DeploymentId))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDeploymentStatusResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a device definition version.
		/// GetDeviceDefinitionVersion greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}
		/// </summary>
		/// <param name="DeviceDefinitionId">The ID of the device definition.</param>
		/// <param name="DeviceDefinitionVersionId">The ID of the device definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListDeviceDefinitionVersions'' requests. If the version is the last one that was associated with a device definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<GetDeviceDefinitionVersionResponse> GetDeviceDefinitionVersionAsync(string DeviceDefinitionId, string DeviceDefinitionVersionId, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/devices/"+ (DeviceDefinitionId==null? "" : System.Uri.EscapeDataString(DeviceDefinitionId))+"/versions/"+ (DeviceDefinitionVersionId==null? "" : System.Uri.EscapeDataString(DeviceDefinitionVersionId))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetDeviceDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a Lambda function definition version, including which Lambda functions are included in the version and their configurations.
		/// GetFunctionDefinitionVersion greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}
		/// </summary>
		/// <param name="FunctionDefinitionId">The ID of the Lambda function definition.</param>
		/// <param name="FunctionDefinitionVersionId">The ID of the function definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListFunctionDefinitionVersions'' requests. If the version is the last one that was associated with a function definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<GetFunctionDefinitionVersionResponse> GetFunctionDefinitionVersionAsync(string FunctionDefinitionId, string FunctionDefinitionVersionId, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/functions/"+ (FunctionDefinitionId==null? "" : System.Uri.EscapeDataString(FunctionDefinitionId))+"/versions/"+ (FunctionDefinitionVersionId==null? "" : System.Uri.EscapeDataString(FunctionDefinitionVersionId))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetFunctionDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retreives the CA associated with a group. Returns the public key of the CA.
		/// GetGroupCertificateAuthority greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}
		/// </summary>
		/// <param name="CertificateAuthorityId">The ID of the certificate authority.</param>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<GetGroupCertificateAuthorityResponse> GetGroupCertificateAuthorityAsync(string CertificateAuthorityId, string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/certificateauthorities/"+ (CertificateAuthorityId==null? "" : System.Uri.EscapeDataString(CertificateAuthorityId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupCertificateAuthorityResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the current configuration for the CA used by the group.
		/// GetGroupCertificateConfiguration greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<GetGroupCertificateConfigurationResponse> GetGroupCertificateConfigurationAsync(string GroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/certificateauthorities/configuration/expiry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupCertificateConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Certificate expiry time for a group.
		/// UpdateGroupCertificateConfiguration greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<UpdateGroupCertificateConfigurationResponse> UpdateGroupCertificateConfigurationAsync(string GroupId, UpdateGroupCertificateConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/certificateauthorities/configuration/expiry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateGroupCertificateConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a group version.
		/// GetGroupVersion greengrass/groups/{GroupId}/versions/{GroupVersionId}
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <param name="GroupVersionId">The ID of the group version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListGroupVersions'' requests. If the version is the last one that was associated with a group, the value also maps to the ''LatestVersion'' property of the corresponding ''GroupInformation'' object.</param>
		/// <returns>Success</returns>
		public async Task<GetGroupVersionResponse> GetGroupVersionAsync(string GroupId, string GroupVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/versions/"+ (GroupVersionId==null? "" : System.Uri.EscapeDataString(GroupVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a logger definition version.
		/// GetLoggerDefinitionVersion greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}
		/// </summary>
		/// <param name="LoggerDefinitionId">The ID of the logger definition.</param>
		/// <param name="LoggerDefinitionVersionId">The ID of the logger definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListLoggerDefinitionVersions'' requests. If the version is the last one that was associated with a logger definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<GetLoggerDefinitionVersionResponse> GetLoggerDefinitionVersionAsync(string LoggerDefinitionId, string LoggerDefinitionVersionId, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/loggers/"+ (LoggerDefinitionId==null? "" : System.Uri.EscapeDataString(LoggerDefinitionId))+"/versions/"+ (LoggerDefinitionVersionId==null? "" : System.Uri.EscapeDataString(LoggerDefinitionVersionId))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetLoggerDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a resource definition version, including which resources are included in the version.
		/// GetResourceDefinitionVersion greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}
		/// </summary>
		/// <param name="ResourceDefinitionId">The ID of the resource definition.</param>
		/// <param name="ResourceDefinitionVersionId">The ID of the resource definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListResourceDefinitionVersions'' requests. If the version is the last one that was associated with a resource definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.</param>
		/// <returns>Success</returns>
		public async Task<GetResourceDefinitionVersionResponse> GetResourceDefinitionVersionAsync(string ResourceDefinitionId, string ResourceDefinitionVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/resources/"+ (ResourceDefinitionId==null? "" : System.Uri.EscapeDataString(ResourceDefinitionId))+"/versions/"+ (ResourceDefinitionVersionId==null? "" : System.Uri.EscapeDataString(ResourceDefinitionVersionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetResourceDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a subscription definition version.
		/// GetSubscriptionDefinitionVersion greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}
		/// </summary>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <param name="SubscriptionDefinitionId">The ID of the subscription definition.</param>
		/// <param name="SubscriptionDefinitionVersionId">The ID of the subscription definition version. This value maps to the ''Version'' property of the corresponding ''VersionInformation'' object, which is returned by ''ListSubscriptionDefinitionVersions'' requests. If the version is the last one that was associated with a subscription definition, the value also maps to the ''LatestVersion'' property of the corresponding ''DefinitionInformation'' object.</param>
		/// <returns>Success</returns>
		public async Task<GetSubscriptionDefinitionVersionResponse> GetSubscriptionDefinitionVersionAsync(string NextToken, string SubscriptionDefinitionId, string SubscriptionDefinitionVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/definition/subscriptions/"+ (SubscriptionDefinitionId==null? "" : System.Uri.EscapeDataString(SubscriptionDefinitionId))+"/versions/"+ (SubscriptionDefinitionVersionId==null? "" : System.Uri.EscapeDataString(SubscriptionDefinitionVersionId))+"?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSubscriptionDefinitionVersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the runtime configuration of a thing.
		/// GetThingRuntimeConfiguration greengrass/things/{ThingName}/runtimeconfig
		/// </summary>
		/// <param name="ThingName">The thing name.</param>
		/// <returns>Success</returns>
		public async Task<GetThingRuntimeConfigurationResponse> GetThingRuntimeConfigurationAsync(string ThingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/things/"+ (ThingName==null? "" : System.Uri.EscapeDataString(ThingName))+"/runtimeconfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetThingRuntimeConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the runtime configuration of a thing.
		/// UpdateThingRuntimeConfiguration greengrass/things/{ThingName}/runtimeconfig
		/// </summary>
		/// <param name="ThingName">The thing name.</param>
		/// <returns>Success</returns>
		public async Task<UpdateThingRuntimeConfigurationResponse> UpdateThingRuntimeConfigurationAsync(string ThingName, UpdateThingRuntimeConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/things/"+ (ThingName==null? "" : System.Uri.EscapeDataString(ThingName))+"/runtimeconfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateThingRuntimeConfigurationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a paginated list of the deployments that have been started in a bulk deployment operation, and their current deployment status.
		/// ListBulkDeploymentDetailedReports greengrass/bulk/deployments/{BulkDeploymentId}/detailed-reports
		/// </summary>
		/// <param name="BulkDeploymentId">The ID of the bulk deployment.</param>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListBulkDeploymentDetailedReportsResponse> ListBulkDeploymentDetailedReportsAsync(string BulkDeploymentId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/bulk/deployments/"+ (BulkDeploymentId==null? "" : System.Uri.EscapeDataString(BulkDeploymentId))+"/detailed-reports&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBulkDeploymentDetailedReportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of bulk deployments.
		/// ListBulkDeployments greengrass/bulk/deployments
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to be returned per request.</param>
		/// <param name="NextToken">The token for the next set of results, or ''null'' if there are no additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListBulkDeploymentsResponse> ListBulkDeploymentsAsync(string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/bulk/deployments?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBulkDeploymentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploys multiple groups in one operation. This action starts the bulk deployment of a specified set of group versions. Each group version deployment will be triggered with an adaptive rate that has a fixed upper limit. We recommend that you include an ''X-Amzn-Client-Token'' token in every ''StartBulkDeployment'' request. These requests are idempotent with respect to the token and the request parameters.
		/// StartBulkDeployment greengrass/bulk/deployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartBulkDeploymentResponse> StartBulkDeploymentAsync(StartBulkDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/bulk/deployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartBulkDeploymentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of resource tags for a resource arn.
		/// ListTagsForResource tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds tags to a Greengrass resource. Valid resources are 'Group', 'ConnectorDefinition', 'CoreDefinition', 'DeviceDefinition', 'FunctionDefinition', 'LoggerDefinition', 'SubscriptionDefinition', 'ResourceDefinition', and 'BulkDeployment'.
		/// TagResource tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource.</param>
		public async Task TagResourceAsync(string resource_arn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets a group's deployments.
		/// ResetDeployments greengrass/groups/{GroupId}/deployments/$reset
		/// </summary>
		/// <param name="GroupId">The ID of the Greengrass group.</param>
		/// <returns>Success</returns>
		public async Task<ResetDeploymentsResponse> ResetDeploymentsAsync(string GroupId, ResetDeploymentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/groups/"+ (GroupId==null? "" : System.Uri.EscapeDataString(GroupId))+"/deployments/$reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResetDeploymentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops the execution of a bulk deployment. This action returns a status of ''Stopping'' until the deployment is stopped. You cannot start a new bulk deployment while a previous deployment is in the ''Stopping'' state. This action doesn't rollback completed deployments or cancel pending deployments.
		/// StopBulkDeployment greengrass/bulk/deployments/{BulkDeploymentId}/$stop
		/// </summary>
		/// <param name="BulkDeploymentId">The ID of the bulk deployment.</param>
		/// <returns>Success</returns>
		public async Task<StopBulkDeploymentResponse> StopBulkDeploymentAsync(string BulkDeploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "greengrass/bulk/deployments/"+ (BulkDeploymentId==null? "" : System.Uri.EscapeDataString(BulkDeploymentId))+"/$stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StopBulkDeploymentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove resource tags from a Greengrass Resource.
		/// UntagResource tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="tagKeys">An array of tag keys to delete</param>
		public async Task UntagResourceAsync(string resource_arn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/{resource_arn}#tagKeys?"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AssociateRoleToGroupPutBody
	{
		
		/// <summary>
		/// The ARN of the role you wish to associate with this group. The existence of the role is not validated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	public class AssociateServiceRoleToAccountPutBody
	{
		
		/// <summary>
		/// The ARN of the service role you wish to associate with your account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	public class CreateConnectorDefinitionPostBody
	{
		
		/// <summary>
		/// Information about the connector definition version, which is a container for connectors.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateConnectorDefinitionPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the connector definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateConnectorDefinitionPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connector[] Connectors { get; set; }
	}
	
	public class CreateConnectorDefinitionVersionPostBody
	{
		
		/// <summary>
		/// A list of references to connectors in this version, with their corresponding configuration settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Connector[] Connectors { get; set; }
	}
	
	public class CreateCoreDefinitionPostBody
	{
		
		/// <summary>
		/// Information about a core definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateCoreDefinitionPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the core definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateCoreDefinitionPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Core[] Cores { get; set; }
	}
	
	public class CreateCoreDefinitionVersionPostBody
	{
		
		/// <summary>
		/// A list of cores in the core definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Core[] Cores { get; set; }
	}
	
	public class CreateDeploymentPostBody
	{
		
		/// <summary>
		/// The ID of the deployment if you wish to redeploy a previous deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// The type of deployment. When used for ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentType DeploymentType { get; set; }
		
		/// <summary>
		/// The ID of the group version to be deployed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GroupVersionId { get; set; }
	}
	
	public class CreateDeviceDefinitionPostBody
	{
		
		/// <summary>
		/// Information about a device definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDeviceDefinitionPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the device definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateDeviceDefinitionPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
	}
	
	public class CreateDeviceDefinitionVersionPostBody
	{
		
		/// <summary>
		/// A list of devices in the definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
	}
	
	public class CreateFunctionDefinitionPostBody
	{
		
		/// <summary>
		/// Information about a function definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateFunctionDefinitionPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the function definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateFunctionDefinitionPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefaultConfig DefaultConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Function[] Functions { get; set; }
	}
	
	public class CreateFunctionDefinitionVersionPostBody
	{
		
		/// <summary>
		/// The default configuration that applies to all Lambda functions in the group. Individual Lambda functions can override these settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateFunctionDefinitionVersionPostBodyDefaultConfig DefaultConfig { get; set; }
		
		/// <summary>
		/// A list of Lambda functions in this function definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Function[] Functions { get; set; }
	}
	
	public class CreateFunctionDefinitionVersionPostBodyDefaultConfig
	{
		
		/// <summary>
		/// Configuration information that specifies how a Lambda function runs. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FunctionDefaultExecutionConfig Execution { get; set; }
	}
	
	public class CreateGroupPostBody
	{
		
		/// <summary>
		/// Information about a group version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateGroupPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateGroupPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoggerDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceDefinitionVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionDefinitionVersionArn { get; set; }
	}
	
	public class CreateGroupVersionPostBody
	{
		
		/// <summary>
		/// The ARN of the connector definition version for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorDefinitionVersionArn { get; set; }
		
		/// <summary>
		/// The ARN of the core definition version for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CoreDefinitionVersionArn { get; set; }
		
		/// <summary>
		/// The ARN of the device definition version for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceDefinitionVersionArn { get; set; }
		
		/// <summary>
		/// The ARN of the function definition version for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FunctionDefinitionVersionArn { get; set; }
		
		/// <summary>
		/// The ARN of the logger definition version for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LoggerDefinitionVersionArn { get; set; }
		
		/// <summary>
		/// The ARN of the resource definition version for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceDefinitionVersionArn { get; set; }
		
		/// <summary>
		/// The ARN of the subscription definition version for this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionDefinitionVersionArn { get; set; }
	}
	
	public class CreateLoggerDefinitionPostBody
	{
		
		/// <summary>
		/// Information about a logger definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateLoggerDefinitionPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the logger definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateLoggerDefinitionPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Logger[] Loggers { get; set; }
	}
	
	public class CreateLoggerDefinitionVersionPostBody
	{
		
		/// <summary>
		/// A list of loggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Logger[] Loggers { get; set; }
	}
	
	public class CreateResourceDefinitionPostBody
	{
		
		/// <summary>
		/// Information about a resource definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateResourceDefinitionPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the resource definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateResourceDefinitionPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Resources { get; set; }
	}
	
	public class CreateResourceDefinitionVersionPostBody
	{
		
		/// <summary>
		/// A list of resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Resources { get; set; }
	}
	
	public class CreateSoftwareUpdateJobPostBody
	{
		
		/// <summary>
		/// The IAM Role that Greengrass will use to create pre-signed URLs pointing towards the update artifact.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3UrlSignerRole { get; set; }
		
		/// <summary>
		/// The piece of software on the Greengrass core that will be updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SoftwareToUpdate SoftwareToUpdate { get; set; }
		
		/// <summary>
		/// The minimum level of log statements that should be logged by the OTA Agent during an update.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAgentLogLevel UpdateAgentLogLevel { get; set; }
		
		/// <summary>
		/// The ARNs of the targets (IoT things or IoT thing groups) that this update will be applied to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] UpdateTargets { get; set; }
		
		/// <summary>
		/// The architecture of the cores which are the targets of an update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateTargetsArchitecture UpdateTargetsArchitecture { get; set; }
		
		/// <summary>
		/// The operating system of the cores which are the targets of an update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateTargetsOperatingSystem UpdateTargetsOperatingSystem { get; set; }
	}
	
	public class CreateSubscriptionDefinitionPostBody
	{
		
		/// <summary>
		/// Information about a subscription definition version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateSubscriptionDefinitionPostBodyInitialVersion InitialVersion { get; set; }
		
		/// <summary>
		/// The name of the subscription definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateSubscriptionDefinitionPostBodyInitialVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Subscription[] Subscriptions { get; set; }
	}
	
	public class CreateSubscriptionDefinitionVersionPostBody
	{
		
		/// <summary>
		/// A list of subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Subscription[] Subscriptions { get; set; }
	}
	
	public class UpdateConnectorDefinitionPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateCoreDefinitionPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateDeviceDefinitionPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateFunctionDefinitionPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateGroupPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateLoggerDefinitionPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateResourceDefinitionPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateSubscriptionDefinitionPutBody
	{
		
		/// <summary>
		/// The name of the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class UpdateConnectivityInfoPutBody
	{
		
		/// <summary>
		/// A list of connectivity info.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConnectivityInfo[] ConnectivityInfo { get; set; }
	}
	
	public class UpdateGroupCertificateConfigurationPutBody
	{
		
		/// <summary>
		/// The amount of time remaining before the certificate expires, in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateExpiryInMilliseconds { get; set; }
	}
	
	public class UpdateThingRuntimeConfigurationPutBody
	{
		
		/// <summary>
		/// Configuration settings for running telemetry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateThingRuntimeConfigurationPutBodyTelemetryConfiguration TelemetryConfiguration { get; set; }
	}
	
	public class UpdateThingRuntimeConfigurationPutBodyTelemetryConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Telemetry Telemetry { get; set; }
	}
	
	public class StartBulkDeploymentPostBody
	{
		
		/// <summary>
		/// The ARN of the execution role to associate with the bulk deployment operation. This IAM role must allow the ''greengrass:CreateDeployment'' action for all group versions that are listed in the input file. This IAM role must have access to the S3 bucket containing the input file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// The URI of the input file contained in the S3 bucket. The execution role must have ''getObject'' permissions on this bucket to access the input file. The input file is a JSON-serialized, line delimited file with UTF-8 encoding that provides a list of group and version IDs and the deployment type. This file must be less than 100 MB. Currently, AWS IoT Greengrass supports only ''NewDeployment'' deployment types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputFileUri { get; set; }
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ResetDeploymentsPostBody
	{
		
		/// <summary>
		/// If true, performs a best-effort only core reset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
