//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetTokenBalanceOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenBalances")]
		public BatchGetTokenBalanceOutputItem[] TokenBalances { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchGetTokenBalanceErrorItem[] Errors { get; set; }
	}
	
	/// <summary>
	/// The container for the properties of a token balance output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetTokenBalanceOutputItem
	{
		
		/// <summary>
		/// The container for the identifier of the owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerIdentifier")]
		public OwnerIdentifier OwnerIdentifier { get; set; }
		
		/// <summary>
		/// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenIdentifier")]
		public TokenIdentifier TokenIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public string Balance { get; set; }
		
		/// <summary>
		/// The container for time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="atBlockchainInstant")]
		public BlockchainInstant AtBlockchainInstant { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public BlockchainInstant LastUpdatedTime { get; set; }
	}
	
	/// <summary>
	/// The container for the identifier of the owner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OwnerIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
	}
	
	/// <summary>
	/// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contractAddress")]
		public string ContractAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		public string TokenId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryNetwork
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETHEREUM_MAINNET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITCOIN_MAINNET = 1,
	}
	
	/// <summary>
	/// The container for time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlockchainInstant
	{
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.DateTimeOffset Time { get; set; }
	}
	
	/// <summary>
	/// Error generated from a failed <code>BatchGetTokenBalance</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetTokenBalanceErrorItem
	{
		
		/// <summary>
		/// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenIdentifier")]
		public TokenIdentifier TokenIdentifier { get; set; }
		
		/// <summary>
		/// The container for the identifier of the owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerIdentifier")]
		public OwnerIdentifier OwnerIdentifier { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="atBlockchainInstant")]
		public BlockchainInstant AtBlockchainInstant { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public ErrorType ErrorType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_EXCEPTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_NOT_FOUND_EXCEPTION = 1,
	}
	
	/// <summary>
	/// The container for the input for getting a token balance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetTokenBalanceInputItem
	{
		
		/// <summary>
		/// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenIdentifier")]
		public TokenIdentifier TokenIdentifier { get; set; }
		
		/// <summary>
		/// The container for the identifier of the owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownerIdentifier")]
		public OwnerIdentifier OwnerIdentifier { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="atBlockchainInstant")]
		public BlockchainInstant AtBlockchainInstant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTokenBalanceOutput
	{
		
		/// <summary>
		/// The container for the identifier of the owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerIdentifier")]
		public OwnerIdentifier OwnerIdentifier { get; set; }
		
		/// <summary>
		/// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenIdentifier")]
		public TokenIdentifier TokenIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public string Balance { get; set; }
		
		/// <summary>
		/// The container for time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="atBlockchainInstant")]
		public BlockchainInstant AtBlockchainInstant { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public BlockchainInstant LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTransactionOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	/// <summary>
	/// <p>There are two possible types of transactions used for this data type:</p> <ul> <li> <p>A Bitcoin transaction is a movement of BTC from one address to another.</p> </li> <li> <p>An Ethereum transaction refers to an action initiated by an externally owned account, which is an account managed by a human, not a contract. For example, if Bob sends Alice 1 ETH, Bob's account must be debited and Alice's must be credited. This state-changing action occurs within a transaction.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Transaction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockHash")]
		public string BlockHash { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionHash")]
		public string TransactionHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockNumber")]
		public string BlockNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionTimestamp")]
		public System.DateTimeOffset TransactionTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionIndex")]
		public int TransactionIndex { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfTransactions")]
		public int NumberOfTransactions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public QueryTransactionStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contractAddress")]
		public string ContractAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gasUsed")]
		public string GasUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cumulativeGasUsed")]
		public string CumulativeGasUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveGasPrice")]
		public string EffectiveGasPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureV")]
		public System.Nullable<System.Int32> SignatureV { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureR")]
		public string SignatureR { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureS")]
		public string SignatureS { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionFee")]
		public string TransactionFee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryTransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTokenBalancesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenBalances")]
		public TokenBalance[] TokenBalances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The balance of the token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenBalance
	{
		
		[System.Runtime.Serialization.DataMember(Name="ownerIdentifier")]
		public OwnerIdentifier OwnerIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenIdentifier")]
		public TokenIdentifier TokenIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public string Balance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="atBlockchainInstant")]
		public BlockchainInstant AtBlockchainInstant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public BlockchainInstant LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTransactionEventsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public TransactionEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The container for the properties of a transaction event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionHash")]
		public string TransactionHash { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public QueryTransactionEventType EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contractAddress")]
		public string ContractAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		public string TokenId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voutIndex")]
		public System.Nullable<System.Int32> VoutIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryTransactionEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERC20_TRANSFER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERC20_MINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERC20_BURN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERC20_DEPOSIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERC20_WITHDRAWAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERC721_TRANSFER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERC1155_TRANSFER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITCOIN_VIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITCOIN_VOUT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ETH_TRANSFER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETH_TRANSFER = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTransactionsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public TransactionOutputItem[] Transactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The container of the transaction output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionOutputItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionHash")]
		public string TransactionHash { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionTimestamp")]
		public System.DateTimeOffset TransactionTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ListTransactionsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTION_TIMESTAMP = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetTokenBalanceInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="getTokenBalanceInputs")]
		public BatchGetTokenBalanceInputItem[] GetTokenBalanceInputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTokenBalanceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenIdentifier")]
		public TokenIdentifier TokenIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownerIdentifier")]
		public OwnerIdentifier OwnerIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="atBlockchainInstant")]
		public BlockchainInstant AtBlockchainInstant { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetTransactionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionHash")]
		public string TransactionHash { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
	}
	
	/// <summary>
	/// The container for the owner information to filter by.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OwnerFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
	}
	
	/// <summary>
	/// <p>The container of the token filter like the contract address on a given blockchain network or a unique token identifier on a given blockchain network.</p> <note> <p>You must always specify the network property of this container when using this operation.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contractAddress")]
		public string ContractAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		public string TokenId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTokenBalancesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="ownerFilter")]
		public OwnerFilter OwnerFilter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenFilter")]
		public TokenFilter TokenFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTransactionEventsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionHash")]
		public string TransactionHash { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The container for determining how the list transaction result will be sorted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTransactionsSort
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListTransactionsSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTransactionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromBlockchainInstant")]
		public BlockchainInstant FromBlockchainInstant { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toBlockchainInstant")]
		public BlockchainInstant ToBlockchainInstant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public ListTransactionsSort Sort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Gets the token balance for a batch of tokens by using the <code>GetTokenBalance</code> action for every token in the request.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
		/// BatchGetTokenBalance batch-get-token-balance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetTokenBalanceOutput> BatchGetTokenBalanceAsync(BatchGetTokenBalancePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "batch-get-token-balance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchGetTokenBalanceOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the balance of a specific token, including native tokens, for a given address (wallet or contract) on the blockchain.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
		/// GetTokenBalance get-token-balance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTokenBalanceOutput> GetTokenBalanceAsync(GetTokenBalancePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-token-balance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetTokenBalanceOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details of a transaction.
		/// GetTransaction get-transaction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTransactionOutput> GetTransactionAsync(GetTransactionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-transaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetTransactionOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This action returns the following for a given a blockchain network:</p> <ul> <li> <p>Lists all token balances owned by an address (either a contact address or a wallet address).</p> </li> <li> <p>Lists all token balances for all tokens created by a contract.</p> </li> <li> <p>Lists all token balances for a given token.</p> </li> </ul> <note> <p>You must always specify the network property of the <code>tokenFilter</code> when using this operation.</p> </note>
		/// ListTokenBalances list-token-balances
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTokenBalancesOutput> ListTokenBalancesAsync(string maxResults, string nextToken, ListTokenBalancesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-token-balances?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTokenBalancesOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// An array of <code>TransactionEvent</code> objects. Each object contains details about the transaction event.
		/// ListTransactionEvents list-transaction-events
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTransactionEventsOutput> ListTransactionEventsAsync(string maxResults, string nextToken, ListTransactionEventsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-transaction-events?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTransactionEventsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the transactions on a given wallet address or to a specific contract.
		/// ListTransactions list-transactions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTransactionsOutput> ListTransactionsAsync(string maxResults, string nextToken, ListTransactionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-transactions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTransactionsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchGetTokenBalancePostBody
	{
		
		/// <summary>
		/// An array of <code>GetTokenBalanceInput</code> objects whose balance is being requested.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="getTokenBalanceInputs")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public BatchGetTokenBalanceInputItem[] GetTokenBalanceInputs { get; set; }
	}
	
	public class GetTokenBalancePostBody
	{
		
		/// <summary>
		/// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note> <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p> </note>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenIdentifier")]
		public GetTokenBalancePostBodyTokenIdentifier TokenIdentifier { get; set; }
		
		/// <summary>
		/// The container for the identifier of the owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownerIdentifier")]
		public GetTokenBalancePostBodyOwnerIdentifier OwnerIdentifier { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="atBlockchainInstant")]
		public GetTokenBalancePostBodyAtBlockchainInstant AtBlockchainInstant { get; set; }
	}
	
	public class GetTokenBalancePostBodyTokenIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contractAddress")]
		public string ContractAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		public string TokenId { get; set; }
	}
	
	public class GetTokenBalancePostBodyOwnerIdentifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
	}
	
	public class GetTokenBalancePostBodyAtBlockchainInstant
	{
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.DateTimeOffset Time { get; set; }
	}
	
	public class GetTransactionPostBody
	{
		
		/// <summary>
		/// The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.
		/// Required
		/// Pattern: (0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionHash")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})")]
		public string TransactionHash { get; set; }
		
		/// <summary>
		/// The blockchain network where the transaction occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
	}
	
	public class ListTokenBalancesPostBody
	{
		
		/// <summary>
		/// The container for the owner information to filter by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerFilter")]
		public ListTokenBalancesPostBodyOwnerFilter OwnerFilter { get; set; }
		
		/// <summary>
		/// <p>The container of the token filter like the contract address on a given blockchain network or a unique token identifier on a given blockchain network.</p> <note> <p>You must always specify the network property of this container when using this operation.</p> </note>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenFilter")]
		public ListTokenBalancesPostBodyTokenFilter TokenFilter { get; set; }
		
		/// <summary>
		/// The pagination token that indicates the next set of results to retrieve.
		/// Min length: 0
		/// Max length: 131070
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(131070)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of token balances to return.
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListTokenBalancesPostBodyOwnerFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
	}
	
	public class ListTokenBalancesPostBodyTokenFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contractAddress")]
		public string ContractAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		public string TokenId { get; set; }
	}
	
	public class ListTransactionEventsPostBody
	{
		
		/// <summary>
		/// The hash of the transaction. It is generated whenever a transaction is verified and added to the blockchain.
		/// Required
		/// Pattern: (0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionHash")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})")]
		public string TransactionHash { get; set; }
		
		/// <summary>
		/// The blockchain network where the transaction events occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		/// <summary>
		/// The pagination token that indicates the next set of results to retrieve.
		/// Min length: 0
		/// Max length: 131070
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(131070)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// <p>The maximum number of transaction events to list.</p> <note> <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p> <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p> </note>
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListTransactionsPostBody
	{
		
		/// <summary>
		/// The address (either a contract or wallet), whose transactions are being requested.
		/// Required
		/// Pattern: [-A-Za-z0-9]{13,74}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[-A-Za-z0-9]{13,74}")]
		public string Address { get; set; }
		
		/// <summary>
		/// The blockchain network where the transactions occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="network")]
		public QueryNetwork Network { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromBlockchainInstant")]
		public ListTransactionsPostBodyFromBlockchainInstant FromBlockchainInstant { get; set; }
		
		/// <summary>
		/// The container for time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toBlockchainInstant")]
		public ListTransactionsPostBodyToBlockchainInstant ToBlockchainInstant { get; set; }
		
		/// <summary>
		/// The container for determining how the list transaction result will be sorted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public ListTransactionsPostBodySort Sort { get; set; }
		
		/// <summary>
		/// The pagination token that indicates the next set of results to retrieve.
		/// Min length: 0
		/// Max length: 131070
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(131070)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// <p>The maximum number of transactions to list.</p> <note> <p>Even if additional results can be retrieved, the request can return less results than <code>maxResults</code> or an empty array of results.</p> <p>To retrieve the next set of results, make another request with the returned <code>nextToken</code> value. The value of <code>nextToken</code> is <code>null</code> when there are no more results to return</p> </note>
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListTransactionsPostBodyFromBlockchainInstant
	{
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.DateTimeOffset Time { get; set; }
	}
	
	public class ListTransactionsPostBodyToBlockchainInstant
	{
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.DateTimeOffset Time { get; set; }
	}
	
	public class ListTransactionsPostBodySort
	{
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public ListTransactionsSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrder SortOrder { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
